
ftc_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008838  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080089c0  080089c0  000189c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bb8  08008bb8  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08008bb8  08008bb8  00018bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bc0  08008bc0  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bc0  08008bc0  00018bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bc4  08008bc4  00018bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08008bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
 10 .bss          000007fc  200000d0  200000d0  000200d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008cc  200008cc  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f956  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002397  00000000  00000000  0002fa99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000db0  00000000  00000000  00031e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ad0  00000000  00000000  00032be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002171b  00000000  00000000  000336b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011423  00000000  00000000  00054dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cbad8  00000000  00000000  000661ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f08  00000000  00000000  00131cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00135bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d0 	.word	0x200000d0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080089a8 	.word	0x080089a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d4 	.word	0x200000d4
 80001c4:	080089a8 	.word	0x080089a8

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2iz>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ac:	d215      	bcs.n	80008da <__aeabi_d2iz+0x36>
 80008ae:	d511      	bpl.n	80008d4 <__aeabi_d2iz+0x30>
 80008b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b8:	d912      	bls.n	80008e0 <__aeabi_d2iz+0x3c>
 80008ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008ca:	fa23 f002 	lsr.w	r0, r3, r2
 80008ce:	bf18      	it	ne
 80008d0:	4240      	negne	r0, r0
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d105      	bne.n	80008ec <__aeabi_d2iz+0x48>
 80008e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	bf08      	it	eq
 80008e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2f>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008fc:	bf24      	itt	cs
 80008fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000906:	d90d      	bls.n	8000924 <__aeabi_d2f+0x30>
 8000908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800090c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000928:	d121      	bne.n	800096e <__aeabi_d2f+0x7a>
 800092a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800092e:	bfbc      	itt	lt
 8000930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000934:	4770      	bxlt	lr
 8000936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800093e:	f1c2 0218 	rsb	r2, r2, #24
 8000942:	f1c2 0c20 	rsb	ip, r2, #32
 8000946:	fa10 f30c 	lsls.w	r3, r0, ip
 800094a:	fa20 f002 	lsr.w	r0, r0, r2
 800094e:	bf18      	it	ne
 8000950:	f040 0001 	orrne.w	r0, r0, #1
 8000954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800095c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000960:	ea40 000c 	orr.w	r0, r0, ip
 8000964:	fa23 f302 	lsr.w	r3, r3, r2
 8000968:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800096c:	e7cc      	b.n	8000908 <__aeabi_d2f+0x14>
 800096e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000972:	d107      	bne.n	8000984 <__aeabi_d2f+0x90>
 8000974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000978:	bf1e      	ittt	ne
 800097a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800097e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000982:	4770      	bxne	lr
 8000984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800098c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_uldivmod>:
 8000994:	b953      	cbnz	r3, 80009ac <__aeabi_uldivmod+0x18>
 8000996:	b94a      	cbnz	r2, 80009ac <__aeabi_uldivmod+0x18>
 8000998:	2900      	cmp	r1, #0
 800099a:	bf08      	it	eq
 800099c:	2800      	cmpeq	r0, #0
 800099e:	bf1c      	itt	ne
 80009a0:	f04f 31ff 	movne.w	r1, #4294967295
 80009a4:	f04f 30ff 	movne.w	r0, #4294967295
 80009a8:	f000 b970 	b.w	8000c8c <__aeabi_idiv0>
 80009ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009b4:	f000 f806 	bl	80009c4 <__udivmoddi4>
 80009b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c0:	b004      	add	sp, #16
 80009c2:	4770      	bx	lr

080009c4 <__udivmoddi4>:
 80009c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c8:	9e08      	ldr	r6, [sp, #32]
 80009ca:	460d      	mov	r5, r1
 80009cc:	4604      	mov	r4, r0
 80009ce:	460f      	mov	r7, r1
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d14a      	bne.n	8000a6a <__udivmoddi4+0xa6>
 80009d4:	428a      	cmp	r2, r1
 80009d6:	4694      	mov	ip, r2
 80009d8:	d965      	bls.n	8000aa6 <__udivmoddi4+0xe2>
 80009da:	fab2 f382 	clz	r3, r2
 80009de:	b143      	cbz	r3, 80009f2 <__udivmoddi4+0x2e>
 80009e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80009e4:	f1c3 0220 	rsb	r2, r3, #32
 80009e8:	409f      	lsls	r7, r3
 80009ea:	fa20 f202 	lsr.w	r2, r0, r2
 80009ee:	4317      	orrs	r7, r2
 80009f0:	409c      	lsls	r4, r3
 80009f2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009f6:	fa1f f58c 	uxth.w	r5, ip
 80009fa:	fbb7 f1fe 	udiv	r1, r7, lr
 80009fe:	0c22      	lsrs	r2, r4, #16
 8000a00:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a04:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a08:	fb01 f005 	mul.w	r0, r1, r5
 8000a0c:	4290      	cmp	r0, r2
 8000a0e:	d90a      	bls.n	8000a26 <__udivmoddi4+0x62>
 8000a10:	eb1c 0202 	adds.w	r2, ip, r2
 8000a14:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a18:	f080 811c 	bcs.w	8000c54 <__udivmoddi4+0x290>
 8000a1c:	4290      	cmp	r0, r2
 8000a1e:	f240 8119 	bls.w	8000c54 <__udivmoddi4+0x290>
 8000a22:	3902      	subs	r1, #2
 8000a24:	4462      	add	r2, ip
 8000a26:	1a12      	subs	r2, r2, r0
 8000a28:	b2a4      	uxth	r4, r4
 8000a2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a36:	fb00 f505 	mul.w	r5, r0, r5
 8000a3a:	42a5      	cmp	r5, r4
 8000a3c:	d90a      	bls.n	8000a54 <__udivmoddi4+0x90>
 8000a3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a42:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a46:	f080 8107 	bcs.w	8000c58 <__udivmoddi4+0x294>
 8000a4a:	42a5      	cmp	r5, r4
 8000a4c:	f240 8104 	bls.w	8000c58 <__udivmoddi4+0x294>
 8000a50:	4464      	add	r4, ip
 8000a52:	3802      	subs	r0, #2
 8000a54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a58:	1b64      	subs	r4, r4, r5
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	b11e      	cbz	r6, 8000a66 <__udivmoddi4+0xa2>
 8000a5e:	40dc      	lsrs	r4, r3
 8000a60:	2300      	movs	r3, #0
 8000a62:	e9c6 4300 	strd	r4, r3, [r6]
 8000a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6a:	428b      	cmp	r3, r1
 8000a6c:	d908      	bls.n	8000a80 <__udivmoddi4+0xbc>
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	f000 80ed 	beq.w	8000c4e <__udivmoddi4+0x28a>
 8000a74:	2100      	movs	r1, #0
 8000a76:	e9c6 0500 	strd	r0, r5, [r6]
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a80:	fab3 f183 	clz	r1, r3
 8000a84:	2900      	cmp	r1, #0
 8000a86:	d149      	bne.n	8000b1c <__udivmoddi4+0x158>
 8000a88:	42ab      	cmp	r3, r5
 8000a8a:	d302      	bcc.n	8000a92 <__udivmoddi4+0xce>
 8000a8c:	4282      	cmp	r2, r0
 8000a8e:	f200 80f8 	bhi.w	8000c82 <__udivmoddi4+0x2be>
 8000a92:	1a84      	subs	r4, r0, r2
 8000a94:	eb65 0203 	sbc.w	r2, r5, r3
 8000a98:	2001      	movs	r0, #1
 8000a9a:	4617      	mov	r7, r2
 8000a9c:	2e00      	cmp	r6, #0
 8000a9e:	d0e2      	beq.n	8000a66 <__udivmoddi4+0xa2>
 8000aa0:	e9c6 4700 	strd	r4, r7, [r6]
 8000aa4:	e7df      	b.n	8000a66 <__udivmoddi4+0xa2>
 8000aa6:	b902      	cbnz	r2, 8000aaa <__udivmoddi4+0xe6>
 8000aa8:	deff      	udf	#255	; 0xff
 8000aaa:	fab2 f382 	clz	r3, r2
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f040 8090 	bne.w	8000bd4 <__udivmoddi4+0x210>
 8000ab4:	1a8a      	subs	r2, r1, r2
 8000ab6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aba:	fa1f fe8c 	uxth.w	lr, ip
 8000abe:	2101      	movs	r1, #1
 8000ac0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ac4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ac8:	0c22      	lsrs	r2, r4, #16
 8000aca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ace:	fb0e f005 	mul.w	r0, lr, r5
 8000ad2:	4290      	cmp	r0, r2
 8000ad4:	d908      	bls.n	8000ae8 <__udivmoddi4+0x124>
 8000ad6:	eb1c 0202 	adds.w	r2, ip, r2
 8000ada:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ade:	d202      	bcs.n	8000ae6 <__udivmoddi4+0x122>
 8000ae0:	4290      	cmp	r0, r2
 8000ae2:	f200 80cb 	bhi.w	8000c7c <__udivmoddi4+0x2b8>
 8000ae6:	4645      	mov	r5, r8
 8000ae8:	1a12      	subs	r2, r2, r0
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb2 f0f7 	udiv	r0, r2, r7
 8000af0:	fb07 2210 	mls	r2, r7, r0, r2
 8000af4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000af8:	fb0e fe00 	mul.w	lr, lr, r0
 8000afc:	45a6      	cmp	lr, r4
 8000afe:	d908      	bls.n	8000b12 <__udivmoddi4+0x14e>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b08:	d202      	bcs.n	8000b10 <__udivmoddi4+0x14c>
 8000b0a:	45a6      	cmp	lr, r4
 8000b0c:	f200 80bb 	bhi.w	8000c86 <__udivmoddi4+0x2c2>
 8000b10:	4610      	mov	r0, r2
 8000b12:	eba4 040e 	sub.w	r4, r4, lr
 8000b16:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b1a:	e79f      	b.n	8000a5c <__udivmoddi4+0x98>
 8000b1c:	f1c1 0720 	rsb	r7, r1, #32
 8000b20:	408b      	lsls	r3, r1
 8000b22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b2a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b32:	40fd      	lsrs	r5, r7
 8000b34:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b38:	4323      	orrs	r3, r4
 8000b3a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b3e:	fa1f fe8c 	uxth.w	lr, ip
 8000b42:	fb09 5518 	mls	r5, r9, r8, r5
 8000b46:	0c1c      	lsrs	r4, r3, #16
 8000b48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b4c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b50:	42a5      	cmp	r5, r4
 8000b52:	fa02 f201 	lsl.w	r2, r2, r1
 8000b56:	fa00 f001 	lsl.w	r0, r0, r1
 8000b5a:	d90b      	bls.n	8000b74 <__udivmoddi4+0x1b0>
 8000b5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b64:	f080 8088 	bcs.w	8000c78 <__udivmoddi4+0x2b4>
 8000b68:	42a5      	cmp	r5, r4
 8000b6a:	f240 8085 	bls.w	8000c78 <__udivmoddi4+0x2b4>
 8000b6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b72:	4464      	add	r4, ip
 8000b74:	1b64      	subs	r4, r4, r5
 8000b76:	b29d      	uxth	r5, r3
 8000b78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000b80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b84:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b88:	45a6      	cmp	lr, r4
 8000b8a:	d908      	bls.n	8000b9e <__udivmoddi4+0x1da>
 8000b8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b90:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b94:	d26c      	bcs.n	8000c70 <__udivmoddi4+0x2ac>
 8000b96:	45a6      	cmp	lr, r4
 8000b98:	d96a      	bls.n	8000c70 <__udivmoddi4+0x2ac>
 8000b9a:	3b02      	subs	r3, #2
 8000b9c:	4464      	add	r4, ip
 8000b9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ba6:	eba4 040e 	sub.w	r4, r4, lr
 8000baa:	42ac      	cmp	r4, r5
 8000bac:	46c8      	mov	r8, r9
 8000bae:	46ae      	mov	lr, r5
 8000bb0:	d356      	bcc.n	8000c60 <__udivmoddi4+0x29c>
 8000bb2:	d053      	beq.n	8000c5c <__udivmoddi4+0x298>
 8000bb4:	b156      	cbz	r6, 8000bcc <__udivmoddi4+0x208>
 8000bb6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bba:	eb64 040e 	sbc.w	r4, r4, lr
 8000bbe:	fa04 f707 	lsl.w	r7, r4, r7
 8000bc2:	40ca      	lsrs	r2, r1
 8000bc4:	40cc      	lsrs	r4, r1
 8000bc6:	4317      	orrs	r7, r2
 8000bc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd4:	f1c3 0120 	rsb	r1, r3, #32
 8000bd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bdc:	fa20 f201 	lsr.w	r2, r0, r1
 8000be0:	fa25 f101 	lsr.w	r1, r5, r1
 8000be4:	409d      	lsls	r5, r3
 8000be6:	432a      	orrs	r2, r5
 8000be8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bec:	fa1f fe8c 	uxth.w	lr, ip
 8000bf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf4:	fb07 1510 	mls	r5, r7, r0, r1
 8000bf8:	0c11      	lsrs	r1, r2, #16
 8000bfa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bfe:	fb00 f50e 	mul.w	r5, r0, lr
 8000c02:	428d      	cmp	r5, r1
 8000c04:	fa04 f403 	lsl.w	r4, r4, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x258>
 8000c0a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c12:	d22f      	bcs.n	8000c74 <__udivmoddi4+0x2b0>
 8000c14:	428d      	cmp	r5, r1
 8000c16:	d92d      	bls.n	8000c74 <__udivmoddi4+0x2b0>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	4461      	add	r1, ip
 8000c1c:	1b49      	subs	r1, r1, r5
 8000c1e:	b292      	uxth	r2, r2
 8000c20:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c24:	fb07 1115 	mls	r1, r7, r5, r1
 8000c28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c2c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c30:	4291      	cmp	r1, r2
 8000c32:	d908      	bls.n	8000c46 <__udivmoddi4+0x282>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c3c:	d216      	bcs.n	8000c6c <__udivmoddi4+0x2a8>
 8000c3e:	4291      	cmp	r1, r2
 8000c40:	d914      	bls.n	8000c6c <__udivmoddi4+0x2a8>
 8000c42:	3d02      	subs	r5, #2
 8000c44:	4462      	add	r2, ip
 8000c46:	1a52      	subs	r2, r2, r1
 8000c48:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c4c:	e738      	b.n	8000ac0 <__udivmoddi4+0xfc>
 8000c4e:	4631      	mov	r1, r6
 8000c50:	4630      	mov	r0, r6
 8000c52:	e708      	b.n	8000a66 <__udivmoddi4+0xa2>
 8000c54:	4639      	mov	r1, r7
 8000c56:	e6e6      	b.n	8000a26 <__udivmoddi4+0x62>
 8000c58:	4610      	mov	r0, r2
 8000c5a:	e6fb      	b.n	8000a54 <__udivmoddi4+0x90>
 8000c5c:	4548      	cmp	r0, r9
 8000c5e:	d2a9      	bcs.n	8000bb4 <__udivmoddi4+0x1f0>
 8000c60:	ebb9 0802 	subs.w	r8, r9, r2
 8000c64:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	e7a3      	b.n	8000bb4 <__udivmoddi4+0x1f0>
 8000c6c:	4645      	mov	r5, r8
 8000c6e:	e7ea      	b.n	8000c46 <__udivmoddi4+0x282>
 8000c70:	462b      	mov	r3, r5
 8000c72:	e794      	b.n	8000b9e <__udivmoddi4+0x1da>
 8000c74:	4640      	mov	r0, r8
 8000c76:	e7d1      	b.n	8000c1c <__udivmoddi4+0x258>
 8000c78:	46d0      	mov	r8, sl
 8000c7a:	e77b      	b.n	8000b74 <__udivmoddi4+0x1b0>
 8000c7c:	3d02      	subs	r5, #2
 8000c7e:	4462      	add	r2, ip
 8000c80:	e732      	b.n	8000ae8 <__udivmoddi4+0x124>
 8000c82:	4608      	mov	r0, r1
 8000c84:	e70a      	b.n	8000a9c <__udivmoddi4+0xd8>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	e742      	b.n	8000b12 <__udivmoddi4+0x14e>

08000c8c <__aeabi_idiv0>:
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_DMA_Init+0x3c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <MX_DMA_Init+0x3c>)
 8000ca0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_DMA_Init+0x3c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	203a      	movs	r0, #58	; 0x3a
 8000cb8:	f003 f9cf 	bl	800405a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000cbc:	203a      	movs	r0, #58	; 0x3a
 8000cbe:	f003 f9e8 	bl	8004092 <HAL_NVIC_EnableIRQ>

}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <MX_GPIO_Init>:
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	; 0x30
 8000cd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
 8000cea:	4bb0      	ldr	r3, [pc, #704]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4aaf      	ldr	r2, [pc, #700]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000cf0:	f043 0310 	orr.w	r3, r3, #16
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4bad      	ldr	r3, [pc, #692]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0310 	and.w	r3, r3, #16
 8000cfe:	61bb      	str	r3, [r7, #24]
 8000d00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	4ba9      	ldr	r3, [pc, #676]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4aa8      	ldr	r2, [pc, #672]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4ba6      	ldr	r3, [pc, #664]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4ba2      	ldr	r3, [pc, #648]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4aa1      	ldr	r2, [pc, #644]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b9f      	ldr	r3, [pc, #636]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b9b      	ldr	r3, [pc, #620]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a9a      	ldr	r2, [pc, #616]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b98      	ldr	r3, [pc, #608]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	4b94      	ldr	r3, [pc, #592]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a93      	ldr	r2, [pc, #588]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b91      	ldr	r3, [pc, #580]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4b8d      	ldr	r3, [pc, #564]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a8c      	ldr	r2, [pc, #560]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000d7c:	f043 0308 	orr.w	r3, r3, #8
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b8a      	ldr	r3, [pc, #552]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, dig_pin3_inverse_Pin|CS_I2C_SPI_Pin|dig_pin1_inverse_Pin|dig_pin3_Pin
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f245 418c 	movw	r1, #21644	; 0x548c
 8000d94:	4886      	ldr	r0, [pc, #536]	; (8000fb0 <MX_GPIO_Init+0x2e0>)
 8000d96:	f003 ff4d 	bl	8004c34 <HAL_GPIO_WritePin>
                          |dig_pin5_Pin|dig_pin4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, dig_pin1_Pin|dig_pin2_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000da0:	4884      	ldr	r0, [pc, #528]	; (8000fb4 <MX_GPIO_Init+0x2e4>)
 8000da2:	f003 ff47 	bl	8004c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	2101      	movs	r1, #1
 8000daa:	4882      	ldr	r0, [pc, #520]	; (8000fb4 <MX_GPIO_Init+0x2e4>)
 8000dac:	f003 ff42 	bl	8004c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, dig_pin4_inverse_Pin|dig_pin2_inverse_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000db6:	4880      	ldr	r0, [pc, #512]	; (8000fb8 <MX_GPIO_Init+0x2e8>)
 8000db8:	f003 ff3c 	bl	8004c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = dig_pin3_inverse_Pin|dig_pin1_inverse_Pin|dig_pin3_Pin|dig_pin4_Pin;
 8000dbc:	f244 4384 	movw	r3, #17540	; 0x4484
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4876      	ldr	r0, [pc, #472]	; (8000fb0 <MX_GPIO_Init+0x2e0>)
 8000dd6:	f003 fd79 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|dig_pin5_Pin;
 8000dda:	f241 0308 	movw	r3, #4104	; 0x1008
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	486f      	ldr	r0, [pc, #444]	; (8000fb0 <MX_GPIO_Init+0x2e0>)
 8000df4:	f003 fd6a 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = omron_2_Pin;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(omron_2_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4869      	ldr	r0, [pc, #420]	; (8000fb0 <MX_GPIO_Init+0x2e0>)
 8000e0c:	f003 fd5e 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = dig_pin1_Pin|dig_pin2_Pin;
 8000e10:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4862      	ldr	r0, [pc, #392]	; (8000fb4 <MX_GPIO_Init+0x2e4>)
 8000e2a:	f003 fd4f 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	485b      	ldr	r0, [pc, #364]	; (8000fb4 <MX_GPIO_Init+0x2e4>)
 8000e46:	f003 fd41 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e4a:	2308      	movs	r3, #8
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4853      	ldr	r0, [pc, #332]	; (8000fb4 <MX_GPIO_Init+0x2e4>)
 8000e66:	f003 fd31 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	484f      	ldr	r0, [pc, #316]	; (8000fbc <MX_GPIO_Init+0x2ec>)
 8000e80:	f003 fd24 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e84:	2310      	movs	r3, #16
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e94:	2306      	movs	r3, #6
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4847      	ldr	r0, [pc, #284]	; (8000fbc <MX_GPIO_Init+0x2ec>)
 8000ea0:	f003 fd14 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8000ea4:	2320      	movs	r3, #32
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eb4:	2305      	movs	r3, #5
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	483f      	ldr	r0, [pc, #252]	; (8000fbc <MX_GPIO_Init+0x2ec>)
 8000ec0:	f003 fd04 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4838      	ldr	r0, [pc, #224]	; (8000fb8 <MX_GPIO_Init+0x2e8>)
 8000ed8:	f003 fcf8 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4832      	ldr	r0, [pc, #200]	; (8000fbc <MX_GPIO_Init+0x2ec>)
 8000ef2:	f003 fceb 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ef6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f08:	230a      	movs	r3, #10
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	482a      	ldr	r0, [pc, #168]	; (8000fbc <MX_GPIO_Init+0x2ec>)
 8000f14:	f003 fcda 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_SD_Pin;
 8000f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SD_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	481f      	ldr	r0, [pc, #124]	; (8000fb4 <MX_GPIO_Init+0x2e4>)
 8000f36:	f003 fcc9 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = limit_switch_1_Pin|limit_switch_2_Pin|limit_switch_3_Pin;
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f42:	2302      	movs	r3, #2
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481c      	ldr	r0, [pc, #112]	; (8000fc0 <MX_GPIO_Init+0x2f0>)
 8000f4e:	f003 fcbd 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = omron_1_Pin;
 8000f52:	2308      	movs	r3, #8
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(omron_1_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4816      	ldr	r0, [pc, #88]	; (8000fc0 <MX_GPIO_Init+0x2f0>)
 8000f66:	f003 fcb1 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = dig_pin4_inverse_Pin|dig_pin2_inverse_Pin;
 8000f6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <MX_GPIO_Init+0x2e8>)
 8000f84:	f003 fca2 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f8c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_GPIO_Init+0x2e0>)
 8000f9e:	f003 fc95 	bl	80048cc <HAL_GPIO_Init>

}
 8000fa2:	bf00      	nop
 8000fa4:	3730      	adds	r7, #48	; 0x30
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40020c00 	.word	0x40020c00

08000fc4 <set_voltage_chain>:
	bool mid_switch;
	bool down_switch;
	bool up_switch;
} switches;
switches switch_c;
void set_voltage_chain(float duty) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	ed87 0a01 	vstr	s0, [r7, #4]
 if(duty > 1.0) duty = 1.0;
 8000fce:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fde:	dd02      	ble.n	8000fe6 <set_voltage_chain+0x22>
 8000fe0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fe4:	607b      	str	r3, [r7, #4]
 if(duty < -1.0) duty = -1.0;
 8000fe6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff6:	d501      	bpl.n	8000ffc <set_voltage_chain+0x38>
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <set_voltage_chain+0xb8>)
 8000ffa:	607b      	str	r3, [r7, #4]

	 if(duty >= 0.0)  {
 8000ffc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001000:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001008:	db16      	blt.n	8001038 <set_voltage_chain+0x74>
		 TIM12->CCR1 = ((int32_t)(TIM12->ARR * duty));   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <set_voltage_chain+0xbc>)
 800100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001016:	edd7 7a01 	vldr	s15, [r7, #4]
 800101a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <set_voltage_chain+0xbc>)
 8001024:	ee17 2a90 	vmov	r2, s15
 8001028:	635a      	str	r2, [r3, #52]	; 0x34
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001030:	4814      	ldr	r0, [pc, #80]	; (8001084 <set_voltage_chain+0xc0>)
 8001032:	f003 fdff 	bl	8004c34 <HAL_GPIO_WritePin>
  }
	 else {   TIM12->CCR1 = ((int32_t)(TIM12->ARR + (TIM12->ARR * duty)));
	 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);  }
}
 8001036:	e01d      	b.n	8001074 <set_voltage_chain+0xb0>
	 else {   TIM12->CCR1 = ((int32_t)(TIM12->ARR + (TIM12->ARR * duty)));
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <set_voltage_chain+0xbc>)
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <set_voltage_chain+0xbc>)
 8001046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001050:	edd7 7a01 	vldr	s15, [r7, #4]
 8001054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <set_voltage_chain+0xbc>)
 8001062:	ee17 2a90 	vmov	r2, s15
 8001066:	635a      	str	r2, [r3, #52]	; 0x34
	 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);  }
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <set_voltage_chain+0xc0>)
 8001070:	f003 fde0 	bl	8004c34 <HAL_GPIO_WritePin>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	bf800000 	.word	0xbf800000
 8001080:	40001800 	.word	0x40001800
 8001084:	40021000 	.word	0x40021000

08001088 <check_switches>:
void check_switches(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

	switch_c.mid_switch = (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_SET) ? 1 : 0;
 800108c:	2104      	movs	r1, #4
 800108e:	4812      	ldr	r0, [pc, #72]	; (80010d8 <check_switches+0x50>)
 8001090:	f003 fdb8 	bl	8004c04 <HAL_GPIO_ReadPin>
 8001094:	4603      	mov	r3, r0
 8001096:	2b01      	cmp	r3, #1
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <check_switches+0x54>)
 80010a2:	701a      	strb	r2, [r3, #0]
	switch_c.down_switch = (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == GPIO_PIN_SET) ? 1 : 0;
 80010a4:	2102      	movs	r1, #2
 80010a6:	480c      	ldr	r0, [pc, #48]	; (80010d8 <check_switches+0x50>)
 80010a8:	f003 fdac 	bl	8004c04 <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	bf0c      	ite	eq
 80010b2:	2301      	moveq	r3, #1
 80010b4:	2300      	movne	r3, #0
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <check_switches+0x54>)
 80010ba:	705a      	strb	r2, [r3, #1]
	switch_c.up_switch = (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0) == GPIO_PIN_SET) ? 1 : 0;
 80010bc:	2101      	movs	r1, #1
 80010be:	4806      	ldr	r0, [pc, #24]	; (80010d8 <check_switches+0x50>)
 80010c0:	f003 fda0 	bl	8004c04 <HAL_GPIO_ReadPin>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	bf0c      	ite	eq
 80010ca:	2301      	moveq	r3, #1
 80010cc:	2300      	movne	r3, #0
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b02      	ldr	r3, [pc, #8]	; (80010dc <check_switches+0x54>)
 80010d2:	709a      	strb	r2, [r3, #2]
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	200002b0 	.word	0x200002b0

080010e0 <chain_control>:
void chain_control(int pos){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

	static int flag = -1;

	if (pos == flag){
 80010e8:	4b4b      	ldr	r3, [pc, #300]	; (8001218 <chain_control+0x138>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d104      	bne.n	80010fc <chain_control+0x1c>
		set_voltage_chain(0);
 80010f2:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800121c <chain_control+0x13c>
 80010f6:	f7ff ff65 	bl	8000fc4 <set_voltage_chain>
		return;
 80010fa:	e089      	b.n	8001210 <chain_control+0x130>
	}

	switch (pos){//0-down, 1-mid, 2-up
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d06c      	beq.n	80011dc <chain_control+0xfc>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b02      	cmp	r3, #2
 8001106:	f300 8083 	bgt.w	8001210 <chain_control+0x130>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <chain_control+0x38>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d017      	beq.n	8001146 <chain_control+0x66>
 8001116:	e07b      	b.n	8001210 <chain_control+0x130>
	case(0):
		if (!switch_c.down_switch){
 8001118:	4b41      	ldr	r3, [pc, #260]	; (8001220 <chain_control+0x140>)
 800111a:	785b      	ldrb	r3, [r3, #1]
 800111c:	f083 0301 	eor.w	r3, r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d007      	beq.n	8001136 <chain_control+0x56>
			set_voltage_chain(mot_grab);
 8001126:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <chain_control+0x144>)
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	eeb0 0a67 	vmov.f32	s0, s15
 8001130:	f7ff ff48 	bl	8000fc4 <set_voltage_chain>
		}
		else{
			flag = 0;
			set_voltage_chain(0);
		}
		break;
 8001134:	e06c      	b.n	8001210 <chain_control+0x130>
			flag = 0;
 8001136:	4b38      	ldr	r3, [pc, #224]	; (8001218 <chain_control+0x138>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
			set_voltage_chain(0);
 800113c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800121c <chain_control+0x13c>
 8001140:	f7ff ff40 	bl	8000fc4 <set_voltage_chain>
		break;
 8001144:	e064      	b.n	8001210 <chain_control+0x130>
	case(1):
		if (!switch_c.mid_switch){
 8001146:	4b36      	ldr	r3, [pc, #216]	; (8001220 <chain_control+0x140>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f083 0301 	eor.w	r3, r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d03b      	beq.n	80011cc <chain_control+0xec>
			if(flag == 0){
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <chain_control+0x138>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d109      	bne.n	8001170 <chain_control+0x90>
				set_voltage_chain(-mot_grab);
 800115c:	4b31      	ldr	r3, [pc, #196]	; (8001224 <chain_control+0x144>)
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	eef1 7a67 	vneg.f32	s15, s15
 8001166:	eeb0 0a67 	vmov.f32	s0, s15
 800116a:	f7ff ff2b 	bl	8000fc4 <set_voltage_chain>
 800116e:	e006      	b.n	800117e <chain_control+0x9e>
			}
			else{
				set_voltage_chain(mot_grab);
 8001170:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <chain_control+0x144>)
 8001172:	edd3 7a00 	vldr	s15, [r3]
 8001176:	eeb0 0a67 	vmov.f32	s0, s15
 800117a:	f7ff ff23 	bl	8000fc4 <set_voltage_chain>
			}
			if (switch_c.up_switch && flag == 0){
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <chain_control+0x140>)
 8001180:	789b      	ldrb	r3, [r3, #2]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00d      	beq.n	80011a2 <chain_control+0xc2>
 8001186:	4b24      	ldr	r3, [pc, #144]	; (8001218 <chain_control+0x138>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d109      	bne.n	80011a2 <chain_control+0xc2>
				flag = 2;
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <chain_control+0x138>)
 8001190:	2202      	movs	r2, #2
 8001192:	601a      	str	r2, [r3, #0]
				set_voltage_chain(mot_grab);
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <chain_control+0x144>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	f7ff ff11 	bl	8000fc4 <set_voltage_chain>
			}
			if (switch_c.down_switch && flag == 2){
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <chain_control+0x140>)
 80011a4:	785b      	ldrb	r3, [r3, #1]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d031      	beq.n	800120e <chain_control+0x12e>
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <chain_control+0x138>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d12d      	bne.n	800120e <chain_control+0x12e>
				flag = 0;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <chain_control+0x138>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
				set_voltage_chain(-mot_grab);
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <chain_control+0x144>)
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	eef1 7a67 	vneg.f32	s15, s15
 80011c2:	eeb0 0a67 	vmov.f32	s0, s15
 80011c6:	f7ff fefd 	bl	8000fc4 <set_voltage_chain>
		}
		else{
			flag = 1;
			set_voltage_chain(0);
		}
		break;
 80011ca:	e020      	b.n	800120e <chain_control+0x12e>
			flag = 1;
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <chain_control+0x138>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
			set_voltage_chain(0);
 80011d2:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800121c <chain_control+0x13c>
 80011d6:	f7ff fef5 	bl	8000fc4 <set_voltage_chain>
		break;
 80011da:	e018      	b.n	800120e <chain_control+0x12e>
	case(2):
		if (!switch_c.up_switch){
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <chain_control+0x140>)
 80011de:	789b      	ldrb	r3, [r3, #2]
 80011e0:	f083 0301 	eor.w	r3, r3, #1
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d009      	beq.n	80011fe <chain_control+0x11e>
			set_voltage_chain(-mot_grab);
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <chain_control+0x144>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	eef1 7a67 	vneg.f32	s15, s15
 80011f4:	eeb0 0a67 	vmov.f32	s0, s15
 80011f8:	f7ff fee4 	bl	8000fc4 <set_voltage_chain>
 80011fc:	e008      	b.n	8001210 <chain_control+0x130>
		}
		else{
			flag = 2;
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <chain_control+0x138>)
 8001200:	2202      	movs	r2, #2
 8001202:	601a      	str	r2, [r3, #0]
			set_voltage_chain(0);
 8001204:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800121c <chain_control+0x13c>
 8001208:	f7ff fedc 	bl	8000fc4 <set_voltage_chain>
 800120c:	e000      	b.n	8001210 <chain_control+0x130>
		break;
 800120e:	bf00      	nop
//	if(switch_c.down_switch){
//		set_voltage_chain(mot_1);
//	}
//	set_voltage_chain(mot_1);

}
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000006c 	.word	0x2000006c
 800121c:	00000000 	.word	0x00000000
 8001220:	200002b0 	.word	0x200002b0
 8001224:	20000068 	.word	0x20000068

08001228 <servo_control>:
void servo_control(uint8_t servo ,uint8_t position ){ /*position = 0 open , position = 1 close*/
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	460a      	mov	r2, r1
 8001232:	71fb      	strb	r3, [r7, #7]
 8001234:	4613      	mov	r3, r2
 8001236:	71bb      	strb	r3, [r7, #6]
	 switch(servo){
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <servo_control+0x1c>
 800123e:	2b01      	cmp	r3, #1
 8001240:	d00b      	beq.n	800125a <servo_control+0x32>
		 else{
			 TIM9->CCR2 = 30 +0.5*38;//38
		 }
		 break;
	 }
}
 8001242:	e015      	b.n	8001270 <servo_control+0x48>
		 if(position == 0){
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d103      	bne.n	8001252 <servo_control+0x2a>
			 TIM9->CCR1 = 30 +0.5*90;
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <servo_control+0x54>)
 800124c:	224b      	movs	r2, #75	; 0x4b
 800124e:	635a      	str	r2, [r3, #52]	; 0x34
		 break;
 8001250:	e00e      	b.n	8001270 <servo_control+0x48>
			 TIM9->CCR1 = 30 +0.5*43;//43
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <servo_control+0x54>)
 8001254:	2233      	movs	r2, #51	; 0x33
 8001256:	635a      	str	r2, [r3, #52]	; 0x34
		 break;
 8001258:	e00a      	b.n	8001270 <servo_control+0x48>
		 if(position == 0){
 800125a:	79bb      	ldrb	r3, [r7, #6]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d103      	bne.n	8001268 <servo_control+0x40>
			 TIM9->CCR2 = 30 +0.5*90;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <servo_control+0x54>)
 8001262:	224b      	movs	r2, #75	; 0x4b
 8001264:	639a      	str	r2, [r3, #56]	; 0x38
		 break;
 8001266:	e002      	b.n	800126e <servo_control+0x46>
			 TIM9->CCR2 = 30 +0.5*38;//38
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <servo_control+0x54>)
 800126a:	2231      	movs	r2, #49	; 0x31
 800126c:	639a      	str	r2, [r3, #56]	; 0x38
		 break;
 800126e:	bf00      	nop
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	40014000 	.word	0x40014000

08001280 <switch_lim>:
		 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);

		 }

}
void switch_lim(uint8_t position){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	switch(position){
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b03      	cmp	r3, #3
 800128e:	d05b      	beq.n	8001348 <switch_lim+0xc8>
 8001290:	2b03      	cmp	r3, #3
 8001292:	dc61      	bgt.n	8001358 <switch_lim+0xd8>
 8001294:	2b01      	cmp	r3, #1
 8001296:	d019      	beq.n	80012cc <switch_lim+0x4c>
 8001298:	2b02      	cmp	r3, #2
 800129a:	d036      	beq.n	800130a <switch_lim+0x8a>
		}
		break;


	}
}
 800129c:	e05c      	b.n	8001358 <switch_lim+0xd8>
				check_switches();
 800129e:	f7ff fef3 	bl	8001088 <check_switches>
				position = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	71fb      	strb	r3, [r7, #7]
				chain_control(0);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff ff1a 	bl	80010e0 <chain_control>
				Wheel_1.target = 0;
 80012ac:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <switch_lim+0xe0>)
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
				Wheel_2.target = 0;
 80012b4:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <switch_lim+0xe4>)
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
				Wheel_3.target = 0;
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <switch_lim+0xe8>)
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
				Wheel_4.target = 0;
 80012c4:	4b29      	ldr	r3, [pc, #164]	; (800136c <switch_lim+0xec>)
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
			while (switch_c.down_switch != 1){
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <switch_lim+0xf0>)
 80012ce:	785b      	ldrb	r3, [r3, #1]
 80012d0:	f083 0301 	eor.w	r3, r3, #1
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1e1      	bne.n	800129e <switch_lim+0x1e>
		break;
 80012da:	e03d      	b.n	8001358 <switch_lim+0xd8>
				check_switches();
 80012dc:	f7ff fed4 	bl	8001088 <check_switches>
				position = 1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	71fb      	strb	r3, [r7, #7]
				chain_control(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff fefb 	bl	80010e0 <chain_control>
				Wheel_1.target = 0;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <switch_lim+0xe0>)
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
				Wheel_2.target = 0;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <switch_lim+0xe4>)
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
				Wheel_3.target = 0;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <switch_lim+0xe8>)
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
				Wheel_4.target = 0;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <switch_lim+0xec>)
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
			while (switch_c.mid_switch != 1){
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <switch_lim+0xf0>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f083 0301 	eor.w	r3, r3, #1
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1e1      	bne.n	80012dc <switch_lim+0x5c>
		break;
 8001318:	e01e      	b.n	8001358 <switch_lim+0xd8>
				check_switches();
 800131a:	f7ff feb5 	bl	8001088 <check_switches>
				position = 2;
 800131e:	2302      	movs	r3, #2
 8001320:	71fb      	strb	r3, [r7, #7]
				chain_control(2);
 8001322:	2002      	movs	r0, #2
 8001324:	f7ff fedc 	bl	80010e0 <chain_control>
				Wheel_1.target = 0;
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <switch_lim+0xe0>)
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
				Wheel_2.target = 0;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <switch_lim+0xe4>)
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
				Wheel_3.target = 0;
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <switch_lim+0xe8>)
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
				Wheel_4.target = 0;
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <switch_lim+0xec>)
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
			while (switch_c.up_switch != 1){
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <switch_lim+0xf0>)
 800134a:	789b      	ldrb	r3, [r3, #2]
 800134c:	f083 0301 	eor.w	r3, r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1e1      	bne.n	800131a <switch_lim+0x9a>
		break;
 8001356:	bf00      	nop
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200000ec 	.word	0x200000ec
 8001364:	2000012c 	.word	0x2000012c
 8001368:	2000016c 	.word	0x2000016c
 800136c:	200001ac 	.word	0x200001ac
 8001370:	200002b0 	.word	0x200002b0
 8001374:	00000000 	.word	0x00000000

08001378 <Move_robot_coordinates_X_Y_W>:
void Move_robot_coordinates_X_Y_W(float speed_v,float speed_w,float x_target,float y_target,float fi_target){
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af04      	add	r7, sp, #16
 800137e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001382:	edc7 0a04 	vstr	s1, [r7, #16]
 8001386:	ed87 1a03 	vstr	s2, [r7, #12]
 800138a:	edc7 1a02 	vstr	s3, [r7, #8]
 800138e:	ed87 2a01 	vstr	s4, [r7, #4]
	V = speed_v;
 8001392:	4a54      	ldr	r2, [pc, #336]	; (80014e4 <Move_robot_coordinates_X_Y_W+0x16c>)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	6013      	str	r3, [r2, #0]
	W = speed_w;
 8001398:	4a53      	ldr	r2, [pc, #332]	; (80014e8 <Move_robot_coordinates_X_Y_W+0x170>)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	6013      	str	r3, [r2, #0]
	quest_xy[0][0] = x_target;
 800139e:	4a53      	ldr	r2, [pc, #332]	; (80014ec <Move_robot_coordinates_X_Y_W+0x174>)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6013      	str	r3, [r2, #0]
	quest_xy[0][1] = y_target;
 80013a4:	4a51      	ldr	r2, [pc, #324]	; (80014ec <Move_robot_coordinates_X_Y_W+0x174>)
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	6053      	str	r3, [r2, #4]
	quest_FI = fi_target;
 80013aa:	4a51      	ldr	r2, [pc, #324]	; (80014f0 <Move_robot_coordinates_X_Y_W+0x178>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6013      	str	r3, [r2, #0]
	convert_xy_UV[0][0]=cos(fi);
 80013b0:	4b50      	ldr	r3, [pc, #320]	; (80014f4 <Move_robot_coordinates_X_Y_W+0x17c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f995 	bl	80006e4 <__aeabi_f2d>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	ec43 2b10 	vmov	d0, r2, r3
 80013c2:	f006 fa39 	bl	8007838 <cos>
 80013c6:	ec53 2b10 	vmov	r2, r3, d0
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fa91 	bl	80008f4 <__aeabi_d2f>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a48      	ldr	r2, [pc, #288]	; (80014f8 <Move_robot_coordinates_X_Y_W+0x180>)
 80013d6:	6013      	str	r3, [r2, #0]
	    convert_xy_UV[0][1]=sin(fi);
 80013d8:	4b46      	ldr	r3, [pc, #280]	; (80014f4 <Move_robot_coordinates_X_Y_W+0x17c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f981 	bl	80006e4 <__aeabi_f2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	ec43 2b10 	vmov	d0, r2, r3
 80013ea:	f006 fa79 	bl	80078e0 <sin>
 80013ee:	ec53 2b10 	vmov	r2, r3, d0
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fa7d 	bl	80008f4 <__aeabi_d2f>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a3e      	ldr	r2, [pc, #248]	; (80014f8 <Move_robot_coordinates_X_Y_W+0x180>)
 80013fe:	6053      	str	r3, [r2, #4]
		convert_xy_UV[0][2]=0;
 8001400:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <Move_robot_coordinates_X_Y_W+0x180>)
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
		convert_xy_UV[1][0]=-sin(fi);
 8001408:	4b3a      	ldr	r3, [pc, #232]	; (80014f4 <Move_robot_coordinates_X_Y_W+0x17c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f969 	bl	80006e4 <__aeabi_f2d>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	ec43 2b10 	vmov	d0, r2, r3
 800141a:	f006 fa61 	bl	80078e0 <sin>
 800141e:	ec53 2b10 	vmov	r2, r3, d0
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fa65 	bl	80008f4 <__aeabi_d2f>
 800142a:	4603      	mov	r3, r0
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eef1 7a67 	vneg.f32	s15, s15
 8001434:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <Move_robot_coordinates_X_Y_W+0x180>)
 8001436:	edc3 7a03 	vstr	s15, [r3, #12]
		convert_xy_UV[1][1]=cos(fi);
 800143a:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <Move_robot_coordinates_X_Y_W+0x17c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f950 	bl	80006e4 <__aeabi_f2d>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	ec43 2b10 	vmov	d0, r2, r3
 800144c:	f006 f9f4 	bl	8007838 <cos>
 8001450:	ec53 2b10 	vmov	r2, r3, d0
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fa4c 	bl	80008f4 <__aeabi_d2f>
 800145c:	4603      	mov	r3, r0
 800145e:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <Move_robot_coordinates_X_Y_W+0x180>)
 8001460:	6113      	str	r3, [r2, #16]
		convert_xy_UV[1][2]=0;
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <Move_robot_coordinates_X_Y_W+0x180>)
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
		convert_xy_UV[2][0]=position_x;
 800146a:	4b24      	ldr	r3, [pc, #144]	; (80014fc <Move_robot_coordinates_X_Y_W+0x184>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a22      	ldr	r2, [pc, #136]	; (80014f8 <Move_robot_coordinates_X_Y_W+0x180>)
 8001470:	6193      	str	r3, [r2, #24]
		convert_xy_UV[2][1]=position_y;
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <Move_robot_coordinates_X_Y_W+0x188>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a20      	ldr	r2, [pc, #128]	; (80014f8 <Move_robot_coordinates_X_Y_W+0x180>)
 8001478:	61d3      	str	r3, [r2, #28]
		convert_xy_UV[2][2]=1;
 800147a:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <Move_robot_coordinates_X_Y_W+0x180>)
 800147c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001480:	621a      	str	r2, [r3, #32]
		matrixInverse(&convert_xy_UV[0][0],3,&inverse_converte_xy_UV[0][0]);
 8001482:	4a20      	ldr	r2, [pc, #128]	; (8001504 <Move_robot_coordinates_X_Y_W+0x18c>)
 8001484:	2103      	movs	r1, #3
 8001486:	481c      	ldr	r0, [pc, #112]	; (80014f8 <Move_robot_coordinates_X_Y_W+0x180>)
 8001488:	f000 ffe8 	bl	800245c <matrixInverse>
		matrixMultiplyM2M(&quest_xy[0][0],1,3,&inverse_converte_xy_UV[0][0],3,3,&quest_UV[0][0]);
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <Move_robot_coordinates_X_Y_W+0x190>)
 800148e:	9302      	str	r3, [sp, #8]
 8001490:	2303      	movs	r3, #3
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	2303      	movs	r3, #3
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <Move_robot_coordinates_X_Y_W+0x18c>)
 800149a:	2203      	movs	r2, #3
 800149c:	2101      	movs	r1, #1
 800149e:	4813      	ldr	r0, [pc, #76]	; (80014ec <Move_robot_coordinates_X_Y_W+0x174>)
 80014a0:	f000 fe0e 	bl	80020c0 <matrixMultiplyM2M>
		gipotinus =  sqrtf((quest_UV[0][0]*quest_UV[0][0])+(quest_UV[0][1]*quest_UV[0][1]) );
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <Move_robot_coordinates_X_Y_W+0x190>)
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <Move_robot_coordinates_X_Y_W+0x190>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <Move_robot_coordinates_X_Y_W+0x190>)
 80014b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <Move_robot_coordinates_X_Y_W+0x190>)
 80014bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80014c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c8:	eeb0 0a67 	vmov.f32	s0, s15
 80014cc:	f006 fa60 	bl	8007990 <sqrtf>
 80014d0:	eef0 7a40 	vmov.f32	s15, s0
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <Move_robot_coordinates_X_Y_W+0x194>)
 80014d6:	edc3 7a00 	vstr	s15, [r3]
		distante = gipotinus;
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <Move_robot_coordinates_X_Y_W+0x194>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a0c      	ldr	r2, [pc, #48]	; (8001510 <Move_robot_coordinates_X_Y_W+0x198>)
 80014e0:	6013      	str	r3, [r2, #0]
	while(((gipotinus>=0.005)||delta_fi>=0.02)){
 80014e2:	e21c      	b.n	800191e <Move_robot_coordinates_X_Y_W+0x5a6>
 80014e4:	20000060 	.word	0x20000060
 80014e8:	20000064 	.word	0x20000064
 80014ec:	20000240 	.word	0x20000240
 80014f0:	200002a4 	.word	0x200002a4
 80014f4:	20000070 	.word	0x20000070
 80014f8:	20000258 	.word	0x20000258
 80014fc:	200003cc 	.word	0x200003cc
 8001500:	200003d0 	.word	0x200003d0
 8001504:	2000027c 	.word	0x2000027c
 8001508:	2000024c 	.word	0x2000024c
 800150c:	200002a0 	.word	0x200002a0
 8001510:	200002a8 	.word	0x200002a8
	convert_xy_UV[0][0]=cos(fi);
 8001514:	4bbe      	ldr	r3, [pc, #760]	; (8001810 <Move_robot_coordinates_X_Y_W+0x498>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f8e3 	bl	80006e4 <__aeabi_f2d>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	ec43 2b10 	vmov	d0, r2, r3
 8001526:	f006 f987 	bl	8007838 <cos>
 800152a:	ec53 2b10 	vmov	r2, r3, d0
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff f9df 	bl	80008f4 <__aeabi_d2f>
 8001536:	4603      	mov	r3, r0
 8001538:	4ab6      	ldr	r2, [pc, #728]	; (8001814 <Move_robot_coordinates_X_Y_W+0x49c>)
 800153a:	6013      	str	r3, [r2, #0]
    convert_xy_UV[0][1]=sin(fi);
 800153c:	4bb4      	ldr	r3, [pc, #720]	; (8001810 <Move_robot_coordinates_X_Y_W+0x498>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f8cf 	bl	80006e4 <__aeabi_f2d>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	ec43 2b10 	vmov	d0, r2, r3
 800154e:	f006 f9c7 	bl	80078e0 <sin>
 8001552:	ec53 2b10 	vmov	r2, r3, d0
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff f9cb 	bl	80008f4 <__aeabi_d2f>
 800155e:	4603      	mov	r3, r0
 8001560:	4aac      	ldr	r2, [pc, #688]	; (8001814 <Move_robot_coordinates_X_Y_W+0x49c>)
 8001562:	6053      	str	r3, [r2, #4]
	convert_xy_UV[0][2]=0;
 8001564:	4bab      	ldr	r3, [pc, #684]	; (8001814 <Move_robot_coordinates_X_Y_W+0x49c>)
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
	convert_xy_UV[1][0]=-sin(fi);
 800156c:	4ba8      	ldr	r3, [pc, #672]	; (8001810 <Move_robot_coordinates_X_Y_W+0x498>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff f8b7 	bl	80006e4 <__aeabi_f2d>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	ec43 2b10 	vmov	d0, r2, r3
 800157e:	f006 f9af 	bl	80078e0 <sin>
 8001582:	ec53 2b10 	vmov	r2, r3, d0
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff f9b3 	bl	80008f4 <__aeabi_d2f>
 800158e:	4603      	mov	r3, r0
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eef1 7a67 	vneg.f32	s15, s15
 8001598:	4b9e      	ldr	r3, [pc, #632]	; (8001814 <Move_robot_coordinates_X_Y_W+0x49c>)
 800159a:	edc3 7a03 	vstr	s15, [r3, #12]
	convert_xy_UV[1][1]=cos(fi);
 800159e:	4b9c      	ldr	r3, [pc, #624]	; (8001810 <Move_robot_coordinates_X_Y_W+0x498>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff f89e 	bl	80006e4 <__aeabi_f2d>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	ec43 2b10 	vmov	d0, r2, r3
 80015b0:	f006 f942 	bl	8007838 <cos>
 80015b4:	ec53 2b10 	vmov	r2, r3, d0
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff f99a 	bl	80008f4 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a94      	ldr	r2, [pc, #592]	; (8001814 <Move_robot_coordinates_X_Y_W+0x49c>)
 80015c4:	6113      	str	r3, [r2, #16]
	convert_xy_UV[1][2]=0;
 80015c6:	4b93      	ldr	r3, [pc, #588]	; (8001814 <Move_robot_coordinates_X_Y_W+0x49c>)
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
	convert_xy_UV[2][0]=position_x;
 80015ce:	4b92      	ldr	r3, [pc, #584]	; (8001818 <Move_robot_coordinates_X_Y_W+0x4a0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a90      	ldr	r2, [pc, #576]	; (8001814 <Move_robot_coordinates_X_Y_W+0x49c>)
 80015d4:	6193      	str	r3, [r2, #24]
	convert_xy_UV[2][1]=position_y;
 80015d6:	4b91      	ldr	r3, [pc, #580]	; (800181c <Move_robot_coordinates_X_Y_W+0x4a4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a8e      	ldr	r2, [pc, #568]	; (8001814 <Move_robot_coordinates_X_Y_W+0x49c>)
 80015dc:	61d3      	str	r3, [r2, #28]
	convert_xy_UV[2][2]=1;
 80015de:	4b8d      	ldr	r3, [pc, #564]	; (8001814 <Move_robot_coordinates_X_Y_W+0x49c>)
 80015e0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015e4:	621a      	str	r2, [r3, #32]
	matrixInverse(&convert_xy_UV[0][0],3,&inverse_converte_xy_UV[0][0]);
 80015e6:	4a8e      	ldr	r2, [pc, #568]	; (8001820 <Move_robot_coordinates_X_Y_W+0x4a8>)
 80015e8:	2103      	movs	r1, #3
 80015ea:	488a      	ldr	r0, [pc, #552]	; (8001814 <Move_robot_coordinates_X_Y_W+0x49c>)
 80015ec:	f000 ff36 	bl	800245c <matrixInverse>
	matrixMultiplyM2M(&quest_xy[0][0],1,3,&inverse_converte_xy_UV[0][0],3,3,&quest_UV[0][0]);
 80015f0:	4b8c      	ldr	r3, [pc, #560]	; (8001824 <Move_robot_coordinates_X_Y_W+0x4ac>)
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	2303      	movs	r3, #3
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	2303      	movs	r3, #3
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	4b88      	ldr	r3, [pc, #544]	; (8001820 <Move_robot_coordinates_X_Y_W+0x4a8>)
 80015fe:	2203      	movs	r2, #3
 8001600:	2101      	movs	r1, #1
 8001602:	4889      	ldr	r0, [pc, #548]	; (8001828 <Move_robot_coordinates_X_Y_W+0x4b0>)
 8001604:	f000 fd5c 	bl	80020c0 <matrixMultiplyM2M>
	gipotinus =  sqrtf((quest_UV[0][0]*quest_UV[0][0])+(quest_UV[0][1]*quest_UV[0][1]) );
 8001608:	4b86      	ldr	r3, [pc, #536]	; (8001824 <Move_robot_coordinates_X_Y_W+0x4ac>)
 800160a:	ed93 7a00 	vldr	s14, [r3]
 800160e:	4b85      	ldr	r3, [pc, #532]	; (8001824 <Move_robot_coordinates_X_Y_W+0x4ac>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001618:	4b82      	ldr	r3, [pc, #520]	; (8001824 <Move_robot_coordinates_X_Y_W+0x4ac>)
 800161a:	edd3 6a01 	vldr	s13, [r3, #4]
 800161e:	4b81      	ldr	r3, [pc, #516]	; (8001824 <Move_robot_coordinates_X_Y_W+0x4ac>)
 8001620:	edd3 7a01 	vldr	s15, [r3, #4]
 8001624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162c:	eeb0 0a67 	vmov.f32	s0, s15
 8001630:	f006 f9ae 	bl	8007990 <sqrtf>
 8001634:	eef0 7a40 	vmov.f32	s15, s0
 8001638:	4b7c      	ldr	r3, [pc, #496]	; (800182c <Move_robot_coordinates_X_Y_W+0x4b4>)
 800163a:	edc3 7a00 	vstr	s15, [r3]
	if (gipotinus > 0.005){
 800163e:	4b7b      	ldr	r3, [pc, #492]	; (800182c <Move_robot_coordinates_X_Y_W+0x4b4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff f84e 	bl	80006e4 <__aeabi_f2d>
 8001648:	a369      	add	r3, pc, #420	; (adr r3, 80017f0 <Move_robot_coordinates_X_Y_W+0x478>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164e:	f7ff f91f 	bl	8000890 <__aeabi_dcmpgt>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d06a      	beq.n	800172e <Move_robot_coordinates_X_Y_W+0x3b6>
		if ((gipotinus < 0.05)||((distante-gipotinus)<0.05)){
 8001658:	4b74      	ldr	r3, [pc, #464]	; (800182c <Move_robot_coordinates_X_Y_W+0x4b4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f841 	bl	80006e4 <__aeabi_f2d>
 8001662:	a365      	add	r3, pc, #404	; (adr r3, 80017f8 <Move_robot_coordinates_X_Y_W+0x480>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7ff f8f4 	bl	8000854 <__aeabi_dcmplt>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d113      	bne.n	800169a <Move_robot_coordinates_X_Y_W+0x322>
 8001672:	4b6f      	ldr	r3, [pc, #444]	; (8001830 <Move_robot_coordinates_X_Y_W+0x4b8>)
 8001674:	ed93 7a00 	vldr	s14, [r3]
 8001678:	4b6c      	ldr	r3, [pc, #432]	; (800182c <Move_robot_coordinates_X_Y_W+0x4b4>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001682:	ee17 0a90 	vmov	r0, s15
 8001686:	f7ff f82d 	bl	80006e4 <__aeabi_f2d>
 800168a:	a35b      	add	r3, pc, #364	; (adr r3, 80017f8 <Move_robot_coordinates_X_Y_W+0x480>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7ff f8e0 	bl	8000854 <__aeabi_dcmplt>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d028      	beq.n	80016ec <Move_robot_coordinates_X_Y_W+0x374>
			target_speed[0] = quest_UV[0][0]/gipotinus*V*0.5;
 800169a:	4b62      	ldr	r3, [pc, #392]	; (8001824 <Move_robot_coordinates_X_Y_W+0x4ac>)
 800169c:	edd3 6a00 	vldr	s13, [r3]
 80016a0:	4b62      	ldr	r3, [pc, #392]	; (800182c <Move_robot_coordinates_X_Y_W+0x4b4>)
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016aa:	4b62      	ldr	r3, [pc, #392]	; (8001834 <Move_robot_coordinates_X_Y_W+0x4bc>)
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016bc:	4b5e      	ldr	r3, [pc, #376]	; (8001838 <Move_robot_coordinates_X_Y_W+0x4c0>)
 80016be:	edc3 7a00 	vstr	s15, [r3]
			target_speed[1] = quest_UV[0][1]/gipotinus*V*0.5;
 80016c2:	4b58      	ldr	r3, [pc, #352]	; (8001824 <Move_robot_coordinates_X_Y_W+0x4ac>)
 80016c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80016c8:	4b58      	ldr	r3, [pc, #352]	; (800182c <Move_robot_coordinates_X_Y_W+0x4b4>)
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016d2:	4b58      	ldr	r3, [pc, #352]	; (8001834 <Move_robot_coordinates_X_Y_W+0x4bc>)
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e4:	4b54      	ldr	r3, [pc, #336]	; (8001838 <Move_robot_coordinates_X_Y_W+0x4c0>)
 80016e6:	edc3 7a01 	vstr	s15, [r3, #4]
 80016ea:	e028      	b.n	800173e <Move_robot_coordinates_X_Y_W+0x3c6>
		}
		else{
			target_speed[0] = quest_UV[0][0]/gipotinus*V;
 80016ec:	4b4d      	ldr	r3, [pc, #308]	; (8001824 <Move_robot_coordinates_X_Y_W+0x4ac>)
 80016ee:	edd3 6a00 	vldr	s13, [r3]
 80016f2:	4b4e      	ldr	r3, [pc, #312]	; (800182c <Move_robot_coordinates_X_Y_W+0x4b4>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016fc:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <Move_robot_coordinates_X_Y_W+0x4bc>)
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001706:	4b4c      	ldr	r3, [pc, #304]	; (8001838 <Move_robot_coordinates_X_Y_W+0x4c0>)
 8001708:	edc3 7a00 	vstr	s15, [r3]
			target_speed[1] = quest_UV[0][1]/gipotinus*V;
 800170c:	4b45      	ldr	r3, [pc, #276]	; (8001824 <Move_robot_coordinates_X_Y_W+0x4ac>)
 800170e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001712:	4b46      	ldr	r3, [pc, #280]	; (800182c <Move_robot_coordinates_X_Y_W+0x4b4>)
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800171c:	4b45      	ldr	r3, [pc, #276]	; (8001834 <Move_robot_coordinates_X_Y_W+0x4bc>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001726:	4b44      	ldr	r3, [pc, #272]	; (8001838 <Move_robot_coordinates_X_Y_W+0x4c0>)
 8001728:	edc3 7a01 	vstr	s15, [r3, #4]
 800172c:	e007      	b.n	800173e <Move_robot_coordinates_X_Y_W+0x3c6>
		}
	}
	else{
		target_speed[0] = 0.0;
 800172e:	4b42      	ldr	r3, [pc, #264]	; (8001838 <Move_robot_coordinates_X_Y_W+0x4c0>)
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
		target_speed[1] = 0.0;
 8001736:	4b40      	ldr	r3, [pc, #256]	; (8001838 <Move_robot_coordinates_X_Y_W+0x4c0>)
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	605a      	str	r2, [r3, #4]
	}
	if(fi>=(2*pi))
 800173e:	4b34      	ldr	r3, [pc, #208]	; (8001810 <Move_robot_coordinates_X_Y_W+0x498>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ffce 	bl	80006e4 <__aeabi_f2d>
 8001748:	a32d      	add	r3, pc, #180	; (adr r3, 8001800 <Move_robot_coordinates_X_Y_W+0x488>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7ff f895 	bl	800087c <__aeabi_dcmpge>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d012      	beq.n	800177e <Move_robot_coordinates_X_Y_W+0x406>
		  		  fi = fi-2*pi;
 8001758:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <Move_robot_coordinates_X_Y_W+0x498>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe ffc1 	bl	80006e4 <__aeabi_f2d>
 8001762:	a327      	add	r3, pc, #156	; (adr r3, 8001800 <Move_robot_coordinates_X_Y_W+0x488>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7fe fe5c 	bl	8000424 <__aeabi_dsub>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff f8be 	bl	80008f4 <__aeabi_d2f>
 8001778:	4603      	mov	r3, r0
 800177a:	4a25      	ldr	r2, [pc, #148]	; (8001810 <Move_robot_coordinates_X_Y_W+0x498>)
 800177c:	6013      	str	r3, [r2, #0]
		  	  if(fi<0.0)
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <Move_robot_coordinates_X_Y_W+0x498>)
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178c:	d512      	bpl.n	80017b4 <Move_robot_coordinates_X_Y_W+0x43c>
		  		  fi = fi+2*pi;
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <Move_robot_coordinates_X_Y_W+0x498>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe ffa6 	bl	80006e4 <__aeabi_f2d>
 8001798:	a319      	add	r3, pc, #100	; (adr r3, 8001800 <Move_robot_coordinates_X_Y_W+0x488>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe fe43 	bl	8000428 <__adddf3>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff f8a3 	bl	80008f4 <__aeabi_d2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a17      	ldr	r2, [pc, #92]	; (8001810 <Move_robot_coordinates_X_Y_W+0x498>)
 80017b2:	6013      	str	r3, [r2, #0]
		  	if (delta_fi>0.2){
 80017b4:	4b21      	ldr	r3, [pc, #132]	; (800183c <Move_robot_coordinates_X_Y_W+0x4c4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe ff93 	bl	80006e4 <__aeabi_f2d>
 80017be:	a312      	add	r3, pc, #72	; (adr r3, 8001808 <Move_robot_coordinates_X_Y_W+0x490>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7ff f864 	bl	8000890 <__aeabi_dcmpgt>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d053      	beq.n	8001876 <Move_robot_coordinates_X_Y_W+0x4fe>
		  		switch(flaging){
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <Move_robot_coordinates_X_Y_W+0x4c8>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d852      	bhi.n	800187e <Move_robot_coordinates_X_Y_W+0x506>
 80017d8:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <Move_robot_coordinates_X_Y_W+0x468>)
 80017da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017de:	bf00      	nop
 80017e0:	08001845 	.word	0x08001845
 80017e4:	08001855 	.word	0x08001855
 80017e8:	0800185d 	.word	0x0800185d
 80017ec:	08001865 	.word	0x08001865
 80017f0:	47ae147b 	.word	0x47ae147b
 80017f4:	3f747ae1 	.word	0x3f747ae1
 80017f8:	9999999a 	.word	0x9999999a
 80017fc:	3fa99999 	.word	0x3fa99999
 8001800:	54442d18 	.word	0x54442d18
 8001804:	401921fb 	.word	0x401921fb
 8001808:	9999999a 	.word	0x9999999a
 800180c:	3fc99999 	.word	0x3fc99999
 8001810:	20000070 	.word	0x20000070
 8001814:	20000258 	.word	0x20000258
 8001818:	200003cc 	.word	0x200003cc
 800181c:	200003d0 	.word	0x200003d0
 8001820:	2000027c 	.word	0x2000027c
 8001824:	2000024c 	.word	0x2000024c
 8001828:	20000240 	.word	0x20000240
 800182c:	200002a0 	.word	0x200002a0
 8001830:	200002a8 	.word	0x200002a8
 8001834:	20000060 	.word	0x20000060
 8001838:	200001ec 	.word	0x200001ec
 800183c:	20000230 	.word	0x20000230
 8001840:	20000398 	.word	0x20000398
		  			case(1):target_speed[2] = -W;
 8001844:	4b58      	ldr	r3, [pc, #352]	; (80019a8 <Move_robot_coordinates_X_Y_W+0x630>)
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	eef1 7a67 	vneg.f32	s15, s15
 800184e:	4b57      	ldr	r3, [pc, #348]	; (80019ac <Move_robot_coordinates_X_Y_W+0x634>)
 8001850:	edc3 7a02 	vstr	s15, [r3, #8]
		  			case(2):target_speed[2] = W;
 8001854:	4b54      	ldr	r3, [pc, #336]	; (80019a8 <Move_robot_coordinates_X_Y_W+0x630>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a54      	ldr	r2, [pc, #336]	; (80019ac <Move_robot_coordinates_X_Y_W+0x634>)
 800185a:	6093      	str	r3, [r2, #8]
		  			case(3):target_speed[2] = W;
 800185c:	4b52      	ldr	r3, [pc, #328]	; (80019a8 <Move_robot_coordinates_X_Y_W+0x630>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a52      	ldr	r2, [pc, #328]	; (80019ac <Move_robot_coordinates_X_Y_W+0x634>)
 8001862:	6093      	str	r3, [r2, #8]
		  			case(4):target_speed[2] = -W;
 8001864:	4b50      	ldr	r3, [pc, #320]	; (80019a8 <Move_robot_coordinates_X_Y_W+0x630>)
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	eef1 7a67 	vneg.f32	s15, s15
 800186e:	4b4f      	ldr	r3, [pc, #316]	; (80019ac <Move_robot_coordinates_X_Y_W+0x634>)
 8001870:	edc3 7a02 	vstr	s15, [r3, #8]
 8001874:	e003      	b.n	800187e <Move_robot_coordinates_X_Y_W+0x506>
		  		}

		  		  }
		  		else target_speed[2] = 0.0;
 8001876:	4b4d      	ldr	r3, [pc, #308]	; (80019ac <Move_robot_coordinates_X_Y_W+0x634>)
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	609a      	str	r2, [r3, #8]


		  	matrixMultiplyM2M(&target_speed[0],1,3,&robot_matrix[0][0],3,4,&speed_wheels[0]);
 800187e:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <Move_robot_coordinates_X_Y_W+0x638>)
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2304      	movs	r3, #4
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	2303      	movs	r3, #3
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	4b4a      	ldr	r3, [pc, #296]	; (80019b4 <Move_robot_coordinates_X_Y_W+0x63c>)
 800188c:	2203      	movs	r2, #3
 800188e:	2101      	movs	r1, #1
 8001890:	4846      	ldr	r0, [pc, #280]	; (80019ac <Move_robot_coordinates_X_Y_W+0x634>)
 8001892:	f000 fc15 	bl	80020c0 <matrixMultiplyM2M>
		  	now_speead[0] = result_speed_1;
 8001896:	4b48      	ldr	r3, [pc, #288]	; (80019b8 <Move_robot_coordinates_X_Y_W+0x640>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a48      	ldr	r2, [pc, #288]	; (80019bc <Move_robot_coordinates_X_Y_W+0x644>)
 800189c:	6013      	str	r3, [r2, #0]
		  	now_speead[1] = result_speed_2;
 800189e:	4b48      	ldr	r3, [pc, #288]	; (80019c0 <Move_robot_coordinates_X_Y_W+0x648>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a46      	ldr	r2, [pc, #280]	; (80019bc <Move_robot_coordinates_X_Y_W+0x644>)
 80018a4:	6053      	str	r3, [r2, #4]
		  	now_speead[2] = result_speed_3;
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <Move_robot_coordinates_X_Y_W+0x64c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a44      	ldr	r2, [pc, #272]	; (80019bc <Move_robot_coordinates_X_Y_W+0x644>)
 80018ac:	6093      	str	r3, [r2, #8]
		  	read_speed[0] = result_speed_0;
 80018ae:	4b46      	ldr	r3, [pc, #280]	; (80019c8 <Move_robot_coordinates_X_Y_W+0x650>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a46      	ldr	r2, [pc, #280]	; (80019cc <Move_robot_coordinates_X_Y_W+0x654>)
 80018b4:	6013      	str	r3, [r2, #0]
		  	read_speed[1] = result_speed_1;
 80018b6:	4b40      	ldr	r3, [pc, #256]	; (80019b8 <Move_robot_coordinates_X_Y_W+0x640>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a44      	ldr	r2, [pc, #272]	; (80019cc <Move_robot_coordinates_X_Y_W+0x654>)
 80018bc:	6053      	str	r3, [r2, #4]
		  	read_speed[2] = result_speed_2;
 80018be:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <Move_robot_coordinates_X_Y_W+0x648>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a42      	ldr	r2, [pc, #264]	; (80019cc <Move_robot_coordinates_X_Y_W+0x654>)
 80018c4:	6093      	str	r3, [r2, #8]
		  	read_speed[3] = result_speed_3;
 80018c6:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <Move_robot_coordinates_X_Y_W+0x64c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a40      	ldr	r2, [pc, #256]	; (80019cc <Move_robot_coordinates_X_Y_W+0x654>)
 80018cc:	60d3      	str	r3, [r2, #12]
		  	matrixMultiplyM2M(&read_speed[0],1,4,&axes_robot_matrix_inverse[0][0],4,3,&robot_speed[0]);
 80018ce:	4b40      	ldr	r3, [pc, #256]	; (80019d0 <Move_robot_coordinates_X_Y_W+0x658>)
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	2303      	movs	r3, #3
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	2304      	movs	r3, #4
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <Move_robot_coordinates_X_Y_W+0x65c>)
 80018dc:	2204      	movs	r2, #4
 80018de:	2101      	movs	r1, #1
 80018e0:	483a      	ldr	r0, [pc, #232]	; (80019cc <Move_robot_coordinates_X_Y_W+0x654>)
 80018e2:	f000 fbed 	bl	80020c0 <matrixMultiplyM2M>

		  	Wheel_1.target = speed_wheels[0];
 80018e6:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <Move_robot_coordinates_X_Y_W+0x638>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a3b      	ldr	r2, [pc, #236]	; (80019d8 <Move_robot_coordinates_X_Y_W+0x660>)
 80018ec:	6113      	str	r3, [r2, #16]
		  	Wheel_2.target = speed_wheels[1];
 80018ee:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <Move_robot_coordinates_X_Y_W+0x638>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4a3a      	ldr	r2, [pc, #232]	; (80019dc <Move_robot_coordinates_X_Y_W+0x664>)
 80018f4:	6113      	str	r3, [r2, #16]
		  	Wheel_3.target = speed_wheels[2];
 80018f6:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <Move_robot_coordinates_X_Y_W+0x638>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	4a39      	ldr	r2, [pc, #228]	; (80019e0 <Move_robot_coordinates_X_Y_W+0x668>)
 80018fc:	6113      	str	r3, [r2, #16]
		  	Wheel_4.target = speed_wheels[3];
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <Move_robot_coordinates_X_Y_W+0x638>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	4a38      	ldr	r2, [pc, #224]	; (80019e4 <Move_robot_coordinates_X_Y_W+0x66c>)
 8001904:	6113      	str	r3, [r2, #16]
	  		  speed_U = robot_speed[0];
 8001906:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <Move_robot_coordinates_X_Y_W+0x658>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a37      	ldr	r2, [pc, #220]	; (80019e8 <Move_robot_coordinates_X_Y_W+0x670>)
 800190c:	6013      	str	r3, [r2, #0]
		  		  speed_V = robot_speed[1];
 800190e:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <Move_robot_coordinates_X_Y_W+0x658>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4a36      	ldr	r2, [pc, #216]	; (80019ec <Move_robot_coordinates_X_Y_W+0x674>)
 8001914:	6013      	str	r3, [r2, #0]
		  		  speed_W = robot_speed[2];
 8001916:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <Move_robot_coordinates_X_Y_W+0x658>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	4a35      	ldr	r2, [pc, #212]	; (80019f0 <Move_robot_coordinates_X_Y_W+0x678>)
 800191c:	6013      	str	r3, [r2, #0]
	while(((gipotinus>=0.005)||delta_fi>=0.02)){
 800191e:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <Move_robot_coordinates_X_Y_W+0x67c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fede 	bl	80006e4 <__aeabi_f2d>
 8001928:	a31b      	add	r3, pc, #108	; (adr r3, 8001998 <Move_robot_coordinates_X_Y_W+0x620>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe ffa5 	bl	800087c <__aeabi_dcmpge>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	f47f aded 	bne.w	8001514 <Move_robot_coordinates_X_Y_W+0x19c>
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <Move_robot_coordinates_X_Y_W+0x680>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fed0 	bl	80006e4 <__aeabi_f2d>
 8001944:	a316      	add	r3, pc, #88	; (adr r3, 80019a0 <Move_robot_coordinates_X_Y_W+0x628>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe ff97 	bl	800087c <__aeabi_dcmpge>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	f47f addf 	bne.w	8001514 <Move_robot_coordinates_X_Y_W+0x19c>

	}


	speed_U = 0;
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <Move_robot_coordinates_X_Y_W+0x670>)
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
	speed_V = 0;
 800195e:	4b23      	ldr	r3, [pc, #140]	; (80019ec <Move_robot_coordinates_X_Y_W+0x674>)
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
	speed_W = 0;
 8001966:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <Move_robot_coordinates_X_Y_W+0x678>)
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
  	Wheel_1.target = 0;
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <Move_robot_coordinates_X_Y_W+0x660>)
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  	Wheel_2.target = 0;
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <Move_robot_coordinates_X_Y_W+0x664>)
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  	Wheel_3.target = 0;
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <Move_robot_coordinates_X_Y_W+0x668>)
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
  	Wheel_4.target = 0;
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <Move_robot_coordinates_X_Y_W+0x66c>)
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	611a      	str	r2, [r3, #16]

}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	47ae147b 	.word	0x47ae147b
 800199c:	3f747ae1 	.word	0x3f747ae1
 80019a0:	47ae147b 	.word	0x47ae147b
 80019a4:	3f947ae1 	.word	0x3f947ae1
 80019a8:	20000064 	.word	0x20000064
 80019ac:	200001ec 	.word	0x200001ec
 80019b0:	200001f8 	.word	0x200001f8
 80019b4:	20000000 	.word	0x20000000
 80019b8:	200003a0 	.word	0x200003a0
 80019bc:	20000208 	.word	0x20000208
 80019c0:	200003a4 	.word	0x200003a4
 80019c4:	200003a8 	.word	0x200003a8
 80019c8:	2000039c 	.word	0x2000039c
 80019cc:	20000214 	.word	0x20000214
 80019d0:	20000224 	.word	0x20000224
 80019d4:	20000030 	.word	0x20000030
 80019d8:	200000ec 	.word	0x200000ec
 80019dc:	2000012c 	.word	0x2000012c
 80019e0:	2000016c 	.word	0x2000016c
 80019e4:	200001ac 	.word	0x200001ac
 80019e8:	20000234 	.word	0x20000234
 80019ec:	20000238 	.word	0x20000238
 80019f0:	2000023c 	.word	0x2000023c
 80019f4:	200002a0 	.word	0x200002a0
 80019f8:	20000230 	.word	0x20000230

080019fc <HAL_UART_RxCpltCallback>:
				i++;
			}
		}
	}
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

	if (rx_data[0] == '%') {
 8001a04:	4b5d      	ldr	r3, [pc, #372]	; (8001b7c <HAL_UART_RxCpltCallback+0x180>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b25      	cmp	r3, #37	; 0x25
 8001a0a:	d10b      	bne.n	8001a24 <HAL_UART_RxCpltCallback+0x28>
		check_sum = 0;
 8001a0c:	4b5c      	ldr	r3, [pc, #368]	; (8001b80 <HAL_UART_RxCpltCallback+0x184>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
		write_data = 1;
 8001a12:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <HAL_UART_RxCpltCallback+0x188>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
		ind_data = 0;
 8001a18:	4b5b      	ldr	r3, [pc, #364]	; (8001b88 <HAL_UART_RxCpltCallback+0x18c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
		size_data = 0;
 8001a1e:	4b5b      	ldr	r3, [pc, #364]	; (8001b8c <HAL_UART_RxCpltCallback+0x190>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
	}

	if (write_data) {
 8001a24:	4b57      	ldr	r3, [pc, #348]	; (8001b84 <HAL_UART_RxCpltCallback+0x188>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d040      	beq.n	8001aae <HAL_UART_RxCpltCallback+0xb2>


		temp_data[ind_data] = rx_data[0];
 8001a2c:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <HAL_UART_RxCpltCallback+0x18c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b52      	ldr	r3, [pc, #328]	; (8001b7c <HAL_UART_RxCpltCallback+0x180>)
 8001a34:	7819      	ldrb	r1, [r3, #0]
 8001a36:	4b56      	ldr	r3, [pc, #344]	; (8001b90 <HAL_UART_RxCpltCallback+0x194>)
 8001a38:	5499      	strb	r1, [r3, r2]

		if (ind_data == 3){
 8001a3a:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_UART_RxCpltCallback+0x18c>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d11c      	bne.n	8001a7c <HAL_UART_RxCpltCallback+0x80>
			size_data = (temp_data[1] - 48) * 100 + (temp_data[2] - 48) * 10 + (temp_data[3] - 48);
 8001a42:	4b53      	ldr	r3, [pc, #332]	; (8001b90 <HAL_UART_RxCpltCallback+0x194>)
 8001a44:	785b      	ldrb	r3, [r3, #1]
 8001a46:	461a      	mov	r2, r3
 8001a48:	0092      	lsls	r2, r2, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	0091      	lsls	r1, r2, #2
 8001a50:	461a      	mov	r2, r3
 8001a52:	460b      	mov	r3, r1
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4b4d      	ldr	r3, [pc, #308]	; (8001b90 <HAL_UART_RxCpltCallback+0x194>)
 8001a5c:	789b      	ldrb	r3, [r3, #2]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	0089      	lsls	r1, r1, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b48      	ldr	r3, [pc, #288]	; (8001b90 <HAL_UART_RxCpltCallback+0x194>)
 8001a6e:	78db      	ldrb	r3, [r3, #3]
 8001a70:	4413      	add	r3, r2
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	3330      	adds	r3, #48	; 0x30
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b44      	ldr	r3, [pc, #272]	; (8001b8c <HAL_UART_RxCpltCallback+0x190>)
 8001a7a:	701a      	strb	r2, [r3, #0]
		}
		if (ind_data <= size_data - 4 || ind_data <= 3) {
 8001a7c:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <HAL_UART_RxCpltCallback+0x190>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	3b03      	subs	r3, #3
 8001a82:	4a41      	ldr	r2, [pc, #260]	; (8001b88 <HAL_UART_RxCpltCallback+0x18c>)
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	4293      	cmp	r3, r2
 8001a88:	dc03      	bgt.n	8001a92 <HAL_UART_RxCpltCallback+0x96>
 8001a8a:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <HAL_UART_RxCpltCallback+0x18c>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d807      	bhi.n	8001aa2 <HAL_UART_RxCpltCallback+0xa6>
			check_sum += rx_data[0];
 8001a92:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <HAL_UART_RxCpltCallback+0x180>)
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <HAL_UART_RxCpltCallback+0x184>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <HAL_UART_RxCpltCallback+0x184>)
 8001aa0:	701a      	strb	r2, [r3, #0]
		}


		ind_data++;
 8001aa2:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <HAL_UART_RxCpltCallback+0x18c>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <HAL_UART_RxCpltCallback+0x18c>)
 8001aac:	701a      	strb	r2, [r3, #0]
	}
	if (ind_data >= 99) {
 8001aae:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <HAL_UART_RxCpltCallback+0x18c>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b62      	cmp	r3, #98	; 0x62
 8001ab4:	d90b      	bls.n	8001ace <HAL_UART_RxCpltCallback+0xd2>
		check_sum = 0;
 8001ab6:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <HAL_UART_RxCpltCallback+0x184>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
		write_data = 0;
 8001abc:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_UART_RxCpltCallback+0x188>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
		ind_data = 0;
 8001ac2:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <HAL_UART_RxCpltCallback+0x18c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
		size_data = 0;
 8001ac8:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <HAL_UART_RxCpltCallback+0x190>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
	}
	if (ind_data == size_data) {
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <HAL_UART_RxCpltCallback+0x18c>)
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <HAL_UART_RxCpltCallback+0x190>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d101      	bne.n	8001ade <HAL_UART_RxCpltCallback+0xe2>
		HAL_GetTick();
 8001ada:	f002 f9b3 	bl	8003e44 <HAL_GetTick>
	}
	if (rx_data[0] == '\r') {
 8001ade:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <HAL_UART_RxCpltCallback+0x180>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b0d      	cmp	r3, #13
 8001ae4:	d145      	bne.n	8001b72 <HAL_UART_RxCpltCallback+0x176>

		//size_data = (temp_data[1] - 48) * 100 + (temp_data[2] - 48) * 10 + (temp_data[3] - 48);
		uint8_t check_sum_data = (temp_data[size_data - 3] - 48) * 100 + (temp_data[size_data - 2] - 48) * 10 + (temp_data[size_data - 1] - 48);
 8001ae6:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <HAL_UART_RxCpltCallback+0x190>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	3b03      	subs	r3, #3
 8001aec:	4a28      	ldr	r2, [pc, #160]	; (8001b90 <HAL_UART_RxCpltCallback+0x194>)
 8001aee:	5cd3      	ldrb	r3, [r2, r3]
 8001af0:	461a      	mov	r2, r3
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	461a      	mov	r2, r3
 8001af8:	0091      	lsls	r1, r2, #2
 8001afa:	461a      	mov	r2, r3
 8001afc:	460b      	mov	r3, r1
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_UART_RxCpltCallback+0x190>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	3b02      	subs	r3, #2
 8001b0a:	4921      	ldr	r1, [pc, #132]	; (8001b90 <HAL_UART_RxCpltCallback+0x194>)
 8001b0c:	5ccb      	ldrb	r3, [r1, r3]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	0089      	lsls	r1, r1, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_UART_RxCpltCallback+0x190>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	491b      	ldr	r1, [pc, #108]	; (8001b90 <HAL_UART_RxCpltCallback+0x194>)
 8001b24:	5ccb      	ldrb	r3, [r1, r3]
 8001b26:	4413      	add	r3, r2
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	3330      	adds	r3, #48	; 0x30
 8001b2c:	73fb      	strb	r3, [r7, #15]
		write_data = 0;
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_UART_RxCpltCallback+0x188>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
		if (check_sum == check_sum_data && ind_data == size_data + 1) {
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_UART_RxCpltCallback+0x184>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d119      	bne.n	8001b72 <HAL_UART_RxCpltCallback+0x176>
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_UART_RxCpltCallback+0x18c>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_UART_RxCpltCallback+0x190>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d111      	bne.n	8001b72 <HAL_UART_RxCpltCallback+0x176>
			timer = HAL_GetTick();
 8001b4e:	f002 f979 	bl	8003e44 <HAL_GetTick>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <HAL_UART_RxCpltCallback+0x198>)
 8001b56:	6013      	str	r3, [r2, #0]
			memcpy(data, &temp_data[5], size_data);
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_UART_RxCpltCallback+0x190>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	490e      	ldr	r1, [pc, #56]	; (8001b98 <HAL_UART_RxCpltCallback+0x19c>)
 8001b60:	480e      	ldr	r0, [pc, #56]	; (8001b9c <HAL_UART_RxCpltCallback+0x1a0>)
 8001b62:	f005 fe5b 	bl	800781c <memcpy>
			data[size_data - 8] = '\r';
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_UART_RxCpltCallback+0x190>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	3b08      	subs	r3, #8
 8001b6c:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <HAL_UART_RxCpltCallback+0x1a0>)
 8001b6e:	210d      	movs	r1, #13
 8001b70:	54d1      	strb	r1, [r2, r3]
		}
	}
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200002b4 	.word	0x200002b4
 8001b80:	20000383 	.word	0x20000383
 8001b84:	20000382 	.word	0x20000382
 8001b88:	20000381 	.word	0x20000381
 8001b8c:	20000380 	.word	0x20000380
 8001b90:	200002b8 	.word	0x200002b8
 8001b94:	20000384 	.word	0x20000384
 8001b98:	200002bd 	.word	0x200002bd
 8001b9c:	2000031c 	.word	0x2000031c

08001ba0 <convert_typedef>:
	else
	{
		autonom_flag = false;
	}
}
void convert_typedef(void){
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

	Wheel_1.motor = 0;
 8001ba4:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <convert_typedef+0xe0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_1.target = 0.0;
 8001bac:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <convert_typedef+0xe0>)
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
	Wheel_1.current = 0;
 8001bb4:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <convert_typedef+0xe0>)
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
	Wheel_1.Kp = 14;
 8001bbc:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <convert_typedef+0xe0>)
 8001bbe:	4a31      	ldr	r2, [pc, #196]	; (8001c84 <convert_typedef+0xe4>)
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_1.Ki = 1;
 8001bc2:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <convert_typedef+0xe0>)
 8001bc4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_1.Kd = 0.1;
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <convert_typedef+0xe0>)
 8001bcc:	4a2e      	ldr	r2, [pc, #184]	; (8001c88 <convert_typedef+0xe8>)
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_1.wh_L = 0.0;
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <convert_typedef+0xe0>)
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	639a      	str	r2, [r3, #56]	; 0x38

	Wheel_2.motor = 1;
 8001bd8:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <convert_typedef+0xec>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_2.target = 0.0;
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <convert_typedef+0xec>)
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
	Wheel_2.current = 0;
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <convert_typedef+0xec>)
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	615a      	str	r2, [r3, #20]
	Wheel_2.Kp = 14;
 8001bf0:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <convert_typedef+0xec>)
 8001bf2:	4a24      	ldr	r2, [pc, #144]	; (8001c84 <convert_typedef+0xe4>)
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_2.Ki = 1;
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <convert_typedef+0xec>)
 8001bf8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_2.Kd = 0.1;
 8001bfe:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <convert_typedef+0xec>)
 8001c00:	4a21      	ldr	r2, [pc, #132]	; (8001c88 <convert_typedef+0xe8>)
 8001c02:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_2.wh_L = 0.0;
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <convert_typedef+0xec>)
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	639a      	str	r2, [r3, #56]	; 0x38

	Wheel_3.motor = 2;
 8001c0c:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <convert_typedef+0xf0>)
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_3.target = 0.0;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <convert_typedef+0xf0>)
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
	Wheel_3.current = 0;
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <convert_typedef+0xf0>)
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	615a      	str	r2, [r3, #20]
	Wheel_3.Kp = 14;
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <convert_typedef+0xf0>)
 8001c26:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <convert_typedef+0xe4>)
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_3.Ki = 1;
 8001c2a:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <convert_typedef+0xf0>)
 8001c2c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_3.Kd = 0.1;
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <convert_typedef+0xf0>)
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <convert_typedef+0xe8>)
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_3.wh_L = 0.0;
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <convert_typedef+0xf0>)
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	639a      	str	r2, [r3, #56]	; 0x38

	Wheel_4.motor = 3;
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <convert_typedef+0xf4>)
 8001c42:	2203      	movs	r2, #3
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_4.target = 0.0;
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <convert_typedef+0xf4>)
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
	Wheel_4.current = 0;
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <convert_typedef+0xf4>)
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	615a      	str	r2, [r3, #20]
	Wheel_4.Kp = 14;
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <convert_typedef+0xf4>)
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <convert_typedef+0xe4>)
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_4.Ki = 1;
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <convert_typedef+0xf4>)
 8001c60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c64:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_4.Kd = 0.1;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <convert_typedef+0xf4>)
 8001c68:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <convert_typedef+0xe8>)
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_4.wh_L = 0.0;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <convert_typedef+0xf4>)
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	200000ec 	.word	0x200000ec
 8001c84:	41600000 	.word	0x41600000
 8001c88:	3dcccccd 	.word	0x3dcccccd
 8001c8c:	2000012c 	.word	0x2000012c
 8001c90:	2000016c 	.word	0x2000016c
 8001c94:	200001ac 	.word	0x200001ac

08001c98 <set_voltage>:
		  position = 2;
	  }
	  chain_control(position);
	}
}
void set_voltage(uint8_t motor , float duty) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	ed87 0a00 	vstr	s0, [r7]
 8001ca4:	71fb      	strb	r3, [r7, #7]
 if(duty > 1.0) duty = 1.0;
 8001ca6:	edd7 7a00 	vldr	s15, [r7]
 8001caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	dd02      	ble.n	8001cbe <set_voltage+0x26>
 8001cb8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001cbc:	603b      	str	r3, [r7, #0]
 if(duty < -1.0) duty = -1.0;
 8001cbe:	edd7 7a00 	vldr	s15, [r7]
 8001cc2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	d501      	bpl.n	8001cd4 <set_voltage+0x3c>
 8001cd0:	4b8e      	ldr	r3, [pc, #568]	; (8001f0c <set_voltage+0x274>)
 8001cd2:	603b      	str	r3, [r7, #0]
 switch(motor) {
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	f200 8114 	bhi.w	8001f04 <set_voltage+0x26c>
 8001cdc:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <set_voltage+0x4c>)
 8001cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce2:	bf00      	nop
 8001ce4:	08001cf5 	.word	0x08001cf5
 8001ce8:	08001d77 	.word	0x08001d77
 8001cec:	08001dfd 	.word	0x08001dfd
 8001cf0:	08001e7f 	.word	0x08001e7f
 case 0:
	 if(duty >= 0.0)  {
 8001cf4:	edd7 7a00 	vldr	s15, [r7]
 8001cf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d00:	db1b      	blt.n	8001d3a <set_voltage+0xa2>
		 TIM4->CCR1 = ((int32_t)(TIM4->ARR * duty));   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d02:	4b83      	ldr	r3, [pc, #524]	; (8001f10 <set_voltage+0x278>)
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d0e:	edd7 7a00 	vldr	s15, [r7]
 8001d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d1a:	4b7d      	ldr	r3, [pc, #500]	; (8001f10 <set_voltage+0x278>)
 8001d1c:	ee17 2a90 	vmov	r2, s15
 8001d20:	635a      	str	r2, [r3, #52]	; 0x34
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d28:	487a      	ldr	r0, [pc, #488]	; (8001f14 <set_voltage+0x27c>)
 8001d2a:	f002 ff83 	bl	8004c34 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2180      	movs	r1, #128	; 0x80
 8001d32:	4879      	ldr	r0, [pc, #484]	; (8001f18 <set_voltage+0x280>)
 8001d34:	f002 ff7e 	bl	8004c34 <HAL_GPIO_WritePin>
  }
	 else {   TIM4->CCR1 = ((int32_t)(-(TIM4->ARR * duty)));
	 	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
	 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
	 }
  break;
 8001d38:	e0e4      	b.n	8001f04 <set_voltage+0x26c>
	 else {   TIM4->CCR1 = ((int32_t)(-(TIM4->ARR * duty)));
 8001d3a:	4b75      	ldr	r3, [pc, #468]	; (8001f10 <set_voltage+0x278>)
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d46:	edd7 7a00 	vldr	s15, [r7]
 8001d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4e:	eef1 7a67 	vneg.f32	s15, s15
 8001d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d56:	4b6e      	ldr	r3, [pc, #440]	; (8001f10 <set_voltage+0x278>)
 8001d58:	ee17 2a90 	vmov	r2, s15
 8001d5c:	635a      	str	r2, [r3, #52]	; 0x34
	 	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d64:	486b      	ldr	r0, [pc, #428]	; (8001f14 <set_voltage+0x27c>)
 8001d66:	f002 ff65 	bl	8004c34 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2180      	movs	r1, #128	; 0x80
 8001d6e:	486a      	ldr	r0, [pc, #424]	; (8001f18 <set_voltage+0x280>)
 8001d70:	f002 ff60 	bl	8004c34 <HAL_GPIO_WritePin>
  break;
 8001d74:	e0c6      	b.n	8001f04 <set_voltage+0x26c>
  case 1:
	  if(duty >= 0.0)  {
 8001d76:	edd7 7a00 	vldr	s15, [r7]
 8001d7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d82:	db1c      	blt.n	8001dbe <set_voltage+0x126>
		  TIM4->CCR2 = ((int32_t)(TIM4->ARR * duty));   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001d84:	4b62      	ldr	r3, [pc, #392]	; (8001f10 <set_voltage+0x278>)
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	ee07 3a90 	vmov	s15, r3
 8001d8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d90:	edd7 7a00 	vldr	s15, [r7]
 8001d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d9c:	4b5c      	ldr	r3, [pc, #368]	; (8001f10 <set_voltage+0x278>)
 8001d9e:	ee17 2a90 	vmov	r2, s15
 8001da2:	639a      	str	r2, [r3, #56]	; 0x38
 8001da4:	2200      	movs	r2, #0
 8001da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001daa:	485a      	ldr	r0, [pc, #360]	; (8001f14 <set_voltage+0x27c>)
 8001dac:	f002 ff42 	bl	8004c34 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001db0:	2201      	movs	r2, #1
 8001db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001db6:	4859      	ldr	r0, [pc, #356]	; (8001f1c <set_voltage+0x284>)
 8001db8:	f002 ff3c 	bl	8004c34 <HAL_GPIO_WritePin>
  }
	  else {   TIM4->CCR2 = ((int32_t)(-(TIM4->ARR * duty)));
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	  }
  break;
 8001dbc:	e0a2      	b.n	8001f04 <set_voltage+0x26c>
	  else {   TIM4->CCR2 = ((int32_t)(-(TIM4->ARR * duty)));
 8001dbe:	4b54      	ldr	r3, [pc, #336]	; (8001f10 <set_voltage+0x278>)
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dca:	edd7 7a00 	vldr	s15, [r7]
 8001dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd2:	eef1 7a67 	vneg.f32	s15, s15
 8001dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dda:	4b4d      	ldr	r3, [pc, #308]	; (8001f10 <set_voltage+0x278>)
 8001ddc:	ee17 2a90 	vmov	r2, s15
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001de2:	2201      	movs	r2, #1
 8001de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001de8:	484a      	ldr	r0, [pc, #296]	; (8001f14 <set_voltage+0x27c>)
 8001dea:	f002 ff23 	bl	8004c34 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001df4:	4849      	ldr	r0, [pc, #292]	; (8001f1c <set_voltage+0x284>)
 8001df6:	f002 ff1d 	bl	8004c34 <HAL_GPIO_WritePin>
  break;
 8001dfa:	e083      	b.n	8001f04 <set_voltage+0x26c>
  case 2:
	  if(duty >= 0.0)  {
 8001dfc:	edd7 7a00 	vldr	s15, [r7]
 8001e00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e08:	db1b      	blt.n	8001e42 <set_voltage+0x1aa>
		  TIM4->CCR3 = ((int32_t)(TIM4->ARR * duty));   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e0a:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <set_voltage+0x278>)
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e16:	edd7 7a00 	vldr	s15, [r7]
 8001e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e22:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <set_voltage+0x278>)
 8001e24:	ee17 2a90 	vmov	r2, s15
 8001e28:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e30:	4839      	ldr	r0, [pc, #228]	; (8001f18 <set_voltage+0x280>)
 8001e32:	f002 feff 	bl	8004c34 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2, GPIO_PIN_SET);
 8001e36:	2201      	movs	r2, #1
 8001e38:	2104      	movs	r1, #4
 8001e3a:	4837      	ldr	r0, [pc, #220]	; (8001f18 <set_voltage+0x280>)
 8001e3c:	f002 fefa 	bl	8004c34 <HAL_GPIO_WritePin>
  }
	  else {   TIM4->CCR3 = ((int32_t)(-(TIM4->ARR * duty)));
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
	  }
  break;
 8001e40:	e060      	b.n	8001f04 <set_voltage+0x26c>
	  else {   TIM4->CCR3 = ((int32_t)(-(TIM4->ARR * duty)));
 8001e42:	4b33      	ldr	r3, [pc, #204]	; (8001f10 <set_voltage+0x278>)
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e4e:	edd7 7a00 	vldr	s15, [r7]
 8001e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e56:	eef1 7a67 	vneg.f32	s15, s15
 8001e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e5e:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <set_voltage+0x278>)
 8001e60:	ee17 2a90 	vmov	r2, s15
 8001e64:	63da      	str	r2, [r3, #60]	; 0x3c
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e6c:	482a      	ldr	r0, [pc, #168]	; (8001f18 <set_voltage+0x280>)
 8001e6e:	f002 fee1 	bl	8004c34 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2104      	movs	r1, #4
 8001e76:	4828      	ldr	r0, [pc, #160]	; (8001f18 <set_voltage+0x280>)
 8001e78:	f002 fedc 	bl	8004c34 <HAL_GPIO_WritePin>
  break;
 8001e7c:	e042      	b.n	8001f04 <set_voltage+0x26c>
  case 3:
	  if(duty >= 0.0)  {
 8001e7e:	edd7 7a00 	vldr	s15, [r7]
 8001e82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8a:	db1c      	blt.n	8001ec6 <set_voltage+0x22e>
		  TIM4->CCR4 = ((int32_t)(TIM4->ARR * duty));   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8001e8c:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <set_voltage+0x278>)
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	ee07 3a90 	vmov	s15, r3
 8001e94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e98:	edd7 7a00 	vldr	s15, [r7]
 8001e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <set_voltage+0x278>)
 8001ea6:	ee17 2a90 	vmov	r2, s15
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8001eac:	2200      	movs	r2, #0
 8001eae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eb2:	4819      	ldr	r0, [pc, #100]	; (8001f18 <set_voltage+0x280>)
 8001eb4:	f002 febe 	bl	8004c34 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ebe:	4817      	ldr	r0, [pc, #92]	; (8001f1c <set_voltage+0x284>)
 8001ec0:	f002 feb8 	bl	8004c34 <HAL_GPIO_WritePin>
  }
	  else {   TIM4->CCR4 = ((int32_t)(-(TIM4->ARR * duty)));
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	  }
  break;
 8001ec4:	e01d      	b.n	8001f02 <set_voltage+0x26a>
	  else {   TIM4->CCR4 = ((int32_t)(-(TIM4->ARR * duty)));
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <set_voltage+0x278>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ed2:	edd7 7a00 	vldr	s15, [r7]
 8001ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eda:	eef1 7a67 	vneg.f32	s15, s15
 8001ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <set_voltage+0x278>)
 8001ee4:	ee17 2a90 	vmov	r2, s15
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ef0:	4809      	ldr	r0, [pc, #36]	; (8001f18 <set_voltage+0x280>)
 8001ef2:	f002 fe9f 	bl	8004c34 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001efc:	4807      	ldr	r0, [pc, #28]	; (8001f1c <set_voltage+0x284>)
 8001efe:	f002 fe99 	bl	8004c34 <HAL_GPIO_WritePin>
  break;
 8001f02:	bf00      	nop
 }
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	bf800000 	.word	0xbf800000
 8001f10:	40000800 	.word	0x40000800
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40020400 	.word	0x40020400

08001f20 <PID_Controller>:
void PID_Controller(PID *reg){
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

	reg->error = reg->target - reg->current;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	edc3 7a06 	vstr	s15, [r3, #24]

	reg->sum_error += reg->error;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	ed93 7a07 	vldr	s14, [r3, #28]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	edc3 7a07 	vstr	s15, [r3, #28]
    if(reg->sum_error > 1) reg->sum_error = 1;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f66:	dd03      	ble.n	8001f70 <PID_Controller+0x50>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f6e:	61da      	str	r2, [r3, #28]
    if(reg->sum_error < -1) reg->sum_error = -1;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f76:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f82:	d502      	bpl.n	8001f8a <PID_Controller+0x6a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a28      	ldr	r2, [pc, #160]	; (8002028 <PID_Controller+0x108>)
 8001f88:	61da      	str	r2, [r3, #28]

    reg->P  = reg->Kp * reg->error;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	edc3 7a00 	vstr	s15, [r3]
    reg->I  = reg->Ki * reg->sum_error;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	edc3 7a01 	vstr	s15, [r3, #4]
    reg->dif_error = reg->error - reg->old_error;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	ed93 7a06 	vldr	s14, [r3, #24]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	edc3 7a08 	vstr	s15, [r3, #32]
    reg->D  = reg->Kd * reg->dif_error;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	edc3 7a02 	vstr	s15, [r3, #8]
    reg->output  = reg->P  + reg->I  + reg->D ;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	ed93 7a00 	vldr	s14, [r3]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    set_voltage(  reg->motor , reg->output );
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800200e:	eeb0 0a67 	vmov.f32	s0, s15
 8002012:	4610      	mov	r0, r2
 8002014:	f7ff fe40 	bl	8001c98 <set_voltage>
    reg->old_error = reg->error;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699a      	ldr	r2, [r3, #24]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	635a      	str	r2, [r3, #52]	; 0x34
 }
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	bf800000 	.word	0xbf800000

0800202c <matrixSetCell>:
    for(i = 0; i < rows; i++)
        for(j = 0; j < columns; j++)
          *(new_m+columns*i+j) = *(m+columns*i+j);
}
void matrixSetCell(float *m, char rows, char columns, char row, char column, float val)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	4608      	mov	r0, r1
 8002036:	4611      	mov	r1, r2
 8002038:	461a      	mov	r2, r3
 800203a:	ed87 0a01 	vstr	s0, [r7, #4]
 800203e:	4603      	mov	r3, r0
 8002040:	72fb      	strb	r3, [r7, #11]
 8002042:	460b      	mov	r3, r1
 8002044:	72bb      	strb	r3, [r7, #10]
 8002046:	4613      	mov	r3, r2
 8002048:	727b      	strb	r3, [r7, #9]
  *(m+columns*(row-1)+column-1) = val;
 800204a:	7abb      	ldrb	r3, [r7, #10]
 800204c:	7a7a      	ldrb	r2, [r7, #9]
 800204e:	3a01      	subs	r2, #1
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	461a      	mov	r2, r3
 8002056:	7e3b      	ldrb	r3, [r7, #24]
 8002058:	4413      	add	r3, r2
 800205a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800205e:	3b01      	subs	r3, #1
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4413      	add	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <matrixGetCell>:
for(i = 0; i < rows; i++)
   for(j = 0; j < columns; j++)
      *(m+columns*i+j) = val;
}
float matrixGetCell(float *m, char rows, char columns, char row, char column)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	4608      	mov	r0, r1
 8002080:	4611      	mov	r1, r2
 8002082:	461a      	mov	r2, r3
 8002084:	4603      	mov	r3, r0
 8002086:	70fb      	strb	r3, [r7, #3]
 8002088:	460b      	mov	r3, r1
 800208a:	70bb      	strb	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	707b      	strb	r3, [r7, #1]
  return *(m+columns*(row-1)+column-1);
 8002090:	78bb      	ldrb	r3, [r7, #2]
 8002092:	787a      	ldrb	r2, [r7, #1]
 8002094:	3a01      	subs	r2, #1
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	461a      	mov	r2, r3
 800209c:	7c3b      	ldrb	r3, [r7, #16]
 800209e:	4413      	add	r3, r2
 80020a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020a4:	3b01      	subs	r3, #1
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	ee07 3a90 	vmov	s15, r3
}
 80020b2:	eeb0 0a67 	vmov.f32	s0, s15
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <matrixMultiplyM2M>:
void matrixMultiplyM2M(float *m1, char rows1, char columns1, float *m2, char rows2, char columns2, float *new_m)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	72fb      	strb	r3, [r7, #11]
 80020ce:	4613      	mov	r3, r2
 80020d0:	72bb      	strb	r3, [r7, #10]
float Sum;
char i,j,k;

  if (columns1 != rows2)
 80020d2:	7aba      	ldrb	r2, [r7, #10]
 80020d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d004      	beq.n	80020e6 <matrixMultiplyM2M+0x26>
      *new_m = 0;
 80020dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
            for(k = 0; k < columns1; k++)
                Sum+= (*(m1+columns1*i+k)) * (*(m2+columns2*k+j));
            *(new_m+columns2*i+j) = Sum;
        }
    }
}
 80020e4:	e04f      	b.n	8002186 <matrixMultiplyM2M+0xc6>
      for(i = 0; i < rows1; i++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	74fb      	strb	r3, [r7, #19]
 80020ea:	e048      	b.n	800217e <matrixMultiplyM2M+0xbe>
        for (j = 0; j < columns2; j++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	74bb      	strb	r3, [r7, #18]
 80020f0:	e03d      	b.n	800216e <matrixMultiplyM2M+0xae>
            Sum = 0;
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
            for(k = 0; k < columns1; k++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	747b      	strb	r3, [r7, #17]
 80020fc:	e023      	b.n	8002146 <matrixMultiplyM2M+0x86>
                Sum+= (*(m1+columns1*i+k)) * (*(m2+columns2*k+j));
 80020fe:	7abb      	ldrb	r3, [r7, #10]
 8002100:	7cfa      	ldrb	r2, [r7, #19]
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	461a      	mov	r2, r3
 8002108:	7c7b      	ldrb	r3, [r7, #17]
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4413      	add	r3, r2
 8002112:	ed93 7a00 	vldr	s14, [r3]
 8002116:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800211a:	7c7a      	ldrb	r2, [r7, #17]
 800211c:	fb02 f303 	mul.w	r3, r2, r3
 8002120:	461a      	mov	r2, r3
 8002122:	7cbb      	ldrb	r3, [r7, #18]
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	edd3 7a00 	vldr	s15, [r3]
 8002130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002134:	ed97 7a05 	vldr	s14, [r7, #20]
 8002138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213c:	edc7 7a05 	vstr	s15, [r7, #20]
            for(k = 0; k < columns1; k++)
 8002140:	7c7b      	ldrb	r3, [r7, #17]
 8002142:	3301      	adds	r3, #1
 8002144:	747b      	strb	r3, [r7, #17]
 8002146:	7c7a      	ldrb	r2, [r7, #17]
 8002148:	7abb      	ldrb	r3, [r7, #10]
 800214a:	429a      	cmp	r2, r3
 800214c:	d3d7      	bcc.n	80020fe <matrixMultiplyM2M+0x3e>
            *(new_m+columns2*i+j) = Sum;
 800214e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002152:	7cfa      	ldrb	r2, [r7, #19]
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	461a      	mov	r2, r3
 800215a:	7cbb      	ldrb	r3, [r7, #18]
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002162:	4413      	add	r3, r2
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	601a      	str	r2, [r3, #0]
        for (j = 0; j < columns2; j++)
 8002168:	7cbb      	ldrb	r3, [r7, #18]
 800216a:	3301      	adds	r3, #1
 800216c:	74bb      	strb	r3, [r7, #18]
 800216e:	7cba      	ldrb	r2, [r7, #18]
 8002170:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002174:	429a      	cmp	r2, r3
 8002176:	d3bc      	bcc.n	80020f2 <matrixMultiplyM2M+0x32>
      for(i = 0; i < rows1; i++)
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	3301      	adds	r3, #1
 800217c:	74fb      	strb	r3, [r7, #19]
 800217e:	7cfa      	ldrb	r2, [r7, #19]
 8002180:	7afb      	ldrb	r3, [r7, #11]
 8002182:	429a      	cmp	r2, r3
 8002184:	d3b2      	bcc.n	80020ec <matrixMultiplyM2M+0x2c>
}
 8002186:	bf00      	nop
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <matrixTranspose>:
      for (j = 0; j < columns; j++)
        *(new_m+i*columns+j) = (*(m1+i*columns+j)) - (*(m2+i*columns+j));
  }
}
void matrixTranspose(float *m, char rows, char columns, float *new_m)
{
 8002192:	b480      	push	{r7}
 8002194:	b087      	sub	sp, #28
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	72fb      	strb	r3, [r7, #11]
 80021a0:	4613      	mov	r3, r2
 80021a2:	72bb      	strb	r3, [r7, #10]
char i,j;
for(i = 0; i < rows; i++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	75fb      	strb	r3, [r7, #23]
 80021a8:	e022      	b.n	80021f0 <matrixTranspose+0x5e>
  for (j = 0; j < columns; j++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	75bb      	strb	r3, [r7, #22]
 80021ae:	e018      	b.n	80021e2 <matrixTranspose+0x50>
    *(new_m+j*rows+i) = *(m+i*columns+j);
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
 80021b2:	7aba      	ldrb	r2, [r7, #10]
 80021b4:	fb02 f303 	mul.w	r3, r2, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	7dbb      	ldrb	r3, [r7, #22]
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	441a      	add	r2, r3
 80021c4:	7dbb      	ldrb	r3, [r7, #22]
 80021c6:	7af9      	ldrb	r1, [r7, #11]
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4619      	mov	r1, r3
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	440b      	add	r3, r1
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	440b      	add	r3, r1
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	601a      	str	r2, [r3, #0]
  for (j = 0; j < columns; j++)
 80021dc:	7dbb      	ldrb	r3, [r7, #22]
 80021de:	3301      	adds	r3, #1
 80021e0:	75bb      	strb	r3, [r7, #22]
 80021e2:	7dba      	ldrb	r2, [r7, #22]
 80021e4:	7abb      	ldrb	r3, [r7, #10]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d3e2      	bcc.n	80021b0 <matrixTranspose+0x1e>
for(i = 0; i < rows; i++)
 80021ea:	7dfb      	ldrb	r3, [r7, #23]
 80021ec:	3301      	adds	r3, #1
 80021ee:	75fb      	strb	r3, [r7, #23]
 80021f0:	7dfa      	ldrb	r2, [r7, #23]
 80021f2:	7afb      	ldrb	r3, [r7, #11]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d3d8      	bcc.n	80021aa <matrixTranspose+0x18>
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	371c      	adds	r7, #28
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <matrixCofactor>:
void matrixCofactor(float *m, char size, float *new_m)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b0ec      	sub	sp, #432	; 0x1b0
 800220a:	af00      	add	r7, sp, #0
 800220c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002210:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002214:	6018      	str	r0, [r3, #0]
 8002216:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800221a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002224:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002228:	460a      	mov	r2, r1
 800222a:	701a      	strb	r2, [r3, #0]
//float *buf1 = malloc(sizeof(float) * (size-1) * (size-1));
  float bufxx[10][10];
  float *buf1=(float*)bufxx;
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
char i=0,j=0,k=0,l=0, c=0, d=0;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
 800223a:	2300      	movs	r3, #0
 800223c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8002240:	2300      	movs	r3, #0
 8002242:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8002246:	2300      	movs	r3, #0
 8002248:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
 800224c:	2300      	movs	r3, #0
 800224e:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 8002252:	2300      	movs	r3, #0
 8002254:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
signed char sign;

while (i<size)
 8002258:	e0f0      	b.n	800243c <matrixCofactor+0x236>
  {
    j = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
    while (j<size)
 8002260:	e0dd      	b.n	800241e <matrixCofactor+0x218>
      {
        k = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
        c = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
        if (((i+j)%2) == 0)
 800226e:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 8002272:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002276:	4413      	add	r3, r2
 8002278:	b2db      	uxtb	r3, r3
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <matrixCofactor+0x84>
          sign = 1;
 8002282:	2301      	movs	r3, #1
 8002284:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9
 8002288:	e066      	b.n	8002358 <matrixCofactor+0x152>
        else
          sign = -1;
 800228a:	23ff      	movs	r3, #255	; 0xff
 800228c:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9


        while (k<(size-1))
 8002290:	e062      	b.n	8002358 <matrixCofactor+0x152>
          {
            if (c == i)
 8002292:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 8002296:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 800229a:	429a      	cmp	r2, r3
 800229c:	d104      	bne.n	80022a8 <matrixCofactor+0xa2>
              c++;
 800229e:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 80022a2:	3301      	adds	r3, #1
 80022a4:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
            l = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
            d = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
            while(l<(size-1))
 80022b4:	e03c      	b.n	8002330 <matrixCofactor+0x12a>
              {
                if (d == j)
 80022b6:	f897 21aa 	ldrb.w	r2, [r7, #426]	; 0x1aa
 80022ba:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80022be:	429a      	cmp	r2, r3
 80022c0:	d104      	bne.n	80022cc <matrixCofactor+0xc6>
                  d++;
 80022c2:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 80022c6:	3301      	adds	r3, #1
 80022c8:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
                *(buf1+(size-1)*k+l) = *(m+size*c+d);
 80022cc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80022d0:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80022ec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	441a      	add	r2, r3
 80022f4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80022f8:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	3b01      	subs	r3, #1
 8002300:	f897 11ad 	ldrb.w	r1, [r7, #429]	; 0x1ad
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4619      	mov	r1, r3
 800230a:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 800230e:	440b      	add	r3, r1
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8002316:	440b      	add	r3, r1
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	601a      	str	r2, [r3, #0]
                l++;
 800231c:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 8002320:	3301      	adds	r3, #1
 8002322:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
                d++;
 8002326:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 800232a:	3301      	adds	r3, #1
 800232c:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
            while(l<(size-1))
 8002330:	f897 21ac 	ldrb.w	r2, [r7, #428]	; 0x1ac
 8002334:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002338:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	3b01      	subs	r3, #1
 8002340:	429a      	cmp	r2, r3
 8002342:	dbb8      	blt.n	80022b6 <matrixCofactor+0xb0>
              }
            k++;
 8002344:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8002348:	3301      	adds	r3, #1
 800234a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
            c++;
 800234e:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8002352:	3301      	adds	r3, #1
 8002354:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
        while (k<(size-1))
 8002358:	f897 21ad 	ldrb.w	r2, [r7, #429]	; 0x1ad
 800235c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002360:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	3b01      	subs	r3, #1
 8002368:	429a      	cmp	r2, r3
 800236a:	db92      	blt.n	8002292 <matrixCofactor+0x8c>
          }
          matrixDet_LU_Transform(buf1, size - 1,(new_m+size*i+j));
 800236c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002370:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	3b01      	subs	r3, #1
 8002378:	b2d9      	uxtb	r1, r3
 800237a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800237e:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 8002388:	fb02 f303 	mul.w	r3, r2, r3
 800238c:	461a      	mov	r2, r3
 800238e:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 800239a:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	461a      	mov	r2, r3
 80023a4:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 80023a8:	f000 f8be 	bl	8002528 <matrixDet_LU_Transform>
        *(new_m+size*i+j)*=sign;
 80023ac:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80023b0:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80023cc:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	ed93 7a00 	vldr	s14, [r3]
 80023d8:	f997 31a9 	ldrsb.w	r3, [r7, #425]	; 0x1a9
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80023e8:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8002404:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	4413      	add	r3, r2
 800240c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002410:	edc3 7a00 	vstr	s15, [r3]
        j++;
 8002414:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002418:	3301      	adds	r3, #1
 800241a:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
    while (j<size)
 800241e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002422:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002426:	f897 21ae 	ldrb.w	r2, [r7, #430]	; 0x1ae
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	f4ff af18 	bcc.w	8002262 <matrixCofactor+0x5c>
      }
    i++;
 8002432:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8002436:	3301      	adds	r3, #1
 8002438:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
while (i<size)
 800243c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002440:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002444:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	f4ff af05 	bcc.w	800225a <matrixCofactor+0x54>
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <matrixInverse>:
void matrixInverse(float *m, char size, float *new_m)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b0b3      	sub	sp, #204	; 0xcc
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	460b      	mov	r3, r1
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	72fb      	strb	r3, [r7, #11]
float buf1[4][4];// = malloc(sizeof(float) * size * size);
float buf2 [4][4];//= malloc(sizeof(float) * size * size);
float buf;
float buf3[3][3];
 float det ;
  matrixDet_LU_Transform(m, size,&det);
 800246a:	f107 0210 	add.w	r2, r7, #16
 800246e:	7afb      	ldrb	r3, [r7, #11]
 8002470:	4619      	mov	r1, r3
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f858 	bl	8002528 <matrixDet_LU_Transform>
char i,j;

matrixCofactor(m, size, &buf1[0][0]);
 8002478:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800247c:	7afb      	ldrb	r3, [r7, #11]
 800247e:	4619      	mov	r1, r3
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f7ff fec0 	bl	8002206 <matrixCofactor>
matrixTranspose(&buf1[0][0], size, size, &buf2[0][0]);
 8002486:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800248a:	7afa      	ldrb	r2, [r7, #11]
 800248c:	7af9      	ldrb	r1, [r7, #11]
 800248e:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002492:	f7ff fe7e 	bl	8002192 <matrixTranspose>

for (i = 1; i <= size; i++)
 8002496:	2301      	movs	r3, #1
 8002498:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800249c:	e034      	b.n	8002508 <matrixInverse+0xac>
  for (j = 1; j <= size; j++)
 800249e:	2301      	movs	r3, #1
 80024a0:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 80024a4:	e026      	b.n	80024f4 <matrixInverse+0x98>
    {
      buf = matrixGetCell(&buf1[0][0], size, size, i, j)/det;
 80024a6:	f897 40bf 	ldrb.w	r4, [r7, #191]	; 0xbf
 80024aa:	7afa      	ldrb	r2, [r7, #11]
 80024ac:	7af9      	ldrb	r1, [r7, #11]
 80024ae:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80024b2:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	4623      	mov	r3, r4
 80024ba:	f7ff fddc 	bl	8002076 <matrixGetCell>
 80024be:	eef0 6a40 	vmov.f32	s13, s0
 80024c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80024c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ca:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
      matrixSetCell((float*)buf3, size, size, i, j, buf);
 80024ce:	f897 40bf 	ldrb.w	r4, [r7, #191]	; 0xbf
 80024d2:	7afa      	ldrb	r2, [r7, #11]
 80024d4:	7af9      	ldrb	r1, [r7, #11]
 80024d6:	f107 0014 	add.w	r0, r7, #20
 80024da:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 80024e4:	4623      	mov	r3, r4
 80024e6:	f7ff fda1 	bl	800202c <matrixSetCell>
  for (j = 1; j <= size; j++)
 80024ea:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 80024ee:	3301      	adds	r3, #1
 80024f0:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 80024f4:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 80024f8:	7afb      	ldrb	r3, [r7, #11]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d9d3      	bls.n	80024a6 <matrixInverse+0x4a>
for (i = 1; i <= size; i++)
 80024fe:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8002502:	3301      	adds	r3, #1
 8002504:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8002508:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 800250c:	7afb      	ldrb	r3, [r7, #11]
 800250e:	429a      	cmp	r2, r3
 8002510:	d9c5      	bls.n	800249e <matrixInverse+0x42>
    }
matrixTranspose(&buf3[0][0], size, size, new_m);
 8002512:	7afa      	ldrb	r2, [r7, #11]
 8002514:	7af9      	ldrb	r1, [r7, #11]
 8002516:	f107 0014 	add.w	r0, r7, #20
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f7ff fe39 	bl	8002192 <matrixTranspose>
}
 8002520:	bf00      	nop
 8002522:	37c4      	adds	r7, #196	; 0xc4
 8002524:	46bd      	mov	sp, r7
 8002526:	bd90      	pop	{r4, r7, pc}

08002528 <matrixDet_LU_Transform>:
void matrixDet_LU_Transform(float *A, char n,float *out) //необходимо задать и�?ходную матрицу и переменную дл�? LU-матрицы
{
 8002528:	b480      	push	{r7}
 800252a:	b091      	sub	sp, #68	; 0x44
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	460b      	mov	r3, r1
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	72fb      	strb	r3, [r7, #11]
float temp = 0;//, *LU = malloc(sizeof(float) * n * n);
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	63fb      	str	r3, [r7, #60]	; 0x3c
float LU_ [3][3];
float * LU = (float*)LU_;
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
char i,j,k;
for (j = 0; j < n; j++)
 8002542:	2300      	movs	r3, #0
 8002544:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002548:	e02d      	b.n	80025a6 <matrixDet_LU_Transform+0x7e>
  {
    *(LU+j) = *(A+j);
 800254a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	441a      	add	r2, r3
 8002554:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800255c:	440b      	add	r3, r1
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	601a      	str	r2, [r3, #0]
    if (j >= 1)
 8002562:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002566:	2b00      	cmp	r3, #0
 8002568:	d018      	beq.n	800259c <matrixDet_LU_Transform+0x74>
      *(LU+j*n) = *(A+j*n)/(*LU);
 800256a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800256e:	7afa      	ldrb	r2, [r7, #11]
 8002570:	fb02 f303 	mul.w	r3, r2, r3
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4413      	add	r3, r2
 800257a:	edd3 6a00 	vldr	s13, [r3]
 800257e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002580:	ed93 7a00 	vldr	s14, [r3]
 8002584:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002588:	7afa      	ldrb	r2, [r7, #11]
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002592:	4413      	add	r3, r2
 8002594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002598:	edc3 7a00 	vstr	s15, [r3]
for (j = 0; j < n; j++)
 800259c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80025a0:	3301      	adds	r3, #1
 80025a2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80025a6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80025aa:	7afb      	ldrb	r3, [r7, #11]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d3cc      	bcc.n	800254a <matrixDet_LU_Transform+0x22>
  }
for (i = 1; i < n; i++)
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80025b6:	e0df      	b.n	8002778 <matrixDet_LU_Transform+0x250>
  {
    for (j = i; j < n; j++)
 80025b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80025bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80025c0:	e05a      	b.n	8002678 <matrixDet_LU_Transform+0x150>
      {
        for (k = 0; k <= (i-1); k++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80025c8:	e028      	b.n	800261c <matrixDet_LU_Transform+0xf4>
          temp += (*(LU+n*i+k))*(*(LU+k*n+j));
 80025ca:	7afb      	ldrb	r3, [r7, #11]
 80025cc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80025d0:	fb02 f303 	mul.w	r3, r2, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025e0:	4413      	add	r3, r2
 80025e2:	ed93 7a00 	vldr	s14, [r3]
 80025e6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80025ea:	7afa      	ldrb	r2, [r7, #11]
 80025ec:	fb02 f303 	mul.w	r3, r2, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025fc:	4413      	add	r3, r2
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002606:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800260a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        for (k = 0; k <= (i-1); k++)
 8002612:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002616:	3301      	adds	r3, #1
 8002618:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800261c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002620:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002624:	429a      	cmp	r2, r3
 8002626:	d8d0      	bhi.n	80025ca <matrixDet_LU_Transform+0xa2>
        *(LU+i*n+j) = *(A+i*n+j) - temp;
 8002628:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800262c:	7afa      	ldrb	r2, [r7, #11]
 800262e:	fb02 f303 	mul.w	r3, r2, r3
 8002632:	461a      	mov	r2, r3
 8002634:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	ed93 7a00 	vldr	s14, [r3]
 8002644:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002648:	7afa      	ldrb	r2, [r7, #11]
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	461a      	mov	r2, r3
 8002650:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800265a:	4413      	add	r3, r2
 800265c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002664:	edc3 7a00 	vstr	s15, [r3]
        temp = 0;
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (j = i; j < n; j++)
 800266e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002672:	3301      	adds	r3, #1
 8002674:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002678:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800267c:	7afb      	ldrb	r3, [r7, #11]
 800267e:	429a      	cmp	r2, r3
 8002680:	d39f      	bcc.n	80025c2 <matrixDet_LU_Transform+0x9a>
      }
    for (j = i+1; j < n; j++)
 8002682:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002686:	3301      	adds	r3, #1
 8002688:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800268c:	e06a      	b.n	8002764 <matrixDet_LU_Transform+0x23c>
      {
        for (k = 0; k <= (i-1); k++)
 800268e:	2300      	movs	r3, #0
 8002690:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002694:	e028      	b.n	80026e8 <matrixDet_LU_Transform+0x1c0>
          temp += (*(LU+j*n+k))*(*(LU+k*n+i));
 8002696:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800269a:	7afa      	ldrb	r2, [r7, #11]
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026ac:	4413      	add	r3, r2
 80026ae:	ed93 7a00 	vldr	s14, [r3]
 80026b2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80026b6:	7afa      	ldrb	r2, [r7, #11]
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026c8:	4413      	add	r3, r2
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80026d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026da:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        for (k = 0; k <= (i-1); k++)
 80026de:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80026e2:	3301      	adds	r3, #1
 80026e4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80026e8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80026ec:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d8d0      	bhi.n	8002696 <matrixDet_LU_Transform+0x16e>
        *(LU+j*n+i) = ((*(A+j*n+i)) - temp)/(*(LU+i*n+i));
 80026f4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80026f8:	7afa      	ldrb	r2, [r7, #11]
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	ed93 7a00 	vldr	s14, [r3]
 8002710:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002714:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002718:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800271c:	7afa      	ldrb	r2, [r7, #11]
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	461a      	mov	r2, r3
 8002724:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800272e:	4413      	add	r3, r2
 8002730:	ed93 7a00 	vldr	s14, [r3]
 8002734:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002738:	7afa      	ldrb	r2, [r7, #11]
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	461a      	mov	r2, r3
 8002740:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800274a:	4413      	add	r3, r2
 800274c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002750:	edc3 7a00 	vstr	s15, [r3]
        temp = 0;
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (j = i+1; j < n; j++)
 800275a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800275e:	3301      	adds	r3, #1
 8002760:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002764:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002768:	7afb      	ldrb	r3, [r7, #11]
 800276a:	429a      	cmp	r2, r3
 800276c:	d38f      	bcc.n	800268e <matrixDet_LU_Transform+0x166>
for (i = 1; i < n; i++)
 800276e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002772:	3301      	adds	r3, #1
 8002774:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002778:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800277c:	7afb      	ldrb	r3, [r7, #11]
 800277e:	429a      	cmp	r2, r3
 8002780:	f4ff af1a 	bcc.w	80025b8 <matrixDet_LU_Transform+0x90>
      }
  }
temp = 1;
 8002784:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002788:	63fb      	str	r3, [r7, #60]	; 0x3c
for (i = 0; i < n; i++)
 800278a:	2300      	movs	r3, #0
 800278c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002790:	e018      	b.n	80027c4 <matrixDet_LU_Transform+0x29c>
  temp *= *(LU+i*n+i);
 8002792:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002796:	7afa      	ldrb	r2, [r7, #11]
 8002798:	fb02 f303 	mul.w	r3, r2, r3
 800279c:	461a      	mov	r2, r3
 800279e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027a8:	4413      	add	r3, r2
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80027b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
for (i = 0; i < n; i++)
 80027ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80027be:	3301      	adds	r3, #1
 80027c0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80027c4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80027c8:	7afb      	ldrb	r3, [r7, #11]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d3e1      	bcc.n	8002792 <matrixDet_LU_Transform+0x26a>
*out=temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027d2:	601a      	str	r2, [r3, #0]
}
 80027d4:	bf00      	nop
 80027d6:	3744      	adds	r7, #68	; 0x44
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	convert_typedef();
 80027e4:	f7ff f9dc 	bl	8001ba0 <convert_typedef>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027e8:	f001 fac6 	bl	8003d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ec:	f000 f8c0 	bl	8002970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027f0:	f7fe fa6e 	bl	8000cd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80027f4:	f7fe fa4c 	bl	8000c90 <MX_DMA_Init>
  MX_TIM4_Init();
 80027f8:	f000 fd7e 	bl	80032f8 <MX_TIM4_Init>
  MX_TIM3_Init();
 80027fc:	f000 fd28 	bl	8003250 <MX_TIM3_Init>
  MX_TIM1_Init();
 8002800:	f000 fc7a 	bl	80030f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002804:	f000 fcd0 	bl	80031a8 <MX_TIM2_Init>
  MX_TIM8_Init();
 8002808:	f000 fe5c 	bl	80034c4 <MX_TIM8_Init>
  MX_TIM7_Init();
 800280c:	f000 fe24 	bl	8003458 <MX_TIM7_Init>
  MX_TIM6_Init();
 8002810:	f000 fdec 	bl	80033ec <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8002814:	f001 f9da 	bl	8003bcc <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8002818:	f000 fefe 	bl	8003618 <MX_TIM10_Init>
  MX_TIM11_Init();
 800281c:	f000 ff20 	bl	8003660 <MX_TIM11_Init>
  MX_TIM9_Init();
 8002820:	f000 fea8 	bl	8003574 <MX_TIM9_Init>
  MX_TIM12_Init();
 8002824:	f000 ff40 	bl	80036a8 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002828:	2100      	movs	r1, #0
 800282a:	4841      	ldr	r0, [pc, #260]	; (8002930 <main+0x150>)
 800282c:	f002 ffc4 	bl	80057b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002830:	2104      	movs	r1, #4
 8002832:	483f      	ldr	r0, [pc, #252]	; (8002930 <main+0x150>)
 8002834:	f002 ffc0 	bl	80057b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002838:	2108      	movs	r1, #8
 800283a:	483d      	ldr	r0, [pc, #244]	; (8002930 <main+0x150>)
 800283c:	f002 ffbc 	bl	80057b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002840:	210c      	movs	r1, #12
 8002842:	483b      	ldr	r0, [pc, #236]	; (8002930 <main+0x150>)
 8002844:	f002 ffb8 	bl	80057b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8002848:	2100      	movs	r1, #0
 800284a:	483a      	ldr	r0, [pc, #232]	; (8002934 <main+0x154>)
 800284c:	f002 ffb4 	bl	80057b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8002850:	2104      	movs	r1, #4
 8002852:	4838      	ldr	r0, [pc, #224]	; (8002934 <main+0x154>)
 8002854:	f002 ffb0 	bl	80057b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002858:	2100      	movs	r1, #0
 800285a:	4837      	ldr	r0, [pc, #220]	; (8002938 <main+0x158>)
 800285c:	f002 ffac 	bl	80057b8 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8002860:	213c      	movs	r1, #60	; 0x3c
 8002862:	4836      	ldr	r0, [pc, #216]	; (800293c <main+0x15c>)
 8002864:	f003 f916 	bl	8005a94 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002868:	213c      	movs	r1, #60	; 0x3c
 800286a:	4835      	ldr	r0, [pc, #212]	; (8002940 <main+0x160>)
 800286c:	f003 f912 	bl	8005a94 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002870:	213c      	movs	r1, #60	; 0x3c
 8002872:	4834      	ldr	r0, [pc, #208]	; (8002944 <main+0x164>)
 8002874:	f003 f90e 	bl	8005a94 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002878:	213c      	movs	r1, #60	; 0x3c
 800287a:	4833      	ldr	r0, [pc, #204]	; (8002948 <main+0x168>)
 800287c:	f003 f90a 	bl	8005a94 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8002880:	4832      	ldr	r0, [pc, #200]	; (800294c <main+0x16c>)
 8002882:	f002 fed9 	bl	8005638 <HAL_TIM_Base_Start_IT>



  HAL_UART_Receive_DMA (&huart1, rx_data, 1);
 8002886:	2201      	movs	r2, #1
 8002888:	4931      	ldr	r1, [pc, #196]	; (8002950 <main+0x170>)
 800288a:	4832      	ldr	r0, [pc, #200]	; (8002954 <main+0x174>)
 800288c:	f003 fedf 	bl	800664e <HAL_UART_Receive_DMA>
  target_speed[0] = 0;
 8002890:	4b31      	ldr	r3, [pc, #196]	; (8002958 <main+0x178>)
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
  target_speed[1] = 0;
 8002898:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <main+0x178>)
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	605a      	str	r2, [r3, #4]
  target_speed[2] = 0;
 80028a0:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <main+0x178>)
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  quest_xy[0][0] = 0;
 80028a8:	4b2c      	ldr	r3, [pc, #176]	; (800295c <main+0x17c>)
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
  quest_xy[0][1] = 0;
 80028b0:	4b2a      	ldr	r3, [pc, #168]	; (800295c <main+0x17c>)
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	605a      	str	r2, [r3, #4]
  quest_xy[0][2] = 1;
 80028b8:	4b28      	ldr	r3, [pc, #160]	; (800295c <main+0x17c>)
 80028ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028be:	609a      	str	r2, [r3, #8]



  ////////////////////

  position = 0;
 80028c0:	4b27      	ldr	r3, [pc, #156]	; (8002960 <main+0x180>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]

  switch_lim(1);
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7fe fcda 	bl	8001280 <switch_lim>
  servo_control(0,0);
 80028cc:	2100      	movs	r1, #0
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fe fcaa 	bl	8001228 <servo_control>
  servo_control(1,0);
 80028d4:	2100      	movs	r1, #0
 80028d6:	2001      	movs	r0, #1
 80028d8:	f7fe fca6 	bl	8001228 <servo_control>
  HAL_Delay(500);
 80028dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028e0:	f001 fabc 	bl	8003e5c <HAL_Delay>
  servo_control(0 , 1);
 80028e4:	2101      	movs	r1, #1
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7fe fc9e 	bl	8001228 <servo_control>
  switch_lim(2);
 80028ec:	2002      	movs	r0, #2
 80028ee:	f7fe fcc7 	bl	8001280 <switch_lim>
  Move_robot_coordinates_X_Y_W(0.2,0.4,0.0,0.5,0.0);
 80028f2:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 8002964 <main+0x184>
 80028f6:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80028fa:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8002964 <main+0x184>
 80028fe:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8002968 <main+0x188>
 8002902:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800296c <main+0x18c>
 8002906:	f7fe fd37 	bl	8001378 <Move_robot_coordinates_X_Y_W>
  servo_control(0,1);
 800290a:	2101      	movs	r1, #1
 800290c:	2000      	movs	r0, #0
 800290e:	f7fe fc8b 	bl	8001228 <servo_control>
  switch_lim(3);
 8002912:	2003      	movs	r0, #3
 8002914:	f7fe fcb4 	bl	8001280 <switch_lim>
  HAL_Delay(200);
 8002918:	20c8      	movs	r0, #200	; 0xc8
 800291a:	f001 fa9f 	bl	8003e5c <HAL_Delay>
  servo_control(1,1);
 800291e:	2101      	movs	r1, #1
 8002920:	2001      	movs	r0, #1
 8002922:	f7fe fc81 	bl	8001228 <servo_control>
  servo_control(0,0);
 8002926:	2100      	movs	r1, #0
 8002928:	2000      	movs	r0, #0
 800292a:	f7fe fc7d 	bl	8001228 <servo_control>
/////////////////
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800292e:	e7fe      	b.n	800292e <main+0x14e>
 8002930:	200004ac 	.word	0x200004ac
 8002934:	200005cc 	.word	0x200005cc
 8002938:	200006a4 	.word	0x200006a4
 800293c:	20000584 	.word	0x20000584
 8002940:	2000041c 	.word	0x2000041c
 8002944:	20000464 	.word	0x20000464
 8002948:	200003d4 	.word	0x200003d4
 800294c:	200004f4 	.word	0x200004f4
 8002950:	200002b4 	.word	0x200002b4
 8002954:	200006ec 	.word	0x200006ec
 8002958:	200001ec 	.word	0x200001ec
 800295c:	20000240 	.word	0x20000240
 8002960:	200002ac 	.word	0x200002ac
 8002964:	00000000 	.word	0x00000000
 8002968:	3ecccccd 	.word	0x3ecccccd
 800296c:	3e4ccccd 	.word	0x3e4ccccd

08002970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b094      	sub	sp, #80	; 0x50
 8002974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002976:	f107 0320 	add.w	r3, r7, #32
 800297a:	2230      	movs	r2, #48	; 0x30
 800297c:	2100      	movs	r1, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f004 ff1a 	bl	80077b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002994:	2300      	movs	r3, #0
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <SystemClock_Config+0xcc>)
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	4a27      	ldr	r2, [pc, #156]	; (8002a3c <SystemClock_Config+0xcc>)
 800299e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a2:	6413      	str	r3, [r2, #64]	; 0x40
 80029a4:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <SystemClock_Config+0xcc>)
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029b0:	2300      	movs	r3, #0
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <SystemClock_Config+0xd0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <SystemClock_Config+0xd0>)
 80029ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <SystemClock_Config+0xd0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029cc:	2302      	movs	r3, #2
 80029ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029d0:	2301      	movs	r3, #1
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029d4:	2310      	movs	r3, #16
 80029d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029d8:	2302      	movs	r3, #2
 80029da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029dc:	2300      	movs	r3, #0
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029e0:	2308      	movs	r3, #8
 80029e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80029e4:	23a8      	movs	r3, #168	; 0xa8
 80029e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029e8:	2302      	movs	r3, #2
 80029ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80029ec:	2307      	movs	r3, #7
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029f0:	f107 0320 	add.w	r3, r7, #32
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 f937 	bl	8004c68 <HAL_RCC_OscConfig>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a00:	f000 f820 	bl	8002a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a04:	230f      	movs	r3, #15
 8002a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	2105      	movs	r1, #5
 8002a22:	4618      	mov	r0, r3
 8002a24:	f002 fb98 	bl	8005158 <HAL_RCC_ClockConfig>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002a2e:	f000 f809 	bl	8002a44 <Error_Handler>
  }
}
 8002a32:	bf00      	nop
 8002a34:	3750      	adds	r7, #80	; 0x50
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40007000 	.word	0x40007000

08002a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a48:	b672      	cpsid	i
}
 8002a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a4c:	e7fe      	b.n	8002a4c <Error_Handler+0x8>
	...

08002a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <HAL_MspInit+0x4c>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <HAL_MspInit+0x4c>)
 8002a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a64:	6453      	str	r3, [r2, #68]	; 0x44
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_MspInit+0x4c>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_MspInit+0x4c>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a08      	ldr	r2, [pc, #32]	; (8002a9c <HAL_MspInit+0x4c>)
 8002a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_MspInit+0x4c>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a8e:	2007      	movs	r0, #7
 8002a90:	f001 fad8 	bl	8004044 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800

08002aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aa4:	e7fe      	b.n	8002aa4 <NMI_Handler+0x4>

08002aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aaa:	e7fe      	b.n	8002aaa <HardFault_Handler+0x4>

08002aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <MemManage_Handler+0x4>

08002ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <BusFault_Handler+0x4>

08002ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002abc:	e7fe      	b.n	8002abc <UsageFault_Handler+0x4>

08002abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aec:	f001 f996 	bl	8003e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002af0:	bf00      	nop
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <USART1_IRQHandler+0x10>)
 8002afa:	f003 fdd9 	bl	80066b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200006ec 	.word	0x200006ec

08002b08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b08:	b5b0      	push	{r4, r5, r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */


	Enc_Counter_0_now = TIM8->CNT;
 8002b0e:	4bb8      	ldr	r3, [pc, #736]	; (8002df0 <TIM6_DAC_IRQHandler+0x2e8>)
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	b21a      	sxth	r2, r3
 8002b14:	4bb7      	ldr	r3, [pc, #732]	; (8002df4 <TIM6_DAC_IRQHandler+0x2ec>)
 8002b16:	801a      	strh	r2, [r3, #0]
	Enc_Counter_1_now = TIM2->CNT;
 8002b18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	b21a      	sxth	r2, r3
 8002b20:	4bb5      	ldr	r3, [pc, #724]	; (8002df8 <TIM6_DAC_IRQHandler+0x2f0>)
 8002b22:	801a      	strh	r2, [r3, #0]
	Enc_Counter_2_now = TIM3->CNT;
 8002b24:	4bb5      	ldr	r3, [pc, #724]	; (8002dfc <TIM6_DAC_IRQHandler+0x2f4>)
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	b21a      	sxth	r2, r3
 8002b2a:	4bb5      	ldr	r3, [pc, #724]	; (8002e00 <TIM6_DAC_IRQHandler+0x2f8>)
 8002b2c:	801a      	strh	r2, [r3, #0]
	Enc_Counter_3_now = TIM1->CNT;
 8002b2e:	4bb5      	ldr	r3, [pc, #724]	; (8002e04 <TIM6_DAC_IRQHandler+0x2fc>)
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	b21a      	sxth	r2, r3
 8002b34:	4bb4      	ldr	r3, [pc, #720]	; (8002e08 <TIM6_DAC_IRQHandler+0x300>)
 8002b36:	801a      	strh	r2, [r3, #0]

	 Enc_Counter_0 = TIM8->CNT;
 8002b38:	4bad      	ldr	r3, [pc, #692]	; (8002df0 <TIM6_DAC_IRQHandler+0x2e8>)
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	b21a      	sxth	r2, r3
 8002b3e:	4bb3      	ldr	r3, [pc, #716]	; (8002e0c <TIM6_DAC_IRQHandler+0x304>)
 8002b40:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_1 = TIM2->CNT;
 8002b42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	b21a      	sxth	r2, r3
 8002b4a:	4bb1      	ldr	r3, [pc, #708]	; (8002e10 <TIM6_DAC_IRQHandler+0x308>)
 8002b4c:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_2 = TIM3->CNT;
 8002b4e:	4bab      	ldr	r3, [pc, #684]	; (8002dfc <TIM6_DAC_IRQHandler+0x2f4>)
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	b21a      	sxth	r2, r3
 8002b54:	4baf      	ldr	r3, [pc, #700]	; (8002e14 <TIM6_DAC_IRQHandler+0x30c>)
 8002b56:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_3 = TIM1->CNT;
 8002b58:	4baa      	ldr	r3, [pc, #680]	; (8002e04 <TIM6_DAC_IRQHandler+0x2fc>)
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	b21a      	sxth	r2, r3
 8002b5e:	4bae      	ldr	r3, [pc, #696]	; (8002e18 <TIM6_DAC_IRQHandler+0x310>)
 8002b60:	801a      	strh	r2, [r3, #0]

	 result_speed_0 = ((float)Enc_Counter_0) *  pi_Radius_pulse_enc * 100.0;
 8002b62:	4baa      	ldr	r3, [pc, #680]	; (8002e0c <TIM6_DAC_IRQHandler+0x304>)
 8002b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b68:	ee07 3a90 	vmov	s15, r3
 8002b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b70:	ee17 0a90 	vmov	r0, s15
 8002b74:	f7fd fdb6 	bl	80006e4 <__aeabi_f2d>
 8002b78:	a397      	add	r3, pc, #604	; (adr r3, 8002dd8 <TIM6_DAC_IRQHandler+0x2d0>)
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	f7fd fb23 	bl	80001c8 <__aeabi_dmul>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4610      	mov	r0, r2
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	4ba3      	ldr	r3, [pc, #652]	; (8002e1c <TIM6_DAC_IRQHandler+0x314>)
 8002b90:	f7fd fb1a 	bl	80001c8 <__aeabi_dmul>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f7fd feaa 	bl	80008f4 <__aeabi_d2f>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4a9f      	ldr	r2, [pc, #636]	; (8002e20 <TIM6_DAC_IRQHandler+0x318>)
 8002ba4:	6013      	str	r3, [r2, #0]
	 result_speed_1 = ((float)Enc_Counter_1) *  pi_Radius_pulse_enc * 100.0;
 8002ba6:	4b9a      	ldr	r3, [pc, #616]	; (8002e10 <TIM6_DAC_IRQHandler+0x308>)
 8002ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bac:	ee07 3a90 	vmov	s15, r3
 8002bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb4:	ee17 0a90 	vmov	r0, s15
 8002bb8:	f7fd fd94 	bl	80006e4 <__aeabi_f2d>
 8002bbc:	a386      	add	r3, pc, #536	; (adr r3, 8002dd8 <TIM6_DAC_IRQHandler+0x2d0>)
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f7fd fb01 	bl	80001c8 <__aeabi_dmul>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	4b92      	ldr	r3, [pc, #584]	; (8002e1c <TIM6_DAC_IRQHandler+0x314>)
 8002bd4:	f7fd faf8 	bl	80001c8 <__aeabi_dmul>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	f7fd fe88 	bl	80008f4 <__aeabi_d2f>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4a8f      	ldr	r2, [pc, #572]	; (8002e24 <TIM6_DAC_IRQHandler+0x31c>)
 8002be8:	6013      	str	r3, [r2, #0]
	 result_speed_2 = ((float)Enc_Counter_2) *  pi_Radius_pulse_enc * 100.0;
 8002bea:	4b8a      	ldr	r3, [pc, #552]	; (8002e14 <TIM6_DAC_IRQHandler+0x30c>)
 8002bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf0:	ee07 3a90 	vmov	s15, r3
 8002bf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf8:	ee17 0a90 	vmov	r0, s15
 8002bfc:	f7fd fd72 	bl	80006e4 <__aeabi_f2d>
 8002c00:	a375      	add	r3, pc, #468	; (adr r3, 8002dd8 <TIM6_DAC_IRQHandler+0x2d0>)
 8002c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c06:	f7fd fadf 	bl	80001c8 <__aeabi_dmul>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	4b81      	ldr	r3, [pc, #516]	; (8002e1c <TIM6_DAC_IRQHandler+0x314>)
 8002c18:	f7fd fad6 	bl	80001c8 <__aeabi_dmul>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4610      	mov	r0, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	f7fd fe66 	bl	80008f4 <__aeabi_d2f>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4a7f      	ldr	r2, [pc, #508]	; (8002e28 <TIM6_DAC_IRQHandler+0x320>)
 8002c2c:	6013      	str	r3, [r2, #0]
	 result_speed_3 = ((float)Enc_Counter_3) *  pi_Radius_pulse_enc * 100.0;
 8002c2e:	4b7a      	ldr	r3, [pc, #488]	; (8002e18 <TIM6_DAC_IRQHandler+0x310>)
 8002c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c3c:	ee17 0a90 	vmov	r0, s15
 8002c40:	f7fd fd50 	bl	80006e4 <__aeabi_f2d>
 8002c44:	a364      	add	r3, pc, #400	; (adr r3, 8002dd8 <TIM6_DAC_IRQHandler+0x2d0>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f7fd fabd 	bl	80001c8 <__aeabi_dmul>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	4b70      	ldr	r3, [pc, #448]	; (8002e1c <TIM6_DAC_IRQHandler+0x314>)
 8002c5c:	f7fd fab4 	bl	80001c8 <__aeabi_dmul>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	f7fd fe44 	bl	80008f4 <__aeabi_d2f>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4a6f      	ldr	r2, [pc, #444]	; (8002e2c <TIM6_DAC_IRQHandler+0x324>)
 8002c70:	6013      	str	r3, [r2, #0]

	 TIM8->CNT = 0;
 8002c72:	4b5f      	ldr	r3, [pc, #380]	; (8002df0 <TIM6_DAC_IRQHandler+0x2e8>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM2->CNT = 0;
 8002c78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM3->CNT = 0;
 8002c80:	4b5e      	ldr	r3, [pc, #376]	; (8002dfc <TIM6_DAC_IRQHandler+0x2f4>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM1->CNT = 0;
 8002c86:	4b5f      	ldr	r3, [pc, #380]	; (8002e04 <TIM6_DAC_IRQHandler+0x2fc>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24
	 Wheel_1.current = result_speed_0;
 8002c8c:	4b64      	ldr	r3, [pc, #400]	; (8002e20 <TIM6_DAC_IRQHandler+0x318>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a67      	ldr	r2, [pc, #412]	; (8002e30 <TIM6_DAC_IRQHandler+0x328>)
 8002c92:	6153      	str	r3, [r2, #20]
		Wheel_2.current = result_speed_1;
 8002c94:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <TIM6_DAC_IRQHandler+0x31c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a66      	ldr	r2, [pc, #408]	; (8002e34 <TIM6_DAC_IRQHandler+0x32c>)
 8002c9a:	6153      	str	r3, [r2, #20]
		Wheel_3.current = result_speed_2;
 8002c9c:	4b62      	ldr	r3, [pc, #392]	; (8002e28 <TIM6_DAC_IRQHandler+0x320>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a65      	ldr	r2, [pc, #404]	; (8002e38 <TIM6_DAC_IRQHandler+0x330>)
 8002ca2:	6153      	str	r3, [r2, #20]
		Wheel_4.current = result_speed_3;
 8002ca4:	4b61      	ldr	r3, [pc, #388]	; (8002e2c <TIM6_DAC_IRQHandler+0x324>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a64      	ldr	r2, [pc, #400]	; (8002e3c <TIM6_DAC_IRQHandler+0x334>)
 8002caa:	6153      	str	r3, [r2, #20]


	 PID_Controller(&Wheel_1);
 8002cac:	4860      	ldr	r0, [pc, #384]	; (8002e30 <TIM6_DAC_IRQHandler+0x328>)
 8002cae:	f7ff f937 	bl	8001f20 <PID_Controller>
	 PID_Controller(&Wheel_2);
 8002cb2:	4860      	ldr	r0, [pc, #384]	; (8002e34 <TIM6_DAC_IRQHandler+0x32c>)
 8002cb4:	f7ff f934 	bl	8001f20 <PID_Controller>
	 PID_Controller(&Wheel_3);
 8002cb8:	485f      	ldr	r0, [pc, #380]	; (8002e38 <TIM6_DAC_IRQHandler+0x330>)
 8002cba:	f7ff f931 	bl	8001f20 <PID_Controller>
	 PID_Controller(&Wheel_4);
 8002cbe:	485f      	ldr	r0, [pc, #380]	; (8002e3c <TIM6_DAC_IRQHandler+0x334>)
 8002cc0:	f7ff f92e 	bl	8001f20 <PID_Controller>

	 fi = fi + speed_W * 0.01;
 8002cc4:	4b5e      	ldr	r3, [pc, #376]	; (8002e40 <TIM6_DAC_IRQHandler+0x338>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fd0b 	bl	80006e4 <__aeabi_f2d>
 8002cce:	4604      	mov	r4, r0
 8002cd0:	460d      	mov	r5, r1
 8002cd2:	4b5c      	ldr	r3, [pc, #368]	; (8002e44 <TIM6_DAC_IRQHandler+0x33c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd fd04 	bl	80006e4 <__aeabi_f2d>
 8002cdc:	a340      	add	r3, pc, #256	; (adr r3, 8002de0 <TIM6_DAC_IRQHandler+0x2d8>)
 8002cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce2:	f7fd fa71 	bl	80001c8 <__aeabi_dmul>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4620      	mov	r0, r4
 8002cec:	4629      	mov	r1, r5
 8002cee:	f7fd fb9b 	bl	8000428 <__adddf3>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f7fd fdfb 	bl	80008f4 <__aeabi_d2f>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4a4f      	ldr	r2, [pc, #316]	; (8002e40 <TIM6_DAC_IRQHandler+0x338>)
 8002d02:	6013      	str	r3, [r2, #0]
	 delta_UV[0][0] = speed_U *0.01;
 8002d04:	4b50      	ldr	r3, [pc, #320]	; (8002e48 <TIM6_DAC_IRQHandler+0x340>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fceb 	bl	80006e4 <__aeabi_f2d>
 8002d0e:	a334      	add	r3, pc, #208	; (adr r3, 8002de0 <TIM6_DAC_IRQHandler+0x2d8>)
 8002d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d14:	f7fd fa58 	bl	80001c8 <__aeabi_dmul>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7fd fde8 	bl	80008f4 <__aeabi_d2f>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4a49      	ldr	r2, [pc, #292]	; (8002e4c <TIM6_DAC_IRQHandler+0x344>)
 8002d28:	6013      	str	r3, [r2, #0]
	 delta_UV[0][1] = speed_V *0.01;
 8002d2a:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <TIM6_DAC_IRQHandler+0x348>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fcd8 	bl	80006e4 <__aeabi_f2d>
 8002d34:	a32a      	add	r3, pc, #168	; (adr r3, 8002de0 <TIM6_DAC_IRQHandler+0x2d8>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f7fd fa45 	bl	80001c8 <__aeabi_dmul>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	f7fd fdd5 	bl	80008f4 <__aeabi_d2f>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4a3f      	ldr	r2, [pc, #252]	; (8002e4c <TIM6_DAC_IRQHandler+0x344>)
 8002d4e:	6053      	str	r3, [r2, #4]
	 if(fi>=(2*pi)) fi = fi-2*pi;
 8002d50:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <TIM6_DAC_IRQHandler+0x338>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fcc5 	bl	80006e4 <__aeabi_f2d>
 8002d5a:	a323      	add	r3, pc, #140	; (adr r3, 8002de8 <TIM6_DAC_IRQHandler+0x2e0>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	f7fd fd8c 	bl	800087c <__aeabi_dcmpge>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d012      	beq.n	8002d90 <TIM6_DAC_IRQHandler+0x288>
 8002d6a:	4b35      	ldr	r3, [pc, #212]	; (8002e40 <TIM6_DAC_IRQHandler+0x338>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fcb8 	bl	80006e4 <__aeabi_f2d>
 8002d74:	a31c      	add	r3, pc, #112	; (adr r3, 8002de8 <TIM6_DAC_IRQHandler+0x2e0>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f7fd fb53 	bl	8000424 <__aeabi_dsub>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	f7fd fdb5 	bl	80008f4 <__aeabi_d2f>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4a2c      	ldr	r2, [pc, #176]	; (8002e40 <TIM6_DAC_IRQHandler+0x338>)
 8002d8e:	6013      	str	r3, [r2, #0]
	 if(fi<0.0)	 fi = fi+2*pi;
 8002d90:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <TIM6_DAC_IRQHandler+0x338>)
 8002d92:	edd3 7a00 	vldr	s15, [r3]
 8002d96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9e:	d512      	bpl.n	8002dc6 <TIM6_DAC_IRQHandler+0x2be>
 8002da0:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <TIM6_DAC_IRQHandler+0x338>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fc9d 	bl	80006e4 <__aeabi_f2d>
 8002daa:	a30f      	add	r3, pc, #60	; (adr r3, 8002de8 <TIM6_DAC_IRQHandler+0x2e0>)
 8002dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db0:	f7fd fb3a 	bl	8000428 <__adddf3>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f7fd fd9a 	bl	80008f4 <__aeabi_d2f>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4a1f      	ldr	r2, [pc, #124]	; (8002e40 <TIM6_DAC_IRQHandler+0x338>)
 8002dc4:	6013      	str	r3, [r2, #0]
	 if(quest_FI>fi){
 8002dc6:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <TIM6_DAC_IRQHandler+0x34c>)
 8002dc8:	ed93 7a00 	vldr	s14, [r3]
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <TIM6_DAC_IRQHandler+0x338>)
 8002dce:	edd3 7a00 	vldr	s15, [r3]
 8002dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd6:	e03f      	b.n	8002e58 <TIM6_DAC_IRQHandler+0x350>
 8002dd8:	ce34e015 	.word	0xce34e015
 8002ddc:	3f16194c 	.word	0x3f16194c
 8002de0:	47ae147b 	.word	0x47ae147b
 8002de4:	3f847ae1 	.word	0x3f847ae1
 8002de8:	54442d18 	.word	0x54442d18
 8002dec:	401921fb 	.word	0x401921fb
 8002df0:	40010400 	.word	0x40010400
 8002df4:	20000390 	.word	0x20000390
 8002df8:	20000392 	.word	0x20000392
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	20000394 	.word	0x20000394
 8002e04:	40010000 	.word	0x40010000
 8002e08:	20000396 	.word	0x20000396
 8002e0c:	20000388 	.word	0x20000388
 8002e10:	2000038a 	.word	0x2000038a
 8002e14:	2000038c 	.word	0x2000038c
 8002e18:	2000038e 	.word	0x2000038e
 8002e1c:	40590000 	.word	0x40590000
 8002e20:	2000039c 	.word	0x2000039c
 8002e24:	200003a0 	.word	0x200003a0
 8002e28:	200003a4 	.word	0x200003a4
 8002e2c:	200003a8 	.word	0x200003a8
 8002e30:	200000ec 	.word	0x200000ec
 8002e34:	2000012c 	.word	0x2000012c
 8002e38:	2000016c 	.word	0x2000016c
 8002e3c:	200001ac 	.word	0x200001ac
 8002e40:	20000070 	.word	0x20000070
 8002e44:	2000023c 	.word	0x2000023c
 8002e48:	20000234 	.word	0x20000234
 8002e4c:	200003bc 	.word	0x200003bc
 8002e50:	20000238 	.word	0x20000238
 8002e54:	200002a4 	.word	0x200002a4
 8002e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5c:	dd4a      	ble.n	8002ef4 <TIM6_DAC_IRQHandler+0x3ec>
		 if((quest_FI-fi)>pi){
 8002e5e:	4b8e      	ldr	r3, [pc, #568]	; (8003098 <TIM6_DAC_IRQHandler+0x590>)
 8002e60:	ed93 7a00 	vldr	s14, [r3]
 8002e64:	4b8d      	ldr	r3, [pc, #564]	; (800309c <TIM6_DAC_IRQHandler+0x594>)
 8002e66:	edd3 7a00 	vldr	s15, [r3]
 8002e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6e:	ee17 0a90 	vmov	r0, s15
 8002e72:	f7fd fc37 	bl	80006e4 <__aeabi_f2d>
 8002e76:	a384      	add	r3, pc, #528	; (adr r3, 8003088 <TIM6_DAC_IRQHandler+0x580>)
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f7fd fd08 	bl	8000890 <__aeabi_dcmpgt>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d027      	beq.n	8002ed6 <TIM6_DAC_IRQHandler+0x3ce>
			delta_fi = (2*pi-quest_FI+fi);
 8002e86:	4b84      	ldr	r3, [pc, #528]	; (8003098 <TIM6_DAC_IRQHandler+0x590>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd fc2a 	bl	80006e4 <__aeabi_f2d>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	a17e      	add	r1, pc, #504	; (adr r1, 8003090 <TIM6_DAC_IRQHandler+0x588>)
 8002e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e9a:	f7fd fac3 	bl	8000424 <__aeabi_dsub>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4614      	mov	r4, r2
 8002ea4:	461d      	mov	r5, r3
 8002ea6:	4b7d      	ldr	r3, [pc, #500]	; (800309c <TIM6_DAC_IRQHandler+0x594>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fc1a 	bl	80006e4 <__aeabi_f2d>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	f7fd fab6 	bl	8000428 <__adddf3>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	f7fd fd16 	bl	80008f4 <__aeabi_d2f>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4a75      	ldr	r2, [pc, #468]	; (80030a0 <TIM6_DAC_IRQHandler+0x598>)
 8002ecc:	6013      	str	r3, [r2, #0]
			flaging = 1;
 8002ece:	4b75      	ldr	r3, [pc, #468]	; (80030a4 <TIM6_DAC_IRQHandler+0x59c>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	e058      	b.n	8002f88 <TIM6_DAC_IRQHandler+0x480>
		 }
		 else {

			 delta_fi = (quest_FI - fi);
 8002ed6:	4b70      	ldr	r3, [pc, #448]	; (8003098 <TIM6_DAC_IRQHandler+0x590>)
 8002ed8:	ed93 7a00 	vldr	s14, [r3]
 8002edc:	4b6f      	ldr	r3, [pc, #444]	; (800309c <TIM6_DAC_IRQHandler+0x594>)
 8002ede:	edd3 7a00 	vldr	s15, [r3]
 8002ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee6:	4b6e      	ldr	r3, [pc, #440]	; (80030a0 <TIM6_DAC_IRQHandler+0x598>)
 8002ee8:	edc3 7a00 	vstr	s15, [r3]
			 flaging = 2;
 8002eec:	4b6d      	ldr	r3, [pc, #436]	; (80030a4 <TIM6_DAC_IRQHandler+0x59c>)
 8002eee:	2202      	movs	r2, #2
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	e049      	b.n	8002f88 <TIM6_DAC_IRQHandler+0x480>
		 }

	 }
	 else{
		 if((fi-quest_FI)>pi){
 8002ef4:	4b69      	ldr	r3, [pc, #420]	; (800309c <TIM6_DAC_IRQHandler+0x594>)
 8002ef6:	ed93 7a00 	vldr	s14, [r3]
 8002efa:	4b67      	ldr	r3, [pc, #412]	; (8003098 <TIM6_DAC_IRQHandler+0x590>)
 8002efc:	edd3 7a00 	vldr	s15, [r3]
 8002f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f04:	ee17 0a90 	vmov	r0, s15
 8002f08:	f7fd fbec 	bl	80006e4 <__aeabi_f2d>
 8002f0c:	a35e      	add	r3, pc, #376	; (adr r3, 8003088 <TIM6_DAC_IRQHandler+0x580>)
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	f7fd fcbd 	bl	8000890 <__aeabi_dcmpgt>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d027      	beq.n	8002f6c <TIM6_DAC_IRQHandler+0x464>
			 flaging = 3;
 8002f1c:	4b61      	ldr	r3, [pc, #388]	; (80030a4 <TIM6_DAC_IRQHandler+0x59c>)
 8002f1e:	2203      	movs	r2, #3
 8002f20:	701a      	strb	r2, [r3, #0]
			delta_fi =  2*pi-fi+quest_FI;;
 8002f22:	4b5e      	ldr	r3, [pc, #376]	; (800309c <TIM6_DAC_IRQHandler+0x594>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd fbdc 	bl	80006e4 <__aeabi_f2d>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	a157      	add	r1, pc, #348	; (adr r1, 8003090 <TIM6_DAC_IRQHandler+0x588>)
 8002f32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f36:	f7fd fa75 	bl	8000424 <__aeabi_dsub>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4614      	mov	r4, r2
 8002f40:	461d      	mov	r5, r3
 8002f42:	4b55      	ldr	r3, [pc, #340]	; (8003098 <TIM6_DAC_IRQHandler+0x590>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fbcc 	bl	80006e4 <__aeabi_f2d>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4620      	mov	r0, r4
 8002f52:	4629      	mov	r1, r5
 8002f54:	f7fd fa68 	bl	8000428 <__adddf3>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f7fd fcc8 	bl	80008f4 <__aeabi_d2f>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4a4e      	ldr	r2, [pc, #312]	; (80030a0 <TIM6_DAC_IRQHandler+0x598>)
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e00d      	b.n	8002f88 <TIM6_DAC_IRQHandler+0x480>

		 }
		 else {
			 flaging = 4;
 8002f6c:	4b4d      	ldr	r3, [pc, #308]	; (80030a4 <TIM6_DAC_IRQHandler+0x59c>)
 8002f6e:	2204      	movs	r2, #4
 8002f70:	701a      	strb	r2, [r3, #0]
			 delta_fi = fi-quest_FI;
 8002f72:	4b4a      	ldr	r3, [pc, #296]	; (800309c <TIM6_DAC_IRQHandler+0x594>)
 8002f74:	ed93 7a00 	vldr	s14, [r3]
 8002f78:	4b47      	ldr	r3, [pc, #284]	; (8003098 <TIM6_DAC_IRQHandler+0x590>)
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f82:	4b47      	ldr	r3, [pc, #284]	; (80030a0 <TIM6_DAC_IRQHandler+0x598>)
 8002f84:	edc3 7a00 	vstr	s15, [r3]
		 }


	 }

	 UV_convert_xy[0][0] = cos(fi);
 8002f88:	4b44      	ldr	r3, [pc, #272]	; (800309c <TIM6_DAC_IRQHandler+0x594>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd fba9 	bl	80006e4 <__aeabi_f2d>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	ec43 2b10 	vmov	d0, r2, r3
 8002f9a:	f004 fc4d 	bl	8007838 <cos>
 8002f9e:	ec53 2b10 	vmov	r2, r3, d0
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f7fd fca5 	bl	80008f4 <__aeabi_d2f>
 8002faa:	4603      	mov	r3, r0
 8002fac:	4a3e      	ldr	r2, [pc, #248]	; (80030a8 <TIM6_DAC_IRQHandler+0x5a0>)
 8002fae:	6013      	str	r3, [r2, #0]
	 UV_convert_xy[0][1] = sin(fi);
 8002fb0:	4b3a      	ldr	r3, [pc, #232]	; (800309c <TIM6_DAC_IRQHandler+0x594>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fb95 	bl	80006e4 <__aeabi_f2d>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	ec43 2b10 	vmov	d0, r2, r3
 8002fc2:	f004 fc8d 	bl	80078e0 <sin>
 8002fc6:	ec53 2b10 	vmov	r2, r3, d0
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f7fd fc91 	bl	80008f4 <__aeabi_d2f>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4a34      	ldr	r2, [pc, #208]	; (80030a8 <TIM6_DAC_IRQHandler+0x5a0>)
 8002fd6:	6053      	str	r3, [r2, #4]
	 UV_convert_xy[1][1] = cos(fi);
 8002fd8:	4b30      	ldr	r3, [pc, #192]	; (800309c <TIM6_DAC_IRQHandler+0x594>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd fb81 	bl	80006e4 <__aeabi_f2d>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	ec43 2b10 	vmov	d0, r2, r3
 8002fea:	f004 fc25 	bl	8007838 <cos>
 8002fee:	ec53 2b10 	vmov	r2, r3, d0
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f7fd fc7d 	bl	80008f4 <__aeabi_d2f>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4a2a      	ldr	r2, [pc, #168]	; (80030a8 <TIM6_DAC_IRQHandler+0x5a0>)
 8002ffe:	60d3      	str	r3, [r2, #12]
	 UV_convert_xy[1][0] = -sin(fi);
 8003000:	4b26      	ldr	r3, [pc, #152]	; (800309c <TIM6_DAC_IRQHandler+0x594>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd fb6d 	bl	80006e4 <__aeabi_f2d>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	ec43 2b10 	vmov	d0, r2, r3
 8003012:	f004 fc65 	bl	80078e0 <sin>
 8003016:	ec53 2b10 	vmov	r2, r3, d0
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	f7fd fc69 	bl	80008f4 <__aeabi_d2f>
 8003022:	4603      	mov	r3, r0
 8003024:	ee07 3a90 	vmov	s15, r3
 8003028:	eef1 7a67 	vneg.f32	s15, s15
 800302c:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <TIM6_DAC_IRQHandler+0x5a0>)
 800302e:	edc3 7a02 	vstr	s15, [r3, #8]

	 matrixMultiplyM2M(&delta_UV[0][0],1,2,&UV_convert_xy[0][0],2,2,&delta_XY[0][0]);
 8003032:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <TIM6_DAC_IRQHandler+0x5a4>)
 8003034:	9302      	str	r3, [sp, #8]
 8003036:	2302      	movs	r3, #2
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	2302      	movs	r3, #2
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	4b1a      	ldr	r3, [pc, #104]	; (80030a8 <TIM6_DAC_IRQHandler+0x5a0>)
 8003040:	2202      	movs	r2, #2
 8003042:	2101      	movs	r1, #1
 8003044:	481a      	ldr	r0, [pc, #104]	; (80030b0 <TIM6_DAC_IRQHandler+0x5a8>)
 8003046:	f7ff f83b 	bl	80020c0 <matrixMultiplyM2M>
	 position_x = position_x +  delta_XY[0][0];
 800304a:	4b18      	ldr	r3, [pc, #96]	; (80030ac <TIM6_DAC_IRQHandler+0x5a4>)
 800304c:	ed93 7a00 	vldr	s14, [r3]
 8003050:	4b18      	ldr	r3, [pc, #96]	; (80030b4 <TIM6_DAC_IRQHandler+0x5ac>)
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800305a:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <TIM6_DAC_IRQHandler+0x5ac>)
 800305c:	edc3 7a00 	vstr	s15, [r3]
	 position_y = position_y +  delta_XY[0][1];
 8003060:	4b12      	ldr	r3, [pc, #72]	; (80030ac <TIM6_DAC_IRQHandler+0x5a4>)
 8003062:	ed93 7a01 	vldr	s14, [r3, #4]
 8003066:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <TIM6_DAC_IRQHandler+0x5b0>)
 8003068:	edd3 7a00 	vldr	s15, [r3]
 800306c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <TIM6_DAC_IRQHandler+0x5b0>)
 8003072:	edc3 7a00 	vstr	s15, [r3]


  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003076:	4811      	ldr	r0, [pc, #68]	; (80030bc <TIM6_DAC_IRQHandler+0x5b4>)
 8003078:	f002 fd9a 	bl	8005bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	bdb0      	pop	{r4, r5, r7, pc}
 8003082:	bf00      	nop
 8003084:	f3af 8000 	nop.w
 8003088:	54442d18 	.word	0x54442d18
 800308c:	400921fb 	.word	0x400921fb
 8003090:	54442d18 	.word	0x54442d18
 8003094:	401921fb 	.word	0x401921fb
 8003098:	200002a4 	.word	0x200002a4
 800309c:	20000070 	.word	0x20000070
 80030a0:	20000230 	.word	0x20000230
 80030a4:	20000398 	.word	0x20000398
 80030a8:	200003ac 	.word	0x200003ac
 80030ac:	200003c4 	.word	0x200003c4
 80030b0:	200003bc 	.word	0x200003bc
 80030b4:	200003cc 	.word	0x200003cc
 80030b8:	200003d0 	.word	0x200003d0
 80030bc:	200004f4 	.word	0x200004f4

080030c0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80030c4:	4802      	ldr	r0, [pc, #8]	; (80030d0 <DMA2_Stream2_IRQHandler+0x10>)
 80030c6:	f001 f997 	bl	80043f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000730 	.word	0x20000730

080030d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <SystemInit+0x20>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <SystemInit+0x20>)
 80030e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08c      	sub	sp, #48	; 0x30
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80030fe:	f107 030c 	add.w	r3, r7, #12
 8003102:	2224      	movs	r2, #36	; 0x24
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f004 fb56 	bl	80077b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003114:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <MX_TIM1_Init+0xa8>)
 8003116:	4a23      	ldr	r2, [pc, #140]	; (80031a4 <MX_TIM1_Init+0xac>)
 8003118:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800311a:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <MX_TIM1_Init+0xa8>)
 800311c:	2200      	movs	r2, #0
 800311e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003120:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <MX_TIM1_Init+0xa8>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003126:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <MX_TIM1_Init+0xa8>)
 8003128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800312c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800312e:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <MX_TIM1_Init+0xa8>)
 8003130:	2200      	movs	r2, #0
 8003132:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003134:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <MX_TIM1_Init+0xa8>)
 8003136:	2200      	movs	r2, #0
 8003138:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800313a:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <MX_TIM1_Init+0xa8>)
 800313c:	2200      	movs	r2, #0
 800313e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003140:	2301      	movs	r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003148:	2301      	movs	r3, #1
 800314a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800314c:	2300      	movs	r3, #0
 800314e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003154:	2300      	movs	r3, #0
 8003156:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003158:	2301      	movs	r3, #1
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800315c:	2300      	movs	r3, #0
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	4619      	mov	r1, r3
 800316a:	480d      	ldr	r0, [pc, #52]	; (80031a0 <MX_TIM1_Init+0xa8>)
 800316c:	f002 fbec 	bl	8005948 <HAL_TIM_Encoder_Init>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003176:	f7ff fc65 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003182:	1d3b      	adds	r3, r7, #4
 8003184:	4619      	mov	r1, r3
 8003186:	4806      	ldr	r0, [pc, #24]	; (80031a0 <MX_TIM1_Init+0xa8>)
 8003188:	f003 f984 	bl	8006494 <HAL_TIMEx_MasterConfigSynchronization>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003192:	f7ff fc57 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003196:	bf00      	nop
 8003198:	3730      	adds	r7, #48	; 0x30
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	200003d4 	.word	0x200003d4
 80031a4:	40010000 	.word	0x40010000

080031a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08c      	sub	sp, #48	; 0x30
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031ae:	f107 030c 	add.w	r3, r7, #12
 80031b2:	2224      	movs	r2, #36	; 0x24
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f004 fafe 	bl	80077b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031bc:	1d3b      	adds	r3, r7, #4
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031c4:	4b21      	ldr	r3, [pc, #132]	; (800324c <MX_TIM2_Init+0xa4>)
 80031c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80031cc:	4b1f      	ldr	r3, [pc, #124]	; (800324c <MX_TIM2_Init+0xa4>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d2:	4b1e      	ldr	r3, [pc, #120]	; (800324c <MX_TIM2_Init+0xa4>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80031d8:	4b1c      	ldr	r3, [pc, #112]	; (800324c <MX_TIM2_Init+0xa4>)
 80031da:	f04f 32ff 	mov.w	r2, #4294967295
 80031de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e0:	4b1a      	ldr	r3, [pc, #104]	; (800324c <MX_TIM2_Init+0xa4>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e6:	4b19      	ldr	r3, [pc, #100]	; (800324c <MX_TIM2_Init+0xa4>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80031ec:	2301      	movs	r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031f4:	2301      	movs	r3, #1
 80031f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003200:	2300      	movs	r3, #0
 8003202:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003204:	2301      	movs	r3, #1
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003208:	2300      	movs	r3, #0
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003210:	f107 030c 	add.w	r3, r7, #12
 8003214:	4619      	mov	r1, r3
 8003216:	480d      	ldr	r0, [pc, #52]	; (800324c <MX_TIM2_Init+0xa4>)
 8003218:	f002 fb96 	bl	8005948 <HAL_TIM_Encoder_Init>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003222:	f7ff fc0f 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800322e:	1d3b      	adds	r3, r7, #4
 8003230:	4619      	mov	r1, r3
 8003232:	4806      	ldr	r0, [pc, #24]	; (800324c <MX_TIM2_Init+0xa4>)
 8003234:	f003 f92e 	bl	8006494 <HAL_TIMEx_MasterConfigSynchronization>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800323e:	f7ff fc01 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003242:	bf00      	nop
 8003244:	3730      	adds	r7, #48	; 0x30
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	2000041c 	.word	0x2000041c

08003250 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08c      	sub	sp, #48	; 0x30
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003256:	f107 030c 	add.w	r3, r7, #12
 800325a:	2224      	movs	r2, #36	; 0x24
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f004 faaa 	bl	80077b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003264:	1d3b      	adds	r3, r7, #4
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800326c:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <MX_TIM3_Init+0xa0>)
 800326e:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <MX_TIM3_Init+0xa4>)
 8003270:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003272:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <MX_TIM3_Init+0xa0>)
 8003274:	2200      	movs	r2, #0
 8003276:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003278:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <MX_TIM3_Init+0xa0>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800327e:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <MX_TIM3_Init+0xa0>)
 8003280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003284:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003286:	4b1a      	ldr	r3, [pc, #104]	; (80032f0 <MX_TIM3_Init+0xa0>)
 8003288:	2200      	movs	r2, #0
 800328a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800328c:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <MX_TIM3_Init+0xa0>)
 800328e:	2200      	movs	r2, #0
 8003290:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003292:	2301      	movs	r3, #1
 8003294:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003296:	2300      	movs	r3, #0
 8003298:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800329a:	2301      	movs	r3, #1
 800329c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80032a6:	2300      	movs	r3, #0
 80032a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032aa:	2301      	movs	r3, #1
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032ae:	2300      	movs	r3, #0
 80032b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80032b6:	f107 030c 	add.w	r3, r7, #12
 80032ba:	4619      	mov	r1, r3
 80032bc:	480c      	ldr	r0, [pc, #48]	; (80032f0 <MX_TIM3_Init+0xa0>)
 80032be:	f002 fb43 	bl	8005948 <HAL_TIM_Encoder_Init>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80032c8:	f7ff fbbc 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032cc:	2300      	movs	r3, #0
 80032ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	4619      	mov	r1, r3
 80032d8:	4805      	ldr	r0, [pc, #20]	; (80032f0 <MX_TIM3_Init+0xa0>)
 80032da:	f003 f8db 	bl	8006494 <HAL_TIMEx_MasterConfigSynchronization>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80032e4:	f7ff fbae 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80032e8:	bf00      	nop
 80032ea:	3730      	adds	r7, #48	; 0x30
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000464 	.word	0x20000464
 80032f4:	40000400 	.word	0x40000400

080032f8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032fe:	f107 0320 	add.w	r3, r7, #32
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	611a      	str	r2, [r3, #16]
 8003316:	615a      	str	r2, [r3, #20]
 8003318:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800331a:	4b32      	ldr	r3, [pc, #200]	; (80033e4 <MX_TIM4_Init+0xec>)
 800331c:	4a32      	ldr	r2, [pc, #200]	; (80033e8 <MX_TIM4_Init+0xf0>)
 800331e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003320:	4b30      	ldr	r3, [pc, #192]	; (80033e4 <MX_TIM4_Init+0xec>)
 8003322:	2200      	movs	r2, #0
 8003324:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003326:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <MX_TIM4_Init+0xec>)
 8003328:	2200      	movs	r2, #0
 800332a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800332c:	4b2d      	ldr	r3, [pc, #180]	; (80033e4 <MX_TIM4_Init+0xec>)
 800332e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003332:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003334:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <MX_TIM4_Init+0xec>)
 8003336:	2200      	movs	r2, #0
 8003338:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800333a:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <MX_TIM4_Init+0xec>)
 800333c:	2200      	movs	r2, #0
 800333e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003340:	4828      	ldr	r0, [pc, #160]	; (80033e4 <MX_TIM4_Init+0xec>)
 8003342:	f002 f9e9 	bl	8005718 <HAL_TIM_PWM_Init>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800334c:	f7ff fb7a 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003350:	2300      	movs	r3, #0
 8003352:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003358:	f107 0320 	add.w	r3, r7, #32
 800335c:	4619      	mov	r1, r3
 800335e:	4821      	ldr	r0, [pc, #132]	; (80033e4 <MX_TIM4_Init+0xec>)
 8003360:	f003 f898 	bl	8006494 <HAL_TIMEx_MasterConfigSynchronization>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800336a:	f7ff fb6b 	bl	8002a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800336e:	2360      	movs	r3, #96	; 0x60
 8003370:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800337e:	1d3b      	adds	r3, r7, #4
 8003380:	2200      	movs	r2, #0
 8003382:	4619      	mov	r1, r3
 8003384:	4817      	ldr	r0, [pc, #92]	; (80033e4 <MX_TIM4_Init+0xec>)
 8003386:	f002 fd1b 	bl	8005dc0 <HAL_TIM_PWM_ConfigChannel>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003390:	f7ff fb58 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003394:	1d3b      	adds	r3, r7, #4
 8003396:	2204      	movs	r2, #4
 8003398:	4619      	mov	r1, r3
 800339a:	4812      	ldr	r0, [pc, #72]	; (80033e4 <MX_TIM4_Init+0xec>)
 800339c:	f002 fd10 	bl	8005dc0 <HAL_TIM_PWM_ConfigChannel>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80033a6:	f7ff fb4d 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	2208      	movs	r2, #8
 80033ae:	4619      	mov	r1, r3
 80033b0:	480c      	ldr	r0, [pc, #48]	; (80033e4 <MX_TIM4_Init+0xec>)
 80033b2:	f002 fd05 	bl	8005dc0 <HAL_TIM_PWM_ConfigChannel>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80033bc:	f7ff fb42 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033c0:	1d3b      	adds	r3, r7, #4
 80033c2:	220c      	movs	r2, #12
 80033c4:	4619      	mov	r1, r3
 80033c6:	4807      	ldr	r0, [pc, #28]	; (80033e4 <MX_TIM4_Init+0xec>)
 80033c8:	f002 fcfa 	bl	8005dc0 <HAL_TIM_PWM_ConfigChannel>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80033d2:	f7ff fb37 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80033d6:	4803      	ldr	r0, [pc, #12]	; (80033e4 <MX_TIM4_Init+0xec>)
 80033d8:	f000 fb6c 	bl	8003ab4 <HAL_TIM_MspPostInit>

}
 80033dc:	bf00      	nop
 80033de:	3728      	adds	r7, #40	; 0x28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	200004ac 	.word	0x200004ac
 80033e8:	40000800 	.word	0x40000800

080033ec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f2:	463b      	mov	r3, r7
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <MX_TIM6_Init+0x64>)
 80033fc:	4a15      	ldr	r2, [pc, #84]	; (8003454 <MX_TIM6_Init+0x68>)
 80033fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 21;
 8003400:	4b13      	ldr	r3, [pc, #76]	; (8003450 <MX_TIM6_Init+0x64>)
 8003402:	2215      	movs	r2, #21
 8003404:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003406:	4b12      	ldr	r3, [pc, #72]	; (8003450 <MX_TIM6_Init+0x64>)
 8003408:	2200      	movs	r2, #0
 800340a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 39999;
 800340c:	4b10      	ldr	r3, [pc, #64]	; (8003450 <MX_TIM6_Init+0x64>)
 800340e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003412:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <MX_TIM6_Init+0x64>)
 8003416:	2200      	movs	r2, #0
 8003418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800341a:	480d      	ldr	r0, [pc, #52]	; (8003450 <MX_TIM6_Init+0x64>)
 800341c:	f002 f8bc 	bl	8005598 <HAL_TIM_Base_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003426:	f7ff fb0d 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003432:	463b      	mov	r3, r7
 8003434:	4619      	mov	r1, r3
 8003436:	4806      	ldr	r0, [pc, #24]	; (8003450 <MX_TIM6_Init+0x64>)
 8003438:	f003 f82c 	bl	8006494 <HAL_TIMEx_MasterConfigSynchronization>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003442:	f7ff faff 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	200004f4 	.word	0x200004f4
 8003454:	40001000 	.word	0x40001000

08003458 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800345e:	463b      	mov	r3, r7
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003466:	4b15      	ldr	r3, [pc, #84]	; (80034bc <MX_TIM7_Init+0x64>)
 8003468:	4a15      	ldr	r2, [pc, #84]	; (80034c0 <MX_TIM7_Init+0x68>)
 800346a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800346c:	4b13      	ldr	r3, [pc, #76]	; (80034bc <MX_TIM7_Init+0x64>)
 800346e:	2200      	movs	r2, #0
 8003470:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003472:	4b12      	ldr	r3, [pc, #72]	; (80034bc <MX_TIM7_Init+0x64>)
 8003474:	2200      	movs	r2, #0
 8003476:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003478:	4b10      	ldr	r3, [pc, #64]	; (80034bc <MX_TIM7_Init+0x64>)
 800347a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800347e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <MX_TIM7_Init+0x64>)
 8003482:	2200      	movs	r2, #0
 8003484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003486:	480d      	ldr	r0, [pc, #52]	; (80034bc <MX_TIM7_Init+0x64>)
 8003488:	f002 f886 	bl	8005598 <HAL_TIM_Base_Init>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003492:	f7ff fad7 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800349a:	2300      	movs	r3, #0
 800349c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800349e:	463b      	mov	r3, r7
 80034a0:	4619      	mov	r1, r3
 80034a2:	4806      	ldr	r0, [pc, #24]	; (80034bc <MX_TIM7_Init+0x64>)
 80034a4:	f002 fff6 	bl	8006494 <HAL_TIMEx_MasterConfigSynchronization>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80034ae:	f7ff fac9 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	2000053c 	.word	0x2000053c
 80034c0:	40001400 	.word	0x40001400

080034c4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08c      	sub	sp, #48	; 0x30
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80034ca:	f107 030c 	add.w	r3, r7, #12
 80034ce:	2224      	movs	r2, #36	; 0x24
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f004 f970 	bl	80077b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034d8:	1d3b      	adds	r3, r7, #4
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80034e0:	4b22      	ldr	r3, [pc, #136]	; (800356c <MX_TIM8_Init+0xa8>)
 80034e2:	4a23      	ldr	r2, [pc, #140]	; (8003570 <MX_TIM8_Init+0xac>)
 80034e4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80034e6:	4b21      	ldr	r3, [pc, #132]	; (800356c <MX_TIM8_Init+0xa8>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ec:	4b1f      	ldr	r3, [pc, #124]	; (800356c <MX_TIM8_Init+0xa8>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80034f2:	4b1e      	ldr	r3, [pc, #120]	; (800356c <MX_TIM8_Init+0xa8>)
 80034f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034f8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034fa:	4b1c      	ldr	r3, [pc, #112]	; (800356c <MX_TIM8_Init+0xa8>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003500:	4b1a      	ldr	r3, [pc, #104]	; (800356c <MX_TIM8_Init+0xa8>)
 8003502:	2200      	movs	r2, #0
 8003504:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003506:	4b19      	ldr	r3, [pc, #100]	; (800356c <MX_TIM8_Init+0xa8>)
 8003508:	2200      	movs	r2, #0
 800350a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800350c:	2301      	movs	r3, #1
 800350e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003514:	2301      	movs	r3, #1
 8003516:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003518:	2300      	movs	r3, #0
 800351a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003520:	2300      	movs	r3, #0
 8003522:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003524:	2301      	movs	r3, #1
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003528:	2300      	movs	r3, #0
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003530:	f107 030c 	add.w	r3, r7, #12
 8003534:	4619      	mov	r1, r3
 8003536:	480d      	ldr	r0, [pc, #52]	; (800356c <MX_TIM8_Init+0xa8>)
 8003538:	f002 fa06 	bl	8005948 <HAL_TIM_Encoder_Init>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003542:	f7ff fa7f 	bl	8002a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003546:	2300      	movs	r3, #0
 8003548:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800354a:	2300      	movs	r3, #0
 800354c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800354e:	1d3b      	adds	r3, r7, #4
 8003550:	4619      	mov	r1, r3
 8003552:	4806      	ldr	r0, [pc, #24]	; (800356c <MX_TIM8_Init+0xa8>)
 8003554:	f002 ff9e 	bl	8006494 <HAL_TIMEx_MasterConfigSynchronization>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800355e:	f7ff fa71 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003562:	bf00      	nop
 8003564:	3730      	adds	r7, #48	; 0x30
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000584 	.word	0x20000584
 8003570:	40010400 	.word	0x40010400

08003574 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800357a:	1d3b      	adds	r3, r7, #4
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
 8003588:	615a      	str	r2, [r3, #20]
 800358a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800358c:	4b20      	ldr	r3, [pc, #128]	; (8003610 <MX_TIM9_Init+0x9c>)
 800358e:	4a21      	ldr	r2, [pc, #132]	; (8003614 <MX_TIM9_Init+0xa0>)
 8003590:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 3359;
 8003592:	4b1f      	ldr	r3, [pc, #124]	; (8003610 <MX_TIM9_Init+0x9c>)
 8003594:	f640 521f 	movw	r2, #3359	; 0xd1f
 8003598:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800359a:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <MX_TIM9_Init+0x9c>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80035a0:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <MX_TIM9_Init+0x9c>)
 80035a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035a6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035a8:	4b19      	ldr	r3, [pc, #100]	; (8003610 <MX_TIM9_Init+0x9c>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ae:	4b18      	ldr	r3, [pc, #96]	; (8003610 <MX_TIM9_Init+0x9c>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80035b4:	4816      	ldr	r0, [pc, #88]	; (8003610 <MX_TIM9_Init+0x9c>)
 80035b6:	f002 f8af 	bl	8005718 <HAL_TIM_PWM_Init>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 80035c0:	f7ff fa40 	bl	8002a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035c4:	2360      	movs	r3, #96	; 0x60
 80035c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	2200      	movs	r2, #0
 80035d8:	4619      	mov	r1, r3
 80035da:	480d      	ldr	r0, [pc, #52]	; (8003610 <MX_TIM9_Init+0x9c>)
 80035dc:	f002 fbf0 	bl	8005dc0 <HAL_TIM_PWM_ConfigChannel>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 80035e6:	f7ff fa2d 	bl	8002a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035ea:	1d3b      	adds	r3, r7, #4
 80035ec:	2204      	movs	r2, #4
 80035ee:	4619      	mov	r1, r3
 80035f0:	4807      	ldr	r0, [pc, #28]	; (8003610 <MX_TIM9_Init+0x9c>)
 80035f2:	f002 fbe5 	bl	8005dc0 <HAL_TIM_PWM_ConfigChannel>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 80035fc:	f7ff fa22 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003600:	4803      	ldr	r0, [pc, #12]	; (8003610 <MX_TIM9_Init+0x9c>)
 8003602:	f000 fa57 	bl	8003ab4 <HAL_TIM_MspPostInit>

}
 8003606:	bf00      	nop
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200005cc 	.word	0x200005cc
 8003614:	40014000 	.word	0x40014000

08003618 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800361c:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <MX_TIM10_Init+0x40>)
 800361e:	4a0f      	ldr	r2, [pc, #60]	; (800365c <MX_TIM10_Init+0x44>)
 8003620:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 90;
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <MX_TIM10_Init+0x40>)
 8003624:	225a      	movs	r2, #90	; 0x5a
 8003626:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <MX_TIM10_Init+0x40>)
 800362a:	2200      	movs	r2, #0
 800362c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 39999;
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <MX_TIM10_Init+0x40>)
 8003630:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003634:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <MX_TIM10_Init+0x40>)
 8003638:	2200      	movs	r2, #0
 800363a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <MX_TIM10_Init+0x40>)
 800363e:	2200      	movs	r2, #0
 8003640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003642:	4805      	ldr	r0, [pc, #20]	; (8003658 <MX_TIM10_Init+0x40>)
 8003644:	f001 ffa8 	bl	8005598 <HAL_TIM_Base_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800364e:	f7ff f9f9 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000614 	.word	0x20000614
 800365c:	40014400 	.word	0x40014400

08003660 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003664:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <MX_TIM11_Init+0x40>)
 8003666:	4a0f      	ldr	r2, [pc, #60]	; (80036a4 <MX_TIM11_Init+0x44>)
 8003668:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 90;
 800366a:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <MX_TIM11_Init+0x40>)
 800366c:	225a      	movs	r2, #90	; 0x5a
 800366e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <MX_TIM11_Init+0x40>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 39999;
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <MX_TIM11_Init+0x40>)
 8003678:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800367c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800367e:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <MX_TIM11_Init+0x40>)
 8003680:	2200      	movs	r2, #0
 8003682:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <MX_TIM11_Init+0x40>)
 8003686:	2200      	movs	r2, #0
 8003688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800368a:	4805      	ldr	r0, [pc, #20]	; (80036a0 <MX_TIM11_Init+0x40>)
 800368c:	f001 ff84 	bl	8005598 <HAL_TIM_Base_Init>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003696:	f7ff f9d5 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800369a:	bf00      	nop
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	2000065c 	.word	0x2000065c
 80036a4:	40014800 	.word	0x40014800

080036a8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	609a      	str	r2, [r3, #8]
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	611a      	str	r2, [r3, #16]
 80036bc:	615a      	str	r2, [r3, #20]
 80036be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80036c0:	4b1a      	ldr	r3, [pc, #104]	; (800372c <MX_TIM12_Init+0x84>)
 80036c2:	4a1b      	ldr	r2, [pc, #108]	; (8003730 <MX_TIM12_Init+0x88>)
 80036c4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80036c6:	4b19      	ldr	r3, [pc, #100]	; (800372c <MX_TIM12_Init+0x84>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036cc:	4b17      	ldr	r3, [pc, #92]	; (800372c <MX_TIM12_Init+0x84>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80036d2:	4b16      	ldr	r3, [pc, #88]	; (800372c <MX_TIM12_Init+0x84>)
 80036d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036d8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036da:	4b14      	ldr	r3, [pc, #80]	; (800372c <MX_TIM12_Init+0x84>)
 80036dc:	2200      	movs	r2, #0
 80036de:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e0:	4b12      	ldr	r3, [pc, #72]	; (800372c <MX_TIM12_Init+0x84>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80036e6:	4811      	ldr	r0, [pc, #68]	; (800372c <MX_TIM12_Init+0x84>)
 80036e8:	f002 f816 	bl	8005718 <HAL_TIM_PWM_Init>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80036f2:	f7ff f9a7 	bl	8002a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036f6:	2360      	movs	r3, #96	; 0x60
 80036f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	2200      	movs	r2, #0
 800370a:	4619      	mov	r1, r3
 800370c:	4807      	ldr	r0, [pc, #28]	; (800372c <MX_TIM12_Init+0x84>)
 800370e:	f002 fb57 	bl	8005dc0 <HAL_TIM_PWM_ConfigChannel>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8003718:	f7ff f994 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800371c:	4803      	ldr	r0, [pc, #12]	; (800372c <MX_TIM12_Init+0x84>)
 800371e:	f000 f9c9 	bl	8003ab4 <HAL_TIM_MspPostInit>

}
 8003722:	bf00      	nop
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	200006a4 	.word	0x200006a4
 8003730:	40001800 	.word	0x40001800

08003734 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b090      	sub	sp, #64	; 0x40
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800373c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	60da      	str	r2, [r3, #12]
 800374a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a74      	ldr	r2, [pc, #464]	; (8003924 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d12d      	bne.n	80037b2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
 800375a:	4b73      	ldr	r3, [pc, #460]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	4a72      	ldr	r2, [pc, #456]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	6453      	str	r3, [r2, #68]	; 0x44
 8003766:	4b70      	ldr	r3, [pc, #448]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	4b6c      	ldr	r3, [pc, #432]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	4a6b      	ldr	r2, [pc, #428]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800377c:	f043 0310 	orr.w	r3, r3, #16
 8003780:	6313      	str	r3, [r2, #48]	; 0x30
 8003782:	4b69      	ldr	r3, [pc, #420]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_4_A_Pin|ENC_4_B_Pin;
 800378e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003794:	2302      	movs	r3, #2
 8003796:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003798:	2301      	movs	r3, #1
 800379a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379c:	2300      	movs	r3, #0
 800379e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037a0:	2301      	movs	r3, #1
 80037a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037a8:	4619      	mov	r1, r3
 80037aa:	4860      	ldr	r0, [pc, #384]	; (800392c <HAL_TIM_Encoder_MspInit+0x1f8>)
 80037ac:	f001 f88e 	bl	80048cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80037b0:	e0b3      	b.n	800391a <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM2)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ba:	d14b      	bne.n	8003854 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037bc:	2300      	movs	r3, #0
 80037be:	623b      	str	r3, [r7, #32]
 80037c0:	4b59      	ldr	r3, [pc, #356]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	4a58      	ldr	r2, [pc, #352]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6413      	str	r3, [r2, #64]	; 0x40
 80037cc:	4b56      	ldr	r3, [pc, #344]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	623b      	str	r3, [r7, #32]
 80037d6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	4b52      	ldr	r3, [pc, #328]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	4a51      	ldr	r2, [pc, #324]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	6313      	str	r3, [r2, #48]	; 0x30
 80037e8:	4b4f      	ldr	r3, [pc, #316]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f4:	2300      	movs	r3, #0
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	4b4b      	ldr	r3, [pc, #300]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	4a4a      	ldr	r2, [pc, #296]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80037fe:	f043 0302 	orr.w	r3, r3, #2
 8003802:	6313      	str	r3, [r2, #48]	; 0x30
 8003804:	4b48      	ldr	r3, [pc, #288]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_2_A_Pin;
 8003810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	2302      	movs	r3, #2
 8003818:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800381a:	2301      	movs	r3, #1
 800381c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381e:	2300      	movs	r3, #0
 8003820:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003822:	2301      	movs	r3, #1
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_2_A_GPIO_Port, &GPIO_InitStruct);
 8003826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800382a:	4619      	mov	r1, r3
 800382c:	4840      	ldr	r0, [pc, #256]	; (8003930 <HAL_TIM_Encoder_MspInit+0x1fc>)
 800382e:	f001 f84d 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_2_B_Pin;
 8003832:	2308      	movs	r3, #8
 8003834:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003836:	2302      	movs	r3, #2
 8003838:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800383a:	2301      	movs	r3, #1
 800383c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383e:	2300      	movs	r3, #0
 8003840:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003842:	2301      	movs	r3, #1
 8003844:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_2_B_GPIO_Port, &GPIO_InitStruct);
 8003846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800384a:	4619      	mov	r1, r3
 800384c:	4839      	ldr	r0, [pc, #228]	; (8003934 <HAL_TIM_Encoder_MspInit+0x200>)
 800384e:	f001 f83d 	bl	80048cc <HAL_GPIO_Init>
}
 8003852:	e062      	b.n	800391a <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM3)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a37      	ldr	r2, [pc, #220]	; (8003938 <HAL_TIM_Encoder_MspInit+0x204>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d12c      	bne.n	80038b8 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	4b31      	ldr	r3, [pc, #196]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	4a30      	ldr	r2, [pc, #192]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003868:	f043 0302 	orr.w	r3, r3, #2
 800386c:	6413      	str	r3, [r2, #64]	; 0x40
 800386e:	4b2e      	ldr	r3, [pc, #184]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	4a29      	ldr	r2, [pc, #164]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6313      	str	r3, [r2, #48]	; 0x30
 800388a:	4b27      	ldr	r3, [pc, #156]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_3_A_Pin|ENC_3_B_Pin;
 8003896:	23c0      	movs	r3, #192	; 0xc0
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389a:	2302      	movs	r3, #2
 800389c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800389e:	2301      	movs	r3, #1
 80038a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a2:	2300      	movs	r3, #0
 80038a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038a6:	2302      	movs	r3, #2
 80038a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ae:	4619      	mov	r1, r3
 80038b0:	481f      	ldr	r0, [pc, #124]	; (8003930 <HAL_TIM_Encoder_MspInit+0x1fc>)
 80038b2:	f001 f80b 	bl	80048cc <HAL_GPIO_Init>
}
 80038b6:	e030      	b.n	800391a <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM8)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1f      	ldr	r2, [pc, #124]	; (800393c <HAL_TIM_Encoder_MspInit+0x208>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d12b      	bne.n	800391a <HAL_TIM_Encoder_MspInit+0x1e6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	4a17      	ldr	r2, [pc, #92]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80038cc:	f043 0302 	orr.w	r3, r3, #2
 80038d0:	6453      	str	r3, [r2, #68]	; 0x44
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	4a10      	ldr	r2, [pc, #64]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	6313      	str	r3, [r2, #48]	; 0x30
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_1_A_Pin|ENC_1_B_Pin;
 80038fa:	23c0      	movs	r3, #192	; 0xc0
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fe:	2302      	movs	r3, #2
 8003900:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003902:	2301      	movs	r3, #1
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003906:	2300      	movs	r3, #0
 8003908:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800390a:	2303      	movs	r3, #3
 800390c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800390e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003912:	4619      	mov	r1, r3
 8003914:	480a      	ldr	r0, [pc, #40]	; (8003940 <HAL_TIM_Encoder_MspInit+0x20c>)
 8003916:	f000 ffd9 	bl	80048cc <HAL_GPIO_Init>
}
 800391a:	bf00      	nop
 800391c:	3740      	adds	r7, #64	; 0x40
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40010000 	.word	0x40010000
 8003928:	40023800 	.word	0x40023800
 800392c:	40021000 	.word	0x40021000
 8003930:	40020000 	.word	0x40020000
 8003934:	40020400 	.word	0x40020400
 8003938:	40000400 	.word	0x40000400
 800393c:	40010400 	.word	0x40010400
 8003940:	40020800 	.word	0x40020800

08003944 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1f      	ldr	r2, [pc, #124]	; (80039d0 <HAL_TIM_PWM_MspInit+0x8c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d10e      	bne.n	8003974 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <HAL_TIM_PWM_MspInit+0x90>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	4a1d      	ldr	r2, [pc, #116]	; (80039d4 <HAL_TIM_PWM_MspInit+0x90>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	6413      	str	r3, [r2, #64]	; 0x40
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_TIM_PWM_MspInit+0x90>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003972:	e026      	b.n	80039c2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM9)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a17      	ldr	r2, [pc, #92]	; (80039d8 <HAL_TIM_PWM_MspInit+0x94>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d10e      	bne.n	800399c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <HAL_TIM_PWM_MspInit+0x90>)
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	4a13      	ldr	r2, [pc, #76]	; (80039d4 <HAL_TIM_PWM_MspInit+0x90>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398c:	6453      	str	r3, [r2, #68]	; 0x44
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <HAL_TIM_PWM_MspInit+0x90>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	693b      	ldr	r3, [r7, #16]
}
 800399a:	e012      	b.n	80039c2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a0e      	ldr	r2, [pc, #56]	; (80039dc <HAL_TIM_PWM_MspInit+0x98>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10d      	bne.n	80039c2 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <HAL_TIM_PWM_MspInit+0x90>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <HAL_TIM_PWM_MspInit+0x90>)
 80039b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b4:	6413      	str	r3, [r2, #64]	; 0x40
 80039b6:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <HAL_TIM_PWM_MspInit+0x90>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40000800 	.word	0x40000800
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40014000 	.word	0x40014000
 80039dc:	40001800 	.word	0x40001800

080039e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a2c      	ldr	r2, [pc, #176]	; (8003aa0 <HAL_TIM_Base_MspInit+0xc0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d116      	bne.n	8003a20 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	4b2b      	ldr	r3, [pc, #172]	; (8003aa4 <HAL_TIM_Base_MspInit+0xc4>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	4a2a      	ldr	r2, [pc, #168]	; (8003aa4 <HAL_TIM_Base_MspInit+0xc4>)
 80039fc:	f043 0310 	orr.w	r3, r3, #16
 8003a00:	6413      	str	r3, [r2, #64]	; 0x40
 8003a02:	4b28      	ldr	r3, [pc, #160]	; (8003aa4 <HAL_TIM_Base_MspInit+0xc4>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f003 0310 	and.w	r3, r3, #16
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2100      	movs	r1, #0
 8003a12:	2036      	movs	r0, #54	; 0x36
 8003a14:	f000 fb21 	bl	800405a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a18:	2036      	movs	r0, #54	; 0x36
 8003a1a:	f000 fb3a 	bl	8004092 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003a1e:	e03a      	b.n	8003a96 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a20      	ldr	r2, [pc, #128]	; (8003aa8 <HAL_TIM_Base_MspInit+0xc8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10e      	bne.n	8003a48 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <HAL_TIM_Base_MspInit+0xc4>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <HAL_TIM_Base_MspInit+0xc4>)
 8003a34:	f043 0320 	orr.w	r3, r3, #32
 8003a38:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3a:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <HAL_TIM_Base_MspInit+0xc4>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	693b      	ldr	r3, [r7, #16]
}
 8003a46:	e026      	b.n	8003a96 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a17      	ldr	r2, [pc, #92]	; (8003aac <HAL_TIM_Base_MspInit+0xcc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d10e      	bne.n	8003a70 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <HAL_TIM_Base_MspInit+0xc4>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <HAL_TIM_Base_MspInit+0xc4>)
 8003a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a60:	6453      	str	r3, [r2, #68]	; 0x44
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <HAL_TIM_Base_MspInit+0xc4>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
}
 8003a6e:	e012      	b.n	8003a96 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0e      	ldr	r2, [pc, #56]	; (8003ab0 <HAL_TIM_Base_MspInit+0xd0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10d      	bne.n	8003a96 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <HAL_TIM_Base_MspInit+0xc4>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	4a08      	ldr	r2, [pc, #32]	; (8003aa4 <HAL_TIM_Base_MspInit+0xc4>)
 8003a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a88:	6453      	str	r3, [r2, #68]	; 0x44
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_TIM_Base_MspInit+0xc4>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
}
 8003a96:	bf00      	nop
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40001000 	.word	0x40001000
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	40001400 	.word	0x40001400
 8003aac:	40014400 	.word	0x40014400
 8003ab0:	40014800 	.word	0x40014800

08003ab4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003abc:	f107 0314 	add.w	r3, r7, #20
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a37      	ldr	r2, [pc, #220]	; (8003bb0 <HAL_TIM_MspPostInit+0xfc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d11f      	bne.n	8003b16 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <HAL_TIM_MspPostInit+0x100>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	4a35      	ldr	r2, [pc, #212]	; (8003bb4 <HAL_TIM_MspPostInit+0x100>)
 8003ae0:	f043 0308 	orr.w	r3, r3, #8
 8003ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae6:	4b33      	ldr	r3, [pc, #204]	; (8003bb4 <HAL_TIM_MspPostInit+0x100>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = pwm1_MT_Pin|pwm2_MT_Pin|pwm3_MT_Pin|pwm4_MT_Pin;
 8003af2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af8:	2302      	movs	r3, #2
 8003afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003afc:	2301      	movs	r3, #1
 8003afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b00:	2300      	movs	r3, #0
 8003b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b04:	2302      	movs	r3, #2
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b08:	f107 0314 	add.w	r3, r7, #20
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	482a      	ldr	r0, [pc, #168]	; (8003bb8 <HAL_TIM_MspPostInit+0x104>)
 8003b10:	f000 fedc 	bl	80048cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003b14:	e047      	b.n	8003ba6 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM9)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a28      	ldr	r2, [pc, #160]	; (8003bbc <HAL_TIM_MspPostInit+0x108>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d11e      	bne.n	8003b5e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	4b23      	ldr	r3, [pc, #140]	; (8003bb4 <HAL_TIM_MspPostInit+0x100>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	4a22      	ldr	r2, [pc, #136]	; (8003bb4 <HAL_TIM_MspPostInit+0x100>)
 8003b2a:	f043 0310 	orr.w	r3, r3, #16
 8003b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b30:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <HAL_TIM_MspPostInit+0x100>)
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = servo_2_Pin|servo_1_Pin;
 8003b3c:	2360      	movs	r3, #96	; 0x60
 8003b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b40:	2302      	movs	r3, #2
 8003b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b44:	2301      	movs	r3, #1
 8003b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b50:	f107 0314 	add.w	r3, r7, #20
 8003b54:	4619      	mov	r1, r3
 8003b56:	481a      	ldr	r0, [pc, #104]	; (8003bc0 <HAL_TIM_MspPostInit+0x10c>)
 8003b58:	f000 feb8 	bl	80048cc <HAL_GPIO_Init>
}
 8003b5c:	e023      	b.n	8003ba6 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM12)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a18      	ldr	r2, [pc, #96]	; (8003bc4 <HAL_TIM_MspPostInit+0x110>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d11e      	bne.n	8003ba6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <HAL_TIM_MspPostInit+0x100>)
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <HAL_TIM_MspPostInit+0x100>)
 8003b72:	f043 0302 	orr.w	r3, r3, #2
 8003b76:	6313      	str	r3, [r2, #48]	; 0x30
 8003b78:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <HAL_TIM_MspPostInit+0x100>)
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = pwm5_MT_Pin;
 8003b84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b92:	2300      	movs	r3, #0
 8003b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003b96:	2309      	movs	r3, #9
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(pwm5_MT_GPIO_Port, &GPIO_InitStruct);
 8003b9a:	f107 0314 	add.w	r3, r7, #20
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4809      	ldr	r0, [pc, #36]	; (8003bc8 <HAL_TIM_MspPostInit+0x114>)
 8003ba2:	f000 fe93 	bl	80048cc <HAL_GPIO_Init>
}
 8003ba6:	bf00      	nop
 8003ba8:	3728      	adds	r7, #40	; 0x28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40000800 	.word	0x40000800
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40020c00 	.word	0x40020c00
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40001800 	.word	0x40001800
 8003bc8:	40020400 	.word	0x40020400

08003bcc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003bd0:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003bd2:	4a12      	ldr	r2, [pc, #72]	; (8003c1c <MX_USART1_UART_Init+0x50>)
 8003bd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003bd6:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bde:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bea:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003bf2:	220c      	movs	r2, #12
 8003bf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bf6:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c02:	4805      	ldr	r0, [pc, #20]	; (8003c18 <MX_USART1_UART_Init+0x4c>)
 8003c04:	f002 fcd6 	bl	80065b4 <HAL_UART_Init>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c0e:	f7fe ff19 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	200006ec 	.word	0x200006ec
 8003c1c:	40011000 	.word	0x40011000

08003c20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	; 0x28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c28:	f107 0314 	add.w	r3, r7, #20
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a34      	ldr	r2, [pc, #208]	; (8003d10 <HAL_UART_MspInit+0xf0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d162      	bne.n	8003d08 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	4b33      	ldr	r3, [pc, #204]	; (8003d14 <HAL_UART_MspInit+0xf4>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	4a32      	ldr	r2, [pc, #200]	; (8003d14 <HAL_UART_MspInit+0xf4>)
 8003c4c:	f043 0310 	orr.w	r3, r3, #16
 8003c50:	6453      	str	r3, [r2, #68]	; 0x44
 8003c52:	4b30      	ldr	r3, [pc, #192]	; (8003d14 <HAL_UART_MspInit+0xf4>)
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <HAL_UART_MspInit+0xf4>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	4a2b      	ldr	r2, [pc, #172]	; (8003d14 <HAL_UART_MspInit+0xf4>)
 8003c68:	f043 0302 	orr.w	r3, r3, #2
 8003c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c6e:	4b29      	ldr	r3, [pc, #164]	; (8003d14 <HAL_UART_MspInit+0xf4>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c7a:	23c0      	movs	r3, #192	; 0xc0
 8003c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c86:	2303      	movs	r3, #3
 8003c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c8a:	2307      	movs	r3, #7
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c8e:	f107 0314 	add.w	r3, r7, #20
 8003c92:	4619      	mov	r1, r3
 8003c94:	4820      	ldr	r0, [pc, #128]	; (8003d18 <HAL_UART_MspInit+0xf8>)
 8003c96:	f000 fe19 	bl	80048cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_UART_MspInit+0xfc>)
 8003c9c:	4a20      	ldr	r2, [pc, #128]	; (8003d20 <HAL_UART_MspInit+0x100>)
 8003c9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003ca0:	4b1e      	ldr	r3, [pc, #120]	; (8003d1c <HAL_UART_MspInit+0xfc>)
 8003ca2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ca6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ca8:	4b1c      	ldr	r3, [pc, #112]	; (8003d1c <HAL_UART_MspInit+0xfc>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cae:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <HAL_UART_MspInit+0xfc>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <HAL_UART_MspInit+0xfc>)
 8003cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cbc:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <HAL_UART_MspInit+0xfc>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cc2:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <HAL_UART_MspInit+0xfc>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003cc8:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <HAL_UART_MspInit+0xfc>)
 8003cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cce:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cd0:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <HAL_UART_MspInit+0xfc>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <HAL_UART_MspInit+0xfc>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003cdc:	480f      	ldr	r0, [pc, #60]	; (8003d1c <HAL_UART_MspInit+0xfc>)
 8003cde:	f000 f9f3 	bl	80040c8 <HAL_DMA_Init>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003ce8:	f7fe feac 	bl	8002a44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a0b      	ldr	r2, [pc, #44]	; (8003d1c <HAL_UART_MspInit+0xfc>)
 8003cf0:	639a      	str	r2, [r3, #56]	; 0x38
 8003cf2:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <HAL_UART_MspInit+0xfc>)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	2025      	movs	r0, #37	; 0x25
 8003cfe:	f000 f9ac 	bl	800405a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d02:	2025      	movs	r0, #37	; 0x25
 8003d04:	f000 f9c5 	bl	8004092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003d08:	bf00      	nop
 8003d0a:	3728      	adds	r7, #40	; 0x28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40011000 	.word	0x40011000
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40020400 	.word	0x40020400
 8003d1c:	20000730 	.word	0x20000730
 8003d20:	40026440 	.word	0x40026440

08003d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d28:	480d      	ldr	r0, [pc, #52]	; (8003d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d2a:	490e      	ldr	r1, [pc, #56]	; (8003d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d2c:	4a0e      	ldr	r2, [pc, #56]	; (8003d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d30:	e002      	b.n	8003d38 <LoopCopyDataInit>

08003d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d36:	3304      	adds	r3, #4

08003d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d3c:	d3f9      	bcc.n	8003d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d3e:	4a0b      	ldr	r2, [pc, #44]	; (8003d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d40:	4c0b      	ldr	r4, [pc, #44]	; (8003d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d44:	e001      	b.n	8003d4a <LoopFillZerobss>

08003d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d48:	3204      	adds	r2, #4

08003d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d4c:	d3fb      	bcc.n	8003d46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d4e:	f7ff f9c1 	bl	80030d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d52:	f003 fd3f 	bl	80077d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d56:	f7fe fd43 	bl	80027e0 <main>
  bx  lr    
 8003d5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d64:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8003d68:	08008bc8 	.word	0x08008bc8
  ldr r2, =_sbss
 8003d6c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8003d70:	200008cc 	.word	0x200008cc

08003d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d74:	e7fe      	b.n	8003d74 <ADC_IRQHandler>
	...

08003d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d7c:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <HAL_Init+0x40>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a0d      	ldr	r2, [pc, #52]	; (8003db8 <HAL_Init+0x40>)
 8003d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_Init+0x40>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <HAL_Init+0x40>)
 8003d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <HAL_Init+0x40>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a07      	ldr	r2, [pc, #28]	; (8003db8 <HAL_Init+0x40>)
 8003d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003da0:	2003      	movs	r0, #3
 8003da2:	f000 f94f 	bl	8004044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003da6:	2000      	movs	r0, #0
 8003da8:	f000 f808 	bl	8003dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dac:	f7fe fe50 	bl	8002a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023c00 	.word	0x40023c00

08003dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <HAL_InitTick+0x54>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_InitTick+0x58>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f967 	bl	80040ae <HAL_SYSTICK_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e00e      	b.n	8003e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b0f      	cmp	r3, #15
 8003dee:	d80a      	bhi.n	8003e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003df0:	2200      	movs	r2, #0
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	f000 f92f 	bl	800405a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dfc:	4a06      	ldr	r2, [pc, #24]	; (8003e18 <HAL_InitTick+0x5c>)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e000      	b.n	8003e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	20000074 	.word	0x20000074
 8003e14:	2000007c 	.word	0x2000007c
 8003e18:	20000078 	.word	0x20000078

08003e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_IncTick+0x20>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_IncTick+0x24>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	4a04      	ldr	r2, [pc, #16]	; (8003e40 <HAL_IncTick+0x24>)
 8003e2e:	6013      	str	r3, [r2, #0]
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	2000007c 	.word	0x2000007c
 8003e40:	20000790 	.word	0x20000790

08003e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return uwTick;
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <HAL_GetTick+0x14>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000790 	.word	0x20000790

08003e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e64:	f7ff ffee 	bl	8003e44 <HAL_GetTick>
 8003e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d005      	beq.n	8003e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <HAL_Delay+0x44>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e82:	bf00      	nop
 8003e84:	f7ff ffde 	bl	8003e44 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d8f7      	bhi.n	8003e84 <HAL_Delay+0x28>
  {
  }
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	2000007c 	.word	0x2000007c

08003ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ed6:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	60d3      	str	r3, [r2, #12]
}
 8003edc:	bf00      	nop
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <__NVIC_GetPriorityGrouping+0x18>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	f003 0307 	and.w	r3, r3, #7
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	e000ed00 	.word	0xe000ed00

08003f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	db0b      	blt.n	8003f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	f003 021f 	and.w	r2, r3, #31
 8003f20:	4907      	ldr	r1, [pc, #28]	; (8003f40 <__NVIC_EnableIRQ+0x38>)
 8003f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	2001      	movs	r0, #1
 8003f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	e000e100 	.word	0xe000e100

08003f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	6039      	str	r1, [r7, #0]
 8003f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	db0a      	blt.n	8003f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	490c      	ldr	r1, [pc, #48]	; (8003f90 <__NVIC_SetPriority+0x4c>)
 8003f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f62:	0112      	lsls	r2, r2, #4
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	440b      	add	r3, r1
 8003f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f6c:	e00a      	b.n	8003f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	4908      	ldr	r1, [pc, #32]	; (8003f94 <__NVIC_SetPriority+0x50>)
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	3b04      	subs	r3, #4
 8003f7c:	0112      	lsls	r2, r2, #4
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	440b      	add	r3, r1
 8003f82:	761a      	strb	r2, [r3, #24]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	e000e100 	.word	0xe000e100
 8003f94:	e000ed00 	.word	0xe000ed00

08003f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b089      	sub	sp, #36	; 0x24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f1c3 0307 	rsb	r3, r3, #7
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	bf28      	it	cs
 8003fb6:	2304      	movcs	r3, #4
 8003fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	2b06      	cmp	r3, #6
 8003fc0:	d902      	bls.n	8003fc8 <NVIC_EncodePriority+0x30>
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	3b03      	subs	r3, #3
 8003fc6:	e000      	b.n	8003fca <NVIC_EncodePriority+0x32>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	401a      	ands	r2, r3
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	43d9      	mvns	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff0:	4313      	orrs	r3, r2
         );
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3724      	adds	r7, #36	; 0x24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3b01      	subs	r3, #1
 800400c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004010:	d301      	bcc.n	8004016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004012:	2301      	movs	r3, #1
 8004014:	e00f      	b.n	8004036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004016:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <SysTick_Config+0x40>)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3b01      	subs	r3, #1
 800401c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800401e:	210f      	movs	r1, #15
 8004020:	f04f 30ff 	mov.w	r0, #4294967295
 8004024:	f7ff ff8e 	bl	8003f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <SysTick_Config+0x40>)
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800402e:	4b04      	ldr	r3, [pc, #16]	; (8004040 <SysTick_Config+0x40>)
 8004030:	2207      	movs	r2, #7
 8004032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	e000e010 	.word	0xe000e010

08004044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ff29 	bl	8003ea4 <__NVIC_SetPriorityGrouping>
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800405a:	b580      	push	{r7, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	af00      	add	r7, sp, #0
 8004060:	4603      	mov	r3, r0
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800406c:	f7ff ff3e 	bl	8003eec <__NVIC_GetPriorityGrouping>
 8004070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	6978      	ldr	r0, [r7, #20]
 8004078:	f7ff ff8e 	bl	8003f98 <NVIC_EncodePriority>
 800407c:	4602      	mov	r2, r0
 800407e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004082:	4611      	mov	r1, r2
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ff5d 	bl	8003f44 <__NVIC_SetPriority>
}
 800408a:	bf00      	nop
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	4603      	mov	r3, r0
 800409a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800409c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff ff31 	bl	8003f08 <__NVIC_EnableIRQ>
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff ffa2 	bl	8004000 <SysTick_Config>
 80040bc:	4603      	mov	r3, r0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040d4:	f7ff feb6 	bl	8003e44 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e099      	b.n	8004218 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0201 	bic.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004104:	e00f      	b.n	8004126 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004106:	f7ff fe9d 	bl	8003e44 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b05      	cmp	r3, #5
 8004112:	d908      	bls.n	8004126 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2203      	movs	r2, #3
 800411e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e078      	b.n	8004218 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e8      	bne.n	8004106 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4b38      	ldr	r3, [pc, #224]	; (8004220 <HAL_DMA_Init+0x158>)
 8004140:	4013      	ands	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004152:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800415e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800416a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	2b04      	cmp	r3, #4
 800417e:	d107      	bne.n	8004190 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	4313      	orrs	r3, r2
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0307 	bic.w	r3, r3, #7
 80041a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d117      	bne.n	80041ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00e      	beq.n	80041ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fb01 	bl	80047d4 <DMA_CheckFifoParam>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2240      	movs	r2, #64	; 0x40
 80041dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041e6:	2301      	movs	r3, #1
 80041e8:	e016      	b.n	8004218 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fab8 	bl	8004768 <DMA_CalcBaseAndBitshift>
 80041f8:	4603      	mov	r3, r0
 80041fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004200:	223f      	movs	r2, #63	; 0x3f
 8004202:	409a      	lsls	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	f010803f 	.word	0xf010803f

08004224 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_DMA_Start_IT+0x26>
 8004246:	2302      	movs	r3, #2
 8004248:	e040      	b.n	80042cc <HAL_DMA_Start_IT+0xa8>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d12f      	bne.n	80042be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2202      	movs	r2, #2
 8004262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fa4a 	bl	800470c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427c:	223f      	movs	r2, #63	; 0x3f
 800427e:	409a      	lsls	r2, r3
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0216 	orr.w	r2, r2, #22
 8004292:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0208 	orr.w	r2, r2, #8
 80042aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	e005      	b.n	80042ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
 80042c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042e2:	f7ff fdaf 	bl	8003e44 <HAL_GetTick>
 80042e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d008      	beq.n	8004306 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2280      	movs	r2, #128	; 0x80
 80042f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e052      	b.n	80043ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0216 	bic.w	r2, r2, #22
 8004314:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004324:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <HAL_DMA_Abort+0x62>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004332:	2b00      	cmp	r3, #0
 8004334:	d007      	beq.n	8004346 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0208 	bic.w	r2, r2, #8
 8004344:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004356:	e013      	b.n	8004380 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004358:	f7ff fd74 	bl	8003e44 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b05      	cmp	r3, #5
 8004364:	d90c      	bls.n	8004380 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2203      	movs	r2, #3
 8004370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e015      	b.n	80043ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e4      	bne.n	8004358 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004392:	223f      	movs	r2, #63	; 0x3f
 8004394:	409a      	lsls	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d004      	beq.n	80043d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2280      	movs	r2, #128	; 0x80
 80043cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e00c      	b.n	80043ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2205      	movs	r2, #5
 80043d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0201 	bic.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004404:	4b8e      	ldr	r3, [pc, #568]	; (8004640 <HAL_DMA_IRQHandler+0x248>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a8e      	ldr	r2, [pc, #568]	; (8004644 <HAL_DMA_IRQHandler+0x24c>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	0a9b      	lsrs	r3, r3, #10
 8004410:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004416:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004422:	2208      	movs	r2, #8
 8004424:	409a      	lsls	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4013      	ands	r3, r2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01a      	beq.n	8004464 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d013      	beq.n	8004464 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0204 	bic.w	r2, r2, #4
 800444a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004450:	2208      	movs	r2, #8
 8004452:	409a      	lsls	r2, r3
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	f043 0201 	orr.w	r2, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004468:	2201      	movs	r2, #1
 800446a:	409a      	lsls	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4013      	ands	r3, r2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d012      	beq.n	800449a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00b      	beq.n	800449a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004486:	2201      	movs	r2, #1
 8004488:	409a      	lsls	r2, r3
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	f043 0202 	orr.w	r2, r3, #2
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449e:	2204      	movs	r2, #4
 80044a0:	409a      	lsls	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d012      	beq.n	80044d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00b      	beq.n	80044d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	2204      	movs	r2, #4
 80044be:	409a      	lsls	r2, r3
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c8:	f043 0204 	orr.w	r2, r3, #4
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d4:	2210      	movs	r2, #16
 80044d6:	409a      	lsls	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4013      	ands	r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d043      	beq.n	8004568 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d03c      	beq.n	8004568 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f2:	2210      	movs	r2, #16
 80044f4:	409a      	lsls	r2, r3
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d018      	beq.n	800453a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d108      	bne.n	8004528 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	d024      	beq.n	8004568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	4798      	blx	r3
 8004526:	e01f      	b.n	8004568 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01b      	beq.n	8004568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	4798      	blx	r3
 8004538:	e016      	b.n	8004568 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d107      	bne.n	8004558 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0208 	bic.w	r2, r2, #8
 8004556:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456c:	2220      	movs	r2, #32
 800456e:	409a      	lsls	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4013      	ands	r3, r2
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 808f 	beq.w	8004698 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8087 	beq.w	8004698 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458e:	2220      	movs	r2, #32
 8004590:	409a      	lsls	r2, r3
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b05      	cmp	r3, #5
 80045a0:	d136      	bne.n	8004610 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0216 	bic.w	r2, r2, #22
 80045b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695a      	ldr	r2, [r3, #20]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <HAL_DMA_IRQHandler+0x1da>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0208 	bic.w	r2, r2, #8
 80045e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e6:	223f      	movs	r2, #63	; 0x3f
 80045e8:	409a      	lsls	r2, r3
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004602:	2b00      	cmp	r3, #0
 8004604:	d07e      	beq.n	8004704 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	4798      	blx	r3
        }
        return;
 800460e:	e079      	b.n	8004704 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01d      	beq.n	800465a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10d      	bne.n	8004648 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004630:	2b00      	cmp	r3, #0
 8004632:	d031      	beq.n	8004698 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	4798      	blx	r3
 800463c:	e02c      	b.n	8004698 <HAL_DMA_IRQHandler+0x2a0>
 800463e:	bf00      	nop
 8004640:	20000074 	.word	0x20000074
 8004644:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464c:	2b00      	cmp	r3, #0
 800464e:	d023      	beq.n	8004698 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	4798      	blx	r3
 8004658:	e01e      	b.n	8004698 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10f      	bne.n	8004688 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0210 	bic.w	r2, r2, #16
 8004676:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469c:	2b00      	cmp	r3, #0
 800469e:	d032      	beq.n	8004706 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d022      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2205      	movs	r2, #5
 80046b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	3301      	adds	r3, #1
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d307      	bcc.n	80046e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f2      	bne.n	80046c4 <HAL_DMA_IRQHandler+0x2cc>
 80046de:	e000      	b.n	80046e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80046e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	4798      	blx	r3
 8004702:	e000      	b.n	8004706 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004704:	bf00      	nop
    }
  }
}
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004728:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2b40      	cmp	r3, #64	; 0x40
 8004738:	d108      	bne.n	800474c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800474a:	e007      	b.n	800475c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	60da      	str	r2, [r3, #12]
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	3b10      	subs	r3, #16
 8004778:	4a14      	ldr	r2, [pc, #80]	; (80047cc <DMA_CalcBaseAndBitshift+0x64>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	091b      	lsrs	r3, r3, #4
 8004780:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <DMA_CalcBaseAndBitshift+0x68>)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b03      	cmp	r3, #3
 8004794:	d909      	bls.n	80047aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800479e:	f023 0303 	bic.w	r3, r3, #3
 80047a2:	1d1a      	adds	r2, r3, #4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	659a      	str	r2, [r3, #88]	; 0x58
 80047a8:	e007      	b.n	80047ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	aaaaaaab 	.word	0xaaaaaaab
 80047d0:	080089d8 	.word	0x080089d8

080047d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d11f      	bne.n	800482e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d856      	bhi.n	80048a2 <DMA_CheckFifoParam+0xce>
 80047f4:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <DMA_CheckFifoParam+0x28>)
 80047f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fa:	bf00      	nop
 80047fc:	0800480d 	.word	0x0800480d
 8004800:	0800481f 	.word	0x0800481f
 8004804:	0800480d 	.word	0x0800480d
 8004808:	080048a3 	.word	0x080048a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d046      	beq.n	80048a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800481c:	e043      	b.n	80048a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004826:	d140      	bne.n	80048aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800482c:	e03d      	b.n	80048aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004836:	d121      	bne.n	800487c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b03      	cmp	r3, #3
 800483c:	d837      	bhi.n	80048ae <DMA_CheckFifoParam+0xda>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <DMA_CheckFifoParam+0x70>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	08004855 	.word	0x08004855
 8004848:	0800485b 	.word	0x0800485b
 800484c:	08004855 	.word	0x08004855
 8004850:	0800486d 	.word	0x0800486d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
      break;
 8004858:	e030      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d025      	beq.n	80048b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486a:	e022      	b.n	80048b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004874:	d11f      	bne.n	80048b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800487a:	e01c      	b.n	80048b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d903      	bls.n	800488a <DMA_CheckFifoParam+0xb6>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b03      	cmp	r3, #3
 8004886:	d003      	beq.n	8004890 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004888:	e018      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	73fb      	strb	r3, [r7, #15]
      break;
 800488e:	e015      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00e      	beq.n	80048ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      break;
 80048a0:	e00b      	b.n	80048ba <DMA_CheckFifoParam+0xe6>
      break;
 80048a2:	bf00      	nop
 80048a4:	e00a      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      break;
 80048a6:	bf00      	nop
 80048a8:	e008      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      break;
 80048aa:	bf00      	nop
 80048ac:	e006      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      break;
 80048ae:	bf00      	nop
 80048b0:	e004      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      break;
 80048b2:	bf00      	nop
 80048b4:	e002      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      break;   
 80048b6:	bf00      	nop
 80048b8:	e000      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      break;
 80048ba:	bf00      	nop
    }
  } 
  
  return status; 
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop

080048cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b089      	sub	sp, #36	; 0x24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048da:	2300      	movs	r3, #0
 80048dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	e16b      	b.n	8004bc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048e8:	2201      	movs	r2, #1
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4013      	ands	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	429a      	cmp	r2, r3
 8004902:	f040 815a 	bne.w	8004bba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	2b01      	cmp	r3, #1
 8004910:	d005      	beq.n	800491e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800491a:	2b02      	cmp	r3, #2
 800491c:	d130      	bne.n	8004980 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	2203      	movs	r2, #3
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4013      	ands	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004954:	2201      	movs	r2, #1
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	091b      	lsrs	r3, r3, #4
 800496a:	f003 0201 	and.w	r2, r3, #1
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4313      	orrs	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	2b03      	cmp	r3, #3
 800498a:	d017      	beq.n	80049bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	2203      	movs	r2, #3
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d123      	bne.n	8004a10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	08da      	lsrs	r2, r3, #3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3208      	adds	r2, #8
 80049d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	220f      	movs	r2, #15
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	43db      	mvns	r3, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4013      	ands	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	08da      	lsrs	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3208      	adds	r2, #8
 8004a0a:	69b9      	ldr	r1, [r7, #24]
 8004a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	2203      	movs	r2, #3
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	43db      	mvns	r3, r3
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	4013      	ands	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f003 0203 	and.w	r2, r3, #3
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80b4 	beq.w	8004bba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	4b60      	ldr	r3, [pc, #384]	; (8004bd8 <HAL_GPIO_Init+0x30c>)
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	4a5f      	ldr	r2, [pc, #380]	; (8004bd8 <HAL_GPIO_Init+0x30c>)
 8004a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a60:	6453      	str	r3, [r2, #68]	; 0x44
 8004a62:	4b5d      	ldr	r3, [pc, #372]	; (8004bd8 <HAL_GPIO_Init+0x30c>)
 8004a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a6e:	4a5b      	ldr	r2, [pc, #364]	; (8004bdc <HAL_GPIO_Init+0x310>)
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	089b      	lsrs	r3, r3, #2
 8004a74:	3302      	adds	r3, #2
 8004a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	220f      	movs	r2, #15
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a52      	ldr	r2, [pc, #328]	; (8004be0 <HAL_GPIO_Init+0x314>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d02b      	beq.n	8004af2 <HAL_GPIO_Init+0x226>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a51      	ldr	r2, [pc, #324]	; (8004be4 <HAL_GPIO_Init+0x318>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d025      	beq.n	8004aee <HAL_GPIO_Init+0x222>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a50      	ldr	r2, [pc, #320]	; (8004be8 <HAL_GPIO_Init+0x31c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d01f      	beq.n	8004aea <HAL_GPIO_Init+0x21e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a4f      	ldr	r2, [pc, #316]	; (8004bec <HAL_GPIO_Init+0x320>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d019      	beq.n	8004ae6 <HAL_GPIO_Init+0x21a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a4e      	ldr	r2, [pc, #312]	; (8004bf0 <HAL_GPIO_Init+0x324>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d013      	beq.n	8004ae2 <HAL_GPIO_Init+0x216>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a4d      	ldr	r2, [pc, #308]	; (8004bf4 <HAL_GPIO_Init+0x328>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00d      	beq.n	8004ade <HAL_GPIO_Init+0x212>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a4c      	ldr	r2, [pc, #304]	; (8004bf8 <HAL_GPIO_Init+0x32c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d007      	beq.n	8004ada <HAL_GPIO_Init+0x20e>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a4b      	ldr	r2, [pc, #300]	; (8004bfc <HAL_GPIO_Init+0x330>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d101      	bne.n	8004ad6 <HAL_GPIO_Init+0x20a>
 8004ad2:	2307      	movs	r3, #7
 8004ad4:	e00e      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	e00c      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004ada:	2306      	movs	r3, #6
 8004adc:	e00a      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004ade:	2305      	movs	r3, #5
 8004ae0:	e008      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004ae2:	2304      	movs	r3, #4
 8004ae4:	e006      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e004      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e002      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_GPIO_Init+0x228>
 8004af2:	2300      	movs	r3, #0
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	f002 0203 	and.w	r2, r2, #3
 8004afa:	0092      	lsls	r2, r2, #2
 8004afc:	4093      	lsls	r3, r2
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b04:	4935      	ldr	r1, [pc, #212]	; (8004bdc <HAL_GPIO_Init+0x310>)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	089b      	lsrs	r3, r3, #2
 8004b0a:	3302      	adds	r3, #2
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b12:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b36:	4a32      	ldr	r2, [pc, #200]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b3c:	4b30      	ldr	r3, [pc, #192]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b60:	4a27      	ldr	r2, [pc, #156]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b66:	4b26      	ldr	r3, [pc, #152]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b8a:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b90:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bb4:	4a12      	ldr	r2, [pc, #72]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	2b0f      	cmp	r3, #15
 8004bc4:	f67f ae90 	bls.w	80048e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bc8:	bf00      	nop
 8004bca:	bf00      	nop
 8004bcc:	3724      	adds	r7, #36	; 0x24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	40013800 	.word	0x40013800
 8004be0:	40020000 	.word	0x40020000
 8004be4:	40020400 	.word	0x40020400
 8004be8:	40020800 	.word	0x40020800
 8004bec:	40020c00 	.word	0x40020c00
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40021400 	.word	0x40021400
 8004bf8:	40021800 	.word	0x40021800
 8004bfc:	40021c00 	.word	0x40021c00
 8004c00:	40013c00 	.word	0x40013c00

08004c04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	887b      	ldrh	r3, [r7, #2]
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e001      	b.n	8004c26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	807b      	strh	r3, [r7, #2]
 8004c40:	4613      	mov	r3, r2
 8004c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c44:	787b      	ldrb	r3, [r7, #1]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c4a:	887a      	ldrh	r2, [r7, #2]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c50:	e003      	b.n	8004c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c52:	887b      	ldrh	r3, [r7, #2]
 8004c54:	041a      	lsls	r2, r3, #16
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	619a      	str	r2, [r3, #24]
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e267      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d075      	beq.n	8004d72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c86:	4b88      	ldr	r3, [pc, #544]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d00c      	beq.n	8004cac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c92:	4b85      	ldr	r3, [pc, #532]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d112      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c9e:	4b82      	ldr	r3, [pc, #520]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004caa:	d10b      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cac:	4b7e      	ldr	r3, [pc, #504]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d05b      	beq.n	8004d70 <HAL_RCC_OscConfig+0x108>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d157      	bne.n	8004d70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e242      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ccc:	d106      	bne.n	8004cdc <HAL_RCC_OscConfig+0x74>
 8004cce:	4b76      	ldr	r3, [pc, #472]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a75      	ldr	r2, [pc, #468]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e01d      	b.n	8004d18 <HAL_RCC_OscConfig+0xb0>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ce4:	d10c      	bne.n	8004d00 <HAL_RCC_OscConfig+0x98>
 8004ce6:	4b70      	ldr	r3, [pc, #448]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a6f      	ldr	r2, [pc, #444]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	4b6d      	ldr	r3, [pc, #436]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a6c      	ldr	r2, [pc, #432]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e00b      	b.n	8004d18 <HAL_RCC_OscConfig+0xb0>
 8004d00:	4b69      	ldr	r3, [pc, #420]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a68      	ldr	r2, [pc, #416]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	4b66      	ldr	r3, [pc, #408]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a65      	ldr	r2, [pc, #404]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d013      	beq.n	8004d48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d20:	f7ff f890 	bl	8003e44 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d28:	f7ff f88c 	bl	8003e44 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b64      	cmp	r3, #100	; 0x64
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e207      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d3a:	4b5b      	ldr	r3, [pc, #364]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0xc0>
 8004d46:	e014      	b.n	8004d72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d48:	f7ff f87c 	bl	8003e44 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d50:	f7ff f878 	bl	8003e44 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b64      	cmp	r3, #100	; 0x64
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e1f3      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d62:	4b51      	ldr	r3, [pc, #324]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0xe8>
 8004d6e:	e000      	b.n	8004d72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d063      	beq.n	8004e46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d7e:	4b4a      	ldr	r3, [pc, #296]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 030c 	and.w	r3, r3, #12
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d8a:	4b47      	ldr	r3, [pc, #284]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d11c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d96:	4b44      	ldr	r3, [pc, #272]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d116      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da2:	4b41      	ldr	r3, [pc, #260]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d005      	beq.n	8004dba <HAL_RCC_OscConfig+0x152>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d001      	beq.n	8004dba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e1c7      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dba:	4b3b      	ldr	r3, [pc, #236]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4937      	ldr	r1, [pc, #220]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dce:	e03a      	b.n	8004e46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d020      	beq.n	8004e1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd8:	4b34      	ldr	r3, [pc, #208]	; (8004eac <HAL_RCC_OscConfig+0x244>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dde:	f7ff f831 	bl	8003e44 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de6:	f7ff f82d 	bl	8003e44 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e1a8      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df8:	4b2b      	ldr	r3, [pc, #172]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e04:	4b28      	ldr	r3, [pc, #160]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4925      	ldr	r1, [pc, #148]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	600b      	str	r3, [r1, #0]
 8004e18:	e015      	b.n	8004e46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e1a:	4b24      	ldr	r3, [pc, #144]	; (8004eac <HAL_RCC_OscConfig+0x244>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e20:	f7ff f810 	bl	8003e44 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e28:	f7ff f80c 	bl	8003e44 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e187      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d036      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d016      	beq.n	8004e88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e5a:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <HAL_RCC_OscConfig+0x248>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e60:	f7fe fff0 	bl	8003e44 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e68:	f7fe ffec 	bl	8003e44 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e167      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x200>
 8004e86:	e01b      	b.n	8004ec0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e88:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <HAL_RCC_OscConfig+0x248>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e8e:	f7fe ffd9 	bl	8003e44 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e94:	e00e      	b.n	8004eb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e96:	f7fe ffd5 	bl	8003e44 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d907      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e150      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	42470000 	.word	0x42470000
 8004eb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb4:	4b88      	ldr	r3, [pc, #544]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1ea      	bne.n	8004e96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8097 	beq.w	8004ffc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ed2:	4b81      	ldr	r3, [pc, #516]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10f      	bne.n	8004efe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	4b7d      	ldr	r3, [pc, #500]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	4a7c      	ldr	r2, [pc, #496]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eec:	6413      	str	r3, [r2, #64]	; 0x40
 8004eee:	4b7a      	ldr	r3, [pc, #488]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef6:	60bb      	str	r3, [r7, #8]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004efa:	2301      	movs	r3, #1
 8004efc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efe:	4b77      	ldr	r3, [pc, #476]	; (80050dc <HAL_RCC_OscConfig+0x474>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d118      	bne.n	8004f3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f0a:	4b74      	ldr	r3, [pc, #464]	; (80050dc <HAL_RCC_OscConfig+0x474>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a73      	ldr	r2, [pc, #460]	; (80050dc <HAL_RCC_OscConfig+0x474>)
 8004f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f16:	f7fe ff95 	bl	8003e44 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f1e:	f7fe ff91 	bl	8003e44 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e10c      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f30:	4b6a      	ldr	r3, [pc, #424]	; (80050dc <HAL_RCC_OscConfig+0x474>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f0      	beq.n	8004f1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d106      	bne.n	8004f52 <HAL_RCC_OscConfig+0x2ea>
 8004f44:	4b64      	ldr	r3, [pc, #400]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f48:	4a63      	ldr	r2, [pc, #396]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f50:	e01c      	b.n	8004f8c <HAL_RCC_OscConfig+0x324>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2b05      	cmp	r3, #5
 8004f58:	d10c      	bne.n	8004f74 <HAL_RCC_OscConfig+0x30c>
 8004f5a:	4b5f      	ldr	r3, [pc, #380]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	4a5e      	ldr	r2, [pc, #376]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004f60:	f043 0304 	orr.w	r3, r3, #4
 8004f64:	6713      	str	r3, [r2, #112]	; 0x70
 8004f66:	4b5c      	ldr	r3, [pc, #368]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6a:	4a5b      	ldr	r2, [pc, #364]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004f6c:	f043 0301 	orr.w	r3, r3, #1
 8004f70:	6713      	str	r3, [r2, #112]	; 0x70
 8004f72:	e00b      	b.n	8004f8c <HAL_RCC_OscConfig+0x324>
 8004f74:	4b58      	ldr	r3, [pc, #352]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f78:	4a57      	ldr	r2, [pc, #348]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f80:	4b55      	ldr	r3, [pc, #340]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	4a54      	ldr	r2, [pc, #336]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004f86:	f023 0304 	bic.w	r3, r3, #4
 8004f8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d015      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f94:	f7fe ff56 	bl	8003e44 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f9c:	f7fe ff52 	bl	8003e44 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e0cb      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb2:	4b49      	ldr	r3, [pc, #292]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0ee      	beq.n	8004f9c <HAL_RCC_OscConfig+0x334>
 8004fbe:	e014      	b.n	8004fea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fc0:	f7fe ff40 	bl	8003e44 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc6:	e00a      	b.n	8004fde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc8:	f7fe ff3c 	bl	8003e44 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e0b5      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fde:	4b3e      	ldr	r3, [pc, #248]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1ee      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fea:	7dfb      	ldrb	r3, [r7, #23]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d105      	bne.n	8004ffc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ff0:	4b39      	ldr	r3, [pc, #228]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	4a38      	ldr	r2, [pc, #224]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8004ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80a1 	beq.w	8005148 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005006:	4b34      	ldr	r3, [pc, #208]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 030c 	and.w	r3, r3, #12
 800500e:	2b08      	cmp	r3, #8
 8005010:	d05c      	beq.n	80050cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d141      	bne.n	800509e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501a:	4b31      	ldr	r3, [pc, #196]	; (80050e0 <HAL_RCC_OscConfig+0x478>)
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005020:	f7fe ff10 	bl	8003e44 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005028:	f7fe ff0c 	bl	8003e44 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e087      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503a:	4b27      	ldr	r3, [pc, #156]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69da      	ldr	r2, [r3, #28]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	019b      	lsls	r3, r3, #6
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	3b01      	subs	r3, #1
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	061b      	lsls	r3, r3, #24
 800506a:	491b      	ldr	r1, [pc, #108]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 800506c:	4313      	orrs	r3, r2
 800506e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005070:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <HAL_RCC_OscConfig+0x478>)
 8005072:	2201      	movs	r2, #1
 8005074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005076:	f7fe fee5 	bl	8003e44 <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800507c:	e008      	b.n	8005090 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800507e:	f7fe fee1 	bl	8003e44 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e05c      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005090:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0f0      	beq.n	800507e <HAL_RCC_OscConfig+0x416>
 800509c:	e054      	b.n	8005148 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800509e:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <HAL_RCC_OscConfig+0x478>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a4:	f7fe fece 	bl	8003e44 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fe feca 	bl	8003e44 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e045      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050be:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <HAL_RCC_OscConfig+0x470>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f0      	bne.n	80050ac <HAL_RCC_OscConfig+0x444>
 80050ca:	e03d      	b.n	8005148 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d107      	bne.n	80050e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e038      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
 80050d8:	40023800 	.word	0x40023800
 80050dc:	40007000 	.word	0x40007000
 80050e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050e4:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <HAL_RCC_OscConfig+0x4ec>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d028      	beq.n	8005144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d121      	bne.n	8005144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510a:	429a      	cmp	r2, r3
 800510c:	d11a      	bne.n	8005144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005114:	4013      	ands	r3, r2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800511a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800511c:	4293      	cmp	r3, r2
 800511e:	d111      	bne.n	8005144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	3b01      	subs	r3, #1
 800512e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005130:	429a      	cmp	r2, r3
 8005132:	d107      	bne.n	8005144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800

08005158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e0cc      	b.n	8005306 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800516c:	4b68      	ldr	r3, [pc, #416]	; (8005310 <HAL_RCC_ClockConfig+0x1b8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d90c      	bls.n	8005194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517a:	4b65      	ldr	r3, [pc, #404]	; (8005310 <HAL_RCC_ClockConfig+0x1b8>)
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005182:	4b63      	ldr	r3, [pc, #396]	; (8005310 <HAL_RCC_ClockConfig+0x1b8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d001      	beq.n	8005194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e0b8      	b.n	8005306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d020      	beq.n	80051e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051ac:	4b59      	ldr	r3, [pc, #356]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	4a58      	ldr	r2, [pc, #352]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051c4:	4b53      	ldr	r3, [pc, #332]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	4a52      	ldr	r2, [pc, #328]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d0:	4b50      	ldr	r3, [pc, #320]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	494d      	ldr	r1, [pc, #308]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d044      	beq.n	8005278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d107      	bne.n	8005206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f6:	4b47      	ldr	r3, [pc, #284]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d119      	bne.n	8005236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e07f      	b.n	8005306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d003      	beq.n	8005216 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005212:	2b03      	cmp	r3, #3
 8005214:	d107      	bne.n	8005226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005216:	4b3f      	ldr	r3, [pc, #252]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d109      	bne.n	8005236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e06f      	b.n	8005306 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005226:	4b3b      	ldr	r3, [pc, #236]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e067      	b.n	8005306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005236:	4b37      	ldr	r3, [pc, #220]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f023 0203 	bic.w	r2, r3, #3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	4934      	ldr	r1, [pc, #208]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 8005244:	4313      	orrs	r3, r2
 8005246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005248:	f7fe fdfc 	bl	8003e44 <HAL_GetTick>
 800524c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524e:	e00a      	b.n	8005266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005250:	f7fe fdf8 	bl	8003e44 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	f241 3288 	movw	r2, #5000	; 0x1388
 800525e:	4293      	cmp	r3, r2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e04f      	b.n	8005306 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005266:	4b2b      	ldr	r3, [pc, #172]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 020c 	and.w	r2, r3, #12
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	429a      	cmp	r2, r3
 8005276:	d1eb      	bne.n	8005250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005278:	4b25      	ldr	r3, [pc, #148]	; (8005310 <HAL_RCC_ClockConfig+0x1b8>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d20c      	bcs.n	80052a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005286:	4b22      	ldr	r3, [pc, #136]	; (8005310 <HAL_RCC_ClockConfig+0x1b8>)
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800528e:	4b20      	ldr	r3, [pc, #128]	; (8005310 <HAL_RCC_ClockConfig+0x1b8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d001      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e032      	b.n	8005306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d008      	beq.n	80052be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052ac:	4b19      	ldr	r3, [pc, #100]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	4916      	ldr	r1, [pc, #88]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ca:	4b12      	ldr	r3, [pc, #72]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	490e      	ldr	r1, [pc, #56]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052de:	f000 f821 	bl	8005324 <HAL_RCC_GetSysClockFreq>
 80052e2:	4602      	mov	r2, r0
 80052e4:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	091b      	lsrs	r3, r3, #4
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	490a      	ldr	r1, [pc, #40]	; (8005318 <HAL_RCC_ClockConfig+0x1c0>)
 80052f0:	5ccb      	ldrb	r3, [r1, r3]
 80052f2:	fa22 f303 	lsr.w	r3, r2, r3
 80052f6:	4a09      	ldr	r2, [pc, #36]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 80052f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052fa:	4b09      	ldr	r3, [pc, #36]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fe fd5c 	bl	8003dbc <HAL_InitTick>

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40023c00 	.word	0x40023c00
 8005314:	40023800 	.word	0x40023800
 8005318:	080089c0 	.word	0x080089c0
 800531c:	20000074 	.word	0x20000074
 8005320:	20000078 	.word	0x20000078

08005324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005328:	b094      	sub	sp, #80	; 0x50
 800532a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	647b      	str	r3, [r7, #68]	; 0x44
 8005330:	2300      	movs	r3, #0
 8005332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005334:	2300      	movs	r3, #0
 8005336:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800533c:	4b79      	ldr	r3, [pc, #484]	; (8005524 <HAL_RCC_GetSysClockFreq+0x200>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 030c 	and.w	r3, r3, #12
 8005344:	2b08      	cmp	r3, #8
 8005346:	d00d      	beq.n	8005364 <HAL_RCC_GetSysClockFreq+0x40>
 8005348:	2b08      	cmp	r3, #8
 800534a:	f200 80e1 	bhi.w	8005510 <HAL_RCC_GetSysClockFreq+0x1ec>
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_RCC_GetSysClockFreq+0x34>
 8005352:	2b04      	cmp	r3, #4
 8005354:	d003      	beq.n	800535e <HAL_RCC_GetSysClockFreq+0x3a>
 8005356:	e0db      	b.n	8005510 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005358:	4b73      	ldr	r3, [pc, #460]	; (8005528 <HAL_RCC_GetSysClockFreq+0x204>)
 800535a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800535c:	e0db      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800535e:	4b73      	ldr	r3, [pc, #460]	; (800552c <HAL_RCC_GetSysClockFreq+0x208>)
 8005360:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005362:	e0d8      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005364:	4b6f      	ldr	r3, [pc, #444]	; (8005524 <HAL_RCC_GetSysClockFreq+0x200>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800536c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800536e:	4b6d      	ldr	r3, [pc, #436]	; (8005524 <HAL_RCC_GetSysClockFreq+0x200>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d063      	beq.n	8005442 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800537a:	4b6a      	ldr	r3, [pc, #424]	; (8005524 <HAL_RCC_GetSysClockFreq+0x200>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	099b      	lsrs	r3, r3, #6
 8005380:	2200      	movs	r2, #0
 8005382:	63bb      	str	r3, [r7, #56]	; 0x38
 8005384:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538c:	633b      	str	r3, [r7, #48]	; 0x30
 800538e:	2300      	movs	r3, #0
 8005390:	637b      	str	r3, [r7, #52]	; 0x34
 8005392:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005396:	4622      	mov	r2, r4
 8005398:	462b      	mov	r3, r5
 800539a:	f04f 0000 	mov.w	r0, #0
 800539e:	f04f 0100 	mov.w	r1, #0
 80053a2:	0159      	lsls	r1, r3, #5
 80053a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053a8:	0150      	lsls	r0, r2, #5
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4621      	mov	r1, r4
 80053b0:	1a51      	subs	r1, r2, r1
 80053b2:	6139      	str	r1, [r7, #16]
 80053b4:	4629      	mov	r1, r5
 80053b6:	eb63 0301 	sbc.w	r3, r3, r1
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053c8:	4659      	mov	r1, fp
 80053ca:	018b      	lsls	r3, r1, #6
 80053cc:	4651      	mov	r1, sl
 80053ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053d2:	4651      	mov	r1, sl
 80053d4:	018a      	lsls	r2, r1, #6
 80053d6:	4651      	mov	r1, sl
 80053d8:	ebb2 0801 	subs.w	r8, r2, r1
 80053dc:	4659      	mov	r1, fp
 80053de:	eb63 0901 	sbc.w	r9, r3, r1
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053f6:	4690      	mov	r8, r2
 80053f8:	4699      	mov	r9, r3
 80053fa:	4623      	mov	r3, r4
 80053fc:	eb18 0303 	adds.w	r3, r8, r3
 8005400:	60bb      	str	r3, [r7, #8]
 8005402:	462b      	mov	r3, r5
 8005404:	eb49 0303 	adc.w	r3, r9, r3
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005416:	4629      	mov	r1, r5
 8005418:	024b      	lsls	r3, r1, #9
 800541a:	4621      	mov	r1, r4
 800541c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005420:	4621      	mov	r1, r4
 8005422:	024a      	lsls	r2, r1, #9
 8005424:	4610      	mov	r0, r2
 8005426:	4619      	mov	r1, r3
 8005428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800542a:	2200      	movs	r2, #0
 800542c:	62bb      	str	r3, [r7, #40]	; 0x28
 800542e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005430:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005434:	f7fb faae 	bl	8000994 <__aeabi_uldivmod>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	4613      	mov	r3, r2
 800543e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005440:	e058      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005442:	4b38      	ldr	r3, [pc, #224]	; (8005524 <HAL_RCC_GetSysClockFreq+0x200>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	099b      	lsrs	r3, r3, #6
 8005448:	2200      	movs	r2, #0
 800544a:	4618      	mov	r0, r3
 800544c:	4611      	mov	r1, r2
 800544e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005452:	623b      	str	r3, [r7, #32]
 8005454:	2300      	movs	r3, #0
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
 8005458:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800545c:	4642      	mov	r2, r8
 800545e:	464b      	mov	r3, r9
 8005460:	f04f 0000 	mov.w	r0, #0
 8005464:	f04f 0100 	mov.w	r1, #0
 8005468:	0159      	lsls	r1, r3, #5
 800546a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800546e:	0150      	lsls	r0, r2, #5
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4641      	mov	r1, r8
 8005476:	ebb2 0a01 	subs.w	sl, r2, r1
 800547a:	4649      	mov	r1, r9
 800547c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	f04f 0300 	mov.w	r3, #0
 8005488:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800548c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005490:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005494:	ebb2 040a 	subs.w	r4, r2, sl
 8005498:	eb63 050b 	sbc.w	r5, r3, fp
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	00eb      	lsls	r3, r5, #3
 80054a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054aa:	00e2      	lsls	r2, r4, #3
 80054ac:	4614      	mov	r4, r2
 80054ae:	461d      	mov	r5, r3
 80054b0:	4643      	mov	r3, r8
 80054b2:	18e3      	adds	r3, r4, r3
 80054b4:	603b      	str	r3, [r7, #0]
 80054b6:	464b      	mov	r3, r9
 80054b8:	eb45 0303 	adc.w	r3, r5, r3
 80054bc:	607b      	str	r3, [r7, #4]
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054ca:	4629      	mov	r1, r5
 80054cc:	028b      	lsls	r3, r1, #10
 80054ce:	4621      	mov	r1, r4
 80054d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054d4:	4621      	mov	r1, r4
 80054d6:	028a      	lsls	r2, r1, #10
 80054d8:	4610      	mov	r0, r2
 80054da:	4619      	mov	r1, r3
 80054dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054de:	2200      	movs	r2, #0
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	61fa      	str	r2, [r7, #28]
 80054e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054e8:	f7fb fa54 	bl	8000994 <__aeabi_uldivmod>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4613      	mov	r3, r2
 80054f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054f4:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <HAL_RCC_GetSysClockFreq+0x200>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	0c1b      	lsrs	r3, r3, #16
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	3301      	adds	r3, #1
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005504:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005508:	fbb2 f3f3 	udiv	r3, r2, r3
 800550c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800550e:	e002      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <HAL_RCC_GetSysClockFreq+0x204>)
 8005512:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005518:	4618      	mov	r0, r3
 800551a:	3750      	adds	r7, #80	; 0x50
 800551c:	46bd      	mov	sp, r7
 800551e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005522:	bf00      	nop
 8005524:	40023800 	.word	0x40023800
 8005528:	00f42400 	.word	0x00f42400
 800552c:	007a1200 	.word	0x007a1200

08005530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005534:	4b03      	ldr	r3, [pc, #12]	; (8005544 <HAL_RCC_GetHCLKFreq+0x14>)
 8005536:	681b      	ldr	r3, [r3, #0]
}
 8005538:	4618      	mov	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	20000074 	.word	0x20000074

08005548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800554c:	f7ff fff0 	bl	8005530 <HAL_RCC_GetHCLKFreq>
 8005550:	4602      	mov	r2, r0
 8005552:	4b05      	ldr	r3, [pc, #20]	; (8005568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	0a9b      	lsrs	r3, r3, #10
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	4903      	ldr	r1, [pc, #12]	; (800556c <HAL_RCC_GetPCLK1Freq+0x24>)
 800555e:	5ccb      	ldrb	r3, [r1, r3]
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005564:	4618      	mov	r0, r3
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40023800 	.word	0x40023800
 800556c:	080089d0 	.word	0x080089d0

08005570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005574:	f7ff ffdc 	bl	8005530 <HAL_RCC_GetHCLKFreq>
 8005578:	4602      	mov	r2, r0
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	0b5b      	lsrs	r3, r3, #13
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	4903      	ldr	r1, [pc, #12]	; (8005594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005586:	5ccb      	ldrb	r3, [r1, r3]
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800558c:	4618      	mov	r0, r3
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40023800 	.word	0x40023800
 8005594:	080089d0 	.word	0x080089d0

08005598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e041      	b.n	800562e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fe fa0e 	bl	80039e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4619      	mov	r1, r3
 80055d6:	4610      	mov	r0, r2
 80055d8:	f000 fce6 	bl	8005fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b01      	cmp	r3, #1
 800564a:	d001      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e04e      	b.n	80056ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a23      	ldr	r2, [pc, #140]	; (80056fc <HAL_TIM_Base_Start_IT+0xc4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d022      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567a:	d01d      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1f      	ldr	r2, [pc, #124]	; (8005700 <HAL_TIM_Base_Start_IT+0xc8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d018      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1e      	ldr	r2, [pc, #120]	; (8005704 <HAL_TIM_Base_Start_IT+0xcc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1c      	ldr	r2, [pc, #112]	; (8005708 <HAL_TIM_Base_Start_IT+0xd0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a1b      	ldr	r2, [pc, #108]	; (800570c <HAL_TIM_Base_Start_IT+0xd4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a19      	ldr	r2, [pc, #100]	; (8005710 <HAL_TIM_Base_Start_IT+0xd8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x80>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a18      	ldr	r2, [pc, #96]	; (8005714 <HAL_TIM_Base_Start_IT+0xdc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d111      	bne.n	80056dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b06      	cmp	r3, #6
 80056c8:	d010      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056da:	e007      	b.n	80056ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40010000 	.word	0x40010000
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00
 800570c:	40010400 	.word	0x40010400
 8005710:	40014000 	.word	0x40014000
 8005714:	40001800 	.word	0x40001800

08005718 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e041      	b.n	80057ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fe f900 	bl	8003944 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3304      	adds	r3, #4
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f000 fc26 	bl	8005fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d109      	bne.n	80057dc <HAL_TIM_PWM_Start+0x24>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	e022      	b.n	8005822 <HAL_TIM_PWM_Start+0x6a>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d109      	bne.n	80057f6 <HAL_TIM_PWM_Start+0x3e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	bf14      	ite	ne
 80057ee:	2301      	movne	r3, #1
 80057f0:	2300      	moveq	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	e015      	b.n	8005822 <HAL_TIM_PWM_Start+0x6a>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d109      	bne.n	8005810 <HAL_TIM_PWM_Start+0x58>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	bf14      	ite	ne
 8005808:	2301      	movne	r3, #1
 800580a:	2300      	moveq	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	e008      	b.n	8005822 <HAL_TIM_PWM_Start+0x6a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b01      	cmp	r3, #1
 800581a:	bf14      	ite	ne
 800581c:	2301      	movne	r3, #1
 800581e:	2300      	moveq	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e07c      	b.n	8005924 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d104      	bne.n	800583a <HAL_TIM_PWM_Start+0x82>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005838:	e013      	b.n	8005862 <HAL_TIM_PWM_Start+0xaa>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b04      	cmp	r3, #4
 800583e:	d104      	bne.n	800584a <HAL_TIM_PWM_Start+0x92>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005848:	e00b      	b.n	8005862 <HAL_TIM_PWM_Start+0xaa>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d104      	bne.n	800585a <HAL_TIM_PWM_Start+0xa2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005858:	e003      	b.n	8005862 <HAL_TIM_PWM_Start+0xaa>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2202      	movs	r2, #2
 800585e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2201      	movs	r2, #1
 8005868:	6839      	ldr	r1, [r7, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fdec 	bl	8006448 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a2d      	ldr	r2, [pc, #180]	; (800592c <HAL_TIM_PWM_Start+0x174>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <HAL_TIM_PWM_Start+0xcc>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a2c      	ldr	r2, [pc, #176]	; (8005930 <HAL_TIM_PWM_Start+0x178>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d101      	bne.n	8005888 <HAL_TIM_PWM_Start+0xd0>
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <HAL_TIM_PWM_Start+0xd2>
 8005888:	2300      	movs	r3, #0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800589c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a22      	ldr	r2, [pc, #136]	; (800592c <HAL_TIM_PWM_Start+0x174>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d022      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b0:	d01d      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1f      	ldr	r2, [pc, #124]	; (8005934 <HAL_TIM_PWM_Start+0x17c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1d      	ldr	r2, [pc, #116]	; (8005938 <HAL_TIM_PWM_Start+0x180>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1c      	ldr	r2, [pc, #112]	; (800593c <HAL_TIM_PWM_Start+0x184>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a16      	ldr	r2, [pc, #88]	; (8005930 <HAL_TIM_PWM_Start+0x178>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a18      	ldr	r2, [pc, #96]	; (8005940 <HAL_TIM_PWM_Start+0x188>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_TIM_PWM_Start+0x136>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a16      	ldr	r2, [pc, #88]	; (8005944 <HAL_TIM_PWM_Start+0x18c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d111      	bne.n	8005912 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b06      	cmp	r3, #6
 80058fe:	d010      	beq.n	8005922 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0201 	orr.w	r2, r2, #1
 800590e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005910:	e007      	b.n	8005922 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0201 	orr.w	r2, r2, #1
 8005920:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40010000 	.word	0x40010000
 8005930:	40010400 	.word	0x40010400
 8005934:	40000400 	.word	0x40000400
 8005938:	40000800 	.word	0x40000800
 800593c:	40000c00 	.word	0x40000c00
 8005940:	40014000 	.word	0x40014000
 8005944:	40001800 	.word	0x40001800

08005948 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e097      	b.n	8005a8c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d106      	bne.n	8005976 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7fd fedf 	bl	8003734 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6812      	ldr	r2, [r2, #0]
 8005988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800598c:	f023 0307 	bic.w	r3, r3, #7
 8005990:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	3304      	adds	r3, #4
 800599a:	4619      	mov	r1, r3
 800599c:	4610      	mov	r0, r2
 800599e:	f000 fb03 	bl	8005fa8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ca:	f023 0303 	bic.w	r3, r3, #3
 80059ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	4313      	orrs	r3, r2
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80059e8:	f023 030c 	bic.w	r3, r3, #12
 80059ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	021b      	lsls	r3, r3, #8
 8005a04:	4313      	orrs	r3, r2
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	011a      	lsls	r2, r3, #4
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	031b      	lsls	r3, r3, #12
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005a26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005a2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aa4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005aac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ab4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005abc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d110      	bne.n	8005ae6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d102      	bne.n	8005ad0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005aca:	7b7b      	ldrb	r3, [r7, #13]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d001      	beq.n	8005ad4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e069      	b.n	8005ba8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae4:	e031      	b.n	8005b4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d110      	bne.n	8005b0e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005aec:	7bbb      	ldrb	r3, [r7, #14]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d102      	bne.n	8005af8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005af2:	7b3b      	ldrb	r3, [r7, #12]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d001      	beq.n	8005afc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e055      	b.n	8005ba8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b0c:	e01d      	b.n	8005b4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d108      	bne.n	8005b26 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b14:	7bbb      	ldrb	r3, [r7, #14]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d105      	bne.n	8005b26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b1a:	7b7b      	ldrb	r3, [r7, #13]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d102      	bne.n	8005b26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b20:	7b3b      	ldrb	r3, [r7, #12]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d001      	beq.n	8005b2a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e03e      	b.n	8005ba8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2202      	movs	r2, #2
 8005b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <HAL_TIM_Encoder_Start+0xc4>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d008      	beq.n	8005b68 <HAL_TIM_Encoder_Start+0xd4>
 8005b56:	e00f      	b.n	8005b78 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	2100      	movs	r1, #0
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fc71 	bl	8006448 <TIM_CCxChannelCmd>
      break;
 8005b66:	e016      	b.n	8005b96 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	2104      	movs	r1, #4
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 fc69 	bl	8006448 <TIM_CCxChannelCmd>
      break;
 8005b76:	e00e      	b.n	8005b96 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	2100      	movs	r1, #0
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fc61 	bl	8006448 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	2104      	movs	r1, #4
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fc5a 	bl	8006448 <TIM_CCxChannelCmd>
      break;
 8005b94:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f042 0201 	orr.w	r2, r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d122      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d11b      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0202 	mvn.w	r2, #2
 8005bdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f9ba 	bl	8005f6c <HAL_TIM_IC_CaptureCallback>
 8005bf8:	e005      	b.n	8005c06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f9ac 	bl	8005f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f9bd 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d122      	bne.n	8005c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d11b      	bne.n	8005c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0204 	mvn.w	r2, #4
 8005c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2202      	movs	r2, #2
 8005c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f990 	bl	8005f6c <HAL_TIM_IC_CaptureCallback>
 8005c4c:	e005      	b.n	8005c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f982 	bl	8005f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f993 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	d122      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d11b      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0208 	mvn.w	r2, #8
 8005c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2204      	movs	r2, #4
 8005c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f966 	bl	8005f6c <HAL_TIM_IC_CaptureCallback>
 8005ca0:	e005      	b.n	8005cae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f958 	bl	8005f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f969 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0310 	and.w	r3, r3, #16
 8005cbe:	2b10      	cmp	r3, #16
 8005cc0:	d122      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b10      	cmp	r3, #16
 8005cce:	d11b      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0210 	mvn.w	r2, #16
 8005cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2208      	movs	r2, #8
 8005cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f93c 	bl	8005f6c <HAL_TIM_IC_CaptureCallback>
 8005cf4:	e005      	b.n	8005d02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f92e 	bl	8005f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f93f 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d10e      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d107      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f06f 0201 	mvn.w	r2, #1
 8005d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f908 	bl	8005f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3e:	2b80      	cmp	r3, #128	; 0x80
 8005d40:	d10e      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4c:	2b80      	cmp	r3, #128	; 0x80
 8005d4e:	d107      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fc20 	bl	80065a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6a:	2b40      	cmp	r3, #64	; 0x40
 8005d6c:	d10e      	bne.n	8005d8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d78:	2b40      	cmp	r3, #64	; 0x40
 8005d7a:	d107      	bne.n	8005d8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f904 	bl	8005f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d10e      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d107      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f06f 0220 	mvn.w	r2, #32
 8005db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fbea 	bl	800658c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005db8:	bf00      	nop
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e0ae      	b.n	8005f3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b0c      	cmp	r3, #12
 8005dea:	f200 809f 	bhi.w	8005f2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005dee:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df4:	08005e29 	.word	0x08005e29
 8005df8:	08005f2d 	.word	0x08005f2d
 8005dfc:	08005f2d 	.word	0x08005f2d
 8005e00:	08005f2d 	.word	0x08005f2d
 8005e04:	08005e69 	.word	0x08005e69
 8005e08:	08005f2d 	.word	0x08005f2d
 8005e0c:	08005f2d 	.word	0x08005f2d
 8005e10:	08005f2d 	.word	0x08005f2d
 8005e14:	08005eab 	.word	0x08005eab
 8005e18:	08005f2d 	.word	0x08005f2d
 8005e1c:	08005f2d 	.word	0x08005f2d
 8005e20:	08005f2d 	.word	0x08005f2d
 8005e24:	08005eeb 	.word	0x08005eeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f95a 	bl	80060e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0208 	orr.w	r2, r2, #8
 8005e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699a      	ldr	r2, [r3, #24]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0204 	bic.w	r2, r2, #4
 8005e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6999      	ldr	r1, [r3, #24]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	691a      	ldr	r2, [r3, #16]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	619a      	str	r2, [r3, #24]
      break;
 8005e66:	e064      	b.n	8005f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 f9aa 	bl	80061c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699a      	ldr	r2, [r3, #24]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6999      	ldr	r1, [r3, #24]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	021a      	lsls	r2, r3, #8
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	619a      	str	r2, [r3, #24]
      break;
 8005ea8:	e043      	b.n	8005f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 f9ff 	bl	80062b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69da      	ldr	r2, [r3, #28]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0208 	orr.w	r2, r2, #8
 8005ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69da      	ldr	r2, [r3, #28]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0204 	bic.w	r2, r2, #4
 8005ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69d9      	ldr	r1, [r3, #28]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	61da      	str	r2, [r3, #28]
      break;
 8005ee8:	e023      	b.n	8005f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fa53 	bl	800639c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69da      	ldr	r2, [r3, #28]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69da      	ldr	r2, [r3, #28]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69d9      	ldr	r1, [r3, #28]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	021a      	lsls	r2, r3, #8
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	61da      	str	r2, [r3, #28]
      break;
 8005f2a:	e002      	b.n	8005f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a40      	ldr	r2, [pc, #256]	; (80060bc <TIM_Base_SetConfig+0x114>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d013      	beq.n	8005fe8 <TIM_Base_SetConfig+0x40>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc6:	d00f      	beq.n	8005fe8 <TIM_Base_SetConfig+0x40>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a3d      	ldr	r2, [pc, #244]	; (80060c0 <TIM_Base_SetConfig+0x118>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00b      	beq.n	8005fe8 <TIM_Base_SetConfig+0x40>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a3c      	ldr	r2, [pc, #240]	; (80060c4 <TIM_Base_SetConfig+0x11c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d007      	beq.n	8005fe8 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a3b      	ldr	r2, [pc, #236]	; (80060c8 <TIM_Base_SetConfig+0x120>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_Base_SetConfig+0x40>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a3a      	ldr	r2, [pc, #232]	; (80060cc <TIM_Base_SetConfig+0x124>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d108      	bne.n	8005ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a2f      	ldr	r2, [pc, #188]	; (80060bc <TIM_Base_SetConfig+0x114>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d02b      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006008:	d027      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2c      	ldr	r2, [pc, #176]	; (80060c0 <TIM_Base_SetConfig+0x118>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d023      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2b      	ldr	r2, [pc, #172]	; (80060c4 <TIM_Base_SetConfig+0x11c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01f      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a2a      	ldr	r2, [pc, #168]	; (80060c8 <TIM_Base_SetConfig+0x120>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d01b      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a29      	ldr	r2, [pc, #164]	; (80060cc <TIM_Base_SetConfig+0x124>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d017      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a28      	ldr	r2, [pc, #160]	; (80060d0 <TIM_Base_SetConfig+0x128>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d013      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a27      	ldr	r2, [pc, #156]	; (80060d4 <TIM_Base_SetConfig+0x12c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00f      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a26      	ldr	r2, [pc, #152]	; (80060d8 <TIM_Base_SetConfig+0x130>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00b      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a25      	ldr	r2, [pc, #148]	; (80060dc <TIM_Base_SetConfig+0x134>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d007      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a24      	ldr	r2, [pc, #144]	; (80060e0 <TIM_Base_SetConfig+0x138>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d003      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a23      	ldr	r2, [pc, #140]	; (80060e4 <TIM_Base_SetConfig+0x13c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d108      	bne.n	800606c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a0a      	ldr	r2, [pc, #40]	; (80060bc <TIM_Base_SetConfig+0x114>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_Base_SetConfig+0xf8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a0c      	ldr	r2, [pc, #48]	; (80060cc <TIM_Base_SetConfig+0x124>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d103      	bne.n	80060a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	615a      	str	r2, [r3, #20]
}
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40000800 	.word	0x40000800
 80060c8:	40000c00 	.word	0x40000c00
 80060cc:	40010400 	.word	0x40010400
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40014400 	.word	0x40014400
 80060d8:	40014800 	.word	0x40014800
 80060dc:	40001800 	.word	0x40001800
 80060e0:	40001c00 	.word	0x40001c00
 80060e4:	40002000 	.word	0x40002000

080060e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0201 	bic.w	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 0303 	bic.w	r3, r3, #3
 800611e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f023 0302 	bic.w	r3, r3, #2
 8006130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a20      	ldr	r2, [pc, #128]	; (80061c0 <TIM_OC1_SetConfig+0xd8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <TIM_OC1_SetConfig+0x64>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a1f      	ldr	r2, [pc, #124]	; (80061c4 <TIM_OC1_SetConfig+0xdc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d10c      	bne.n	8006166 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f023 0308 	bic.w	r3, r3, #8
 8006152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f023 0304 	bic.w	r3, r3, #4
 8006164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a15      	ldr	r2, [pc, #84]	; (80061c0 <TIM_OC1_SetConfig+0xd8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d003      	beq.n	8006176 <TIM_OC1_SetConfig+0x8e>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a14      	ldr	r2, [pc, #80]	; (80061c4 <TIM_OC1_SetConfig+0xdc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d111      	bne.n	800619a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800617c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	621a      	str	r2, [r3, #32]
}
 80061b4:	bf00      	nop
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	40010000 	.word	0x40010000
 80061c4:	40010400 	.word	0x40010400

080061c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	f023 0210 	bic.w	r2, r3, #16
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	021b      	lsls	r3, r3, #8
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f023 0320 	bic.w	r3, r3, #32
 8006212:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a22      	ldr	r2, [pc, #136]	; (80062ac <TIM_OC2_SetConfig+0xe4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d003      	beq.n	8006230 <TIM_OC2_SetConfig+0x68>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a21      	ldr	r2, [pc, #132]	; (80062b0 <TIM_OC2_SetConfig+0xe8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d10d      	bne.n	800624c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800624a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a17      	ldr	r2, [pc, #92]	; (80062ac <TIM_OC2_SetConfig+0xe4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_OC2_SetConfig+0x94>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a16      	ldr	r2, [pc, #88]	; (80062b0 <TIM_OC2_SetConfig+0xe8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d113      	bne.n	8006284 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006262:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800626a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40010400 	.word	0x40010400

080062b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0303 	bic.w	r3, r3, #3
 80062ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a21      	ldr	r2, [pc, #132]	; (8006394 <TIM_OC3_SetConfig+0xe0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d003      	beq.n	800631a <TIM_OC3_SetConfig+0x66>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a20      	ldr	r2, [pc, #128]	; (8006398 <TIM_OC3_SetConfig+0xe4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d10d      	bne.n	8006336 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a16      	ldr	r2, [pc, #88]	; (8006394 <TIM_OC3_SetConfig+0xe0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d003      	beq.n	8006346 <TIM_OC3_SetConfig+0x92>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a15      	ldr	r2, [pc, #84]	; (8006398 <TIM_OC3_SetConfig+0xe4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d113      	bne.n	800636e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800634c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	621a      	str	r2, [r3, #32]
}
 8006388:	bf00      	nop
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	40010000 	.word	0x40010000
 8006398:	40010400 	.word	0x40010400

0800639c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	031b      	lsls	r3, r3, #12
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a12      	ldr	r2, [pc, #72]	; (8006440 <TIM_OC4_SetConfig+0xa4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d003      	beq.n	8006404 <TIM_OC4_SetConfig+0x68>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a11      	ldr	r2, [pc, #68]	; (8006444 <TIM_OC4_SetConfig+0xa8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d109      	bne.n	8006418 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800640a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	019b      	lsls	r3, r3, #6
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	621a      	str	r2, [r3, #32]
}
 8006432:	bf00      	nop
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40010000 	.word	0x40010000
 8006444:	40010400 	.word	0x40010400

08006448 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f003 031f 	and.w	r3, r3, #31
 800645a:	2201      	movs	r2, #1
 800645c:	fa02 f303 	lsl.w	r3, r2, r3
 8006460:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a1a      	ldr	r2, [r3, #32]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	43db      	mvns	r3, r3
 800646a:	401a      	ands	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a1a      	ldr	r2, [r3, #32]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f003 031f 	and.w	r3, r3, #31
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	fa01 f303 	lsl.w	r3, r1, r3
 8006480:	431a      	orrs	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
	...

08006494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d101      	bne.n	80064ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064a8:	2302      	movs	r3, #2
 80064aa:	e05a      	b.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a21      	ldr	r2, [pc, #132]	; (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d022      	beq.n	8006536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f8:	d01d      	beq.n	8006536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1d      	ldr	r2, [pc, #116]	; (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d018      	beq.n	8006536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a1b      	ldr	r2, [pc, #108]	; (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d013      	beq.n	8006536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a1a      	ldr	r2, [pc, #104]	; (800657c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00e      	beq.n	8006536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a18      	ldr	r2, [pc, #96]	; (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d009      	beq.n	8006536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a17      	ldr	r2, [pc, #92]	; (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d004      	beq.n	8006536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a15      	ldr	r2, [pc, #84]	; (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d10c      	bne.n	8006550 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800653c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	4313      	orrs	r3, r2
 8006546:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	40010000 	.word	0x40010000
 8006574:	40000400 	.word	0x40000400
 8006578:	40000800 	.word	0x40000800
 800657c:	40000c00 	.word	0x40000c00
 8006580:	40010400 	.word	0x40010400
 8006584:	40014000 	.word	0x40014000
 8006588:	40001800 	.word	0x40001800

0800658c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e03f      	b.n	8006646 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d106      	bne.n	80065e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fd fb20 	bl	8003c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2224      	movs	r2, #36	; 0x24
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fe69 	bl	80072d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	691a      	ldr	r2, [r3, #16]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800660c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	695a      	ldr	r2, [r3, #20]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800661c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800662c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	4613      	mov	r3, r2
 800665a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b20      	cmp	r3, #32
 8006666:	d11d      	bne.n	80066a4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <HAL_UART_Receive_DMA+0x26>
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e016      	b.n	80066a6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_UART_Receive_DMA+0x38>
 8006682:	2302      	movs	r3, #2
 8006684:	e00f      	b.n	80066a6 <HAL_UART_Receive_DMA+0x58>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006694:	88fb      	ldrh	r3, [r7, #6]
 8006696:	461a      	mov	r2, r3
 8006698:	68b9      	ldr	r1, [r7, #8]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fbb8 	bl	8006e10 <UART_Start_Receive_DMA>
 80066a0:	4603      	mov	r3, r0
 80066a2:	e000      	b.n	80066a6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80066a4:	2302      	movs	r3, #2
  }
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b0ba      	sub	sp, #232	; 0xe8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80066dc:	2300      	movs	r3, #0
 80066de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80066ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10f      	bne.n	8006716 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d009      	beq.n	8006716 <HAL_UART_IRQHandler+0x66>
 8006702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fd23 	bl	800715a <UART_Receive_IT>
      return;
 8006714:	e256      	b.n	8006bc4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006716:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 80de 	beq.w	80068dc <HAL_UART_IRQHandler+0x22c>
 8006720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d106      	bne.n	800673a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800672c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006730:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 80d1 	beq.w	80068dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800673a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <HAL_UART_IRQHandler+0xae>
 8006746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800674a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674e:	2b00      	cmp	r3, #0
 8006750:	d005      	beq.n	800675e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	f043 0201 	orr.w	r2, r3, #1
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800675e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00b      	beq.n	8006782 <HAL_UART_IRQHandler+0xd2>
 800676a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f043 0202 	orr.w	r2, r3, #2
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00b      	beq.n	80067a6 <HAL_UART_IRQHandler+0xf6>
 800678e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679e:	f043 0204 	orr.w	r2, r3, #4
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80067a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067aa:	f003 0308 	and.w	r3, r3, #8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d011      	beq.n	80067d6 <HAL_UART_IRQHandler+0x126>
 80067b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b6:	f003 0320 	and.w	r3, r3, #32
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d105      	bne.n	80067ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80067be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	f043 0208 	orr.w	r2, r3, #8
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 81ed 	beq.w	8006bba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <HAL_UART_IRQHandler+0x14e>
 80067ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f0:	f003 0320 	and.w	r3, r3, #32
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fcae 	bl	800715a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006808:	2b40      	cmp	r3, #64	; 0x40
 800680a:	bf0c      	ite	eq
 800680c:	2301      	moveq	r3, #1
 800680e:	2300      	movne	r3, #0
 8006810:	b2db      	uxtb	r3, r3
 8006812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	2b00      	cmp	r3, #0
 8006820:	d103      	bne.n	800682a <HAL_UART_IRQHandler+0x17a>
 8006822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006826:	2b00      	cmp	r3, #0
 8006828:	d04f      	beq.n	80068ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fbb6 	bl	8006f9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683a:	2b40      	cmp	r3, #64	; 0x40
 800683c:	d141      	bne.n	80068c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3314      	adds	r3, #20
 8006844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800685c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3314      	adds	r3, #20
 8006866:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800686a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800686e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006876:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1d9      	bne.n	800683e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688e:	2b00      	cmp	r3, #0
 8006890:	d013      	beq.n	80068ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006896:	4a7d      	ldr	r2, [pc, #500]	; (8006a8c <HAL_UART_IRQHandler+0x3dc>)
 8006898:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fd fd88 	bl	80043b4 <HAL_DMA_Abort_IT>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d016      	beq.n	80068d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068b4:	4610      	mov	r0, r2
 80068b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b8:	e00e      	b.n	80068d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f99a 	bl	8006bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c0:	e00a      	b.n	80068d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f996 	bl	8006bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c8:	e006      	b.n	80068d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f992 	bl	8006bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80068d6:	e170      	b.n	8006bba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d8:	bf00      	nop
    return;
 80068da:	e16e      	b.n	8006bba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	f040 814a 	bne.w	8006b7a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80068e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ea:	f003 0310 	and.w	r3, r3, #16
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 8143 	beq.w	8006b7a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80068f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 813c 	beq.w	8006b7a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006902:	2300      	movs	r3, #0
 8006904:	60bb      	str	r3, [r7, #8]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	60bb      	str	r3, [r7, #8]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	60bb      	str	r3, [r7, #8]
 8006916:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006922:	2b40      	cmp	r3, #64	; 0x40
 8006924:	f040 80b4 	bne.w	8006a90 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006934:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 8140 	beq.w	8006bbe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006946:	429a      	cmp	r2, r3
 8006948:	f080 8139 	bcs.w	8006bbe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006952:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695e:	f000 8088 	beq.w	8006a72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	330c      	adds	r3, #12
 8006968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006978:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800697c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800698e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006992:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800699a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1d9      	bne.n	8006962 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3314      	adds	r3, #20
 80069b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069c0:	f023 0301 	bic.w	r3, r3, #1
 80069c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3314      	adds	r3, #20
 80069ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e1      	bne.n	80069ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3314      	adds	r3, #20
 80069f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3314      	adds	r3, #20
 8006a0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e3      	bne.n	80069ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	330c      	adds	r3, #12
 8006a36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a42:	f023 0310 	bic.w	r3, r3, #16
 8006a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	330c      	adds	r3, #12
 8006a50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006a54:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e3      	bne.n	8006a30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fd fc31 	bl	80042d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f8c0 	bl	8006c08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a88:	e099      	b.n	8006bbe <HAL_UART_IRQHandler+0x50e>
 8006a8a:	bf00      	nop
 8006a8c:	08007063 	.word	0x08007063
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 808b 	beq.w	8006bc2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006aac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8086 	beq.w	8006bc2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	330c      	adds	r3, #12
 8006abc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006acc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006ada:	647a      	str	r2, [r7, #68]	; 0x44
 8006adc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e3      	bne.n	8006ab6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3314      	adds	r3, #20
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	623b      	str	r3, [r7, #32]
   return(result);
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	f023 0301 	bic.w	r3, r3, #1
 8006b04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3314      	adds	r3, #20
 8006b0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b12:	633a      	str	r2, [r7, #48]	; 0x30
 8006b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e3      	bne.n	8006aee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	330c      	adds	r3, #12
 8006b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	e853 3f00 	ldrex	r3, [r3]
 8006b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0310 	bic.w	r3, r3, #16
 8006b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	330c      	adds	r3, #12
 8006b54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006b58:	61fa      	str	r2, [r7, #28]
 8006b5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	69b9      	ldr	r1, [r7, #24]
 8006b5e:	69fa      	ldr	r2, [r7, #28]
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	617b      	str	r3, [r7, #20]
   return(result);
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e3      	bne.n	8006b34 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f848 	bl	8006c08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b78:	e023      	b.n	8006bc2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d009      	beq.n	8006b9a <HAL_UART_IRQHandler+0x4ea>
 8006b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fa79 	bl	800708a <UART_Transmit_IT>
    return;
 8006b98:	e014      	b.n	8006bc4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00e      	beq.n	8006bc4 <HAL_UART_IRQHandler+0x514>
 8006ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d008      	beq.n	8006bc4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fab9 	bl	800712a <UART_EndTransmit_IT>
    return;
 8006bb8:	e004      	b.n	8006bc4 <HAL_UART_IRQHandler+0x514>
    return;
 8006bba:	bf00      	nop
 8006bbc:	e002      	b.n	8006bc4 <HAL_UART_IRQHandler+0x514>
      return;
 8006bbe:	bf00      	nop
 8006bc0:	e000      	b.n	8006bc4 <HAL_UART_IRQHandler+0x514>
      return;
 8006bc2:	bf00      	nop
  }
}
 8006bc4:	37e8      	adds	r7, #232	; 0xe8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop

08006bcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b09c      	sub	sp, #112	; 0x70
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d172      	bne.n	8006d22 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3e:	2200      	movs	r2, #0
 8006c40:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	330c      	adds	r3, #12
 8006c48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c58:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	330c      	adds	r3, #12
 8006c60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c62:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c64:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e5      	bne.n	8006c42 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3314      	adds	r3, #20
 8006c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	667b      	str	r3, [r7, #100]	; 0x64
 8006c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3314      	adds	r3, #20
 8006c94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c96:	647a      	str	r2, [r7, #68]	; 0x44
 8006c98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e5      	bne.n	8006c76 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3314      	adds	r3, #20
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	623b      	str	r3, [r7, #32]
   return(result);
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8006cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3314      	adds	r3, #20
 8006cc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cca:	633a      	str	r2, [r7, #48]	; 0x30
 8006ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e5      	bne.n	8006caa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d119      	bne.n	8006d22 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	330c      	adds	r3, #12
 8006cf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f023 0310 	bic.w	r3, r3, #16
 8006d04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	330c      	adds	r3, #12
 8006d0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d0e:	61fa      	str	r2, [r7, #28]
 8006d10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	69b9      	ldr	r1, [r7, #24]
 8006d14:	69fa      	ldr	r2, [r7, #28]
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	617b      	str	r3, [r7, #20]
   return(result);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e5      	bne.n	8006cee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d106      	bne.n	8006d38 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d32:	f7ff ff69 	bl	8006c08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d36:	e002      	b.n	8006d3e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006d38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d3a:	f7fa fe5f 	bl	80019fc <HAL_UART_RxCpltCallback>
}
 8006d3e:	bf00      	nop
 8006d40:	3770      	adds	r7, #112	; 0x70
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d108      	bne.n	8006d6e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d60:	085b      	lsrs	r3, r3, #1
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	4619      	mov	r1, r3
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f7ff ff4e 	bl	8006c08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d6c:	e002      	b.n	8006d74 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f7ff ff36 	bl	8006be0 <HAL_UART_RxHalfCpltCallback>
}
 8006d74:	bf00      	nop
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d98:	2b80      	cmp	r3, #128	; 0x80
 8006d9a:	bf0c      	ite	eq
 8006d9c:	2301      	moveq	r3, #1
 8006d9e:	2300      	movne	r3, #0
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b21      	cmp	r3, #33	; 0x21
 8006dae:	d108      	bne.n	8006dc2 <UART_DMAError+0x46>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d005      	beq.n	8006dc2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2200      	movs	r2, #0
 8006dba:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006dbc:	68b8      	ldr	r0, [r7, #8]
 8006dbe:	f000 f8c5 	bl	8006f4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dcc:	2b40      	cmp	r3, #64	; 0x40
 8006dce:	bf0c      	ite	eq
 8006dd0:	2301      	moveq	r3, #1
 8006dd2:	2300      	movne	r3, #0
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b22      	cmp	r3, #34	; 0x22
 8006de2:	d108      	bne.n	8006df6 <UART_DMAError+0x7a>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d005      	beq.n	8006df6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2200      	movs	r2, #0
 8006dee:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006df0:	68b8      	ldr	r0, [r7, #8]
 8006df2:	f000 f8d3 	bl	8006f9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	f043 0210 	orr.w	r2, r3, #16
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e02:	68b8      	ldr	r0, [r7, #8]
 8006e04:	f7ff fef6 	bl	8006bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e08:	bf00      	nop
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b098      	sub	sp, #96	; 0x60
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	88fa      	ldrh	r2, [r7, #6]
 8006e28:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2222      	movs	r2, #34	; 0x22
 8006e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	4a40      	ldr	r2, [pc, #256]	; (8006f40 <UART_Start_Receive_DMA+0x130>)
 8006e3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e44:	4a3f      	ldr	r2, [pc, #252]	; (8006f44 <UART_Start_Receive_DMA+0x134>)
 8006e46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4c:	4a3e      	ldr	r2, [pc, #248]	; (8006f48 <UART_Start_Receive_DMA+0x138>)
 8006e4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	2200      	movs	r2, #0
 8006e56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006e58:	f107 0308 	add.w	r3, r7, #8
 8006e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	88fb      	ldrh	r3, [r7, #6]
 8006e70:	f7fd f9d8 	bl	8004224 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006e74:	2300      	movs	r3, #0
 8006e76:	613b      	str	r3, [r7, #16]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	613b      	str	r3, [r7, #16]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d019      	beq.n	8006ece <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	330c      	adds	r3, #12
 8006ea0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	330c      	adds	r3, #12
 8006eb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006eba:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006ebc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006ec0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e5      	bne.n	8006e9a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3314      	adds	r3, #20
 8006ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	f043 0301 	orr.w	r3, r3, #1
 8006ee4:	657b      	str	r3, [r7, #84]	; 0x54
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3314      	adds	r3, #20
 8006eec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006eee:	63ba      	str	r2, [r7, #56]	; 0x38
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e5      	bne.n	8006ece <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3314      	adds	r3, #20
 8006f08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	617b      	str	r3, [r7, #20]
   return(result);
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f18:	653b      	str	r3, [r7, #80]	; 0x50
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3314      	adds	r3, #20
 8006f20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f22:	627a      	str	r2, [r7, #36]	; 0x24
 8006f24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	6a39      	ldr	r1, [r7, #32]
 8006f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f2a:	e841 2300 	strex	r3, r2, [r1]
 8006f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e5      	bne.n	8006f02 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3760      	adds	r7, #96	; 0x60
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	08006c21 	.word	0x08006c21
 8006f44:	08006d47 	.word	0x08006d47
 8006f48:	08006d7d 	.word	0x08006d7d

08006f4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b089      	sub	sp, #36	; 0x24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f6a:	61fb      	str	r3, [r7, #28]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	330c      	adds	r3, #12
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	61ba      	str	r2, [r7, #24]
 8006f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	6979      	ldr	r1, [r7, #20]
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	613b      	str	r3, [r7, #16]
   return(result);
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e5      	bne.n	8006f54 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006f90:	bf00      	nop
 8006f92:	3724      	adds	r7, #36	; 0x24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b095      	sub	sp, #84	; 0x54
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	330c      	adds	r3, #12
 8006faa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fae:	e853 3f00 	ldrex	r3, [r3]
 8006fb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	330c      	adds	r3, #12
 8006fc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fc4:	643a      	str	r2, [r7, #64]	; 0x40
 8006fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e5      	bne.n	8006fa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3314      	adds	r3, #20
 8006fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	e853 3f00 	ldrex	r3, [r3]
 8006fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	f023 0301 	bic.w	r3, r3, #1
 8006fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3314      	adds	r3, #20
 8006ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ff8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007000:	e841 2300 	strex	r3, r2, [r1]
 8007004:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e5      	bne.n	8006fd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007010:	2b01      	cmp	r3, #1
 8007012:	d119      	bne.n	8007048 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	330c      	adds	r3, #12
 800701a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	60bb      	str	r3, [r7, #8]
   return(result);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f023 0310 	bic.w	r3, r3, #16
 800702a:	647b      	str	r3, [r7, #68]	; 0x44
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	330c      	adds	r3, #12
 8007032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007034:	61ba      	str	r2, [r7, #24]
 8007036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	6979      	ldr	r1, [r7, #20]
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	e841 2300 	strex	r3, r2, [r1]
 8007040:	613b      	str	r3, [r7, #16]
   return(result);
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e5      	bne.n	8007014 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2220      	movs	r2, #32
 800704c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007056:	bf00      	nop
 8007058:	3754      	adds	r7, #84	; 0x54
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f7ff fdb9 	bl	8006bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800708a:	b480      	push	{r7}
 800708c:	b085      	sub	sp, #20
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b21      	cmp	r3, #33	; 0x21
 800709c:	d13e      	bne.n	800711c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a6:	d114      	bne.n	80070d2 <UART_Transmit_IT+0x48>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d110      	bne.n	80070d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	1c9a      	adds	r2, r3, #2
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	621a      	str	r2, [r3, #32]
 80070d0:	e008      	b.n	80070e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	1c59      	adds	r1, r3, #1
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	6211      	str	r1, [r2, #32]
 80070dc:	781a      	ldrb	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	3b01      	subs	r3, #1
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	4619      	mov	r1, r3
 80070f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10f      	bne.n	8007118 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007106:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007116:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	e000      	b.n	800711e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800711c:	2302      	movs	r3, #2
  }
}
 800711e:	4618      	mov	r0, r3
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68da      	ldr	r2, [r3, #12]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007140:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff fd3e 	bl	8006bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b08c      	sub	sp, #48	; 0x30
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b22      	cmp	r3, #34	; 0x22
 800716c:	f040 80ab 	bne.w	80072c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007178:	d117      	bne.n	80071aa <UART_Receive_IT+0x50>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d113      	bne.n	80071aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007182:	2300      	movs	r3, #0
 8007184:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	b29b      	uxth	r3, r3
 8007194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007198:	b29a      	uxth	r2, r3
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a2:	1c9a      	adds	r2, r3, #2
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	629a      	str	r2, [r3, #40]	; 0x28
 80071a8:	e026      	b.n	80071f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071bc:	d007      	beq.n	80071ce <UART_Receive_IT+0x74>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10a      	bne.n	80071dc <UART_Receive_IT+0x82>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d106      	bne.n	80071dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	701a      	strb	r2, [r3, #0]
 80071da:	e008      	b.n	80071ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	3b01      	subs	r3, #1
 8007200:	b29b      	uxth	r3, r3
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	4619      	mov	r1, r3
 8007206:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007208:	2b00      	cmp	r3, #0
 800720a:	d15a      	bne.n	80072c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0220 	bic.w	r2, r2, #32
 800721a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800722a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	695a      	ldr	r2, [r3, #20]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0201 	bic.w	r2, r2, #1
 800723a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2220      	movs	r2, #32
 8007240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	2b01      	cmp	r3, #1
 800724a:	d135      	bne.n	80072b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	330c      	adds	r3, #12
 8007258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	613b      	str	r3, [r7, #16]
   return(result);
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	f023 0310 	bic.w	r3, r3, #16
 8007268:	627b      	str	r3, [r7, #36]	; 0x24
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	330c      	adds	r3, #12
 8007270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007272:	623a      	str	r2, [r7, #32]
 8007274:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	69f9      	ldr	r1, [r7, #28]
 8007278:	6a3a      	ldr	r2, [r7, #32]
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e5      	bne.n	8007252 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	2b10      	cmp	r3, #16
 8007292:	d10a      	bne.n	80072aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	60fb      	str	r3, [r7, #12]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff fca9 	bl	8006c08 <HAL_UARTEx_RxEventCallback>
 80072b6:	e002      	b.n	80072be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7fa fb9f 	bl	80019fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	e002      	b.n	80072c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	e000      	b.n	80072c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80072c6:	2302      	movs	r3, #2
  }
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3730      	adds	r7, #48	; 0x30
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072d4:	b0c0      	sub	sp, #256	; 0x100
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ec:	68d9      	ldr	r1, [r3, #12]
 80072ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	ea40 0301 	orr.w	r3, r0, r1
 80072f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	431a      	orrs	r2, r3
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	431a      	orrs	r2, r3
 8007310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	4313      	orrs	r3, r2
 8007318:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800731c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007328:	f021 010c 	bic.w	r1, r1, #12
 800732c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007336:	430b      	orrs	r3, r1
 8007338:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800733a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800734a:	6999      	ldr	r1, [r3, #24]
 800734c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	ea40 0301 	orr.w	r3, r0, r1
 8007356:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	4b8f      	ldr	r3, [pc, #572]	; (800759c <UART_SetConfig+0x2cc>)
 8007360:	429a      	cmp	r2, r3
 8007362:	d005      	beq.n	8007370 <UART_SetConfig+0xa0>
 8007364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	4b8d      	ldr	r3, [pc, #564]	; (80075a0 <UART_SetConfig+0x2d0>)
 800736c:	429a      	cmp	r2, r3
 800736e:	d104      	bne.n	800737a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007370:	f7fe f8fe 	bl	8005570 <HAL_RCC_GetPCLK2Freq>
 8007374:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007378:	e003      	b.n	8007382 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800737a:	f7fe f8e5 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 800737e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800738c:	f040 810c 	bne.w	80075a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007394:	2200      	movs	r2, #0
 8007396:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800739a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800739e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80073a2:	4622      	mov	r2, r4
 80073a4:	462b      	mov	r3, r5
 80073a6:	1891      	adds	r1, r2, r2
 80073a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80073aa:	415b      	adcs	r3, r3
 80073ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80073b2:	4621      	mov	r1, r4
 80073b4:	eb12 0801 	adds.w	r8, r2, r1
 80073b8:	4629      	mov	r1, r5
 80073ba:	eb43 0901 	adc.w	r9, r3, r1
 80073be:	f04f 0200 	mov.w	r2, #0
 80073c2:	f04f 0300 	mov.w	r3, #0
 80073c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073d2:	4690      	mov	r8, r2
 80073d4:	4699      	mov	r9, r3
 80073d6:	4623      	mov	r3, r4
 80073d8:	eb18 0303 	adds.w	r3, r8, r3
 80073dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073e0:	462b      	mov	r3, r5
 80073e2:	eb49 0303 	adc.w	r3, r9, r3
 80073e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80073fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073fe:	460b      	mov	r3, r1
 8007400:	18db      	adds	r3, r3, r3
 8007402:	653b      	str	r3, [r7, #80]	; 0x50
 8007404:	4613      	mov	r3, r2
 8007406:	eb42 0303 	adc.w	r3, r2, r3
 800740a:	657b      	str	r3, [r7, #84]	; 0x54
 800740c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007410:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007414:	f7f9 fabe 	bl	8000994 <__aeabi_uldivmod>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	4b61      	ldr	r3, [pc, #388]	; (80075a4 <UART_SetConfig+0x2d4>)
 800741e:	fba3 2302 	umull	r2, r3, r3, r2
 8007422:	095b      	lsrs	r3, r3, #5
 8007424:	011c      	lsls	r4, r3, #4
 8007426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800742a:	2200      	movs	r2, #0
 800742c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007430:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007434:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007438:	4642      	mov	r2, r8
 800743a:	464b      	mov	r3, r9
 800743c:	1891      	adds	r1, r2, r2
 800743e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007440:	415b      	adcs	r3, r3
 8007442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007448:	4641      	mov	r1, r8
 800744a:	eb12 0a01 	adds.w	sl, r2, r1
 800744e:	4649      	mov	r1, r9
 8007450:	eb43 0b01 	adc.w	fp, r3, r1
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	f04f 0300 	mov.w	r3, #0
 800745c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007460:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007464:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007468:	4692      	mov	sl, r2
 800746a:	469b      	mov	fp, r3
 800746c:	4643      	mov	r3, r8
 800746e:	eb1a 0303 	adds.w	r3, sl, r3
 8007472:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007476:	464b      	mov	r3, r9
 8007478:	eb4b 0303 	adc.w	r3, fp, r3
 800747c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800748c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007490:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007494:	460b      	mov	r3, r1
 8007496:	18db      	adds	r3, r3, r3
 8007498:	643b      	str	r3, [r7, #64]	; 0x40
 800749a:	4613      	mov	r3, r2
 800749c:	eb42 0303 	adc.w	r3, r2, r3
 80074a0:	647b      	str	r3, [r7, #68]	; 0x44
 80074a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80074aa:	f7f9 fa73 	bl	8000994 <__aeabi_uldivmod>
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	4611      	mov	r1, r2
 80074b4:	4b3b      	ldr	r3, [pc, #236]	; (80075a4 <UART_SetConfig+0x2d4>)
 80074b6:	fba3 2301 	umull	r2, r3, r3, r1
 80074ba:	095b      	lsrs	r3, r3, #5
 80074bc:	2264      	movs	r2, #100	; 0x64
 80074be:	fb02 f303 	mul.w	r3, r2, r3
 80074c2:	1acb      	subs	r3, r1, r3
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80074ca:	4b36      	ldr	r3, [pc, #216]	; (80075a4 <UART_SetConfig+0x2d4>)
 80074cc:	fba3 2302 	umull	r2, r3, r3, r2
 80074d0:	095b      	lsrs	r3, r3, #5
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074d8:	441c      	add	r4, r3
 80074da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80074e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074ec:	4642      	mov	r2, r8
 80074ee:	464b      	mov	r3, r9
 80074f0:	1891      	adds	r1, r2, r2
 80074f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80074f4:	415b      	adcs	r3, r3
 80074f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074fc:	4641      	mov	r1, r8
 80074fe:	1851      	adds	r1, r2, r1
 8007500:	6339      	str	r1, [r7, #48]	; 0x30
 8007502:	4649      	mov	r1, r9
 8007504:	414b      	adcs	r3, r1
 8007506:	637b      	str	r3, [r7, #52]	; 0x34
 8007508:	f04f 0200 	mov.w	r2, #0
 800750c:	f04f 0300 	mov.w	r3, #0
 8007510:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007514:	4659      	mov	r1, fp
 8007516:	00cb      	lsls	r3, r1, #3
 8007518:	4651      	mov	r1, sl
 800751a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800751e:	4651      	mov	r1, sl
 8007520:	00ca      	lsls	r2, r1, #3
 8007522:	4610      	mov	r0, r2
 8007524:	4619      	mov	r1, r3
 8007526:	4603      	mov	r3, r0
 8007528:	4642      	mov	r2, r8
 800752a:	189b      	adds	r3, r3, r2
 800752c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007530:	464b      	mov	r3, r9
 8007532:	460a      	mov	r2, r1
 8007534:	eb42 0303 	adc.w	r3, r2, r3
 8007538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007548:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800754c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007550:	460b      	mov	r3, r1
 8007552:	18db      	adds	r3, r3, r3
 8007554:	62bb      	str	r3, [r7, #40]	; 0x28
 8007556:	4613      	mov	r3, r2
 8007558:	eb42 0303 	adc.w	r3, r2, r3
 800755c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800755e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007562:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007566:	f7f9 fa15 	bl	8000994 <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <UART_SetConfig+0x2d4>)
 8007570:	fba3 1302 	umull	r1, r3, r3, r2
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	2164      	movs	r1, #100	; 0x64
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	3332      	adds	r3, #50	; 0x32
 8007582:	4a08      	ldr	r2, [pc, #32]	; (80075a4 <UART_SetConfig+0x2d4>)
 8007584:	fba2 2303 	umull	r2, r3, r2, r3
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	f003 0207 	and.w	r2, r3, #7
 800758e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4422      	add	r2, r4
 8007596:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007598:	e106      	b.n	80077a8 <UART_SetConfig+0x4d8>
 800759a:	bf00      	nop
 800759c:	40011000 	.word	0x40011000
 80075a0:	40011400 	.word	0x40011400
 80075a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80075b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80075ba:	4642      	mov	r2, r8
 80075bc:	464b      	mov	r3, r9
 80075be:	1891      	adds	r1, r2, r2
 80075c0:	6239      	str	r1, [r7, #32]
 80075c2:	415b      	adcs	r3, r3
 80075c4:	627b      	str	r3, [r7, #36]	; 0x24
 80075c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075ca:	4641      	mov	r1, r8
 80075cc:	1854      	adds	r4, r2, r1
 80075ce:	4649      	mov	r1, r9
 80075d0:	eb43 0501 	adc.w	r5, r3, r1
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	f04f 0300 	mov.w	r3, #0
 80075dc:	00eb      	lsls	r3, r5, #3
 80075de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075e2:	00e2      	lsls	r2, r4, #3
 80075e4:	4614      	mov	r4, r2
 80075e6:	461d      	mov	r5, r3
 80075e8:	4643      	mov	r3, r8
 80075ea:	18e3      	adds	r3, r4, r3
 80075ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075f0:	464b      	mov	r3, r9
 80075f2:	eb45 0303 	adc.w	r3, r5, r3
 80075f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007606:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800760a:	f04f 0200 	mov.w	r2, #0
 800760e:	f04f 0300 	mov.w	r3, #0
 8007612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007616:	4629      	mov	r1, r5
 8007618:	008b      	lsls	r3, r1, #2
 800761a:	4621      	mov	r1, r4
 800761c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007620:	4621      	mov	r1, r4
 8007622:	008a      	lsls	r2, r1, #2
 8007624:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007628:	f7f9 f9b4 	bl	8000994 <__aeabi_uldivmod>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4b60      	ldr	r3, [pc, #384]	; (80077b4 <UART_SetConfig+0x4e4>)
 8007632:	fba3 2302 	umull	r2, r3, r3, r2
 8007636:	095b      	lsrs	r3, r3, #5
 8007638:	011c      	lsls	r4, r3, #4
 800763a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800763e:	2200      	movs	r2, #0
 8007640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007644:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007648:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800764c:	4642      	mov	r2, r8
 800764e:	464b      	mov	r3, r9
 8007650:	1891      	adds	r1, r2, r2
 8007652:	61b9      	str	r1, [r7, #24]
 8007654:	415b      	adcs	r3, r3
 8007656:	61fb      	str	r3, [r7, #28]
 8007658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800765c:	4641      	mov	r1, r8
 800765e:	1851      	adds	r1, r2, r1
 8007660:	6139      	str	r1, [r7, #16]
 8007662:	4649      	mov	r1, r9
 8007664:	414b      	adcs	r3, r1
 8007666:	617b      	str	r3, [r7, #20]
 8007668:	f04f 0200 	mov.w	r2, #0
 800766c:	f04f 0300 	mov.w	r3, #0
 8007670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007674:	4659      	mov	r1, fp
 8007676:	00cb      	lsls	r3, r1, #3
 8007678:	4651      	mov	r1, sl
 800767a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800767e:	4651      	mov	r1, sl
 8007680:	00ca      	lsls	r2, r1, #3
 8007682:	4610      	mov	r0, r2
 8007684:	4619      	mov	r1, r3
 8007686:	4603      	mov	r3, r0
 8007688:	4642      	mov	r2, r8
 800768a:	189b      	adds	r3, r3, r2
 800768c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007690:	464b      	mov	r3, r9
 8007692:	460a      	mov	r2, r1
 8007694:	eb42 0303 	adc.w	r3, r2, r3
 8007698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800769c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80076a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80076a8:	f04f 0200 	mov.w	r2, #0
 80076ac:	f04f 0300 	mov.w	r3, #0
 80076b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80076b4:	4649      	mov	r1, r9
 80076b6:	008b      	lsls	r3, r1, #2
 80076b8:	4641      	mov	r1, r8
 80076ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076be:	4641      	mov	r1, r8
 80076c0:	008a      	lsls	r2, r1, #2
 80076c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80076c6:	f7f9 f965 	bl	8000994 <__aeabi_uldivmod>
 80076ca:	4602      	mov	r2, r0
 80076cc:	460b      	mov	r3, r1
 80076ce:	4611      	mov	r1, r2
 80076d0:	4b38      	ldr	r3, [pc, #224]	; (80077b4 <UART_SetConfig+0x4e4>)
 80076d2:	fba3 2301 	umull	r2, r3, r3, r1
 80076d6:	095b      	lsrs	r3, r3, #5
 80076d8:	2264      	movs	r2, #100	; 0x64
 80076da:	fb02 f303 	mul.w	r3, r2, r3
 80076de:	1acb      	subs	r3, r1, r3
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	3332      	adds	r3, #50	; 0x32
 80076e4:	4a33      	ldr	r2, [pc, #204]	; (80077b4 <UART_SetConfig+0x4e4>)
 80076e6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ea:	095b      	lsrs	r3, r3, #5
 80076ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076f0:	441c      	add	r4, r3
 80076f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076f6:	2200      	movs	r2, #0
 80076f8:	673b      	str	r3, [r7, #112]	; 0x70
 80076fa:	677a      	str	r2, [r7, #116]	; 0x74
 80076fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007700:	4642      	mov	r2, r8
 8007702:	464b      	mov	r3, r9
 8007704:	1891      	adds	r1, r2, r2
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	415b      	adcs	r3, r3
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007710:	4641      	mov	r1, r8
 8007712:	1851      	adds	r1, r2, r1
 8007714:	6039      	str	r1, [r7, #0]
 8007716:	4649      	mov	r1, r9
 8007718:	414b      	adcs	r3, r1
 800771a:	607b      	str	r3, [r7, #4]
 800771c:	f04f 0200 	mov.w	r2, #0
 8007720:	f04f 0300 	mov.w	r3, #0
 8007724:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007728:	4659      	mov	r1, fp
 800772a:	00cb      	lsls	r3, r1, #3
 800772c:	4651      	mov	r1, sl
 800772e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007732:	4651      	mov	r1, sl
 8007734:	00ca      	lsls	r2, r1, #3
 8007736:	4610      	mov	r0, r2
 8007738:	4619      	mov	r1, r3
 800773a:	4603      	mov	r3, r0
 800773c:	4642      	mov	r2, r8
 800773e:	189b      	adds	r3, r3, r2
 8007740:	66bb      	str	r3, [r7, #104]	; 0x68
 8007742:	464b      	mov	r3, r9
 8007744:	460a      	mov	r2, r1
 8007746:	eb42 0303 	adc.w	r3, r2, r3
 800774a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800774c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	663b      	str	r3, [r7, #96]	; 0x60
 8007756:	667a      	str	r2, [r7, #100]	; 0x64
 8007758:	f04f 0200 	mov.w	r2, #0
 800775c:	f04f 0300 	mov.w	r3, #0
 8007760:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007764:	4649      	mov	r1, r9
 8007766:	008b      	lsls	r3, r1, #2
 8007768:	4641      	mov	r1, r8
 800776a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800776e:	4641      	mov	r1, r8
 8007770:	008a      	lsls	r2, r1, #2
 8007772:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007776:	f7f9 f90d 	bl	8000994 <__aeabi_uldivmod>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4b0d      	ldr	r3, [pc, #52]	; (80077b4 <UART_SetConfig+0x4e4>)
 8007780:	fba3 1302 	umull	r1, r3, r3, r2
 8007784:	095b      	lsrs	r3, r3, #5
 8007786:	2164      	movs	r1, #100	; 0x64
 8007788:	fb01 f303 	mul.w	r3, r1, r3
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	011b      	lsls	r3, r3, #4
 8007790:	3332      	adds	r3, #50	; 0x32
 8007792:	4a08      	ldr	r2, [pc, #32]	; (80077b4 <UART_SetConfig+0x4e4>)
 8007794:	fba2 2303 	umull	r2, r3, r2, r3
 8007798:	095b      	lsrs	r3, r3, #5
 800779a:	f003 020f 	and.w	r2, r3, #15
 800779e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4422      	add	r2, r4
 80077a6:	609a      	str	r2, [r3, #8]
}
 80077a8:	bf00      	nop
 80077aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80077ae:	46bd      	mov	sp, r7
 80077b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077b4:	51eb851f 	.word	0x51eb851f

080077b8 <memset>:
 80077b8:	4402      	add	r2, r0
 80077ba:	4603      	mov	r3, r0
 80077bc:	4293      	cmp	r3, r2
 80077be:	d100      	bne.n	80077c2 <memset+0xa>
 80077c0:	4770      	bx	lr
 80077c2:	f803 1b01 	strb.w	r1, [r3], #1
 80077c6:	e7f9      	b.n	80077bc <memset+0x4>

080077c8 <__errno>:
 80077c8:	4b01      	ldr	r3, [pc, #4]	; (80077d0 <__errno+0x8>)
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	200000cc 	.word	0x200000cc

080077d4 <__libc_init_array>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	4d0d      	ldr	r5, [pc, #52]	; (800780c <__libc_init_array+0x38>)
 80077d8:	4c0d      	ldr	r4, [pc, #52]	; (8007810 <__libc_init_array+0x3c>)
 80077da:	1b64      	subs	r4, r4, r5
 80077dc:	10a4      	asrs	r4, r4, #2
 80077de:	2600      	movs	r6, #0
 80077e0:	42a6      	cmp	r6, r4
 80077e2:	d109      	bne.n	80077f8 <__libc_init_array+0x24>
 80077e4:	4d0b      	ldr	r5, [pc, #44]	; (8007814 <__libc_init_array+0x40>)
 80077e6:	4c0c      	ldr	r4, [pc, #48]	; (8007818 <__libc_init_array+0x44>)
 80077e8:	f001 f8de 	bl	80089a8 <_init>
 80077ec:	1b64      	subs	r4, r4, r5
 80077ee:	10a4      	asrs	r4, r4, #2
 80077f0:	2600      	movs	r6, #0
 80077f2:	42a6      	cmp	r6, r4
 80077f4:	d105      	bne.n	8007802 <__libc_init_array+0x2e>
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fc:	4798      	blx	r3
 80077fe:	3601      	adds	r6, #1
 8007800:	e7ee      	b.n	80077e0 <__libc_init_array+0xc>
 8007802:	f855 3b04 	ldr.w	r3, [r5], #4
 8007806:	4798      	blx	r3
 8007808:	3601      	adds	r6, #1
 800780a:	e7f2      	b.n	80077f2 <__libc_init_array+0x1e>
 800780c:	08008bc0 	.word	0x08008bc0
 8007810:	08008bc0 	.word	0x08008bc0
 8007814:	08008bc0 	.word	0x08008bc0
 8007818:	08008bc4 	.word	0x08008bc4

0800781c <memcpy>:
 800781c:	440a      	add	r2, r1
 800781e:	4291      	cmp	r1, r2
 8007820:	f100 33ff 	add.w	r3, r0, #4294967295
 8007824:	d100      	bne.n	8007828 <memcpy+0xc>
 8007826:	4770      	bx	lr
 8007828:	b510      	push	{r4, lr}
 800782a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800782e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007832:	4291      	cmp	r1, r2
 8007834:	d1f9      	bne.n	800782a <memcpy+0xe>
 8007836:	bd10      	pop	{r4, pc}

08007838 <cos>:
 8007838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800783a:	ec53 2b10 	vmov	r2, r3, d0
 800783e:	4826      	ldr	r0, [pc, #152]	; (80078d8 <cos+0xa0>)
 8007840:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007844:	4281      	cmp	r1, r0
 8007846:	dc06      	bgt.n	8007856 <cos+0x1e>
 8007848:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80078d0 <cos+0x98>
 800784c:	b005      	add	sp, #20
 800784e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007852:	f000 b8c1 	b.w	80079d8 <__kernel_cos>
 8007856:	4821      	ldr	r0, [pc, #132]	; (80078dc <cos+0xa4>)
 8007858:	4281      	cmp	r1, r0
 800785a:	dd09      	ble.n	8007870 <cos+0x38>
 800785c:	ee10 0a10 	vmov	r0, s0
 8007860:	4619      	mov	r1, r3
 8007862:	f7f8 fddf 	bl	8000424 <__aeabi_dsub>
 8007866:	ec41 0b10 	vmov	d0, r0, r1
 800786a:	b005      	add	sp, #20
 800786c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007870:	4668      	mov	r0, sp
 8007872:	f000 fa39 	bl	8007ce8 <__ieee754_rem_pio2>
 8007876:	f000 0003 	and.w	r0, r0, #3
 800787a:	2801      	cmp	r0, #1
 800787c:	d00b      	beq.n	8007896 <cos+0x5e>
 800787e:	2802      	cmp	r0, #2
 8007880:	d016      	beq.n	80078b0 <cos+0x78>
 8007882:	b9e0      	cbnz	r0, 80078be <cos+0x86>
 8007884:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007888:	ed9d 0b00 	vldr	d0, [sp]
 800788c:	f000 f8a4 	bl	80079d8 <__kernel_cos>
 8007890:	ec51 0b10 	vmov	r0, r1, d0
 8007894:	e7e7      	b.n	8007866 <cos+0x2e>
 8007896:	ed9d 1b02 	vldr	d1, [sp, #8]
 800789a:	ed9d 0b00 	vldr	d0, [sp]
 800789e:	f000 f963 	bl	8007b68 <__kernel_sin>
 80078a2:	ec53 2b10 	vmov	r2, r3, d0
 80078a6:	ee10 0a10 	vmov	r0, s0
 80078aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80078ae:	e7da      	b.n	8007866 <cos+0x2e>
 80078b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80078b4:	ed9d 0b00 	vldr	d0, [sp]
 80078b8:	f000 f88e 	bl	80079d8 <__kernel_cos>
 80078bc:	e7f1      	b.n	80078a2 <cos+0x6a>
 80078be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80078c2:	ed9d 0b00 	vldr	d0, [sp]
 80078c6:	2001      	movs	r0, #1
 80078c8:	f000 f94e 	bl	8007b68 <__kernel_sin>
 80078cc:	e7e0      	b.n	8007890 <cos+0x58>
 80078ce:	bf00      	nop
	...
 80078d8:	3fe921fb 	.word	0x3fe921fb
 80078dc:	7fefffff 	.word	0x7fefffff

080078e0 <sin>:
 80078e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078e2:	ec53 2b10 	vmov	r2, r3, d0
 80078e6:	4828      	ldr	r0, [pc, #160]	; (8007988 <sin+0xa8>)
 80078e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80078ec:	4281      	cmp	r1, r0
 80078ee:	dc07      	bgt.n	8007900 <sin+0x20>
 80078f0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007980 <sin+0xa0>
 80078f4:	2000      	movs	r0, #0
 80078f6:	b005      	add	sp, #20
 80078f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078fc:	f000 b934 	b.w	8007b68 <__kernel_sin>
 8007900:	4822      	ldr	r0, [pc, #136]	; (800798c <sin+0xac>)
 8007902:	4281      	cmp	r1, r0
 8007904:	dd09      	ble.n	800791a <sin+0x3a>
 8007906:	ee10 0a10 	vmov	r0, s0
 800790a:	4619      	mov	r1, r3
 800790c:	f7f8 fd8a 	bl	8000424 <__aeabi_dsub>
 8007910:	ec41 0b10 	vmov	d0, r0, r1
 8007914:	b005      	add	sp, #20
 8007916:	f85d fb04 	ldr.w	pc, [sp], #4
 800791a:	4668      	mov	r0, sp
 800791c:	f000 f9e4 	bl	8007ce8 <__ieee754_rem_pio2>
 8007920:	f000 0003 	and.w	r0, r0, #3
 8007924:	2801      	cmp	r0, #1
 8007926:	d00c      	beq.n	8007942 <sin+0x62>
 8007928:	2802      	cmp	r0, #2
 800792a:	d011      	beq.n	8007950 <sin+0x70>
 800792c:	b9f0      	cbnz	r0, 800796c <sin+0x8c>
 800792e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007932:	ed9d 0b00 	vldr	d0, [sp]
 8007936:	2001      	movs	r0, #1
 8007938:	f000 f916 	bl	8007b68 <__kernel_sin>
 800793c:	ec51 0b10 	vmov	r0, r1, d0
 8007940:	e7e6      	b.n	8007910 <sin+0x30>
 8007942:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007946:	ed9d 0b00 	vldr	d0, [sp]
 800794a:	f000 f845 	bl	80079d8 <__kernel_cos>
 800794e:	e7f5      	b.n	800793c <sin+0x5c>
 8007950:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007954:	ed9d 0b00 	vldr	d0, [sp]
 8007958:	2001      	movs	r0, #1
 800795a:	f000 f905 	bl	8007b68 <__kernel_sin>
 800795e:	ec53 2b10 	vmov	r2, r3, d0
 8007962:	ee10 0a10 	vmov	r0, s0
 8007966:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800796a:	e7d1      	b.n	8007910 <sin+0x30>
 800796c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007970:	ed9d 0b00 	vldr	d0, [sp]
 8007974:	f000 f830 	bl	80079d8 <__kernel_cos>
 8007978:	e7f1      	b.n	800795e <sin+0x7e>
 800797a:	bf00      	nop
 800797c:	f3af 8000 	nop.w
	...
 8007988:	3fe921fb 	.word	0x3fe921fb
 800798c:	7fefffff 	.word	0x7fefffff

08007990 <sqrtf>:
 8007990:	b508      	push	{r3, lr}
 8007992:	ed2d 8b02 	vpush	{d8}
 8007996:	eeb0 8a40 	vmov.f32	s16, s0
 800799a:	f000 f817 	bl	80079cc <__ieee754_sqrtf>
 800799e:	eeb4 8a48 	vcmp.f32	s16, s16
 80079a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a6:	d60c      	bvs.n	80079c2 <sqrtf+0x32>
 80079a8:	eddf 8a07 	vldr	s17, [pc, #28]	; 80079c8 <sqrtf+0x38>
 80079ac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80079b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b4:	d505      	bpl.n	80079c2 <sqrtf+0x32>
 80079b6:	f7ff ff07 	bl	80077c8 <__errno>
 80079ba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80079be:	2321      	movs	r3, #33	; 0x21
 80079c0:	6003      	str	r3, [r0, #0]
 80079c2:	ecbd 8b02 	vpop	{d8}
 80079c6:	bd08      	pop	{r3, pc}
 80079c8:	00000000 	.word	0x00000000

080079cc <__ieee754_sqrtf>:
 80079cc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80079d0:	4770      	bx	lr
 80079d2:	0000      	movs	r0, r0
 80079d4:	0000      	movs	r0, r0
	...

080079d8 <__kernel_cos>:
 80079d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	ec57 6b10 	vmov	r6, r7, d0
 80079e0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80079e4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80079e8:	ed8d 1b00 	vstr	d1, [sp]
 80079ec:	da07      	bge.n	80079fe <__kernel_cos+0x26>
 80079ee:	ee10 0a10 	vmov	r0, s0
 80079f2:	4639      	mov	r1, r7
 80079f4:	f7f8 ff56 	bl	80008a4 <__aeabi_d2iz>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	f000 8088 	beq.w	8007b0e <__kernel_cos+0x136>
 80079fe:	4632      	mov	r2, r6
 8007a00:	463b      	mov	r3, r7
 8007a02:	4630      	mov	r0, r6
 8007a04:	4639      	mov	r1, r7
 8007a06:	f7f8 fbdf 	bl	80001c8 <__aeabi_dmul>
 8007a0a:	4b51      	ldr	r3, [pc, #324]	; (8007b50 <__kernel_cos+0x178>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	4604      	mov	r4, r0
 8007a10:	460d      	mov	r5, r1
 8007a12:	f7f8 fbd9 	bl	80001c8 <__aeabi_dmul>
 8007a16:	a340      	add	r3, pc, #256	; (adr r3, 8007b18 <__kernel_cos+0x140>)
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	4682      	mov	sl, r0
 8007a1e:	468b      	mov	fp, r1
 8007a20:	4620      	mov	r0, r4
 8007a22:	4629      	mov	r1, r5
 8007a24:	f7f8 fbd0 	bl	80001c8 <__aeabi_dmul>
 8007a28:	a33d      	add	r3, pc, #244	; (adr r3, 8007b20 <__kernel_cos+0x148>)
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	f7f8 fcfb 	bl	8000428 <__adddf3>
 8007a32:	4622      	mov	r2, r4
 8007a34:	462b      	mov	r3, r5
 8007a36:	f7f8 fbc7 	bl	80001c8 <__aeabi_dmul>
 8007a3a:	a33b      	add	r3, pc, #236	; (adr r3, 8007b28 <__kernel_cos+0x150>)
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f7f8 fcf0 	bl	8000424 <__aeabi_dsub>
 8007a44:	4622      	mov	r2, r4
 8007a46:	462b      	mov	r3, r5
 8007a48:	f7f8 fbbe 	bl	80001c8 <__aeabi_dmul>
 8007a4c:	a338      	add	r3, pc, #224	; (adr r3, 8007b30 <__kernel_cos+0x158>)
 8007a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a52:	f7f8 fce9 	bl	8000428 <__adddf3>
 8007a56:	4622      	mov	r2, r4
 8007a58:	462b      	mov	r3, r5
 8007a5a:	f7f8 fbb5 	bl	80001c8 <__aeabi_dmul>
 8007a5e:	a336      	add	r3, pc, #216	; (adr r3, 8007b38 <__kernel_cos+0x160>)
 8007a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a64:	f7f8 fcde 	bl	8000424 <__aeabi_dsub>
 8007a68:	4622      	mov	r2, r4
 8007a6a:	462b      	mov	r3, r5
 8007a6c:	f7f8 fbac 	bl	80001c8 <__aeabi_dmul>
 8007a70:	a333      	add	r3, pc, #204	; (adr r3, 8007b40 <__kernel_cos+0x168>)
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	f7f8 fcd7 	bl	8000428 <__adddf3>
 8007a7a:	4622      	mov	r2, r4
 8007a7c:	462b      	mov	r3, r5
 8007a7e:	f7f8 fba3 	bl	80001c8 <__aeabi_dmul>
 8007a82:	4622      	mov	r2, r4
 8007a84:	462b      	mov	r3, r5
 8007a86:	f7f8 fb9f 	bl	80001c8 <__aeabi_dmul>
 8007a8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a8e:	4604      	mov	r4, r0
 8007a90:	460d      	mov	r5, r1
 8007a92:	4630      	mov	r0, r6
 8007a94:	4639      	mov	r1, r7
 8007a96:	f7f8 fb97 	bl	80001c8 <__aeabi_dmul>
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f7f8 fcbf 	bl	8000424 <__aeabi_dsub>
 8007aa6:	4b2b      	ldr	r3, [pc, #172]	; (8007b54 <__kernel_cos+0x17c>)
 8007aa8:	4598      	cmp	r8, r3
 8007aaa:	4606      	mov	r6, r0
 8007aac:	460f      	mov	r7, r1
 8007aae:	dc10      	bgt.n	8007ad2 <__kernel_cos+0xfa>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4650      	mov	r0, sl
 8007ab6:	4659      	mov	r1, fp
 8007ab8:	f7f8 fcb4 	bl	8000424 <__aeabi_dsub>
 8007abc:	460b      	mov	r3, r1
 8007abe:	4926      	ldr	r1, [pc, #152]	; (8007b58 <__kernel_cos+0x180>)
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	f7f8 fcae 	bl	8000424 <__aeabi_dsub>
 8007ac8:	ec41 0b10 	vmov	d0, r0, r1
 8007acc:	b003      	add	sp, #12
 8007ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad2:	4b22      	ldr	r3, [pc, #136]	; (8007b5c <__kernel_cos+0x184>)
 8007ad4:	4920      	ldr	r1, [pc, #128]	; (8007b58 <__kernel_cos+0x180>)
 8007ad6:	4598      	cmp	r8, r3
 8007ad8:	bfcc      	ite	gt
 8007ada:	4d21      	ldrgt	r5, [pc, #132]	; (8007b60 <__kernel_cos+0x188>)
 8007adc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007ae0:	2400      	movs	r4, #0
 8007ae2:	4622      	mov	r2, r4
 8007ae4:	462b      	mov	r3, r5
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	f7f8 fc9c 	bl	8000424 <__aeabi_dsub>
 8007aec:	4622      	mov	r2, r4
 8007aee:	4680      	mov	r8, r0
 8007af0:	4689      	mov	r9, r1
 8007af2:	462b      	mov	r3, r5
 8007af4:	4650      	mov	r0, sl
 8007af6:	4659      	mov	r1, fp
 8007af8:	f7f8 fc94 	bl	8000424 <__aeabi_dsub>
 8007afc:	4632      	mov	r2, r6
 8007afe:	463b      	mov	r3, r7
 8007b00:	f7f8 fc90 	bl	8000424 <__aeabi_dsub>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4640      	mov	r0, r8
 8007b0a:	4649      	mov	r1, r9
 8007b0c:	e7da      	b.n	8007ac4 <__kernel_cos+0xec>
 8007b0e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007b48 <__kernel_cos+0x170>
 8007b12:	e7db      	b.n	8007acc <__kernel_cos+0xf4>
 8007b14:	f3af 8000 	nop.w
 8007b18:	be8838d4 	.word	0xbe8838d4
 8007b1c:	bda8fae9 	.word	0xbda8fae9
 8007b20:	bdb4b1c4 	.word	0xbdb4b1c4
 8007b24:	3e21ee9e 	.word	0x3e21ee9e
 8007b28:	809c52ad 	.word	0x809c52ad
 8007b2c:	3e927e4f 	.word	0x3e927e4f
 8007b30:	19cb1590 	.word	0x19cb1590
 8007b34:	3efa01a0 	.word	0x3efa01a0
 8007b38:	16c15177 	.word	0x16c15177
 8007b3c:	3f56c16c 	.word	0x3f56c16c
 8007b40:	5555554c 	.word	0x5555554c
 8007b44:	3fa55555 	.word	0x3fa55555
 8007b48:	00000000 	.word	0x00000000
 8007b4c:	3ff00000 	.word	0x3ff00000
 8007b50:	3fe00000 	.word	0x3fe00000
 8007b54:	3fd33332 	.word	0x3fd33332
 8007b58:	3ff00000 	.word	0x3ff00000
 8007b5c:	3fe90000 	.word	0x3fe90000
 8007b60:	3fd20000 	.word	0x3fd20000
 8007b64:	00000000 	.word	0x00000000

08007b68 <__kernel_sin>:
 8007b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	ed2d 8b04 	vpush	{d8-d9}
 8007b70:	eeb0 8a41 	vmov.f32	s16, s2
 8007b74:	eef0 8a61 	vmov.f32	s17, s3
 8007b78:	ec55 4b10 	vmov	r4, r5, d0
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007b82:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007b86:	9001      	str	r0, [sp, #4]
 8007b88:	da06      	bge.n	8007b98 <__kernel_sin+0x30>
 8007b8a:	ee10 0a10 	vmov	r0, s0
 8007b8e:	4629      	mov	r1, r5
 8007b90:	f7f8 fe88 	bl	80008a4 <__aeabi_d2iz>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d051      	beq.n	8007c3c <__kernel_sin+0xd4>
 8007b98:	4622      	mov	r2, r4
 8007b9a:	462b      	mov	r3, r5
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	f7f8 fb12 	bl	80001c8 <__aeabi_dmul>
 8007ba4:	4682      	mov	sl, r0
 8007ba6:	468b      	mov	fp, r1
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4620      	mov	r0, r4
 8007bae:	4629      	mov	r1, r5
 8007bb0:	f7f8 fb0a 	bl	80001c8 <__aeabi_dmul>
 8007bb4:	a341      	add	r3, pc, #260	; (adr r3, 8007cbc <__kernel_sin+0x154>)
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	4680      	mov	r8, r0
 8007bbc:	4689      	mov	r9, r1
 8007bbe:	4650      	mov	r0, sl
 8007bc0:	4659      	mov	r1, fp
 8007bc2:	f7f8 fb01 	bl	80001c8 <__aeabi_dmul>
 8007bc6:	a33f      	add	r3, pc, #252	; (adr r3, 8007cc4 <__kernel_sin+0x15c>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f7f8 fc2a 	bl	8000424 <__aeabi_dsub>
 8007bd0:	4652      	mov	r2, sl
 8007bd2:	465b      	mov	r3, fp
 8007bd4:	f7f8 faf8 	bl	80001c8 <__aeabi_dmul>
 8007bd8:	a33c      	add	r3, pc, #240	; (adr r3, 8007ccc <__kernel_sin+0x164>)
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	f7f8 fc23 	bl	8000428 <__adddf3>
 8007be2:	4652      	mov	r2, sl
 8007be4:	465b      	mov	r3, fp
 8007be6:	f7f8 faef 	bl	80001c8 <__aeabi_dmul>
 8007bea:	a33a      	add	r3, pc, #232	; (adr r3, 8007cd4 <__kernel_sin+0x16c>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 fc18 	bl	8000424 <__aeabi_dsub>
 8007bf4:	4652      	mov	r2, sl
 8007bf6:	465b      	mov	r3, fp
 8007bf8:	f7f8 fae6 	bl	80001c8 <__aeabi_dmul>
 8007bfc:	a337      	add	r3, pc, #220	; (adr r3, 8007cdc <__kernel_sin+0x174>)
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f7f8 fc11 	bl	8000428 <__adddf3>
 8007c06:	9b01      	ldr	r3, [sp, #4]
 8007c08:	4606      	mov	r6, r0
 8007c0a:	460f      	mov	r7, r1
 8007c0c:	b9eb      	cbnz	r3, 8007c4a <__kernel_sin+0xe2>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	4650      	mov	r0, sl
 8007c14:	4659      	mov	r1, fp
 8007c16:	f7f8 fad7 	bl	80001c8 <__aeabi_dmul>
 8007c1a:	a325      	add	r3, pc, #148	; (adr r3, 8007cb0 <__kernel_sin+0x148>)
 8007c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c20:	f7f8 fc00 	bl	8000424 <__aeabi_dsub>
 8007c24:	4642      	mov	r2, r8
 8007c26:	464b      	mov	r3, r9
 8007c28:	f7f8 face 	bl	80001c8 <__aeabi_dmul>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4620      	mov	r0, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	f7f8 fbf8 	bl	8000428 <__adddf3>
 8007c38:	4604      	mov	r4, r0
 8007c3a:	460d      	mov	r5, r1
 8007c3c:	ec45 4b10 	vmov	d0, r4, r5
 8007c40:	b003      	add	sp, #12
 8007c42:	ecbd 8b04 	vpop	{d8-d9}
 8007c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4a:	4b1b      	ldr	r3, [pc, #108]	; (8007cb8 <__kernel_sin+0x150>)
 8007c4c:	ec51 0b18 	vmov	r0, r1, d8
 8007c50:	2200      	movs	r2, #0
 8007c52:	f7f8 fab9 	bl	80001c8 <__aeabi_dmul>
 8007c56:	4632      	mov	r2, r6
 8007c58:	ec41 0b19 	vmov	d9, r0, r1
 8007c5c:	463b      	mov	r3, r7
 8007c5e:	4640      	mov	r0, r8
 8007c60:	4649      	mov	r1, r9
 8007c62:	f7f8 fab1 	bl	80001c8 <__aeabi_dmul>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	ec51 0b19 	vmov	r0, r1, d9
 8007c6e:	f7f8 fbd9 	bl	8000424 <__aeabi_dsub>
 8007c72:	4652      	mov	r2, sl
 8007c74:	465b      	mov	r3, fp
 8007c76:	f7f8 faa7 	bl	80001c8 <__aeabi_dmul>
 8007c7a:	ec53 2b18 	vmov	r2, r3, d8
 8007c7e:	f7f8 fbd1 	bl	8000424 <__aeabi_dsub>
 8007c82:	a30b      	add	r3, pc, #44	; (adr r3, 8007cb0 <__kernel_sin+0x148>)
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	4606      	mov	r6, r0
 8007c8a:	460f      	mov	r7, r1
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	4649      	mov	r1, r9
 8007c90:	f7f8 fa9a 	bl	80001c8 <__aeabi_dmul>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4630      	mov	r0, r6
 8007c9a:	4639      	mov	r1, r7
 8007c9c:	f7f8 fbc4 	bl	8000428 <__adddf3>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	f7f8 fbbc 	bl	8000424 <__aeabi_dsub>
 8007cac:	e7c4      	b.n	8007c38 <__kernel_sin+0xd0>
 8007cae:	bf00      	nop
 8007cb0:	55555549 	.word	0x55555549
 8007cb4:	3fc55555 	.word	0x3fc55555
 8007cb8:	3fe00000 	.word	0x3fe00000
 8007cbc:	5acfd57c 	.word	0x5acfd57c
 8007cc0:	3de5d93a 	.word	0x3de5d93a
 8007cc4:	8a2b9ceb 	.word	0x8a2b9ceb
 8007cc8:	3e5ae5e6 	.word	0x3e5ae5e6
 8007ccc:	57b1fe7d 	.word	0x57b1fe7d
 8007cd0:	3ec71de3 	.word	0x3ec71de3
 8007cd4:	19c161d5 	.word	0x19c161d5
 8007cd8:	3f2a01a0 	.word	0x3f2a01a0
 8007cdc:	1110f8a6 	.word	0x1110f8a6
 8007ce0:	3f811111 	.word	0x3f811111
 8007ce4:	00000000 	.word	0x00000000

08007ce8 <__ieee754_rem_pio2>:
 8007ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	ed2d 8b02 	vpush	{d8}
 8007cf0:	ec55 4b10 	vmov	r4, r5, d0
 8007cf4:	4bca      	ldr	r3, [pc, #808]	; (8008020 <__ieee754_rem_pio2+0x338>)
 8007cf6:	b08b      	sub	sp, #44	; 0x2c
 8007cf8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007cfc:	4598      	cmp	r8, r3
 8007cfe:	4682      	mov	sl, r0
 8007d00:	9502      	str	r5, [sp, #8]
 8007d02:	dc08      	bgt.n	8007d16 <__ieee754_rem_pio2+0x2e>
 8007d04:	2200      	movs	r2, #0
 8007d06:	2300      	movs	r3, #0
 8007d08:	ed80 0b00 	vstr	d0, [r0]
 8007d0c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007d10:	f04f 0b00 	mov.w	fp, #0
 8007d14:	e028      	b.n	8007d68 <__ieee754_rem_pio2+0x80>
 8007d16:	4bc3      	ldr	r3, [pc, #780]	; (8008024 <__ieee754_rem_pio2+0x33c>)
 8007d18:	4598      	cmp	r8, r3
 8007d1a:	dc78      	bgt.n	8007e0e <__ieee754_rem_pio2+0x126>
 8007d1c:	9b02      	ldr	r3, [sp, #8]
 8007d1e:	4ec2      	ldr	r6, [pc, #776]	; (8008028 <__ieee754_rem_pio2+0x340>)
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	ee10 0a10 	vmov	r0, s0
 8007d26:	a3b0      	add	r3, pc, #704	; (adr r3, 8007fe8 <__ieee754_rem_pio2+0x300>)
 8007d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	dd39      	ble.n	8007da4 <__ieee754_rem_pio2+0xbc>
 8007d30:	f7f8 fb78 	bl	8000424 <__aeabi_dsub>
 8007d34:	45b0      	cmp	r8, r6
 8007d36:	4604      	mov	r4, r0
 8007d38:	460d      	mov	r5, r1
 8007d3a:	d01b      	beq.n	8007d74 <__ieee754_rem_pio2+0x8c>
 8007d3c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007ff0 <__ieee754_rem_pio2+0x308>)
 8007d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d42:	f7f8 fb6f 	bl	8000424 <__aeabi_dsub>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	e9ca 2300 	strd	r2, r3, [sl]
 8007d4e:	4620      	mov	r0, r4
 8007d50:	4629      	mov	r1, r5
 8007d52:	f7f8 fb67 	bl	8000424 <__aeabi_dsub>
 8007d56:	a3a6      	add	r3, pc, #664	; (adr r3, 8007ff0 <__ieee754_rem_pio2+0x308>)
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	f7f8 fb62 	bl	8000424 <__aeabi_dsub>
 8007d60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007d64:	f04f 0b01 	mov.w	fp, #1
 8007d68:	4658      	mov	r0, fp
 8007d6a:	b00b      	add	sp, #44	; 0x2c
 8007d6c:	ecbd 8b02 	vpop	{d8}
 8007d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d74:	a3a0      	add	r3, pc, #640	; (adr r3, 8007ff8 <__ieee754_rem_pio2+0x310>)
 8007d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7a:	f7f8 fb53 	bl	8000424 <__aeabi_dsub>
 8007d7e:	a3a0      	add	r3, pc, #640	; (adr r3, 8008000 <__ieee754_rem_pio2+0x318>)
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	4604      	mov	r4, r0
 8007d86:	460d      	mov	r5, r1
 8007d88:	f7f8 fb4c 	bl	8000424 <__aeabi_dsub>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	e9ca 2300 	strd	r2, r3, [sl]
 8007d94:	4620      	mov	r0, r4
 8007d96:	4629      	mov	r1, r5
 8007d98:	f7f8 fb44 	bl	8000424 <__aeabi_dsub>
 8007d9c:	a398      	add	r3, pc, #608	; (adr r3, 8008000 <__ieee754_rem_pio2+0x318>)
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	e7db      	b.n	8007d5c <__ieee754_rem_pio2+0x74>
 8007da4:	f7f8 fb40 	bl	8000428 <__adddf3>
 8007da8:	45b0      	cmp	r8, r6
 8007daa:	4604      	mov	r4, r0
 8007dac:	460d      	mov	r5, r1
 8007dae:	d016      	beq.n	8007dde <__ieee754_rem_pio2+0xf6>
 8007db0:	a38f      	add	r3, pc, #572	; (adr r3, 8007ff0 <__ieee754_rem_pio2+0x308>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f7f8 fb37 	bl	8000428 <__adddf3>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	e9ca 2300 	strd	r2, r3, [sl]
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	f7f8 fb2d 	bl	8000424 <__aeabi_dsub>
 8007dca:	a389      	add	r3, pc, #548	; (adr r3, 8007ff0 <__ieee754_rem_pio2+0x308>)
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	f7f8 fb2a 	bl	8000428 <__adddf3>
 8007dd4:	f04f 3bff 	mov.w	fp, #4294967295
 8007dd8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007ddc:	e7c4      	b.n	8007d68 <__ieee754_rem_pio2+0x80>
 8007dde:	a386      	add	r3, pc, #536	; (adr r3, 8007ff8 <__ieee754_rem_pio2+0x310>)
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	f7f8 fb20 	bl	8000428 <__adddf3>
 8007de8:	a385      	add	r3, pc, #532	; (adr r3, 8008000 <__ieee754_rem_pio2+0x318>)
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	4604      	mov	r4, r0
 8007df0:	460d      	mov	r5, r1
 8007df2:	f7f8 fb19 	bl	8000428 <__adddf3>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	e9ca 2300 	strd	r2, r3, [sl]
 8007dfe:	4620      	mov	r0, r4
 8007e00:	4629      	mov	r1, r5
 8007e02:	f7f8 fb0f 	bl	8000424 <__aeabi_dsub>
 8007e06:	a37e      	add	r3, pc, #504	; (adr r3, 8008000 <__ieee754_rem_pio2+0x318>)
 8007e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0c:	e7e0      	b.n	8007dd0 <__ieee754_rem_pio2+0xe8>
 8007e0e:	4b87      	ldr	r3, [pc, #540]	; (800802c <__ieee754_rem_pio2+0x344>)
 8007e10:	4598      	cmp	r8, r3
 8007e12:	f300 80d8 	bgt.w	8007fc6 <__ieee754_rem_pio2+0x2de>
 8007e16:	f000 f96d 	bl	80080f4 <fabs>
 8007e1a:	ec55 4b10 	vmov	r4, r5, d0
 8007e1e:	ee10 0a10 	vmov	r0, s0
 8007e22:	a379      	add	r3, pc, #484	; (adr r3, 8008008 <__ieee754_rem_pio2+0x320>)
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	4629      	mov	r1, r5
 8007e2a:	f7f8 f9cd 	bl	80001c8 <__aeabi_dmul>
 8007e2e:	4b80      	ldr	r3, [pc, #512]	; (8008030 <__ieee754_rem_pio2+0x348>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	f7f8 faf9 	bl	8000428 <__adddf3>
 8007e36:	f7f8 fd35 	bl	80008a4 <__aeabi_d2iz>
 8007e3a:	4683      	mov	fp, r0
 8007e3c:	f7f8 fc40 	bl	80006c0 <__aeabi_i2d>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	ec43 2b18 	vmov	d8, r2, r3
 8007e48:	a367      	add	r3, pc, #412	; (adr r3, 8007fe8 <__ieee754_rem_pio2+0x300>)
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	f7f8 f9bb 	bl	80001c8 <__aeabi_dmul>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	4620      	mov	r0, r4
 8007e58:	4629      	mov	r1, r5
 8007e5a:	f7f8 fae3 	bl	8000424 <__aeabi_dsub>
 8007e5e:	a364      	add	r3, pc, #400	; (adr r3, 8007ff0 <__ieee754_rem_pio2+0x308>)
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	4606      	mov	r6, r0
 8007e66:	460f      	mov	r7, r1
 8007e68:	ec51 0b18 	vmov	r0, r1, d8
 8007e6c:	f7f8 f9ac 	bl	80001c8 <__aeabi_dmul>
 8007e70:	f1bb 0f1f 	cmp.w	fp, #31
 8007e74:	4604      	mov	r4, r0
 8007e76:	460d      	mov	r5, r1
 8007e78:	dc0d      	bgt.n	8007e96 <__ieee754_rem_pio2+0x1ae>
 8007e7a:	4b6e      	ldr	r3, [pc, #440]	; (8008034 <__ieee754_rem_pio2+0x34c>)
 8007e7c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e84:	4543      	cmp	r3, r8
 8007e86:	d006      	beq.n	8007e96 <__ieee754_rem_pio2+0x1ae>
 8007e88:	4622      	mov	r2, r4
 8007e8a:	462b      	mov	r3, r5
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	4639      	mov	r1, r7
 8007e90:	f7f8 fac8 	bl	8000424 <__aeabi_dsub>
 8007e94:	e00e      	b.n	8007eb4 <__ieee754_rem_pio2+0x1cc>
 8007e96:	462b      	mov	r3, r5
 8007e98:	4622      	mov	r2, r4
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	f7f8 fac1 	bl	8000424 <__aeabi_dsub>
 8007ea2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007ea6:	9303      	str	r3, [sp, #12]
 8007ea8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007eac:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007eb0:	2b10      	cmp	r3, #16
 8007eb2:	dc02      	bgt.n	8007eba <__ieee754_rem_pio2+0x1d2>
 8007eb4:	e9ca 0100 	strd	r0, r1, [sl]
 8007eb8:	e039      	b.n	8007f2e <__ieee754_rem_pio2+0x246>
 8007eba:	a34f      	add	r3, pc, #316	; (adr r3, 8007ff8 <__ieee754_rem_pio2+0x310>)
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	ec51 0b18 	vmov	r0, r1, d8
 8007ec4:	f7f8 f980 	bl	80001c8 <__aeabi_dmul>
 8007ec8:	4604      	mov	r4, r0
 8007eca:	460d      	mov	r5, r1
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	f7f8 faa6 	bl	8000424 <__aeabi_dsub>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4680      	mov	r8, r0
 8007ede:	4689      	mov	r9, r1
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	4639      	mov	r1, r7
 8007ee4:	f7f8 fa9e 	bl	8000424 <__aeabi_dsub>
 8007ee8:	4622      	mov	r2, r4
 8007eea:	462b      	mov	r3, r5
 8007eec:	f7f8 fa9a 	bl	8000424 <__aeabi_dsub>
 8007ef0:	a343      	add	r3, pc, #268	; (adr r3, 8008000 <__ieee754_rem_pio2+0x318>)
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	460d      	mov	r5, r1
 8007efa:	ec51 0b18 	vmov	r0, r1, d8
 8007efe:	f7f8 f963 	bl	80001c8 <__aeabi_dmul>
 8007f02:	4622      	mov	r2, r4
 8007f04:	462b      	mov	r3, r5
 8007f06:	f7f8 fa8d 	bl	8000424 <__aeabi_dsub>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	4604      	mov	r4, r0
 8007f10:	460d      	mov	r5, r1
 8007f12:	4640      	mov	r0, r8
 8007f14:	4649      	mov	r1, r9
 8007f16:	f7f8 fa85 	bl	8000424 <__aeabi_dsub>
 8007f1a:	9a03      	ldr	r2, [sp, #12]
 8007f1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b31      	cmp	r3, #49	; 0x31
 8007f24:	dc24      	bgt.n	8007f70 <__ieee754_rem_pio2+0x288>
 8007f26:	e9ca 0100 	strd	r0, r1, [sl]
 8007f2a:	4646      	mov	r6, r8
 8007f2c:	464f      	mov	r7, r9
 8007f2e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007f32:	4630      	mov	r0, r6
 8007f34:	4642      	mov	r2, r8
 8007f36:	464b      	mov	r3, r9
 8007f38:	4639      	mov	r1, r7
 8007f3a:	f7f8 fa73 	bl	8000424 <__aeabi_dsub>
 8007f3e:	462b      	mov	r3, r5
 8007f40:	4622      	mov	r2, r4
 8007f42:	f7f8 fa6f 	bl	8000424 <__aeabi_dsub>
 8007f46:	9b02      	ldr	r3, [sp, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007f4e:	f6bf af0b 	bge.w	8007d68 <__ieee754_rem_pio2+0x80>
 8007f52:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007f56:	f8ca 3004 	str.w	r3, [sl, #4]
 8007f5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f5e:	f8ca 8000 	str.w	r8, [sl]
 8007f62:	f8ca 0008 	str.w	r0, [sl, #8]
 8007f66:	f8ca 300c 	str.w	r3, [sl, #12]
 8007f6a:	f1cb 0b00 	rsb	fp, fp, #0
 8007f6e:	e6fb      	b.n	8007d68 <__ieee754_rem_pio2+0x80>
 8007f70:	a327      	add	r3, pc, #156	; (adr r3, 8008010 <__ieee754_rem_pio2+0x328>)
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	ec51 0b18 	vmov	r0, r1, d8
 8007f7a:	f7f8 f925 	bl	80001c8 <__aeabi_dmul>
 8007f7e:	4604      	mov	r4, r0
 8007f80:	460d      	mov	r5, r1
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4640      	mov	r0, r8
 8007f88:	4649      	mov	r1, r9
 8007f8a:	f7f8 fa4b 	bl	8000424 <__aeabi_dsub>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4606      	mov	r6, r0
 8007f94:	460f      	mov	r7, r1
 8007f96:	4640      	mov	r0, r8
 8007f98:	4649      	mov	r1, r9
 8007f9a:	f7f8 fa43 	bl	8000424 <__aeabi_dsub>
 8007f9e:	4622      	mov	r2, r4
 8007fa0:	462b      	mov	r3, r5
 8007fa2:	f7f8 fa3f 	bl	8000424 <__aeabi_dsub>
 8007fa6:	a31c      	add	r3, pc, #112	; (adr r3, 8008018 <__ieee754_rem_pio2+0x330>)
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	4604      	mov	r4, r0
 8007fae:	460d      	mov	r5, r1
 8007fb0:	ec51 0b18 	vmov	r0, r1, d8
 8007fb4:	f7f8 f908 	bl	80001c8 <__aeabi_dmul>
 8007fb8:	4622      	mov	r2, r4
 8007fba:	462b      	mov	r3, r5
 8007fbc:	f7f8 fa32 	bl	8000424 <__aeabi_dsub>
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	460d      	mov	r5, r1
 8007fc4:	e760      	b.n	8007e88 <__ieee754_rem_pio2+0x1a0>
 8007fc6:	4b1c      	ldr	r3, [pc, #112]	; (8008038 <__ieee754_rem_pio2+0x350>)
 8007fc8:	4598      	cmp	r8, r3
 8007fca:	dd37      	ble.n	800803c <__ieee754_rem_pio2+0x354>
 8007fcc:	ee10 2a10 	vmov	r2, s0
 8007fd0:	462b      	mov	r3, r5
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	f7f8 fa25 	bl	8000424 <__aeabi_dsub>
 8007fda:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007fde:	e9ca 0100 	strd	r0, r1, [sl]
 8007fe2:	e695      	b.n	8007d10 <__ieee754_rem_pio2+0x28>
 8007fe4:	f3af 8000 	nop.w
 8007fe8:	54400000 	.word	0x54400000
 8007fec:	3ff921fb 	.word	0x3ff921fb
 8007ff0:	1a626331 	.word	0x1a626331
 8007ff4:	3dd0b461 	.word	0x3dd0b461
 8007ff8:	1a600000 	.word	0x1a600000
 8007ffc:	3dd0b461 	.word	0x3dd0b461
 8008000:	2e037073 	.word	0x2e037073
 8008004:	3ba3198a 	.word	0x3ba3198a
 8008008:	6dc9c883 	.word	0x6dc9c883
 800800c:	3fe45f30 	.word	0x3fe45f30
 8008010:	2e000000 	.word	0x2e000000
 8008014:	3ba3198a 	.word	0x3ba3198a
 8008018:	252049c1 	.word	0x252049c1
 800801c:	397b839a 	.word	0x397b839a
 8008020:	3fe921fb 	.word	0x3fe921fb
 8008024:	4002d97b 	.word	0x4002d97b
 8008028:	3ff921fb 	.word	0x3ff921fb
 800802c:	413921fb 	.word	0x413921fb
 8008030:	3fe00000 	.word	0x3fe00000
 8008034:	080089e0 	.word	0x080089e0
 8008038:	7fefffff 	.word	0x7fefffff
 800803c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008040:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8008044:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008048:	4620      	mov	r0, r4
 800804a:	460d      	mov	r5, r1
 800804c:	f7f8 fc2a 	bl	80008a4 <__aeabi_d2iz>
 8008050:	f7f8 fb36 	bl	80006c0 <__aeabi_i2d>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4620      	mov	r0, r4
 800805a:	4629      	mov	r1, r5
 800805c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008060:	f7f8 f9e0 	bl	8000424 <__aeabi_dsub>
 8008064:	4b21      	ldr	r3, [pc, #132]	; (80080ec <__ieee754_rem_pio2+0x404>)
 8008066:	2200      	movs	r2, #0
 8008068:	f7f8 f8ae 	bl	80001c8 <__aeabi_dmul>
 800806c:	460d      	mov	r5, r1
 800806e:	4604      	mov	r4, r0
 8008070:	f7f8 fc18 	bl	80008a4 <__aeabi_d2iz>
 8008074:	f7f8 fb24 	bl	80006c0 <__aeabi_i2d>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	4620      	mov	r0, r4
 800807e:	4629      	mov	r1, r5
 8008080:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008084:	f7f8 f9ce 	bl	8000424 <__aeabi_dsub>
 8008088:	4b18      	ldr	r3, [pc, #96]	; (80080ec <__ieee754_rem_pio2+0x404>)
 800808a:	2200      	movs	r2, #0
 800808c:	f7f8 f89c 	bl	80001c8 <__aeabi_dmul>
 8008090:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008094:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008098:	2703      	movs	r7, #3
 800809a:	2400      	movs	r4, #0
 800809c:	2500      	movs	r5, #0
 800809e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80080a2:	4622      	mov	r2, r4
 80080a4:	462b      	mov	r3, r5
 80080a6:	46b9      	mov	r9, r7
 80080a8:	3f01      	subs	r7, #1
 80080aa:	f7f8 fbc9 	bl	8000840 <__aeabi_dcmpeq>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d1f5      	bne.n	800809e <__ieee754_rem_pio2+0x3b6>
 80080b2:	4b0f      	ldr	r3, [pc, #60]	; (80080f0 <__ieee754_rem_pio2+0x408>)
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	2302      	movs	r3, #2
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	4632      	mov	r2, r6
 80080bc:	464b      	mov	r3, r9
 80080be:	4651      	mov	r1, sl
 80080c0:	a804      	add	r0, sp, #16
 80080c2:	f000 f821 	bl	8008108 <__kernel_rem_pio2>
 80080c6:	9b02      	ldr	r3, [sp, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	4683      	mov	fp, r0
 80080cc:	f6bf ae4c 	bge.w	8007d68 <__ieee754_rem_pio2+0x80>
 80080d0:	e9da 2100 	ldrd	r2, r1, [sl]
 80080d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080d8:	e9ca 2300 	strd	r2, r3, [sl]
 80080dc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80080e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080e4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80080e8:	e73f      	b.n	8007f6a <__ieee754_rem_pio2+0x282>
 80080ea:	bf00      	nop
 80080ec:	41700000 	.word	0x41700000
 80080f0:	08008a60 	.word	0x08008a60

080080f4 <fabs>:
 80080f4:	ec51 0b10 	vmov	r0, r1, d0
 80080f8:	ee10 2a10 	vmov	r2, s0
 80080fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008100:	ec43 2b10 	vmov	d0, r2, r3
 8008104:	4770      	bx	lr
	...

08008108 <__kernel_rem_pio2>:
 8008108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810c:	ed2d 8b02 	vpush	{d8}
 8008110:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008114:	f112 0f14 	cmn.w	r2, #20
 8008118:	9306      	str	r3, [sp, #24]
 800811a:	9104      	str	r1, [sp, #16]
 800811c:	4bc2      	ldr	r3, [pc, #776]	; (8008428 <__kernel_rem_pio2+0x320>)
 800811e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008120:	9009      	str	r0, [sp, #36]	; 0x24
 8008122:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	9b06      	ldr	r3, [sp, #24]
 800812a:	f103 33ff 	add.w	r3, r3, #4294967295
 800812e:	bfa8      	it	ge
 8008130:	1ed4      	subge	r4, r2, #3
 8008132:	9305      	str	r3, [sp, #20]
 8008134:	bfb2      	itee	lt
 8008136:	2400      	movlt	r4, #0
 8008138:	2318      	movge	r3, #24
 800813a:	fb94 f4f3 	sdivge	r4, r4, r3
 800813e:	f06f 0317 	mvn.w	r3, #23
 8008142:	fb04 3303 	mla	r3, r4, r3, r3
 8008146:	eb03 0a02 	add.w	sl, r3, r2
 800814a:	9b00      	ldr	r3, [sp, #0]
 800814c:	9a05      	ldr	r2, [sp, #20]
 800814e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008418 <__kernel_rem_pio2+0x310>
 8008152:	eb03 0802 	add.w	r8, r3, r2
 8008156:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008158:	1aa7      	subs	r7, r4, r2
 800815a:	ae20      	add	r6, sp, #128	; 0x80
 800815c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008160:	2500      	movs	r5, #0
 8008162:	4545      	cmp	r5, r8
 8008164:	dd13      	ble.n	800818e <__kernel_rem_pio2+0x86>
 8008166:	9b06      	ldr	r3, [sp, #24]
 8008168:	aa20      	add	r2, sp, #128	; 0x80
 800816a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800816e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008172:	f04f 0800 	mov.w	r8, #0
 8008176:	9b00      	ldr	r3, [sp, #0]
 8008178:	4598      	cmp	r8, r3
 800817a:	dc31      	bgt.n	80081e0 <__kernel_rem_pio2+0xd8>
 800817c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008418 <__kernel_rem_pio2+0x310>
 8008180:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008184:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008188:	462f      	mov	r7, r5
 800818a:	2600      	movs	r6, #0
 800818c:	e01b      	b.n	80081c6 <__kernel_rem_pio2+0xbe>
 800818e:	42ef      	cmn	r7, r5
 8008190:	d407      	bmi.n	80081a2 <__kernel_rem_pio2+0x9a>
 8008192:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008196:	f7f8 fa93 	bl	80006c0 <__aeabi_i2d>
 800819a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800819e:	3501      	adds	r5, #1
 80081a0:	e7df      	b.n	8008162 <__kernel_rem_pio2+0x5a>
 80081a2:	ec51 0b18 	vmov	r0, r1, d8
 80081a6:	e7f8      	b.n	800819a <__kernel_rem_pio2+0x92>
 80081a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80081b0:	f7f8 f80a 	bl	80001c8 <__aeabi_dmul>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081bc:	f7f8 f934 	bl	8000428 <__adddf3>
 80081c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081c4:	3601      	adds	r6, #1
 80081c6:	9b05      	ldr	r3, [sp, #20]
 80081c8:	429e      	cmp	r6, r3
 80081ca:	f1a7 0708 	sub.w	r7, r7, #8
 80081ce:	ddeb      	ble.n	80081a8 <__kernel_rem_pio2+0xa0>
 80081d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081d4:	f108 0801 	add.w	r8, r8, #1
 80081d8:	ecab 7b02 	vstmia	fp!, {d7}
 80081dc:	3508      	adds	r5, #8
 80081de:	e7ca      	b.n	8008176 <__kernel_rem_pio2+0x6e>
 80081e0:	9b00      	ldr	r3, [sp, #0]
 80081e2:	aa0c      	add	r2, sp, #48	; 0x30
 80081e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80081ea:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80081ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80081f0:	9c00      	ldr	r4, [sp, #0]
 80081f2:	930a      	str	r3, [sp, #40]	; 0x28
 80081f4:	00e3      	lsls	r3, r4, #3
 80081f6:	9308      	str	r3, [sp, #32]
 80081f8:	ab98      	add	r3, sp, #608	; 0x260
 80081fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081fe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008202:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008206:	ab70      	add	r3, sp, #448	; 0x1c0
 8008208:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800820c:	46c3      	mov	fp, r8
 800820e:	46a1      	mov	r9, r4
 8008210:	f1b9 0f00 	cmp.w	r9, #0
 8008214:	f1a5 0508 	sub.w	r5, r5, #8
 8008218:	dc77      	bgt.n	800830a <__kernel_rem_pio2+0x202>
 800821a:	ec47 6b10 	vmov	d0, r6, r7
 800821e:	4650      	mov	r0, sl
 8008220:	f000 fac2 	bl	80087a8 <scalbn>
 8008224:	ec57 6b10 	vmov	r6, r7, d0
 8008228:	2200      	movs	r2, #0
 800822a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800822e:	ee10 0a10 	vmov	r0, s0
 8008232:	4639      	mov	r1, r7
 8008234:	f7f7 ffc8 	bl	80001c8 <__aeabi_dmul>
 8008238:	ec41 0b10 	vmov	d0, r0, r1
 800823c:	f000 fb34 	bl	80088a8 <floor>
 8008240:	4b7a      	ldr	r3, [pc, #488]	; (800842c <__kernel_rem_pio2+0x324>)
 8008242:	ec51 0b10 	vmov	r0, r1, d0
 8008246:	2200      	movs	r2, #0
 8008248:	f7f7 ffbe 	bl	80001c8 <__aeabi_dmul>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	4630      	mov	r0, r6
 8008252:	4639      	mov	r1, r7
 8008254:	f7f8 f8e6 	bl	8000424 <__aeabi_dsub>
 8008258:	460f      	mov	r7, r1
 800825a:	4606      	mov	r6, r0
 800825c:	f7f8 fb22 	bl	80008a4 <__aeabi_d2iz>
 8008260:	9002      	str	r0, [sp, #8]
 8008262:	f7f8 fa2d 	bl	80006c0 <__aeabi_i2d>
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	4630      	mov	r0, r6
 800826c:	4639      	mov	r1, r7
 800826e:	f7f8 f8d9 	bl	8000424 <__aeabi_dsub>
 8008272:	f1ba 0f00 	cmp.w	sl, #0
 8008276:	4606      	mov	r6, r0
 8008278:	460f      	mov	r7, r1
 800827a:	dd6d      	ble.n	8008358 <__kernel_rem_pio2+0x250>
 800827c:	1e61      	subs	r1, r4, #1
 800827e:	ab0c      	add	r3, sp, #48	; 0x30
 8008280:	9d02      	ldr	r5, [sp, #8]
 8008282:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008286:	f1ca 0018 	rsb	r0, sl, #24
 800828a:	fa43 f200 	asr.w	r2, r3, r0
 800828e:	4415      	add	r5, r2
 8008290:	4082      	lsls	r2, r0
 8008292:	1a9b      	subs	r3, r3, r2
 8008294:	aa0c      	add	r2, sp, #48	; 0x30
 8008296:	9502      	str	r5, [sp, #8]
 8008298:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800829c:	f1ca 0217 	rsb	r2, sl, #23
 80082a0:	fa43 fb02 	asr.w	fp, r3, r2
 80082a4:	f1bb 0f00 	cmp.w	fp, #0
 80082a8:	dd65      	ble.n	8008376 <__kernel_rem_pio2+0x26e>
 80082aa:	9b02      	ldr	r3, [sp, #8]
 80082ac:	2200      	movs	r2, #0
 80082ae:	3301      	adds	r3, #1
 80082b0:	9302      	str	r3, [sp, #8]
 80082b2:	4615      	mov	r5, r2
 80082b4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80082b8:	4294      	cmp	r4, r2
 80082ba:	f300 809f 	bgt.w	80083fc <__kernel_rem_pio2+0x2f4>
 80082be:	f1ba 0f00 	cmp.w	sl, #0
 80082c2:	dd07      	ble.n	80082d4 <__kernel_rem_pio2+0x1cc>
 80082c4:	f1ba 0f01 	cmp.w	sl, #1
 80082c8:	f000 80c1 	beq.w	800844e <__kernel_rem_pio2+0x346>
 80082cc:	f1ba 0f02 	cmp.w	sl, #2
 80082d0:	f000 80c7 	beq.w	8008462 <__kernel_rem_pio2+0x35a>
 80082d4:	f1bb 0f02 	cmp.w	fp, #2
 80082d8:	d14d      	bne.n	8008376 <__kernel_rem_pio2+0x26e>
 80082da:	4632      	mov	r2, r6
 80082dc:	463b      	mov	r3, r7
 80082de:	4954      	ldr	r1, [pc, #336]	; (8008430 <__kernel_rem_pio2+0x328>)
 80082e0:	2000      	movs	r0, #0
 80082e2:	f7f8 f89f 	bl	8000424 <__aeabi_dsub>
 80082e6:	4606      	mov	r6, r0
 80082e8:	460f      	mov	r7, r1
 80082ea:	2d00      	cmp	r5, #0
 80082ec:	d043      	beq.n	8008376 <__kernel_rem_pio2+0x26e>
 80082ee:	4650      	mov	r0, sl
 80082f0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008420 <__kernel_rem_pio2+0x318>
 80082f4:	f000 fa58 	bl	80087a8 <scalbn>
 80082f8:	4630      	mov	r0, r6
 80082fa:	4639      	mov	r1, r7
 80082fc:	ec53 2b10 	vmov	r2, r3, d0
 8008300:	f7f8 f890 	bl	8000424 <__aeabi_dsub>
 8008304:	4606      	mov	r6, r0
 8008306:	460f      	mov	r7, r1
 8008308:	e035      	b.n	8008376 <__kernel_rem_pio2+0x26e>
 800830a:	4b4a      	ldr	r3, [pc, #296]	; (8008434 <__kernel_rem_pio2+0x32c>)
 800830c:	2200      	movs	r2, #0
 800830e:	4630      	mov	r0, r6
 8008310:	4639      	mov	r1, r7
 8008312:	f7f7 ff59 	bl	80001c8 <__aeabi_dmul>
 8008316:	f7f8 fac5 	bl	80008a4 <__aeabi_d2iz>
 800831a:	f7f8 f9d1 	bl	80006c0 <__aeabi_i2d>
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	ec43 2b18 	vmov	d8, r2, r3
 8008326:	4b44      	ldr	r3, [pc, #272]	; (8008438 <__kernel_rem_pio2+0x330>)
 8008328:	2200      	movs	r2, #0
 800832a:	f7f7 ff4d 	bl	80001c8 <__aeabi_dmul>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4630      	mov	r0, r6
 8008334:	4639      	mov	r1, r7
 8008336:	f7f8 f875 	bl	8000424 <__aeabi_dsub>
 800833a:	f7f8 fab3 	bl	80008a4 <__aeabi_d2iz>
 800833e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008342:	f84b 0b04 	str.w	r0, [fp], #4
 8008346:	ec51 0b18 	vmov	r0, r1, d8
 800834a:	f7f8 f86d 	bl	8000428 <__adddf3>
 800834e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008352:	4606      	mov	r6, r0
 8008354:	460f      	mov	r7, r1
 8008356:	e75b      	b.n	8008210 <__kernel_rem_pio2+0x108>
 8008358:	d106      	bne.n	8008368 <__kernel_rem_pio2+0x260>
 800835a:	1e63      	subs	r3, r4, #1
 800835c:	aa0c      	add	r2, sp, #48	; 0x30
 800835e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008362:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8008366:	e79d      	b.n	80082a4 <__kernel_rem_pio2+0x19c>
 8008368:	4b34      	ldr	r3, [pc, #208]	; (800843c <__kernel_rem_pio2+0x334>)
 800836a:	2200      	movs	r2, #0
 800836c:	f7f8 fa86 	bl	800087c <__aeabi_dcmpge>
 8008370:	2800      	cmp	r0, #0
 8008372:	d140      	bne.n	80083f6 <__kernel_rem_pio2+0x2ee>
 8008374:	4683      	mov	fp, r0
 8008376:	2200      	movs	r2, #0
 8008378:	2300      	movs	r3, #0
 800837a:	4630      	mov	r0, r6
 800837c:	4639      	mov	r1, r7
 800837e:	f7f8 fa5f 	bl	8000840 <__aeabi_dcmpeq>
 8008382:	2800      	cmp	r0, #0
 8008384:	f000 80c1 	beq.w	800850a <__kernel_rem_pio2+0x402>
 8008388:	1e65      	subs	r5, r4, #1
 800838a:	462b      	mov	r3, r5
 800838c:	2200      	movs	r2, #0
 800838e:	9900      	ldr	r1, [sp, #0]
 8008390:	428b      	cmp	r3, r1
 8008392:	da6d      	bge.n	8008470 <__kernel_rem_pio2+0x368>
 8008394:	2a00      	cmp	r2, #0
 8008396:	f000 808a 	beq.w	80084ae <__kernel_rem_pio2+0x3a6>
 800839a:	ab0c      	add	r3, sp, #48	; 0x30
 800839c:	f1aa 0a18 	sub.w	sl, sl, #24
 80083a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 80ae 	beq.w	8008506 <__kernel_rem_pio2+0x3fe>
 80083aa:	4650      	mov	r0, sl
 80083ac:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008420 <__kernel_rem_pio2+0x318>
 80083b0:	f000 f9fa 	bl	80087a8 <scalbn>
 80083b4:	1c6b      	adds	r3, r5, #1
 80083b6:	00da      	lsls	r2, r3, #3
 80083b8:	9205      	str	r2, [sp, #20]
 80083ba:	ec57 6b10 	vmov	r6, r7, d0
 80083be:	aa70      	add	r2, sp, #448	; 0x1c0
 80083c0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008434 <__kernel_rem_pio2+0x32c>
 80083c4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80083c8:	462c      	mov	r4, r5
 80083ca:	f04f 0800 	mov.w	r8, #0
 80083ce:	2c00      	cmp	r4, #0
 80083d0:	f280 80d4 	bge.w	800857c <__kernel_rem_pio2+0x474>
 80083d4:	462c      	mov	r4, r5
 80083d6:	2c00      	cmp	r4, #0
 80083d8:	f2c0 8102 	blt.w	80085e0 <__kernel_rem_pio2+0x4d8>
 80083dc:	4b18      	ldr	r3, [pc, #96]	; (8008440 <__kernel_rem_pio2+0x338>)
 80083de:	461e      	mov	r6, r3
 80083e0:	ab70      	add	r3, sp, #448	; 0x1c0
 80083e2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80083e6:	1b2b      	subs	r3, r5, r4
 80083e8:	f04f 0900 	mov.w	r9, #0
 80083ec:	f04f 0a00 	mov.w	sl, #0
 80083f0:	2700      	movs	r7, #0
 80083f2:	9306      	str	r3, [sp, #24]
 80083f4:	e0e6      	b.n	80085c4 <__kernel_rem_pio2+0x4bc>
 80083f6:	f04f 0b02 	mov.w	fp, #2
 80083fa:	e756      	b.n	80082aa <__kernel_rem_pio2+0x1a2>
 80083fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008400:	bb05      	cbnz	r5, 8008444 <__kernel_rem_pio2+0x33c>
 8008402:	b123      	cbz	r3, 800840e <__kernel_rem_pio2+0x306>
 8008404:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008408:	f8c8 3000 	str.w	r3, [r8]
 800840c:	2301      	movs	r3, #1
 800840e:	3201      	adds	r2, #1
 8008410:	f108 0804 	add.w	r8, r8, #4
 8008414:	461d      	mov	r5, r3
 8008416:	e74f      	b.n	80082b8 <__kernel_rem_pio2+0x1b0>
	...
 8008424:	3ff00000 	.word	0x3ff00000
 8008428:	08008ba8 	.word	0x08008ba8
 800842c:	40200000 	.word	0x40200000
 8008430:	3ff00000 	.word	0x3ff00000
 8008434:	3e700000 	.word	0x3e700000
 8008438:	41700000 	.word	0x41700000
 800843c:	3fe00000 	.word	0x3fe00000
 8008440:	08008b68 	.word	0x08008b68
 8008444:	1acb      	subs	r3, r1, r3
 8008446:	f8c8 3000 	str.w	r3, [r8]
 800844a:	462b      	mov	r3, r5
 800844c:	e7df      	b.n	800840e <__kernel_rem_pio2+0x306>
 800844e:	1e62      	subs	r2, r4, #1
 8008450:	ab0c      	add	r3, sp, #48	; 0x30
 8008452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008456:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800845a:	a90c      	add	r1, sp, #48	; 0x30
 800845c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008460:	e738      	b.n	80082d4 <__kernel_rem_pio2+0x1cc>
 8008462:	1e62      	subs	r2, r4, #1
 8008464:	ab0c      	add	r3, sp, #48	; 0x30
 8008466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800846e:	e7f4      	b.n	800845a <__kernel_rem_pio2+0x352>
 8008470:	a90c      	add	r1, sp, #48	; 0x30
 8008472:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008476:	3b01      	subs	r3, #1
 8008478:	430a      	orrs	r2, r1
 800847a:	e788      	b.n	800838e <__kernel_rem_pio2+0x286>
 800847c:	3301      	adds	r3, #1
 800847e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008482:	2900      	cmp	r1, #0
 8008484:	d0fa      	beq.n	800847c <__kernel_rem_pio2+0x374>
 8008486:	9a08      	ldr	r2, [sp, #32]
 8008488:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800848c:	446a      	add	r2, sp
 800848e:	3a98      	subs	r2, #152	; 0x98
 8008490:	9208      	str	r2, [sp, #32]
 8008492:	9a06      	ldr	r2, [sp, #24]
 8008494:	a920      	add	r1, sp, #128	; 0x80
 8008496:	18a2      	adds	r2, r4, r2
 8008498:	18e3      	adds	r3, r4, r3
 800849a:	f104 0801 	add.w	r8, r4, #1
 800849e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80084a2:	9302      	str	r3, [sp, #8]
 80084a4:	9b02      	ldr	r3, [sp, #8]
 80084a6:	4543      	cmp	r3, r8
 80084a8:	da04      	bge.n	80084b4 <__kernel_rem_pio2+0x3ac>
 80084aa:	461c      	mov	r4, r3
 80084ac:	e6a2      	b.n	80081f4 <__kernel_rem_pio2+0xec>
 80084ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084b0:	2301      	movs	r3, #1
 80084b2:	e7e4      	b.n	800847e <__kernel_rem_pio2+0x376>
 80084b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80084ba:	f7f8 f901 	bl	80006c0 <__aeabi_i2d>
 80084be:	e8e5 0102 	strd	r0, r1, [r5], #8
 80084c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c4:	46ab      	mov	fp, r5
 80084c6:	461c      	mov	r4, r3
 80084c8:	f04f 0900 	mov.w	r9, #0
 80084cc:	2600      	movs	r6, #0
 80084ce:	2700      	movs	r7, #0
 80084d0:	9b05      	ldr	r3, [sp, #20]
 80084d2:	4599      	cmp	r9, r3
 80084d4:	dd06      	ble.n	80084e4 <__kernel_rem_pio2+0x3dc>
 80084d6:	9b08      	ldr	r3, [sp, #32]
 80084d8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80084dc:	f108 0801 	add.w	r8, r8, #1
 80084e0:	9308      	str	r3, [sp, #32]
 80084e2:	e7df      	b.n	80084a4 <__kernel_rem_pio2+0x39c>
 80084e4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80084e8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80084ec:	f7f7 fe6c 	bl	80001c8 <__aeabi_dmul>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4630      	mov	r0, r6
 80084f6:	4639      	mov	r1, r7
 80084f8:	f7f7 ff96 	bl	8000428 <__adddf3>
 80084fc:	f109 0901 	add.w	r9, r9, #1
 8008500:	4606      	mov	r6, r0
 8008502:	460f      	mov	r7, r1
 8008504:	e7e4      	b.n	80084d0 <__kernel_rem_pio2+0x3c8>
 8008506:	3d01      	subs	r5, #1
 8008508:	e747      	b.n	800839a <__kernel_rem_pio2+0x292>
 800850a:	ec47 6b10 	vmov	d0, r6, r7
 800850e:	f1ca 0000 	rsb	r0, sl, #0
 8008512:	f000 f949 	bl	80087a8 <scalbn>
 8008516:	ec57 6b10 	vmov	r6, r7, d0
 800851a:	4ba0      	ldr	r3, [pc, #640]	; (800879c <__kernel_rem_pio2+0x694>)
 800851c:	ee10 0a10 	vmov	r0, s0
 8008520:	2200      	movs	r2, #0
 8008522:	4639      	mov	r1, r7
 8008524:	f7f8 f9aa 	bl	800087c <__aeabi_dcmpge>
 8008528:	b1f8      	cbz	r0, 800856a <__kernel_rem_pio2+0x462>
 800852a:	4b9d      	ldr	r3, [pc, #628]	; (80087a0 <__kernel_rem_pio2+0x698>)
 800852c:	2200      	movs	r2, #0
 800852e:	4630      	mov	r0, r6
 8008530:	4639      	mov	r1, r7
 8008532:	f7f7 fe49 	bl	80001c8 <__aeabi_dmul>
 8008536:	f7f8 f9b5 	bl	80008a4 <__aeabi_d2iz>
 800853a:	4680      	mov	r8, r0
 800853c:	f7f8 f8c0 	bl	80006c0 <__aeabi_i2d>
 8008540:	4b96      	ldr	r3, [pc, #600]	; (800879c <__kernel_rem_pio2+0x694>)
 8008542:	2200      	movs	r2, #0
 8008544:	f7f7 fe40 	bl	80001c8 <__aeabi_dmul>
 8008548:	460b      	mov	r3, r1
 800854a:	4602      	mov	r2, r0
 800854c:	4639      	mov	r1, r7
 800854e:	4630      	mov	r0, r6
 8008550:	f7f7 ff68 	bl	8000424 <__aeabi_dsub>
 8008554:	f7f8 f9a6 	bl	80008a4 <__aeabi_d2iz>
 8008558:	1c65      	adds	r5, r4, #1
 800855a:	ab0c      	add	r3, sp, #48	; 0x30
 800855c:	f10a 0a18 	add.w	sl, sl, #24
 8008560:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008564:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008568:	e71f      	b.n	80083aa <__kernel_rem_pio2+0x2a2>
 800856a:	4630      	mov	r0, r6
 800856c:	4639      	mov	r1, r7
 800856e:	f7f8 f999 	bl	80008a4 <__aeabi_d2iz>
 8008572:	ab0c      	add	r3, sp, #48	; 0x30
 8008574:	4625      	mov	r5, r4
 8008576:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800857a:	e716      	b.n	80083aa <__kernel_rem_pio2+0x2a2>
 800857c:	ab0c      	add	r3, sp, #48	; 0x30
 800857e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008582:	f7f8 f89d 	bl	80006c0 <__aeabi_i2d>
 8008586:	4632      	mov	r2, r6
 8008588:	463b      	mov	r3, r7
 800858a:	f7f7 fe1d 	bl	80001c8 <__aeabi_dmul>
 800858e:	4642      	mov	r2, r8
 8008590:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008594:	464b      	mov	r3, r9
 8008596:	4630      	mov	r0, r6
 8008598:	4639      	mov	r1, r7
 800859a:	f7f7 fe15 	bl	80001c8 <__aeabi_dmul>
 800859e:	3c01      	subs	r4, #1
 80085a0:	4606      	mov	r6, r0
 80085a2:	460f      	mov	r7, r1
 80085a4:	e713      	b.n	80083ce <__kernel_rem_pio2+0x2c6>
 80085a6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80085aa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80085ae:	f7f7 fe0b 	bl	80001c8 <__aeabi_dmul>
 80085b2:	4602      	mov	r2, r0
 80085b4:	460b      	mov	r3, r1
 80085b6:	4648      	mov	r0, r9
 80085b8:	4651      	mov	r1, sl
 80085ba:	f7f7 ff35 	bl	8000428 <__adddf3>
 80085be:	3701      	adds	r7, #1
 80085c0:	4681      	mov	r9, r0
 80085c2:	468a      	mov	sl, r1
 80085c4:	9b00      	ldr	r3, [sp, #0]
 80085c6:	429f      	cmp	r7, r3
 80085c8:	dc02      	bgt.n	80085d0 <__kernel_rem_pio2+0x4c8>
 80085ca:	9b06      	ldr	r3, [sp, #24]
 80085cc:	429f      	cmp	r7, r3
 80085ce:	ddea      	ble.n	80085a6 <__kernel_rem_pio2+0x49e>
 80085d0:	9a06      	ldr	r2, [sp, #24]
 80085d2:	ab48      	add	r3, sp, #288	; 0x120
 80085d4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80085d8:	e9c6 9a00 	strd	r9, sl, [r6]
 80085dc:	3c01      	subs	r4, #1
 80085de:	e6fa      	b.n	80083d6 <__kernel_rem_pio2+0x2ce>
 80085e0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	dc0b      	bgt.n	80085fe <__kernel_rem_pio2+0x4f6>
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	dc39      	bgt.n	800865e <__kernel_rem_pio2+0x556>
 80085ea:	d05d      	beq.n	80086a8 <__kernel_rem_pio2+0x5a0>
 80085ec:	9b02      	ldr	r3, [sp, #8]
 80085ee:	f003 0007 	and.w	r0, r3, #7
 80085f2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80085f6:	ecbd 8b02 	vpop	{d8}
 80085fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008600:	2b03      	cmp	r3, #3
 8008602:	d1f3      	bne.n	80085ec <__kernel_rem_pio2+0x4e4>
 8008604:	9b05      	ldr	r3, [sp, #20]
 8008606:	9500      	str	r5, [sp, #0]
 8008608:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800860c:	eb0d 0403 	add.w	r4, sp, r3
 8008610:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008614:	46a2      	mov	sl, r4
 8008616:	9b00      	ldr	r3, [sp, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	f1aa 0a08 	sub.w	sl, sl, #8
 800861e:	dc69      	bgt.n	80086f4 <__kernel_rem_pio2+0x5ec>
 8008620:	46aa      	mov	sl, r5
 8008622:	f1ba 0f01 	cmp.w	sl, #1
 8008626:	f1a4 0408 	sub.w	r4, r4, #8
 800862a:	f300 8083 	bgt.w	8008734 <__kernel_rem_pio2+0x62c>
 800862e:	9c05      	ldr	r4, [sp, #20]
 8008630:	ab48      	add	r3, sp, #288	; 0x120
 8008632:	441c      	add	r4, r3
 8008634:	2000      	movs	r0, #0
 8008636:	2100      	movs	r1, #0
 8008638:	2d01      	cmp	r5, #1
 800863a:	f300 809a 	bgt.w	8008772 <__kernel_rem_pio2+0x66a>
 800863e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8008642:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008646:	f1bb 0f00 	cmp.w	fp, #0
 800864a:	f040 8098 	bne.w	800877e <__kernel_rem_pio2+0x676>
 800864e:	9b04      	ldr	r3, [sp, #16]
 8008650:	e9c3 7800 	strd	r7, r8, [r3]
 8008654:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008658:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800865c:	e7c6      	b.n	80085ec <__kernel_rem_pio2+0x4e4>
 800865e:	9e05      	ldr	r6, [sp, #20]
 8008660:	ab48      	add	r3, sp, #288	; 0x120
 8008662:	441e      	add	r6, r3
 8008664:	462c      	mov	r4, r5
 8008666:	2000      	movs	r0, #0
 8008668:	2100      	movs	r1, #0
 800866a:	2c00      	cmp	r4, #0
 800866c:	da33      	bge.n	80086d6 <__kernel_rem_pio2+0x5ce>
 800866e:	f1bb 0f00 	cmp.w	fp, #0
 8008672:	d036      	beq.n	80086e2 <__kernel_rem_pio2+0x5da>
 8008674:	4602      	mov	r2, r0
 8008676:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800867a:	9c04      	ldr	r4, [sp, #16]
 800867c:	e9c4 2300 	strd	r2, r3, [r4]
 8008680:	4602      	mov	r2, r0
 8008682:	460b      	mov	r3, r1
 8008684:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008688:	f7f7 fecc 	bl	8000424 <__aeabi_dsub>
 800868c:	ae4a      	add	r6, sp, #296	; 0x128
 800868e:	2401      	movs	r4, #1
 8008690:	42a5      	cmp	r5, r4
 8008692:	da29      	bge.n	80086e8 <__kernel_rem_pio2+0x5e0>
 8008694:	f1bb 0f00 	cmp.w	fp, #0
 8008698:	d002      	beq.n	80086a0 <__kernel_rem_pio2+0x598>
 800869a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800869e:	4619      	mov	r1, r3
 80086a0:	9b04      	ldr	r3, [sp, #16]
 80086a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80086a6:	e7a1      	b.n	80085ec <__kernel_rem_pio2+0x4e4>
 80086a8:	9c05      	ldr	r4, [sp, #20]
 80086aa:	ab48      	add	r3, sp, #288	; 0x120
 80086ac:	441c      	add	r4, r3
 80086ae:	2000      	movs	r0, #0
 80086b0:	2100      	movs	r1, #0
 80086b2:	2d00      	cmp	r5, #0
 80086b4:	da09      	bge.n	80086ca <__kernel_rem_pio2+0x5c2>
 80086b6:	f1bb 0f00 	cmp.w	fp, #0
 80086ba:	d002      	beq.n	80086c2 <__kernel_rem_pio2+0x5ba>
 80086bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086c0:	4619      	mov	r1, r3
 80086c2:	9b04      	ldr	r3, [sp, #16]
 80086c4:	e9c3 0100 	strd	r0, r1, [r3]
 80086c8:	e790      	b.n	80085ec <__kernel_rem_pio2+0x4e4>
 80086ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80086ce:	f7f7 feab 	bl	8000428 <__adddf3>
 80086d2:	3d01      	subs	r5, #1
 80086d4:	e7ed      	b.n	80086b2 <__kernel_rem_pio2+0x5aa>
 80086d6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80086da:	f7f7 fea5 	bl	8000428 <__adddf3>
 80086de:	3c01      	subs	r4, #1
 80086e0:	e7c3      	b.n	800866a <__kernel_rem_pio2+0x562>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	e7c8      	b.n	800867a <__kernel_rem_pio2+0x572>
 80086e8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80086ec:	f7f7 fe9c 	bl	8000428 <__adddf3>
 80086f0:	3401      	adds	r4, #1
 80086f2:	e7cd      	b.n	8008690 <__kernel_rem_pio2+0x588>
 80086f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80086f8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80086fc:	9b00      	ldr	r3, [sp, #0]
 80086fe:	3b01      	subs	r3, #1
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	4632      	mov	r2, r6
 8008704:	463b      	mov	r3, r7
 8008706:	4640      	mov	r0, r8
 8008708:	4649      	mov	r1, r9
 800870a:	f7f7 fe8d 	bl	8000428 <__adddf3>
 800870e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4640      	mov	r0, r8
 8008718:	4649      	mov	r1, r9
 800871a:	f7f7 fe83 	bl	8000424 <__aeabi_dsub>
 800871e:	4632      	mov	r2, r6
 8008720:	463b      	mov	r3, r7
 8008722:	f7f7 fe81 	bl	8000428 <__adddf3>
 8008726:	ed9d 7b06 	vldr	d7, [sp, #24]
 800872a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800872e:	ed8a 7b00 	vstr	d7, [sl]
 8008732:	e770      	b.n	8008616 <__kernel_rem_pio2+0x50e>
 8008734:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008738:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800873c:	4640      	mov	r0, r8
 800873e:	4632      	mov	r2, r6
 8008740:	463b      	mov	r3, r7
 8008742:	4649      	mov	r1, r9
 8008744:	f7f7 fe70 	bl	8000428 <__adddf3>
 8008748:	e9cd 0100 	strd	r0, r1, [sp]
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4640      	mov	r0, r8
 8008752:	4649      	mov	r1, r9
 8008754:	f7f7 fe66 	bl	8000424 <__aeabi_dsub>
 8008758:	4632      	mov	r2, r6
 800875a:	463b      	mov	r3, r7
 800875c:	f7f7 fe64 	bl	8000428 <__adddf3>
 8008760:	ed9d 7b00 	vldr	d7, [sp]
 8008764:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008768:	ed84 7b00 	vstr	d7, [r4]
 800876c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008770:	e757      	b.n	8008622 <__kernel_rem_pio2+0x51a>
 8008772:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008776:	f7f7 fe57 	bl	8000428 <__adddf3>
 800877a:	3d01      	subs	r5, #1
 800877c:	e75c      	b.n	8008638 <__kernel_rem_pio2+0x530>
 800877e:	9b04      	ldr	r3, [sp, #16]
 8008780:	9a04      	ldr	r2, [sp, #16]
 8008782:	601f      	str	r7, [r3, #0]
 8008784:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008788:	605c      	str	r4, [r3, #4]
 800878a:	609d      	str	r5, [r3, #8]
 800878c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008790:	60d3      	str	r3, [r2, #12]
 8008792:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008796:	6110      	str	r0, [r2, #16]
 8008798:	6153      	str	r3, [r2, #20]
 800879a:	e727      	b.n	80085ec <__kernel_rem_pio2+0x4e4>
 800879c:	41700000 	.word	0x41700000
 80087a0:	3e700000 	.word	0x3e700000
 80087a4:	00000000 	.word	0x00000000

080087a8 <scalbn>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	ec55 4b10 	vmov	r4, r5, d0
 80087ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80087b2:	4606      	mov	r6, r0
 80087b4:	462b      	mov	r3, r5
 80087b6:	b999      	cbnz	r1, 80087e0 <scalbn+0x38>
 80087b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80087bc:	4323      	orrs	r3, r4
 80087be:	d03f      	beq.n	8008840 <scalbn+0x98>
 80087c0:	4b35      	ldr	r3, [pc, #212]	; (8008898 <scalbn+0xf0>)
 80087c2:	4629      	mov	r1, r5
 80087c4:	ee10 0a10 	vmov	r0, s0
 80087c8:	2200      	movs	r2, #0
 80087ca:	f7f7 fcfd 	bl	80001c8 <__aeabi_dmul>
 80087ce:	4b33      	ldr	r3, [pc, #204]	; (800889c <scalbn+0xf4>)
 80087d0:	429e      	cmp	r6, r3
 80087d2:	4604      	mov	r4, r0
 80087d4:	460d      	mov	r5, r1
 80087d6:	da10      	bge.n	80087fa <scalbn+0x52>
 80087d8:	a327      	add	r3, pc, #156	; (adr r3, 8008878 <scalbn+0xd0>)
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	e01f      	b.n	8008820 <scalbn+0x78>
 80087e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80087e4:	4291      	cmp	r1, r2
 80087e6:	d10c      	bne.n	8008802 <scalbn+0x5a>
 80087e8:	ee10 2a10 	vmov	r2, s0
 80087ec:	4620      	mov	r0, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	f7f7 fe1a 	bl	8000428 <__adddf3>
 80087f4:	4604      	mov	r4, r0
 80087f6:	460d      	mov	r5, r1
 80087f8:	e022      	b.n	8008840 <scalbn+0x98>
 80087fa:	460b      	mov	r3, r1
 80087fc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008800:	3936      	subs	r1, #54	; 0x36
 8008802:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008806:	4296      	cmp	r6, r2
 8008808:	dd0d      	ble.n	8008826 <scalbn+0x7e>
 800880a:	2d00      	cmp	r5, #0
 800880c:	a11c      	add	r1, pc, #112	; (adr r1, 8008880 <scalbn+0xd8>)
 800880e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008812:	da02      	bge.n	800881a <scalbn+0x72>
 8008814:	a11c      	add	r1, pc, #112	; (adr r1, 8008888 <scalbn+0xe0>)
 8008816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800881a:	a319      	add	r3, pc, #100	; (adr r3, 8008880 <scalbn+0xd8>)
 800881c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008820:	f7f7 fcd2 	bl	80001c8 <__aeabi_dmul>
 8008824:	e7e6      	b.n	80087f4 <scalbn+0x4c>
 8008826:	1872      	adds	r2, r6, r1
 8008828:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800882c:	428a      	cmp	r2, r1
 800882e:	dcec      	bgt.n	800880a <scalbn+0x62>
 8008830:	2a00      	cmp	r2, #0
 8008832:	dd08      	ble.n	8008846 <scalbn+0x9e>
 8008834:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008838:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800883c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008840:	ec45 4b10 	vmov	d0, r4, r5
 8008844:	bd70      	pop	{r4, r5, r6, pc}
 8008846:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800884a:	da08      	bge.n	800885e <scalbn+0xb6>
 800884c:	2d00      	cmp	r5, #0
 800884e:	a10a      	add	r1, pc, #40	; (adr r1, 8008878 <scalbn+0xd0>)
 8008850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008854:	dac0      	bge.n	80087d8 <scalbn+0x30>
 8008856:	a10e      	add	r1, pc, #56	; (adr r1, 8008890 <scalbn+0xe8>)
 8008858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800885c:	e7bc      	b.n	80087d8 <scalbn+0x30>
 800885e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008862:	3236      	adds	r2, #54	; 0x36
 8008864:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008868:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800886c:	4620      	mov	r0, r4
 800886e:	4b0c      	ldr	r3, [pc, #48]	; (80088a0 <scalbn+0xf8>)
 8008870:	2200      	movs	r2, #0
 8008872:	e7d5      	b.n	8008820 <scalbn+0x78>
 8008874:	f3af 8000 	nop.w
 8008878:	c2f8f359 	.word	0xc2f8f359
 800887c:	01a56e1f 	.word	0x01a56e1f
 8008880:	8800759c 	.word	0x8800759c
 8008884:	7e37e43c 	.word	0x7e37e43c
 8008888:	8800759c 	.word	0x8800759c
 800888c:	fe37e43c 	.word	0xfe37e43c
 8008890:	c2f8f359 	.word	0xc2f8f359
 8008894:	81a56e1f 	.word	0x81a56e1f
 8008898:	43500000 	.word	0x43500000
 800889c:	ffff3cb0 	.word	0xffff3cb0
 80088a0:	3c900000 	.word	0x3c900000
 80088a4:	00000000 	.word	0x00000000

080088a8 <floor>:
 80088a8:	ec51 0b10 	vmov	r0, r1, d0
 80088ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80088b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80088b8:	2e13      	cmp	r6, #19
 80088ba:	ee10 5a10 	vmov	r5, s0
 80088be:	ee10 8a10 	vmov	r8, s0
 80088c2:	460c      	mov	r4, r1
 80088c4:	dc31      	bgt.n	800892a <floor+0x82>
 80088c6:	2e00      	cmp	r6, #0
 80088c8:	da14      	bge.n	80088f4 <floor+0x4c>
 80088ca:	a333      	add	r3, pc, #204	; (adr r3, 8008998 <floor+0xf0>)
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	f7f7 fdaa 	bl	8000428 <__adddf3>
 80088d4:	2200      	movs	r2, #0
 80088d6:	2300      	movs	r3, #0
 80088d8:	f7f7 ffda 	bl	8000890 <__aeabi_dcmpgt>
 80088dc:	b138      	cbz	r0, 80088ee <floor+0x46>
 80088de:	2c00      	cmp	r4, #0
 80088e0:	da53      	bge.n	800898a <floor+0xe2>
 80088e2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80088e6:	4325      	orrs	r5, r4
 80088e8:	d052      	beq.n	8008990 <floor+0xe8>
 80088ea:	4c2d      	ldr	r4, [pc, #180]	; (80089a0 <floor+0xf8>)
 80088ec:	2500      	movs	r5, #0
 80088ee:	4621      	mov	r1, r4
 80088f0:	4628      	mov	r0, r5
 80088f2:	e024      	b.n	800893e <floor+0x96>
 80088f4:	4f2b      	ldr	r7, [pc, #172]	; (80089a4 <floor+0xfc>)
 80088f6:	4137      	asrs	r7, r6
 80088f8:	ea01 0307 	and.w	r3, r1, r7
 80088fc:	4303      	orrs	r3, r0
 80088fe:	d01e      	beq.n	800893e <floor+0x96>
 8008900:	a325      	add	r3, pc, #148	; (adr r3, 8008998 <floor+0xf0>)
 8008902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008906:	f7f7 fd8f 	bl	8000428 <__adddf3>
 800890a:	2200      	movs	r2, #0
 800890c:	2300      	movs	r3, #0
 800890e:	f7f7 ffbf 	bl	8000890 <__aeabi_dcmpgt>
 8008912:	2800      	cmp	r0, #0
 8008914:	d0eb      	beq.n	80088ee <floor+0x46>
 8008916:	2c00      	cmp	r4, #0
 8008918:	bfbe      	ittt	lt
 800891a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800891e:	4133      	asrlt	r3, r6
 8008920:	18e4      	addlt	r4, r4, r3
 8008922:	ea24 0407 	bic.w	r4, r4, r7
 8008926:	2500      	movs	r5, #0
 8008928:	e7e1      	b.n	80088ee <floor+0x46>
 800892a:	2e33      	cmp	r6, #51	; 0x33
 800892c:	dd0b      	ble.n	8008946 <floor+0x9e>
 800892e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008932:	d104      	bne.n	800893e <floor+0x96>
 8008934:	ee10 2a10 	vmov	r2, s0
 8008938:	460b      	mov	r3, r1
 800893a:	f7f7 fd75 	bl	8000428 <__adddf3>
 800893e:	ec41 0b10 	vmov	d0, r0, r1
 8008942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008946:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800894a:	f04f 37ff 	mov.w	r7, #4294967295
 800894e:	40df      	lsrs	r7, r3
 8008950:	4238      	tst	r0, r7
 8008952:	d0f4      	beq.n	800893e <floor+0x96>
 8008954:	a310      	add	r3, pc, #64	; (adr r3, 8008998 <floor+0xf0>)
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	f7f7 fd65 	bl	8000428 <__adddf3>
 800895e:	2200      	movs	r2, #0
 8008960:	2300      	movs	r3, #0
 8008962:	f7f7 ff95 	bl	8000890 <__aeabi_dcmpgt>
 8008966:	2800      	cmp	r0, #0
 8008968:	d0c1      	beq.n	80088ee <floor+0x46>
 800896a:	2c00      	cmp	r4, #0
 800896c:	da0a      	bge.n	8008984 <floor+0xdc>
 800896e:	2e14      	cmp	r6, #20
 8008970:	d101      	bne.n	8008976 <floor+0xce>
 8008972:	3401      	adds	r4, #1
 8008974:	e006      	b.n	8008984 <floor+0xdc>
 8008976:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800897a:	2301      	movs	r3, #1
 800897c:	40b3      	lsls	r3, r6
 800897e:	441d      	add	r5, r3
 8008980:	45a8      	cmp	r8, r5
 8008982:	d8f6      	bhi.n	8008972 <floor+0xca>
 8008984:	ea25 0507 	bic.w	r5, r5, r7
 8008988:	e7b1      	b.n	80088ee <floor+0x46>
 800898a:	2500      	movs	r5, #0
 800898c:	462c      	mov	r4, r5
 800898e:	e7ae      	b.n	80088ee <floor+0x46>
 8008990:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008994:	e7ab      	b.n	80088ee <floor+0x46>
 8008996:	bf00      	nop
 8008998:	8800759c 	.word	0x8800759c
 800899c:	7e37e43c 	.word	0x7e37e43c
 80089a0:	bff00000 	.word	0xbff00000
 80089a4:	000fffff 	.word	0x000fffff

080089a8 <_init>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	bf00      	nop
 80089ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ae:	bc08      	pop	{r3}
 80089b0:	469e      	mov	lr, r3
 80089b2:	4770      	bx	lr

080089b4 <_fini>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	bf00      	nop
 80089b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ba:	bc08      	pop	{r3}
 80089bc:	469e      	mov	lr, r3
 80089be:	4770      	bx	lr
