
ftc_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009508  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08009690  08009690  00019690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098d8  080098d8  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  080098d8  080098d8  000198d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098e0  080098e0  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098e0  080098e0  000198e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098e4  080098e4  000198e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080098e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d4  2**0
                  CONTENTS
 10 .bss          000008c4  200000d4  200000d4  000200d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000998  20000998  000200d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000faef  00000000  00000000  00020147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000023ac  00000000  00000000  0002fc36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000dc0  00000000  00000000  00031fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000adb  00000000  00000000  00032da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000216da  00000000  00000000  00033883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011521  00000000  00000000  00054f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cbb38  00000000  00000000  0006647e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f7c  00000000  00000000  00131fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00135f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d4 	.word	0x200000d4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009678 	.word	0x08009678

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d8 	.word	0x200000d8
 80001c4:	08009678 	.word	0x08009678

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b970 	b.w	8000e5c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	460f      	mov	r7, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	d965      	bls.n	8000c76 <__udivmoddi4+0xe2>
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	b143      	cbz	r3, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	f1c3 0220 	rsb	r2, r3, #32
 8000bb8:	409f      	lsls	r7, r3
 8000bba:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	409c      	lsls	r4, r3
 8000bc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc6:	fa1f f58c 	uxth.w	r5, ip
 8000bca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bce:	0c22      	lsrs	r2, r4, #16
 8000bd0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd8:	fb01 f005 	mul.w	r0, r1, r5
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	d90a      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be0:	eb1c 0202 	adds.w	r2, ip, r2
 8000be4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be8:	f080 811c 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000bec:	4290      	cmp	r0, r2
 8000bee:	f240 8119 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	4462      	add	r2, ip
 8000bf6:	1a12      	subs	r2, r2, r0
 8000bf8:	b2a4      	uxth	r4, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c06:	fb00 f505 	mul.w	r5, r0, r5
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x90>
 8000c0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c16:	f080 8107 	bcs.w	8000e28 <__udivmoddi4+0x294>
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	f240 8104 	bls.w	8000e28 <__udivmoddi4+0x294>
 8000c20:	4464      	add	r4, ip
 8000c22:	3802      	subs	r0, #2
 8000c24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c28:	1b64      	subs	r4, r4, r5
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11e      	cbz	r6, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40dc      	lsrs	r4, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	e9c6 4300 	strd	r4, r3, [r6]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0xbc>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80ed 	beq.w	8000e1e <__udivmoddi4+0x28a>
 8000c44:	2100      	movs	r1, #0
 8000c46:	e9c6 0500 	strd	r0, r5, [r6]
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	fab3 f183 	clz	r1, r3
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d149      	bne.n	8000cec <__udivmoddi4+0x158>
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	d302      	bcc.n	8000c62 <__udivmoddi4+0xce>
 8000c5c:	4282      	cmp	r2, r0
 8000c5e:	f200 80f8 	bhi.w	8000e52 <__udivmoddi4+0x2be>
 8000c62:	1a84      	subs	r4, r0, r2
 8000c64:	eb65 0203 	sbc.w	r2, r5, r3
 8000c68:	2001      	movs	r0, #1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d0e2      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	e9c6 4700 	strd	r4, r7, [r6]
 8000c74:	e7df      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xe6>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f382 	clz	r3, r2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 8090 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c84:	1a8a      	subs	r2, r1, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f fe8c 	uxth.w	lr, ip
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c94:	fb07 2015 	mls	r0, r7, r5, r2
 8000c98:	0c22      	lsrs	r2, r4, #16
 8000c9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca6:	eb1c 0202 	adds.w	r2, ip, r2
 8000caa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f200 80cb 	bhi.w	8000e4c <__udivmoddi4+0x2b8>
 8000cb6:	4645      	mov	r5, r8
 8000cb8:	1a12      	subs	r2, r2, r0
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x14e>
 8000cd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x14c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f200 80bb 	bhi.w	8000e56 <__udivmoddi4+0x2c2>
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	eba4 040e 	sub.w	r4, r4, lr
 8000ce6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cea:	e79f      	b.n	8000c2c <__udivmoddi4+0x98>
 8000cec:	f1c1 0720 	rsb	r7, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfa:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000d02:	40fd      	lsrs	r5, r7
 8000d04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d08:	4323      	orrs	r3, r4
 8000d0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	fb09 5518 	mls	r5, r9, r8, r5
 8000d16:	0c1c      	lsrs	r4, r3, #16
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	fa00 f001 	lsl.w	r0, r0, r1
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d34:	f080 8088 	bcs.w	8000e48 <__udivmoddi4+0x2b4>
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	f240 8085 	bls.w	8000e48 <__udivmoddi4+0x2b4>
 8000d3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d42:	4464      	add	r4, ip
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	b29d      	uxth	r5, r3
 8000d48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d64:	d26c      	bcs.n	8000e40 <__udivmoddi4+0x2ac>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	d96a      	bls.n	8000e40 <__udivmoddi4+0x2ac>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	4464      	add	r4, ip
 8000d6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d72:	fba3 9502 	umull	r9, r5, r3, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	42ac      	cmp	r4, r5
 8000d7c:	46c8      	mov	r8, r9
 8000d7e:	46ae      	mov	lr, r5
 8000d80:	d356      	bcc.n	8000e30 <__udivmoddi4+0x29c>
 8000d82:	d053      	beq.n	8000e2c <__udivmoddi4+0x298>
 8000d84:	b156      	cbz	r6, 8000d9c <__udivmoddi4+0x208>
 8000d86:	ebb0 0208 	subs.w	r2, r0, r8
 8000d8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d92:	40ca      	lsrs	r2, r1
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	4317      	orrs	r7, r2
 8000d98:	e9c6 7400 	strd	r7, r4, [r6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	f1c3 0120 	rsb	r1, r3, #32
 8000da8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dac:	fa20 f201 	lsr.w	r2, r0, r1
 8000db0:	fa25 f101 	lsr.w	r1, r5, r1
 8000db4:	409d      	lsls	r5, r3
 8000db6:	432a      	orrs	r2, r5
 8000db8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc8:	0c11      	lsrs	r1, r2, #16
 8000dca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dce:	fb00 f50e 	mul.w	r5, r0, lr
 8000dd2:	428d      	cmp	r5, r1
 8000dd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x258>
 8000dda:	eb1c 0101 	adds.w	r1, ip, r1
 8000dde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de2:	d22f      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000de4:	428d      	cmp	r5, r1
 8000de6:	d92d      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	1b49      	subs	r1, r1, r5
 8000dee:	b292      	uxth	r2, r2
 8000df0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df4:	fb07 1115 	mls	r1, r7, r5, r1
 8000df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dfc:	fb05 f10e 	mul.w	r1, r5, lr
 8000e00:	4291      	cmp	r1, r2
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x282>
 8000e04:	eb1c 0202 	adds.w	r2, ip, r2
 8000e08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0c:	d216      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000e0e:	4291      	cmp	r1, r2
 8000e10:	d914      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000e12:	3d02      	subs	r5, #2
 8000e14:	4462      	add	r2, ip
 8000e16:	1a52      	subs	r2, r2, r1
 8000e18:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e1c:	e738      	b.n	8000c90 <__udivmoddi4+0xfc>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	4630      	mov	r0, r6
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000e24:	4639      	mov	r1, r7
 8000e26:	e6e6      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e6fb      	b.n	8000c24 <__udivmoddi4+0x90>
 8000e2c:	4548      	cmp	r0, r9
 8000e2e:	d2a9      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e30:	ebb9 0802 	subs.w	r8, r9, r2
 8000e34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	e7a3      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3c:	4645      	mov	r5, r8
 8000e3e:	e7ea      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e40:	462b      	mov	r3, r5
 8000e42:	e794      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7d1      	b.n	8000dec <__udivmoddi4+0x258>
 8000e48:	46d0      	mov	r8, sl
 8000e4a:	e77b      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4c:	3d02      	subs	r5, #2
 8000e4e:	4462      	add	r2, ip
 8000e50:	e732      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e70a      	b.n	8000c6c <__udivmoddi4+0xd8>
 8000e56:	4464      	add	r4, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e742      	b.n	8000ce2 <__udivmoddi4+0x14e>

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_DMA_Init+0x4c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <MX_DMA_Init+0x4c>)
 8000e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <MX_DMA_Init+0x4c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	203a      	movs	r0, #58	; 0x3a
 8000e88:	f003 ff4f 	bl	8004d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e8c:	203a      	movs	r0, #58	; 0x3a
 8000e8e:	f003 ff68 	bl	8004d62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	2046      	movs	r0, #70	; 0x46
 8000e98:	f003 ff47 	bl	8004d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000e9c:	2046      	movs	r0, #70	; 0x46
 8000e9e:	f003 ff60 	bl	8004d62 <HAL_NVIC_EnableIRQ>

}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	4b7d      	ldr	r3, [pc, #500]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a7c      	ldr	r2, [pc, #496]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b7a      	ldr	r3, [pc, #488]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	61bb      	str	r3, [r7, #24]
 8000ee0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	4b76      	ldr	r3, [pc, #472]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a75      	ldr	r2, [pc, #468]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b73      	ldr	r3, [pc, #460]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b6f      	ldr	r3, [pc, #444]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a6e      	ldr	r2, [pc, #440]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b6c      	ldr	r3, [pc, #432]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b68      	ldr	r3, [pc, #416]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a67      	ldr	r2, [pc, #412]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b65      	ldr	r3, [pc, #404]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b61      	ldr	r3, [pc, #388]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a60      	ldr	r2, [pc, #384]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b5e      	ldr	r3, [pc, #376]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b5a      	ldr	r3, [pc, #360]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a59      	ldr	r2, [pc, #356]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b57      	ldr	r3, [pc, #348]	; (80010c0 <MX_GPIO_Init+0x210>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, dig_pin3_inverse_Pin|dig_pin1_inverse_Pin|dig_pin3_Pin|dig_pin5_Pin
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f245 4184 	movw	r1, #21636	; 0x5484
 8000f74:	4853      	ldr	r0, [pc, #332]	; (80010c4 <MX_GPIO_Init+0x214>)
 8000f76:	f004 fcc5 	bl	8005904 <HAL_GPIO_WritePin>
                          |dig_pin4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, dig_pin1_Pin|dig_pin2_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000f80:	4851      	ldr	r0, [pc, #324]	; (80010c8 <MX_GPIO_Init+0x218>)
 8000f82:	f004 fcbf 	bl	8005904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(mosfet_enable_GPIO_Port, mosfet_enable_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2102      	movs	r1, #2
 8000f8a:	4850      	ldr	r0, [pc, #320]	; (80010cc <MX_GPIO_Init+0x21c>)
 8000f8c:	f004 fcba 	bl	8005904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, dig_pin4_inverse_Pin|dig_pin2_inverse_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f96:	484e      	ldr	r0, [pc, #312]	; (80010d0 <MX_GPIO_Init+0x220>)
 8000f98:	f004 fcb4 	bl	8005904 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = dig_pin3_inverse_Pin|dig_pin1_inverse_Pin|dig_pin3_Pin|dig_pin4_Pin;
 8000f9c:	f244 4384 	movw	r3, #17540	; 0x4484
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4843      	ldr	r0, [pc, #268]	; (80010c4 <MX_GPIO_Init+0x214>)
 8000fb6:	f004 faf1 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = dig_pin1_Pin|dig_pin2_Pin;
 8000fba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	483d      	ldr	r0, [pc, #244]	; (80010c8 <MX_GPIO_Init+0x218>)
 8000fd4:	f004 fae2 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4839      	ldr	r0, [pc, #228]	; (80010d0 <MX_GPIO_Init+0x220>)
 8000fec:	f004 fad6 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = dig_pin5_Pin;
 8000ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(dig_pin5_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	482e      	ldr	r0, [pc, #184]	; (80010c4 <MX_GPIO_Init+0x214>)
 800100a:	f004 fac7 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PD3 */
  GPIO_InitStruct.Pin = omron_1_Pin|omron_2_Pin|GPIO_PIN_3;
 800100e:	f44f 63c1 	mov.w	r3, #1544	; 0x608
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001018:	2301      	movs	r3, #1
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	482a      	ldr	r0, [pc, #168]	; (80010cc <MX_GPIO_Init+0x21c>)
 8001024:	f004 faba 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	4825      	ldr	r0, [pc, #148]	; (80010d4 <MX_GPIO_Init+0x224>)
 800103e:	f004 faad 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001042:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001054:	230a      	movs	r3, #10
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	481d      	ldr	r0, [pc, #116]	; (80010d4 <MX_GPIO_Init+0x224>)
 8001060:	f004 fa9c 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = limit_switch_1_Pin|limit_switch_3_Pin;
 8001064:	2305      	movs	r3, #5
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800106c:	2302      	movs	r3, #2
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	4815      	ldr	r0, [pc, #84]	; (80010cc <MX_GPIO_Init+0x21c>)
 8001078:	f004 fa90 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = mosfet_enable_Pin;
 800107c:	2302      	movs	r3, #2
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001084:	2301      	movs	r3, #1
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(mosfet_enable_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <MX_GPIO_Init+0x21c>)
 8001094:	f004 fa82 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = dig_pin4_inverse_Pin|dig_pin2_inverse_Pin;
 8001098:	f44f 7340 	mov.w	r3, #768	; 0x300
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	4807      	ldr	r0, [pc, #28]	; (80010d0 <MX_GPIO_Init+0x220>)
 80010b2:	f004 fa73 	bl	800559c <HAL_GPIO_Init>

}
 80010b6:	bf00      	nop
 80010b8:	3730      	adds	r7, #48	; 0x30
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40020800 	.word	0x40020800
 80010cc:	40020c00 	.word	0x40020c00
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40020000 	.word	0x40020000

080010d8 <falg_controler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void falg_controler(void) {
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
	if ((!((flag_onesd == 0) && (flag_move_end == 0))) && (flag_compleate == 1)
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <falg_controler+0x74>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <falg_controler+0x14>
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <falg_controler+0x78>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d011      	beq.n	8001110 <falg_controler+0x38>
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <falg_controler+0x7c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d10d      	bne.n	8001110 <falg_controler+0x38>
			&& (!((chain_flag_start == 0) && (chain_flag_end == 0)))) {
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <falg_controler+0x80>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d103      	bne.n	8001104 <falg_controler+0x2c>
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <falg_controler+0x84>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <falg_controler+0x38>
		flag++;
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <falg_controler+0x88>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	b2da      	uxtb	r2, r3
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <falg_controler+0x88>)
 800110e:	701a      	strb	r2, [r3, #0]

	}

	if (flag_old != flag) {
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <falg_controler+0x8c>)
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <falg_controler+0x88>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d012      	beq.n	8001142 <falg_controler+0x6a>
		flag_old = flag;
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <falg_controler+0x88>)
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <falg_controler+0x8c>)
 8001122:	701a      	strb	r2, [r3, #0]
		flag_onesd = 1;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <falg_controler+0x74>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
		flag_move_end = 0;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <falg_controler+0x78>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
		flag_compleate = 0;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <falg_controler+0x7c>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
		chain_flag_start = 1;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <falg_controler+0x80>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
		chain_flag_end = 0;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <falg_controler+0x84>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
	}

}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	2000006c 	.word	0x2000006c
 8001150:	200002f4 	.word	0x200002f4
 8001154:	200002f5 	.word	0x200002f5
 8001158:	2000006d 	.word	0x2000006d
 800115c:	200002fc 	.word	0x200002fc
 8001160:	200002f2 	.word	0x200002f2
 8001164:	200002f3 	.word	0x200002f3

08001168 <state_timer>:
void state_timer(float tim) {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	ed87 0a01 	vstr	s0, [r7, #4]

	if (state_flag > tim) {
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <state_timer+0x3c>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	ed97 7a01 	vldr	s14, [r7, #4]
 800117c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001184:	d400      	bmi.n	8001188 <state_timer+0x20>
		flag_compleate = 1;
		state_flag = 0.0;
	}

}
 8001186:	e006      	b.n	8001196 <state_timer+0x2e>
		flag_compleate = 1;
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <state_timer+0x40>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
		state_flag = 0.0;
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <state_timer+0x3c>)
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000484 	.word	0x20000484
 80011a8:	200002f5 	.word	0x200002f5

080011ac <set_voltage_chain>:
void set_voltage_chain(float position) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	ed87 0a01 	vstr	s0, [r7, #4]
	Chain_motor.target = position;
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <set_voltage_chain+0x1c>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6113      	str	r3, [r2, #16]

}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	200001f0 	.word	0x200001f0

080011cc <omron>:
void omron(uint8_t robot_position) { /*robot_position = 0 left , robot_position = 1 right*/
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
	if (robot_position == 0) { /*left robot position on place*/
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d119      	bne.n	8001210 <omron+0x44>
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_SET) { //left_omron
 80011dc:	2108      	movs	r1, #8
 80011de:	481b      	ldr	r0, [pc, #108]	; (800124c <omron+0x80>)
 80011e0:	f004 fb78 	bl	80058d4 <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d103      	bne.n	80011f2 <omron+0x26>
			znamya_position = 1;
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <omron+0x84>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
			znamya_position = 3;
		} else
			znamya_position = 1;
	}

}
 80011f0:	e027      	b.n	8001242 <omron+0x76>
		} else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == GPIO_PIN_SET) { //right_omron
 80011f2:	2110      	movs	r1, #16
 80011f4:	4817      	ldr	r0, [pc, #92]	; (8001254 <omron+0x88>)
 80011f6:	f004 fb6d 	bl	80058d4 <HAL_GPIO_ReadPin>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d103      	bne.n	8001208 <omron+0x3c>
			znamya_position = 2;
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <omron+0x84>)
 8001202:	2202      	movs	r2, #2
 8001204:	701a      	strb	r2, [r3, #0]
}
 8001206:	e01c      	b.n	8001242 <omron+0x76>
			znamya_position = 3;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <omron+0x84>)
 800120a:	2203      	movs	r2, #3
 800120c:	701a      	strb	r2, [r3, #0]
}
 800120e:	e018      	b.n	8001242 <omron+0x76>
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_SET) { //left_omron
 8001210:	2108      	movs	r1, #8
 8001212:	480e      	ldr	r0, [pc, #56]	; (800124c <omron+0x80>)
 8001214:	f004 fb5e 	bl	80058d4 <HAL_GPIO_ReadPin>
 8001218:	4603      	mov	r3, r0
 800121a:	2b01      	cmp	r3, #1
 800121c:	d103      	bne.n	8001226 <omron+0x5a>
			znamya_position = 2;
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <omron+0x84>)
 8001220:	2202      	movs	r2, #2
 8001222:	701a      	strb	r2, [r3, #0]
}
 8001224:	e00d      	b.n	8001242 <omron+0x76>
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == GPIO_PIN_SET) { //right_omron
 8001226:	2110      	movs	r1, #16
 8001228:	480a      	ldr	r0, [pc, #40]	; (8001254 <omron+0x88>)
 800122a:	f004 fb53 	bl	80058d4 <HAL_GPIO_ReadPin>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d103      	bne.n	800123c <omron+0x70>
			znamya_position = 3;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <omron+0x84>)
 8001236:	2203      	movs	r2, #3
 8001238:	701a      	strb	r2, [r3, #0]
}
 800123a:	e002      	b.n	8001242 <omron+0x76>
			znamya_position = 1;
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <omron+0x84>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40020c00 	.word	0x40020c00
 8001250:	200002f0 	.word	0x200002f0
 8001254:	40021000 	.word	0x40021000

08001258 <check_switches>:
typedef struct switches {
	bool down_switch;
	bool up_switch;
} switches;
switches switch_c;
void check_switches() {
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	switch_c.down_switch =
			(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == GPIO_PIN_SET) ? 1 : 0;
 800125c:	2102      	movs	r1, #2
 800125e:	480c      	ldr	r0, [pc, #48]	; (8001290 <check_switches+0x38>)
 8001260:	f004 fb38 	bl	80058d4 <HAL_GPIO_ReadPin>
 8001264:	4603      	mov	r3, r0
 8001266:	2b01      	cmp	r3, #1
 8001268:	bf0c      	ite	eq
 800126a:	2301      	moveq	r3, #1
 800126c:	2300      	movne	r3, #0
 800126e:	b2da      	uxtb	r2, r3
	switch_c.down_switch =
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <check_switches+0x3c>)
 8001272:	701a      	strb	r2, [r3, #0]
	switch_c.up_switch =
			(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0) == GPIO_PIN_SET) ? 1 : 0;
 8001274:	2101      	movs	r1, #1
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <check_switches+0x38>)
 8001278:	f004 fb2c 	bl	80058d4 <HAL_GPIO_ReadPin>
 800127c:	4603      	mov	r3, r0
 800127e:	2b01      	cmp	r3, #1
 8001280:	bf0c      	ite	eq
 8001282:	2301      	moveq	r3, #1
 8001284:	2300      	movne	r3, #0
 8001286:	b2da      	uxtb	r2, r3
	switch_c.up_switch =
 8001288:	4b02      	ldr	r3, [pc, #8]	; (8001294 <check_switches+0x3c>)
 800128a:	705a      	strb	r2, [r3, #1]
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40020c00 	.word	0x40020c00
 8001294:	20000300 	.word	0x20000300

08001298 <chain_control>:
void chain_control(int pos) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	check_switches();
 80012a0:	f7ff ffda 	bl	8001258 <check_switches>
	static int flig = -1;
	if (chain_flag_end == 0) {
 80012a4:	4b72      	ldr	r3, [pc, #456]	; (8001470 <chain_control+0x1d8>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f040 80cc 	bne.w	8001446 <chain_control+0x1ae>
		if (chain_flag_start == 1) {
 80012ae:	4b71      	ldr	r3, [pc, #452]	; (8001474 <chain_control+0x1dc>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d105      	bne.n	80012c2 <chain_control+0x2a>

			check_switches();
 80012b6:	f7ff ffcf 	bl	8001258 <check_switches>
			chain_flag_start = 0;
 80012ba:	4b6e      	ldr	r3, [pc, #440]	; (8001474 <chain_control+0x1dc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e0c1      	b.n	8001446 <chain_control+0x1ae>

		} else {

			if (pos == flig) {
 80012c2:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <chain_control+0x1e0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d107      	bne.n	80012dc <chain_control+0x44>
				set_voltage_chain(0);
 80012cc:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 800147c <chain_control+0x1e4>
 80012d0:	f7ff ff6c 	bl	80011ac <set_voltage_chain>
				chain_flag_end = 1;
 80012d4:	4b66      	ldr	r3, [pc, #408]	; (8001470 <chain_control+0x1d8>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
				return;
 80012da:	e0b4      	b.n	8001446 <chain_control+0x1ae>
			}
			switch (pos) { //0-down, 1-mid, 2-up
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	f000 809d 	beq.w	800141e <chain_control+0x186>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	f300 80ad 	bgt.w	8001446 <chain_control+0x1ae>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <chain_control+0x62>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d01b      	beq.n	8001330 <chain_control+0x98>
 80012f8:	e0a5      	b.n	8001446 <chain_control+0x1ae>
			case (0):
				if (!switch_c.down_switch) {
 80012fa:	4b61      	ldr	r3, [pc, #388]	; (8001480 <chain_control+0x1e8>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	f083 0301 	eor.w	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d007      	beq.n	8001318 <chain_control+0x80>
					set_voltage_chain(mot_grab);
 8001308:	4b5e      	ldr	r3, [pc, #376]	; (8001484 <chain_control+0x1ec>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	eeb0 0a67 	vmov.f32	s0, s15
 8001312:	f7ff ff4b 	bl	80011ac <set_voltage_chain>
				} else {
					metr_chain = 0;
					flig = 0;
					set_voltage_chain(0);
				}
				break;
 8001316:	e096      	b.n	8001446 <chain_control+0x1ae>
					metr_chain = 0;
 8001318:	4b5b      	ldr	r3, [pc, #364]	; (8001488 <chain_control+0x1f0>)
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
					flig = 0;
 8001320:	4b55      	ldr	r3, [pc, #340]	; (8001478 <chain_control+0x1e0>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
					set_voltage_chain(0);
 8001326:	ed9f 0a55 	vldr	s0, [pc, #340]	; 800147c <chain_control+0x1e4>
 800132a:	f7ff ff3f 	bl	80011ac <set_voltage_chain>
				break;
 800132e:	e08a      	b.n	8001446 <chain_control+0x1ae>

			case (1):
				if ((metr_chain + 0.30) <= 0.01
 8001330:	4b55      	ldr	r3, [pc, #340]	; (8001488 <chain_control+0x1f0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f8ab 	bl	8000490 <__aeabi_f2d>
 800133a:	a345      	add	r3, pc, #276	; (adr r3, 8001450 <chain_control+0x1b8>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7fe ff48 	bl	80001d4 <__adddf3>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	a342      	add	r3, pc, #264	; (adr r3, 8001458 <chain_control+0x1c0>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff fb71 	bl	8000a38 <__aeabi_dcmple>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d021      	beq.n	80013a0 <chain_control+0x108>
						&& (metr_chain + 0.30) >= -0.01) {
 800135c:	4b4a      	ldr	r3, [pc, #296]	; (8001488 <chain_control+0x1f0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f895 	bl	8000490 <__aeabi_f2d>
 8001366:	a33a      	add	r3, pc, #232	; (adr r3, 8001450 <chain_control+0x1b8>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	f7fe ff32 	bl	80001d4 <__adddf3>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	a339      	add	r3, pc, #228	; (adr r3, 8001460 <chain_control+0x1c8>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7ff fb65 	bl	8000a4c <__aeabi_dcmpge>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00b      	beq.n	80013a0 <chain_control+0x108>
					flig = 1;
 8001388:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <chain_control+0x1e0>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]
					set_voltage_chain(0);
 800138e:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 800147c <chain_control+0x1e4>
 8001392:	f7ff ff0b 	bl	80011ac <set_voltage_chain>
					metr_chain = 0;
 8001396:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <chain_control+0x1f0>)
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
					set_voltage_chain(-mot_grab);

				} else if ((metr_chain + 0.33) < -0.01) {
					set_voltage_chain(mot_grab);
				}
				break;
 800139e:	e052      	b.n	8001446 <chain_control+0x1ae>
				} else if ((metr_chain + 0.33) > 0.01) {
 80013a0:	4b39      	ldr	r3, [pc, #228]	; (8001488 <chain_control+0x1f0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f873 	bl	8000490 <__aeabi_f2d>
 80013aa:	a32f      	add	r3, pc, #188	; (adr r3, 8001468 <chain_control+0x1d0>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7fe ff10 	bl	80001d4 <__adddf3>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	a326      	add	r3, pc, #152	; (adr r3, 8001458 <chain_control+0x1c0>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff fb4d 	bl	8000a60 <__aeabi_dcmpgt>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d009      	beq.n	80013e0 <chain_control+0x148>
					set_voltage_chain(-mot_grab);
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <chain_control+0x1ec>)
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	eef1 7a67 	vneg.f32	s15, s15
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	f7ff fee7 	bl	80011ac <set_voltage_chain>
				break;
 80013de:	e032      	b.n	8001446 <chain_control+0x1ae>
				} else if ((metr_chain + 0.33) < -0.01) {
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <chain_control+0x1f0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f853 	bl	8000490 <__aeabi_f2d>
 80013ea:	a31f      	add	r3, pc, #124	; (adr r3, 8001468 <chain_control+0x1d0>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7fe fef0 	bl	80001d4 <__adddf3>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	a318      	add	r3, pc, #96	; (adr r3, 8001460 <chain_control+0x1c8>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7ff fb0f 	bl	8000a24 <__aeabi_dcmplt>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d100      	bne.n	800140e <chain_control+0x176>
				break;
 800140c:	e01b      	b.n	8001446 <chain_control+0x1ae>
					set_voltage_chain(mot_grab);
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <chain_control+0x1ec>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	f7ff fec8 	bl	80011ac <set_voltage_chain>
				break;
 800141c:	e013      	b.n	8001446 <chain_control+0x1ae>

			case (2):
				if (!switch_c.up_switch) {
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <chain_control+0x1e8>)
 8001420:	785b      	ldrb	r3, [r3, #1]
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d009      	beq.n	8001440 <chain_control+0x1a8>
					set_voltage_chain(-mot_grab);
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <chain_control+0x1ec>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	eef1 7a67 	vneg.f32	s15, s15
 8001436:	eeb0 0a67 	vmov.f32	s0, s15
 800143a:	f7ff feb7 	bl	80011ac <set_voltage_chain>
 800143e:	e002      	b.n	8001446 <chain_control+0x1ae>
				} else {
					flig = 2;
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <chain_control+0x1e0>)
 8001442:	2202      	movs	r2, #2
 8001444:	601a      	str	r2, [r3, #0]
			}
		}

	}

}
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	f3af 8000 	nop.w
 8001450:	33333333 	.word	0x33333333
 8001454:	3fd33333 	.word	0x3fd33333
 8001458:	47ae147b 	.word	0x47ae147b
 800145c:	3f847ae1 	.word	0x3f847ae1
 8001460:	47ae147b 	.word	0x47ae147b
 8001464:	bf847ae1 	.word	0xbf847ae1
 8001468:	51eb851f 	.word	0x51eb851f
 800146c:	3fd51eb8 	.word	0x3fd51eb8
 8001470:	200002fc 	.word	0x200002fc
 8001474:	2000006d 	.word	0x2000006d
 8001478:	20000070 	.word	0x20000070
 800147c:	00000000 	.word	0x00000000
 8001480:	20000300 	.word	0x20000300
 8001484:	20000068 	.word	0x20000068
 8001488:	20000440 	.word	0x20000440

0800148c <servo_control>:

		}
	}
}

void servo_control(uint8_t servo, uint8_t position) { /*position = 0 open , position = 1 close*/
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	460a      	mov	r2, r1
 8001496:	71fb      	strb	r3, [r7, #7]
 8001498:	4613      	mov	r3, r2
 800149a:	71bb      	strb	r3, [r7, #6]
	switch (servo) {
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <servo_control+0x1c>
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d00b      	beq.n	80014be <servo_control+0x32>
		} else {
			TIM9->CCR2 = 30 + 0.5 * 180;
		}
		break;
	}
}
 80014a6:	e015      	b.n	80014d4 <servo_control+0x48>
		if (position == 0) {
 80014a8:	79bb      	ldrb	r3, [r7, #6]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d103      	bne.n	80014b6 <servo_control+0x2a>
			TIM9->CCR1 = 30 + 0.5 * 90;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <servo_control+0x54>)
 80014b0:	224b      	movs	r2, #75	; 0x4b
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80014b4:	e00e      	b.n	80014d4 <servo_control+0x48>
			TIM9->CCR1 = 30 + 0.5 * 65;
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <servo_control+0x54>)
 80014b8:	223e      	movs	r2, #62	; 0x3e
 80014ba:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80014bc:	e00a      	b.n	80014d4 <servo_control+0x48>
		if (position == 0) {
 80014be:	79bb      	ldrb	r3, [r7, #6]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d103      	bne.n	80014cc <servo_control+0x40>
			TIM9->CCR2 = 30 + 0.5 * 90;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <servo_control+0x54>)
 80014c6:	224b      	movs	r2, #75	; 0x4b
 80014c8:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80014ca:	e002      	b.n	80014d2 <servo_control+0x46>
			TIM9->CCR2 = 30 + 0.5 * 180;
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <servo_control+0x54>)
 80014ce:	2278      	movs	r2, #120	; 0x78
 80014d0:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80014d2:	bf00      	nop
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40014000 	.word	0x40014000
 80014e4:	00000000 	.word	0x00000000

080014e8 <Move_robot_coordinates_X_Y_W>:
void Move_robot_coordinates_X_Y_W(float speed_v, float speed_w, float x_target,
		float y_target, float fi_target) {
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af04      	add	r7, sp, #16
 80014ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80014f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80014f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80014fa:	edc7 1a02 	vstr	s3, [r7, #8]
 80014fe:	ed87 2a01 	vstr	s4, [r7, #4]
	if (flag_move_end == 0) {
 8001502:	4ba5      	ldr	r3, [pc, #660]	; (8001798 <Move_robot_coordinates_X_Y_W+0x2b0>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 84fd 	bne.w	8001f06 <Move_robot_coordinates_X_Y_W+0xa1e>
		if (flag_onesd == 1) {
 800150c:	4ba3      	ldr	r3, [pc, #652]	; (800179c <Move_robot_coordinates_X_Y_W+0x2b4>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 81c3 	beq.w	800189c <Move_robot_coordinates_X_Y_W+0x3b4>
			V = speed_v;
 8001516:	4aa2      	ldr	r2, [pc, #648]	; (80017a0 <Move_robot_coordinates_X_Y_W+0x2b8>)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	6013      	str	r3, [r2, #0]
			W = speed_w;
 800151c:	4aa1      	ldr	r2, [pc, #644]	; (80017a4 <Move_robot_coordinates_X_Y_W+0x2bc>)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	6013      	str	r3, [r2, #0]
			quest_xy[0][0] = x_target;
 8001522:	4aa1      	ldr	r2, [pc, #644]	; (80017a8 <Move_robot_coordinates_X_Y_W+0x2c0>)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6013      	str	r3, [r2, #0]
			quest_xy[0][1] = y_target;
 8001528:	4a9f      	ldr	r2, [pc, #636]	; (80017a8 <Move_robot_coordinates_X_Y_W+0x2c0>)
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	6053      	str	r3, [r2, #4]
			quest_FI = fi_target;
 800152e:	4a9f      	ldr	r2, [pc, #636]	; (80017ac <Move_robot_coordinates_X_Y_W+0x2c4>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6013      	str	r3, [r2, #0]
			convert_xy_UV[0][0] = cos(fi);
 8001534:	4b9e      	ldr	r3, [pc, #632]	; (80017b0 <Move_robot_coordinates_X_Y_W+0x2c8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ffa9 	bl	8000490 <__aeabi_f2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	ec43 2b10 	vmov	d0, r2, r3
 8001546:	f006 ffdf 	bl	8008508 <cos>
 800154a:	ec53 2b10 	vmov	r2, r3, d0
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fab7 	bl	8000ac4 <__aeabi_d2f>
 8001556:	4603      	mov	r3, r0
 8001558:	4a96      	ldr	r2, [pc, #600]	; (80017b4 <Move_robot_coordinates_X_Y_W+0x2cc>)
 800155a:	6013      	str	r3, [r2, #0]
			convert_xy_UV[0][1] = sin(fi);
 800155c:	4b94      	ldr	r3, [pc, #592]	; (80017b0 <Move_robot_coordinates_X_Y_W+0x2c8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ff95 	bl	8000490 <__aeabi_f2d>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	ec43 2b10 	vmov	d0, r2, r3
 800156e:	f007 f81f 	bl	80085b0 <sin>
 8001572:	ec53 2b10 	vmov	r2, r3, d0
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f7ff faa3 	bl	8000ac4 <__aeabi_d2f>
 800157e:	4603      	mov	r3, r0
 8001580:	4a8c      	ldr	r2, [pc, #560]	; (80017b4 <Move_robot_coordinates_X_Y_W+0x2cc>)
 8001582:	6053      	str	r3, [r2, #4]
			convert_xy_UV[0][2] = 0;
 8001584:	4b8b      	ldr	r3, [pc, #556]	; (80017b4 <Move_robot_coordinates_X_Y_W+0x2cc>)
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
			convert_xy_UV[1][0] = -sin(fi);
 800158c:	4b88      	ldr	r3, [pc, #544]	; (80017b0 <Move_robot_coordinates_X_Y_W+0x2c8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ff7d 	bl	8000490 <__aeabi_f2d>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	ec43 2b10 	vmov	d0, r2, r3
 800159e:	f007 f807 	bl	80085b0 <sin>
 80015a2:	ec53 2b10 	vmov	r2, r3, d0
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fa8b 	bl	8000ac4 <__aeabi_d2f>
 80015ae:	4603      	mov	r3, r0
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eef1 7a67 	vneg.f32	s15, s15
 80015b8:	4b7e      	ldr	r3, [pc, #504]	; (80017b4 <Move_robot_coordinates_X_Y_W+0x2cc>)
 80015ba:	edc3 7a03 	vstr	s15, [r3, #12]
			convert_xy_UV[1][1] = cos(fi);
 80015be:	4b7c      	ldr	r3, [pc, #496]	; (80017b0 <Move_robot_coordinates_X_Y_W+0x2c8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ff64 	bl	8000490 <__aeabi_f2d>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	ec43 2b10 	vmov	d0, r2, r3
 80015d0:	f006 ff9a 	bl	8008508 <cos>
 80015d4:	ec53 2b10 	vmov	r2, r3, d0
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff fa72 	bl	8000ac4 <__aeabi_d2f>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a74      	ldr	r2, [pc, #464]	; (80017b4 <Move_robot_coordinates_X_Y_W+0x2cc>)
 80015e4:	6113      	str	r3, [r2, #16]
			convert_xy_UV[1][2] = 0;
 80015e6:	4b73      	ldr	r3, [pc, #460]	; (80017b4 <Move_robot_coordinates_X_Y_W+0x2cc>)
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
			convert_xy_UV[2][0] = position_x;
 80015ee:	4b72      	ldr	r3, [pc, #456]	; (80017b8 <Move_robot_coordinates_X_Y_W+0x2d0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a70      	ldr	r2, [pc, #448]	; (80017b4 <Move_robot_coordinates_X_Y_W+0x2cc>)
 80015f4:	6193      	str	r3, [r2, #24]
			convert_xy_UV[2][1] = position_y;
 80015f6:	4b71      	ldr	r3, [pc, #452]	; (80017bc <Move_robot_coordinates_X_Y_W+0x2d4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a6e      	ldr	r2, [pc, #440]	; (80017b4 <Move_robot_coordinates_X_Y_W+0x2cc>)
 80015fc:	61d3      	str	r3, [r2, #28]
			convert_xy_UV[2][2] = 1;
 80015fe:	4b6d      	ldr	r3, [pc, #436]	; (80017b4 <Move_robot_coordinates_X_Y_W+0x2cc>)
 8001600:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001604:	621a      	str	r2, [r3, #32]
			matrixInverse(&convert_xy_UV[0][0], 3,
 8001606:	4a6e      	ldr	r2, [pc, #440]	; (80017c0 <Move_robot_coordinates_X_Y_W+0x2d8>)
 8001608:	2103      	movs	r1, #3
 800160a:	486a      	ldr	r0, [pc, #424]	; (80017b4 <Move_robot_coordinates_X_Y_W+0x2cc>)
 800160c:	f001 fca0 	bl	8002f50 <matrixInverse>
					&inverse_converte_xy_UV[0][0]);
			matrixMultiplyM2M(&quest_xy[0][0], 1, 3,
 8001610:	4b6c      	ldr	r3, [pc, #432]	; (80017c4 <Move_robot_coordinates_X_Y_W+0x2dc>)
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	2303      	movs	r3, #3
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	2303      	movs	r3, #3
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <Move_robot_coordinates_X_Y_W+0x2d8>)
 800161e:	2203      	movs	r2, #3
 8001620:	2101      	movs	r1, #1
 8001622:	4861      	ldr	r0, [pc, #388]	; (80017a8 <Move_robot_coordinates_X_Y_W+0x2c0>)
 8001624:	f001 fac6 	bl	8002bb4 <matrixMultiplyM2M>
					&inverse_converte_xy_UV[0][0], 3, 3, &quest_UV[0][0]);
			gipotinus = sqrtf(
					(quest_UV[0][0] * quest_UV[0][0])
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <Move_robot_coordinates_X_Y_W+0x2dc>)
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	4b65      	ldr	r3, [pc, #404]	; (80017c4 <Move_robot_coordinates_X_Y_W+0x2dc>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ee27 7a27 	vmul.f32	s14, s14, s15
							+ (quest_UV[0][1] * quest_UV[0][1]));
 8001638:	4b62      	ldr	r3, [pc, #392]	; (80017c4 <Move_robot_coordinates_X_Y_W+0x2dc>)
 800163a:	edd3 6a01 	vldr	s13, [r3, #4]
 800163e:	4b61      	ldr	r3, [pc, #388]	; (80017c4 <Move_robot_coordinates_X_Y_W+0x2dc>)
 8001640:	edd3 7a01 	vldr	s15, [r3, #4]
 8001644:	ee66 7aa7 	vmul.f32	s15, s13, s15
			gipotinus = sqrtf(
 8001648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164c:	eeb0 0a67 	vmov.f32	s0, s15
 8001650:	f007 f806 	bl	8008660 <sqrtf>
 8001654:	eef0 7a40 	vmov.f32	s15, s0
 8001658:	4b5b      	ldr	r3, [pc, #364]	; (80017c8 <Move_robot_coordinates_X_Y_W+0x2e0>)
 800165a:	edc3 7a00 	vstr	s15, [r3]
			distante = gipotinus;
 800165e:	4b5a      	ldr	r3, [pc, #360]	; (80017c8 <Move_robot_coordinates_X_Y_W+0x2e0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a5a      	ldr	r2, [pc, #360]	; (80017cc <Move_robot_coordinates_X_Y_W+0x2e4>)
 8001664:	6013      	str	r3, [r2, #0]
			if (fi >= (2 * pi))
 8001666:	4b52      	ldr	r3, [pc, #328]	; (80017b0 <Move_robot_coordinates_X_Y_W+0x2c8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff10 	bl	8000490 <__aeabi_f2d>
 8001670:	a345      	add	r3, pc, #276	; (adr r3, 8001788 <Move_robot_coordinates_X_Y_W+0x2a0>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7ff f9e9 	bl	8000a4c <__aeabi_dcmpge>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d012      	beq.n	80016a6 <Move_robot_coordinates_X_Y_W+0x1be>
				fi = fi - 2 * pi;
 8001680:	4b4b      	ldr	r3, [pc, #300]	; (80017b0 <Move_robot_coordinates_X_Y_W+0x2c8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff03 	bl	8000490 <__aeabi_f2d>
 800168a:	a33f      	add	r3, pc, #252	; (adr r3, 8001788 <Move_robot_coordinates_X_Y_W+0x2a0>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7fe fd9e 	bl	80001d0 <__aeabi_dsub>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff fa12 	bl	8000ac4 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a43      	ldr	r2, [pc, #268]	; (80017b0 <Move_robot_coordinates_X_Y_W+0x2c8>)
 80016a4:	6013      	str	r3, [r2, #0]
			if (fi < 0.0)
 80016a6:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <Move_robot_coordinates_X_Y_W+0x2c8>)
 80016a8:	edd3 7a00 	vldr	s15, [r3]
 80016ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b4:	d512      	bpl.n	80016dc <Move_robot_coordinates_X_Y_W+0x1f4>
				fi = fi + 2 * pi;
 80016b6:	4b3e      	ldr	r3, [pc, #248]	; (80017b0 <Move_robot_coordinates_X_Y_W+0x2c8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fee8 	bl	8000490 <__aeabi_f2d>
 80016c0:	a331      	add	r3, pc, #196	; (adr r3, 8001788 <Move_robot_coordinates_X_Y_W+0x2a0>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	f7fe fd85 	bl	80001d4 <__adddf3>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff f9f7 	bl	8000ac4 <__aeabi_d2f>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a35      	ldr	r2, [pc, #212]	; (80017b0 <Move_robot_coordinates_X_Y_W+0x2c8>)
 80016da:	6013      	str	r3, [r2, #0]
			if (quest_FI > fi) {
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <Move_robot_coordinates_X_Y_W+0x2c4>)
 80016de:	ed93 7a00 	vldr	s14, [r3]
 80016e2:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <Move_robot_coordinates_X_Y_W+0x2c8>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f0:	dd72      	ble.n	80017d8 <Move_robot_coordinates_X_Y_W+0x2f0>
				if ((quest_FI - fi) > pi) {
 80016f2:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <Move_robot_coordinates_X_Y_W+0x2c4>)
 80016f4:	ed93 7a00 	vldr	s14, [r3]
 80016f8:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <Move_robot_coordinates_X_Y_W+0x2c8>)
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001702:	ee17 0a90 	vmov	r0, s15
 8001706:	f7fe fec3 	bl	8000490 <__aeabi_f2d>
 800170a:	a321      	add	r3, pc, #132	; (adr r3, 8001790 <Move_robot_coordinates_X_Y_W+0x2a8>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	f7ff f9a6 	bl	8000a60 <__aeabi_dcmpgt>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d027      	beq.n	800176a <Move_robot_coordinates_X_Y_W+0x282>
					delta_fi = (2 * pi - quest_FI + fi);
 800171a:	4b24      	ldr	r3, [pc, #144]	; (80017ac <Move_robot_coordinates_X_Y_W+0x2c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe feb6 	bl	8000490 <__aeabi_f2d>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	a117      	add	r1, pc, #92	; (adr r1, 8001788 <Move_robot_coordinates_X_Y_W+0x2a0>)
 800172a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800172e:	f7fe fd4f 	bl	80001d0 <__aeabi_dsub>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4614      	mov	r4, r2
 8001738:	461d      	mov	r5, r3
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <Move_robot_coordinates_X_Y_W+0x2c8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fea6 	bl	8000490 <__aeabi_f2d>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4620      	mov	r0, r4
 800174a:	4629      	mov	r1, r5
 800174c:	f7fe fd42 	bl	80001d4 <__adddf3>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff f9b4 	bl	8000ac4 <__aeabi_d2f>
 800175c:	4603      	mov	r3, r0
 800175e:	4a1c      	ldr	r2, [pc, #112]	; (80017d0 <Move_robot_coordinates_X_Y_W+0x2e8>)
 8001760:	6013      	str	r3, [r2, #0]
					flaging = 1;
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <Move_robot_coordinates_X_Y_W+0x2ec>)
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e080      	b.n	800186c <Move_robot_coordinates_X_Y_W+0x384>
				} else {

					delta_fi = (quest_FI - fi);
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <Move_robot_coordinates_X_Y_W+0x2c4>)
 800176c:	ed93 7a00 	vldr	s14, [r3]
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <Move_robot_coordinates_X_Y_W+0x2c8>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <Move_robot_coordinates_X_Y_W+0x2e8>)
 800177c:	edc3 7a00 	vstr	s15, [r3]
					flaging = 2;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <Move_robot_coordinates_X_Y_W+0x2ec>)
 8001782:	2202      	movs	r2, #2
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	e071      	b.n	800186c <Move_robot_coordinates_X_Y_W+0x384>
 8001788:	54442d18 	.word	0x54442d18
 800178c:	401921fb 	.word	0x401921fb
 8001790:	54442d18 	.word	0x54442d18
 8001794:	400921fb 	.word	0x400921fb
 8001798:	200002f4 	.word	0x200002f4
 800179c:	2000006c 	.word	0x2000006c
 80017a0:	20000060 	.word	0x20000060
 80017a4:	20000064 	.word	0x20000064
 80017a8:	20000284 	.word	0x20000284
 80017ac:	200002e8 	.word	0x200002e8
 80017b0:	20000074 	.word	0x20000074
 80017b4:	2000029c 	.word	0x2000029c
 80017b8:	20000478 	.word	0x20000478
 80017bc:	2000047c 	.word	0x2000047c
 80017c0:	200002c0 	.word	0x200002c0
 80017c4:	20000290 	.word	0x20000290
 80017c8:	200002e4 	.word	0x200002e4
 80017cc:	200002ec 	.word	0x200002ec
 80017d0:	20000274 	.word	0x20000274
 80017d4:	2000043c 	.word	0x2000043c
				}

			} else {
				if ((fi - quest_FI) > pi) {
 80017d8:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <Move_robot_coordinates_X_Y_W+0x3a0>)
 80017da:	ed93 7a00 	vldr	s14, [r3]
 80017de:	4b2b      	ldr	r3, [pc, #172]	; (800188c <Move_robot_coordinates_X_Y_W+0x3a4>)
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e8:	ee17 0a90 	vmov	r0, s15
 80017ec:	f7fe fe50 	bl	8000490 <__aeabi_f2d>
 80017f0:	a321      	add	r3, pc, #132	; (adr r3, 8001878 <Move_robot_coordinates_X_Y_W+0x390>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	f7ff f933 	bl	8000a60 <__aeabi_dcmpgt>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d027      	beq.n	8001850 <Move_robot_coordinates_X_Y_W+0x368>
					flaging = 3;
 8001800:	4b23      	ldr	r3, [pc, #140]	; (8001890 <Move_robot_coordinates_X_Y_W+0x3a8>)
 8001802:	2203      	movs	r2, #3
 8001804:	701a      	strb	r2, [r3, #0]
					delta_fi = 2 * pi - fi + quest_FI;
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <Move_robot_coordinates_X_Y_W+0x3a0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fe40 	bl	8000490 <__aeabi_f2d>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	a11a      	add	r1, pc, #104	; (adr r1, 8001880 <Move_robot_coordinates_X_Y_W+0x398>)
 8001816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800181a:	f7fe fcd9 	bl	80001d0 <__aeabi_dsub>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4614      	mov	r4, r2
 8001824:	461d      	mov	r5, r3
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <Move_robot_coordinates_X_Y_W+0x3a4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe30 	bl	8000490 <__aeabi_f2d>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4620      	mov	r0, r4
 8001836:	4629      	mov	r1, r5
 8001838:	f7fe fccc 	bl	80001d4 <__adddf3>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f93e 	bl	8000ac4 <__aeabi_d2f>
 8001848:	4603      	mov	r3, r0
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <Move_robot_coordinates_X_Y_W+0x3ac>)
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e00d      	b.n	800186c <Move_robot_coordinates_X_Y_W+0x384>
					;

				} else {
					flaging = 4;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <Move_robot_coordinates_X_Y_W+0x3a8>)
 8001852:	2204      	movs	r2, #4
 8001854:	701a      	strb	r2, [r3, #0]
					delta_fi = fi - quest_FI;
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <Move_robot_coordinates_X_Y_W+0x3a0>)
 8001858:	ed93 7a00 	vldr	s14, [r3]
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <Move_robot_coordinates_X_Y_W+0x3a4>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <Move_robot_coordinates_X_Y_W+0x3ac>)
 8001868:	edc3 7a00 	vstr	s15, [r3]
				}
			}

			flag_onesd = 0;
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <Move_robot_coordinates_X_Y_W+0x3b0>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
			}
		}

	}

}
 8001872:	e348      	b.n	8001f06 <Move_robot_coordinates_X_Y_W+0xa1e>
 8001874:	f3af 8000 	nop.w
 8001878:	54442d18 	.word	0x54442d18
 800187c:	400921fb 	.word	0x400921fb
 8001880:	54442d18 	.word	0x54442d18
 8001884:	401921fb 	.word	0x401921fb
 8001888:	20000074 	.word	0x20000074
 800188c:	200002e8 	.word	0x200002e8
 8001890:	2000043c 	.word	0x2000043c
 8001894:	20000274 	.word	0x20000274
 8001898:	2000006c 	.word	0x2000006c
			if (((gipotinus >= 0.01) || delta_fi >= 0.02)) {
 800189c:	4bb0      	ldr	r3, [pc, #704]	; (8001b60 <Move_robot_coordinates_X_Y_W+0x678>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fdf5 	bl	8000490 <__aeabi_f2d>
 80018a6:	a3a2      	add	r3, pc, #648	; (adr r3, 8001b30 <Move_robot_coordinates_X_Y_W+0x648>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7ff f8ce 	bl	8000a4c <__aeabi_dcmpge>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10d      	bne.n	80018d2 <Move_robot_coordinates_X_Y_W+0x3ea>
 80018b6:	4bab      	ldr	r3, [pc, #684]	; (8001b64 <Move_robot_coordinates_X_Y_W+0x67c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fde8 	bl	8000490 <__aeabi_f2d>
 80018c0:	a39d      	add	r3, pc, #628	; (adr r3, 8001b38 <Move_robot_coordinates_X_Y_W+0x650>)
 80018c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c6:	f7ff f8c1 	bl	8000a4c <__aeabi_dcmpge>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 82fb 	beq.w	8001ec8 <Move_robot_coordinates_X_Y_W+0x9e0>
				convert_xy_UV[0][0] = cos(fi);
 80018d2:	4ba5      	ldr	r3, [pc, #660]	; (8001b68 <Move_robot_coordinates_X_Y_W+0x680>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fdda 	bl	8000490 <__aeabi_f2d>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	ec43 2b10 	vmov	d0, r2, r3
 80018e4:	f006 fe10 	bl	8008508 <cos>
 80018e8:	ec53 2b10 	vmov	r2, r3, d0
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f8e8 	bl	8000ac4 <__aeabi_d2f>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4a9d      	ldr	r2, [pc, #628]	; (8001b6c <Move_robot_coordinates_X_Y_W+0x684>)
 80018f8:	6013      	str	r3, [r2, #0]
				convert_xy_UV[0][1] = sin(fi);
 80018fa:	4b9b      	ldr	r3, [pc, #620]	; (8001b68 <Move_robot_coordinates_X_Y_W+0x680>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fdc6 	bl	8000490 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	ec43 2b10 	vmov	d0, r2, r3
 800190c:	f006 fe50 	bl	80085b0 <sin>
 8001910:	ec53 2b10 	vmov	r2, r3, d0
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f7ff f8d4 	bl	8000ac4 <__aeabi_d2f>
 800191c:	4603      	mov	r3, r0
 800191e:	4a93      	ldr	r2, [pc, #588]	; (8001b6c <Move_robot_coordinates_X_Y_W+0x684>)
 8001920:	6053      	str	r3, [r2, #4]
				convert_xy_UV[0][2] = 0;
 8001922:	4b92      	ldr	r3, [pc, #584]	; (8001b6c <Move_robot_coordinates_X_Y_W+0x684>)
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
				convert_xy_UV[1][0] = -sin(fi);
 800192a:	4b8f      	ldr	r3, [pc, #572]	; (8001b68 <Move_robot_coordinates_X_Y_W+0x680>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fdae 	bl	8000490 <__aeabi_f2d>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	ec43 2b10 	vmov	d0, r2, r3
 800193c:	f006 fe38 	bl	80085b0 <sin>
 8001940:	ec53 2b10 	vmov	r2, r3, d0
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	f7ff f8bc 	bl	8000ac4 <__aeabi_d2f>
 800194c:	4603      	mov	r3, r0
 800194e:	ee07 3a90 	vmov	s15, r3
 8001952:	eef1 7a67 	vneg.f32	s15, s15
 8001956:	4b85      	ldr	r3, [pc, #532]	; (8001b6c <Move_robot_coordinates_X_Y_W+0x684>)
 8001958:	edc3 7a03 	vstr	s15, [r3, #12]
				convert_xy_UV[1][1] = cos(fi);
 800195c:	4b82      	ldr	r3, [pc, #520]	; (8001b68 <Move_robot_coordinates_X_Y_W+0x680>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fd95 	bl	8000490 <__aeabi_f2d>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	ec43 2b10 	vmov	d0, r2, r3
 800196e:	f006 fdcb 	bl	8008508 <cos>
 8001972:	ec53 2b10 	vmov	r2, r3, d0
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7ff f8a3 	bl	8000ac4 <__aeabi_d2f>
 800197e:	4603      	mov	r3, r0
 8001980:	4a7a      	ldr	r2, [pc, #488]	; (8001b6c <Move_robot_coordinates_X_Y_W+0x684>)
 8001982:	6113      	str	r3, [r2, #16]
				convert_xy_UV[1][2] = 0;
 8001984:	4b79      	ldr	r3, [pc, #484]	; (8001b6c <Move_robot_coordinates_X_Y_W+0x684>)
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	615a      	str	r2, [r3, #20]
				convert_xy_UV[2][0] = position_x;
 800198c:	4b78      	ldr	r3, [pc, #480]	; (8001b70 <Move_robot_coordinates_X_Y_W+0x688>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a76      	ldr	r2, [pc, #472]	; (8001b6c <Move_robot_coordinates_X_Y_W+0x684>)
 8001992:	6193      	str	r3, [r2, #24]
				convert_xy_UV[2][1] = position_y;
 8001994:	4b77      	ldr	r3, [pc, #476]	; (8001b74 <Move_robot_coordinates_X_Y_W+0x68c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a74      	ldr	r2, [pc, #464]	; (8001b6c <Move_robot_coordinates_X_Y_W+0x684>)
 800199a:	61d3      	str	r3, [r2, #28]
				convert_xy_UV[2][2] = 1;
 800199c:	4b73      	ldr	r3, [pc, #460]	; (8001b6c <Move_robot_coordinates_X_Y_W+0x684>)
 800199e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019a2:	621a      	str	r2, [r3, #32]
				matrixInverse(&convert_xy_UV[0][0], 3,
 80019a4:	4a74      	ldr	r2, [pc, #464]	; (8001b78 <Move_robot_coordinates_X_Y_W+0x690>)
 80019a6:	2103      	movs	r1, #3
 80019a8:	4870      	ldr	r0, [pc, #448]	; (8001b6c <Move_robot_coordinates_X_Y_W+0x684>)
 80019aa:	f001 fad1 	bl	8002f50 <matrixInverse>
				matrixMultiplyM2M(&quest_xy[0][0], 1, 3,
 80019ae:	4b73      	ldr	r3, [pc, #460]	; (8001b7c <Move_robot_coordinates_X_Y_W+0x694>)
 80019b0:	9302      	str	r3, [sp, #8]
 80019b2:	2303      	movs	r3, #3
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	2303      	movs	r3, #3
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	4b6f      	ldr	r3, [pc, #444]	; (8001b78 <Move_robot_coordinates_X_Y_W+0x690>)
 80019bc:	2203      	movs	r2, #3
 80019be:	2101      	movs	r1, #1
 80019c0:	486f      	ldr	r0, [pc, #444]	; (8001b80 <Move_robot_coordinates_X_Y_W+0x698>)
 80019c2:	f001 f8f7 	bl	8002bb4 <matrixMultiplyM2M>
						(quest_UV[0][0] * quest_UV[0][0])
 80019c6:	4b6d      	ldr	r3, [pc, #436]	; (8001b7c <Move_robot_coordinates_X_Y_W+0x694>)
 80019c8:	ed93 7a00 	vldr	s14, [r3]
 80019cc:	4b6b      	ldr	r3, [pc, #428]	; (8001b7c <Move_robot_coordinates_X_Y_W+0x694>)
 80019ce:	edd3 7a00 	vldr	s15, [r3]
 80019d2:	ee27 7a27 	vmul.f32	s14, s14, s15
								+ (quest_UV[0][1] * quest_UV[0][1]));
 80019d6:	4b69      	ldr	r3, [pc, #420]	; (8001b7c <Move_robot_coordinates_X_Y_W+0x694>)
 80019d8:	edd3 6a01 	vldr	s13, [r3, #4]
 80019dc:	4b67      	ldr	r3, [pc, #412]	; (8001b7c <Move_robot_coordinates_X_Y_W+0x694>)
 80019de:	edd3 7a01 	vldr	s15, [r3, #4]
 80019e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
				gipotinus = sqrtf(
 80019e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ea:	eeb0 0a67 	vmov.f32	s0, s15
 80019ee:	f006 fe37 	bl	8008660 <sqrtf>
 80019f2:	eef0 7a40 	vmov.f32	s15, s0
 80019f6:	4b5a      	ldr	r3, [pc, #360]	; (8001b60 <Move_robot_coordinates_X_Y_W+0x678>)
 80019f8:	edc3 7a00 	vstr	s15, [r3]
				if (gipotinus > 0.005) {
 80019fc:	4b58      	ldr	r3, [pc, #352]	; (8001b60 <Move_robot_coordinates_X_Y_W+0x678>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fd45 	bl	8000490 <__aeabi_f2d>
 8001a06:	a34e      	add	r3, pc, #312	; (adr r3, 8001b40 <Move_robot_coordinates_X_Y_W+0x658>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	f7ff f828 	bl	8000a60 <__aeabi_dcmpgt>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 817d 	beq.w	8001d12 <Move_robot_coordinates_X_Y_W+0x82a>
					if (gipotinus < 0.15) {
 8001a18:	4b51      	ldr	r3, [pc, #324]	; (8001b60 <Move_robot_coordinates_X_Y_W+0x678>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fd37 	bl	8000490 <__aeabi_f2d>
 8001a22:	a349      	add	r3, pc, #292	; (adr r3, 8001b48 <Move_robot_coordinates_X_Y_W+0x660>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	f7fe fffc 	bl	8000a24 <__aeabi_dcmplt>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80ae 	beq.w	8001b90 <Move_robot_coordinates_X_Y_W+0x6a8>
						target_speed[0] = quest_UV[0][0] / gipotinus * V
 8001a34:	4b51      	ldr	r3, [pc, #324]	; (8001b7c <Move_robot_coordinates_X_Y_W+0x694>)
 8001a36:	edd3 6a00 	vldr	s13, [r3]
 8001a3a:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <Move_robot_coordinates_X_Y_W+0x678>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a44:	4b4f      	ldr	r3, [pc, #316]	; (8001b84 <Move_robot_coordinates_X_Y_W+0x69c>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4e:	ee17 0a90 	vmov	r0, s15
 8001a52:	f7fe fd1d 	bl	8000490 <__aeabi_f2d>
 8001a56:	4604      	mov	r4, r0
 8001a58:	460d      	mov	r5, r1
								* (0.4 + (0.6 * gipotinus) / 0.25);
 8001a5a:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <Move_robot_coordinates_X_Y_W+0x678>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd16 	bl	8000490 <__aeabi_f2d>
 8001a64:	a33a      	add	r3, pc, #232	; (adr r3, 8001b50 <Move_robot_coordinates_X_Y_W+0x668>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f7fe fd69 	bl	8000540 <__aeabi_dmul>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	4b43      	ldr	r3, [pc, #268]	; (8001b88 <Move_robot_coordinates_X_Y_W+0x6a0>)
 8001a7c:	f7fe fe8a 	bl	8000794 <__aeabi_ddiv>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	a333      	add	r3, pc, #204	; (adr r3, 8001b58 <Move_robot_coordinates_X_Y_W+0x670>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	f7fe fba1 	bl	80001d4 <__adddf3>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4620      	mov	r0, r4
 8001a98:	4629      	mov	r1, r5
 8001a9a:	f7fe fd51 	bl	8000540 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f80d 	bl	8000ac4 <__aeabi_d2f>
 8001aaa:	4603      	mov	r3, r0
						target_speed[0] = quest_UV[0][0] / gipotinus * V
 8001aac:	4a37      	ldr	r2, [pc, #220]	; (8001b8c <Move_robot_coordinates_X_Y_W+0x6a4>)
 8001aae:	6013      	str	r3, [r2, #0]
						target_speed[1] = quest_UV[0][1] / gipotinus * V
 8001ab0:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <Move_robot_coordinates_X_Y_W+0x694>)
 8001ab2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <Move_robot_coordinates_X_Y_W+0x678>)
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ac0:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <Move_robot_coordinates_X_Y_W+0x69c>)
 8001ac2:	edd3 7a00 	vldr	s15, [r3]
 8001ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aca:	ee17 0a90 	vmov	r0, s15
 8001ace:	f7fe fcdf 	bl	8000490 <__aeabi_f2d>
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	460d      	mov	r5, r1
								* (0.4 + (0.6 * gipotinus) / 0.25);
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <Move_robot_coordinates_X_Y_W+0x678>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fcd8 	bl	8000490 <__aeabi_f2d>
 8001ae0:	a31b      	add	r3, pc, #108	; (adr r3, 8001b50 <Move_robot_coordinates_X_Y_W+0x668>)
 8001ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae6:	f7fe fd2b 	bl	8000540 <__aeabi_dmul>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <Move_robot_coordinates_X_Y_W+0x6a0>)
 8001af8:	f7fe fe4c 	bl	8000794 <__aeabi_ddiv>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	a314      	add	r3, pc, #80	; (adr r3, 8001b58 <Move_robot_coordinates_X_Y_W+0x670>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	f7fe fb63 	bl	80001d4 <__adddf3>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4620      	mov	r0, r4
 8001b14:	4629      	mov	r1, r5
 8001b16:	f7fe fd13 	bl	8000540 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7fe ffcf 	bl	8000ac4 <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
						target_speed[1] = quest_UV[0][1] / gipotinus * V
 8001b28:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <Move_robot_coordinates_X_Y_W+0x6a4>)
 8001b2a:	6053      	str	r3, [r2, #4]
 8001b2c:	e0f9      	b.n	8001d22 <Move_robot_coordinates_X_Y_W+0x83a>
 8001b2e:	bf00      	nop
 8001b30:	47ae147b 	.word	0x47ae147b
 8001b34:	3f847ae1 	.word	0x3f847ae1
 8001b38:	47ae147b 	.word	0x47ae147b
 8001b3c:	3f947ae1 	.word	0x3f947ae1
 8001b40:	47ae147b 	.word	0x47ae147b
 8001b44:	3f747ae1 	.word	0x3f747ae1
 8001b48:	33333333 	.word	0x33333333
 8001b4c:	3fc33333 	.word	0x3fc33333
 8001b50:	33333333 	.word	0x33333333
 8001b54:	3fe33333 	.word	0x3fe33333
 8001b58:	9999999a 	.word	0x9999999a
 8001b5c:	3fd99999 	.word	0x3fd99999
 8001b60:	200002e4 	.word	0x200002e4
 8001b64:	20000274 	.word	0x20000274
 8001b68:	20000074 	.word	0x20000074
 8001b6c:	2000029c 	.word	0x2000029c
 8001b70:	20000478 	.word	0x20000478
 8001b74:	2000047c 	.word	0x2000047c
 8001b78:	200002c0 	.word	0x200002c0
 8001b7c:	20000290 	.word	0x20000290
 8001b80:	20000284 	.word	0x20000284
 8001b84:	20000060 	.word	0x20000060
 8001b88:	3fd00000 	.word	0x3fd00000
 8001b8c:	20000230 	.word	0x20000230
					} else if (distante - gipotinus < 0.15) {
 8001b90:	4bb3      	ldr	r3, [pc, #716]	; (8001e60 <Move_robot_coordinates_X_Y_W+0x978>)
 8001b92:	ed93 7a00 	vldr	s14, [r3]
 8001b96:	4bb3      	ldr	r3, [pc, #716]	; (8001e64 <Move_robot_coordinates_X_Y_W+0x97c>)
 8001b98:	edd3 7a00 	vldr	s15, [r3]
 8001b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba0:	ee17 0a90 	vmov	r0, s15
 8001ba4:	f7fe fc74 	bl	8000490 <__aeabi_f2d>
 8001ba8:	a3a5      	add	r3, pc, #660	; (adr r3, 8001e40 <Move_robot_coordinates_X_Y_W+0x958>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	f7fe ff39 	bl	8000a24 <__aeabi_dcmplt>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 808b 	beq.w	8001cd0 <Move_robot_coordinates_X_Y_W+0x7e8>
						target_speed[0] = quest_UV[0][0] / gipotinus * V
 8001bba:	4bab      	ldr	r3, [pc, #684]	; (8001e68 <Move_robot_coordinates_X_Y_W+0x980>)
 8001bbc:	edd3 6a00 	vldr	s13, [r3]
 8001bc0:	4ba8      	ldr	r3, [pc, #672]	; (8001e64 <Move_robot_coordinates_X_Y_W+0x97c>)
 8001bc2:	edd3 7a00 	vldr	s15, [r3]
 8001bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bca:	4ba8      	ldr	r3, [pc, #672]	; (8001e6c <Move_robot_coordinates_X_Y_W+0x984>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd4:	ee17 0a90 	vmov	r0, s15
 8001bd8:	f7fe fc5a 	bl	8000490 <__aeabi_f2d>
 8001bdc:	4604      	mov	r4, r0
 8001bde:	460d      	mov	r5, r1
								* (0.4 + (0.6 * (distante - gipotinus)) / 0.25);
 8001be0:	4b9f      	ldr	r3, [pc, #636]	; (8001e60 <Move_robot_coordinates_X_Y_W+0x978>)
 8001be2:	ed93 7a00 	vldr	s14, [r3]
 8001be6:	4b9f      	ldr	r3, [pc, #636]	; (8001e64 <Move_robot_coordinates_X_Y_W+0x97c>)
 8001be8:	edd3 7a00 	vldr	s15, [r3]
 8001bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf0:	ee17 0a90 	vmov	r0, s15
 8001bf4:	f7fe fc4c 	bl	8000490 <__aeabi_f2d>
 8001bf8:	a393      	add	r3, pc, #588	; (adr r3, 8001e48 <Move_robot_coordinates_X_Y_W+0x960>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f7fe fc9f 	bl	8000540 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	4b98      	ldr	r3, [pc, #608]	; (8001e70 <Move_robot_coordinates_X_Y_W+0x988>)
 8001c10:	f7fe fdc0 	bl	8000794 <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	a38c      	add	r3, pc, #560	; (adr r3, 8001e50 <Move_robot_coordinates_X_Y_W+0x968>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fad7 	bl	80001d4 <__adddf3>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	f7fe fc87 	bl	8000540 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f7fe ff43 	bl	8000ac4 <__aeabi_d2f>
 8001c3e:	4603      	mov	r3, r0
						target_speed[0] = quest_UV[0][0] / gipotinus * V
 8001c40:	4a8c      	ldr	r2, [pc, #560]	; (8001e74 <Move_robot_coordinates_X_Y_W+0x98c>)
 8001c42:	6013      	str	r3, [r2, #0]
						target_speed[1] = quest_UV[0][1] / gipotinus * V
 8001c44:	4b88      	ldr	r3, [pc, #544]	; (8001e68 <Move_robot_coordinates_X_Y_W+0x980>)
 8001c46:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c4a:	4b86      	ldr	r3, [pc, #536]	; (8001e64 <Move_robot_coordinates_X_Y_W+0x97c>)
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c54:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <Move_robot_coordinates_X_Y_W+0x984>)
 8001c56:	edd3 7a00 	vldr	s15, [r3]
 8001c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5e:	ee17 0a90 	vmov	r0, s15
 8001c62:	f7fe fc15 	bl	8000490 <__aeabi_f2d>
 8001c66:	4604      	mov	r4, r0
 8001c68:	460d      	mov	r5, r1
								* (0.4 + (0.6 * (distante - gipotinus)) / 0.25);
 8001c6a:	4b7d      	ldr	r3, [pc, #500]	; (8001e60 <Move_robot_coordinates_X_Y_W+0x978>)
 8001c6c:	ed93 7a00 	vldr	s14, [r3]
 8001c70:	4b7c      	ldr	r3, [pc, #496]	; (8001e64 <Move_robot_coordinates_X_Y_W+0x97c>)
 8001c72:	edd3 7a00 	vldr	s15, [r3]
 8001c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7a:	ee17 0a90 	vmov	r0, s15
 8001c7e:	f7fe fc07 	bl	8000490 <__aeabi_f2d>
 8001c82:	a371      	add	r3, pc, #452	; (adr r3, 8001e48 <Move_robot_coordinates_X_Y_W+0x960>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe fc5a 	bl	8000540 <__aeabi_dmul>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	4b75      	ldr	r3, [pc, #468]	; (8001e70 <Move_robot_coordinates_X_Y_W+0x988>)
 8001c9a:	f7fe fd7b 	bl	8000794 <__aeabi_ddiv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	a36a      	add	r3, pc, #424	; (adr r3, 8001e50 <Move_robot_coordinates_X_Y_W+0x968>)
 8001ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cac:	f7fe fa92 	bl	80001d4 <__adddf3>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	f7fe fc42 	bl	8000540 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7fe fefe 	bl	8000ac4 <__aeabi_d2f>
 8001cc8:	4603      	mov	r3, r0
						target_speed[1] = quest_UV[0][1] / gipotinus * V
 8001cca:	4a6a      	ldr	r2, [pc, #424]	; (8001e74 <Move_robot_coordinates_X_Y_W+0x98c>)
 8001ccc:	6053      	str	r3, [r2, #4]
 8001cce:	e028      	b.n	8001d22 <Move_robot_coordinates_X_Y_W+0x83a>
						target_speed[0] = quest_UV[0][0] / gipotinus * V;
 8001cd0:	4b65      	ldr	r3, [pc, #404]	; (8001e68 <Move_robot_coordinates_X_Y_W+0x980>)
 8001cd2:	edd3 6a00 	vldr	s13, [r3]
 8001cd6:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <Move_robot_coordinates_X_Y_W+0x97c>)
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ce0:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <Move_robot_coordinates_X_Y_W+0x984>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cea:	4b62      	ldr	r3, [pc, #392]	; (8001e74 <Move_robot_coordinates_X_Y_W+0x98c>)
 8001cec:	edc3 7a00 	vstr	s15, [r3]
						target_speed[1] = quest_UV[0][1] / gipotinus * V;
 8001cf0:	4b5d      	ldr	r3, [pc, #372]	; (8001e68 <Move_robot_coordinates_X_Y_W+0x980>)
 8001cf2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001cf6:	4b5b      	ldr	r3, [pc, #364]	; (8001e64 <Move_robot_coordinates_X_Y_W+0x97c>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d00:	4b5a      	ldr	r3, [pc, #360]	; (8001e6c <Move_robot_coordinates_X_Y_W+0x984>)
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d0a:	4b5a      	ldr	r3, [pc, #360]	; (8001e74 <Move_robot_coordinates_X_Y_W+0x98c>)
 8001d0c:	edc3 7a01 	vstr	s15, [r3, #4]
 8001d10:	e007      	b.n	8001d22 <Move_robot_coordinates_X_Y_W+0x83a>
					target_speed[0] = 0.0;
 8001d12:	4b58      	ldr	r3, [pc, #352]	; (8001e74 <Move_robot_coordinates_X_Y_W+0x98c>)
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
					target_speed[1] = 0.0;
 8001d1a:	4b56      	ldr	r3, [pc, #344]	; (8001e74 <Move_robot_coordinates_X_Y_W+0x98c>)
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]
				if (delta_fi > 0.02) {
 8001d22:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <Move_robot_coordinates_X_Y_W+0x990>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fbb2 	bl	8000490 <__aeabi_f2d>
 8001d2c:	a34a      	add	r3, pc, #296	; (adr r3, 8001e58 <Move_robot_coordinates_X_Y_W+0x970>)
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	f7fe fe95 	bl	8000a60 <__aeabi_dcmpgt>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d02b      	beq.n	8001d94 <Move_robot_coordinates_X_Y_W+0x8ac>
					switch (flaging) {
 8001d3c:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <Move_robot_coordinates_X_Y_W+0x994>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d82a      	bhi.n	8001d9c <Move_robot_coordinates_X_Y_W+0x8b4>
 8001d46:	a201      	add	r2, pc, #4	; (adr r2, 8001d4c <Move_robot_coordinates_X_Y_W+0x864>)
 8001d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4c:	08001d5d 	.word	0x08001d5d
 8001d50:	08001d6f 	.word	0x08001d6f
 8001d54:	08001d79 	.word	0x08001d79
 8001d58:	08001d83 	.word	0x08001d83
						target_speed[2] = -W;
 8001d5c:	4b48      	ldr	r3, [pc, #288]	; (8001e80 <Move_robot_coordinates_X_Y_W+0x998>)
 8001d5e:	edd3 7a00 	vldr	s15, [r3]
 8001d62:	eef1 7a67 	vneg.f32	s15, s15
 8001d66:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <Move_robot_coordinates_X_Y_W+0x98c>)
 8001d68:	edc3 7a02 	vstr	s15, [r3, #8]
						break;
 8001d6c:	e016      	b.n	8001d9c <Move_robot_coordinates_X_Y_W+0x8b4>
						target_speed[2] = W;
 8001d6e:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <Move_robot_coordinates_X_Y_W+0x998>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a40      	ldr	r2, [pc, #256]	; (8001e74 <Move_robot_coordinates_X_Y_W+0x98c>)
 8001d74:	6093      	str	r3, [r2, #8]
						break;
 8001d76:	e011      	b.n	8001d9c <Move_robot_coordinates_X_Y_W+0x8b4>
						target_speed[2] = W;
 8001d78:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <Move_robot_coordinates_X_Y_W+0x998>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a3d      	ldr	r2, [pc, #244]	; (8001e74 <Move_robot_coordinates_X_Y_W+0x98c>)
 8001d7e:	6093      	str	r3, [r2, #8]
						break;
 8001d80:	e00c      	b.n	8001d9c <Move_robot_coordinates_X_Y_W+0x8b4>
						target_speed[2] = -W;
 8001d82:	4b3f      	ldr	r3, [pc, #252]	; (8001e80 <Move_robot_coordinates_X_Y_W+0x998>)
 8001d84:	edd3 7a00 	vldr	s15, [r3]
 8001d88:	eef1 7a67 	vneg.f32	s15, s15
 8001d8c:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <Move_robot_coordinates_X_Y_W+0x98c>)
 8001d8e:	edc3 7a02 	vstr	s15, [r3, #8]
						break;
 8001d92:	e003      	b.n	8001d9c <Move_robot_coordinates_X_Y_W+0x8b4>
					target_speed[2] = 0.0;
 8001d94:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <Move_robot_coordinates_X_Y_W+0x98c>)
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
				matrixMultiplyM2M(&target_speed[0], 1, 3, &robot_matrix[0][0],
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <Move_robot_coordinates_X_Y_W+0x99c>)
 8001d9e:	9302      	str	r3, [sp, #8]
 8001da0:	2304      	movs	r3, #4
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	2303      	movs	r3, #3
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	4b37      	ldr	r3, [pc, #220]	; (8001e88 <Move_robot_coordinates_X_Y_W+0x9a0>)
 8001daa:	2203      	movs	r2, #3
 8001dac:	2101      	movs	r1, #1
 8001dae:	4831      	ldr	r0, [pc, #196]	; (8001e74 <Move_robot_coordinates_X_Y_W+0x98c>)
 8001db0:	f000 ff00 	bl	8002bb4 <matrixMultiplyM2M>
				now_speead[0] = result_speed_1;
 8001db4:	4b35      	ldr	r3, [pc, #212]	; (8001e8c <Move_robot_coordinates_X_Y_W+0x9a4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a35      	ldr	r2, [pc, #212]	; (8001e90 <Move_robot_coordinates_X_Y_W+0x9a8>)
 8001dba:	6013      	str	r3, [r2, #0]
				now_speead[1] = result_speed_2;
 8001dbc:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <Move_robot_coordinates_X_Y_W+0x9ac>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a33      	ldr	r2, [pc, #204]	; (8001e90 <Move_robot_coordinates_X_Y_W+0x9a8>)
 8001dc2:	6053      	str	r3, [r2, #4]
				now_speead[2] = result_speed_3;
 8001dc4:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <Move_robot_coordinates_X_Y_W+0x9b0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a31      	ldr	r2, [pc, #196]	; (8001e90 <Move_robot_coordinates_X_Y_W+0x9a8>)
 8001dca:	6093      	str	r3, [r2, #8]
				read_speed[0] = result_speed_0;
 8001dcc:	4b33      	ldr	r3, [pc, #204]	; (8001e9c <Move_robot_coordinates_X_Y_W+0x9b4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a33      	ldr	r2, [pc, #204]	; (8001ea0 <Move_robot_coordinates_X_Y_W+0x9b8>)
 8001dd2:	6013      	str	r3, [r2, #0]
				read_speed[1] = result_speed_1;
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <Move_robot_coordinates_X_Y_W+0x9a4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a31      	ldr	r2, [pc, #196]	; (8001ea0 <Move_robot_coordinates_X_Y_W+0x9b8>)
 8001dda:	6053      	str	r3, [r2, #4]
				read_speed[2] = result_speed_2;
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <Move_robot_coordinates_X_Y_W+0x9ac>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a2f      	ldr	r2, [pc, #188]	; (8001ea0 <Move_robot_coordinates_X_Y_W+0x9b8>)
 8001de2:	6093      	str	r3, [r2, #8]
				read_speed[3] = result_speed_3;
 8001de4:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <Move_robot_coordinates_X_Y_W+0x9b0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a2d      	ldr	r2, [pc, #180]	; (8001ea0 <Move_robot_coordinates_X_Y_W+0x9b8>)
 8001dea:	60d3      	str	r3, [r2, #12]
				matrixMultiplyM2M(&read_speed[0], 1, 4,
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <Move_robot_coordinates_X_Y_W+0x9bc>)
 8001dee:	9302      	str	r3, [sp, #8]
 8001df0:	2303      	movs	r3, #3
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	2304      	movs	r3, #4
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <Move_robot_coordinates_X_Y_W+0x9c0>)
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	4828      	ldr	r0, [pc, #160]	; (8001ea0 <Move_robot_coordinates_X_Y_W+0x9b8>)
 8001e00:	f000 fed8 	bl	8002bb4 <matrixMultiplyM2M>
				Wheel_1.target = speed_wheels[0];
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <Move_robot_coordinates_X_Y_W+0x99c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a28      	ldr	r2, [pc, #160]	; (8001eac <Move_robot_coordinates_X_Y_W+0x9c4>)
 8001e0a:	6113      	str	r3, [r2, #16]
				Wheel_2.target = speed_wheels[1];
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <Move_robot_coordinates_X_Y_W+0x99c>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4a27      	ldr	r2, [pc, #156]	; (8001eb0 <Move_robot_coordinates_X_Y_W+0x9c8>)
 8001e12:	6113      	str	r3, [r2, #16]
				Wheel_3.target = speed_wheels[2];
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <Move_robot_coordinates_X_Y_W+0x99c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a26      	ldr	r2, [pc, #152]	; (8001eb4 <Move_robot_coordinates_X_Y_W+0x9cc>)
 8001e1a:	6113      	str	r3, [r2, #16]
				Wheel_4.target = speed_wheels[3];
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <Move_robot_coordinates_X_Y_W+0x99c>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4a25      	ldr	r2, [pc, #148]	; (8001eb8 <Move_robot_coordinates_X_Y_W+0x9d0>)
 8001e22:	6113      	str	r3, [r2, #16]
				speed_U = robot_speed[0];
 8001e24:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <Move_robot_coordinates_X_Y_W+0x9bc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a24      	ldr	r2, [pc, #144]	; (8001ebc <Move_robot_coordinates_X_Y_W+0x9d4>)
 8001e2a:	6013      	str	r3, [r2, #0]
				speed_V = robot_speed[1];
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <Move_robot_coordinates_X_Y_W+0x9bc>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4a23      	ldr	r2, [pc, #140]	; (8001ec0 <Move_robot_coordinates_X_Y_W+0x9d8>)
 8001e32:	6013      	str	r3, [r2, #0]
				speed_W = robot_speed[2];
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <Move_robot_coordinates_X_Y_W+0x9bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4a22      	ldr	r2, [pc, #136]	; (8001ec4 <Move_robot_coordinates_X_Y_W+0x9dc>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	e063      	b.n	8001f06 <Move_robot_coordinates_X_Y_W+0xa1e>
 8001e3e:	bf00      	nop
 8001e40:	33333333 	.word	0x33333333
 8001e44:	3fc33333 	.word	0x3fc33333
 8001e48:	33333333 	.word	0x33333333
 8001e4c:	3fe33333 	.word	0x3fe33333
 8001e50:	9999999a 	.word	0x9999999a
 8001e54:	3fd99999 	.word	0x3fd99999
 8001e58:	47ae147b 	.word	0x47ae147b
 8001e5c:	3f947ae1 	.word	0x3f947ae1
 8001e60:	200002ec 	.word	0x200002ec
 8001e64:	200002e4 	.word	0x200002e4
 8001e68:	20000290 	.word	0x20000290
 8001e6c:	20000060 	.word	0x20000060
 8001e70:	3fd00000 	.word	0x3fd00000
 8001e74:	20000230 	.word	0x20000230
 8001e78:	20000274 	.word	0x20000274
 8001e7c:	2000043c 	.word	0x2000043c
 8001e80:	20000064 	.word	0x20000064
 8001e84:	2000023c 	.word	0x2000023c
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000448 	.word	0x20000448
 8001e90:	2000024c 	.word	0x2000024c
 8001e94:	2000044c 	.word	0x2000044c
 8001e98:	20000450 	.word	0x20000450
 8001e9c:	20000444 	.word	0x20000444
 8001ea0:	20000258 	.word	0x20000258
 8001ea4:	20000268 	.word	0x20000268
 8001ea8:	20000030 	.word	0x20000030
 8001eac:	200000f0 	.word	0x200000f0
 8001eb0:	20000130 	.word	0x20000130
 8001eb4:	20000170 	.word	0x20000170
 8001eb8:	200001b0 	.word	0x200001b0
 8001ebc:	20000278 	.word	0x20000278
 8001ec0:	2000027c 	.word	0x2000027c
 8001ec4:	20000280 	.word	0x20000280
				flag_move_end = 1;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <Move_robot_coordinates_X_Y_W+0xa28>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
				speed_U = 0;
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <Move_robot_coordinates_X_Y_W+0xa2c>)
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
				speed_V = 0;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <Move_robot_coordinates_X_Y_W+0xa30>)
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
				speed_W = 0;
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <Move_robot_coordinates_X_Y_W+0xa34>)
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
				Wheel_1.target = 0;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <Move_robot_coordinates_X_Y_W+0xa38>)
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
				Wheel_2.target = 0;
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <Move_robot_coordinates_X_Y_W+0xa3c>)
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
				Wheel_3.target = 0;
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <Move_robot_coordinates_X_Y_W+0xa40>)
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
				Wheel_4.target = 0;
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <Move_robot_coordinates_X_Y_W+0xa44>)
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200002f4 	.word	0x200002f4
 8001f14:	20000278 	.word	0x20000278
 8001f18:	2000027c 	.word	0x2000027c
 8001f1c:	20000280 	.word	0x20000280
 8001f20:	200000f0 	.word	0x200000f0
 8001f24:	20000130 	.word	0x20000130
 8001f28:	20000170 	.word	0x20000170
 8001f2c:	200001b0 	.word	0x200001b0

08001f30 <convertData>:
uint8_t ind_data = 0;
bool write_data = 0;
uint8_t check_sum;
uint32_t timer = 0;
float move_axes[4];
void convertData(char *data) {
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	bool now; // 1 - axes, 0 - buttons
	uint8_t pad;
	if (!(data[1] == 'a' || data[1] == 'b' || data[size_data - 1] == '\r')) {
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b61      	cmp	r3, #97	; 0x61
 8001f40:	d00d      	beq.n	8001f5e <convertData+0x2e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3301      	adds	r3, #1
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b62      	cmp	r3, #98	; 0x62
 8001f4a:	d008      	beq.n	8001f5e <convertData+0x2e>
 8001f4c:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <convertData+0x170>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b0d      	cmp	r3, #13
 8001f5a:	f040 8099 	bne.w	8002090 <convertData+0x160>
		return;
	}
	for (int i = 1; data[i] != '\r'; i++) {
 8001f5e:	2301      	movs	r3, #1
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	e08d      	b.n	8002080 <convertData+0x150>
		if (data[i] == '\r')
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b0d      	cmp	r3, #13
 8001f6e:	f000 8091 	beq.w	8002094 <convertData+0x164>
			break;
		if (data[i] == 'a' || data[i] == 'b') {
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b61      	cmp	r3, #97	; 0x61
 8001f7c:	d005      	beq.n	8001f8a <convertData+0x5a>
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b62      	cmp	r3, #98	; 0x62
 8001f88:	d110      	bne.n	8001fac <convertData+0x7c>
			now = data[i] == 'a' ? 1 : 0;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b61      	cmp	r3, #97	; 0x61
 8001f94:	bf0c      	ite	eq
 8001f96:	2301      	moveq	r3, #1
 8001f98:	2300      	movne	r3, #0
 8001f9a:	75fb      	strb	r3, [r7, #23]
			pad = data[i - 1] - 48;
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	3b30      	subs	r3, #48	; 0x30
 8001fa8:	75bb      	strb	r3, [r7, #22]
			continue;
 8001faa:	e066      	b.n	800207a <convertData+0x14a>
		}
		for (int j = 0; data[i - 1] != '/';) {
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	e05c      	b.n	800206c <convertData+0x13c>
			if (data[i] == '/' || data[i - 1] == '/')
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b2f      	cmp	r3, #47	; 0x2f
 8001fbc:	d05d      	beq.n	800207a <convertData+0x14a>
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b2f      	cmp	r3, #47	; 0x2f
 8001fca:	d056      	beq.n	800207a <convertData+0x14a>
				break;
			if (now) {
 8001fcc:	7dfb      	ldrb	r3, [r7, #23]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d02a      	beq.n	8002028 <convertData+0xf8>
				pads[pad].axes[j] = (data[i] - 48) * 100
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	3b30      	subs	r3, #48	; 0x30
 8001fdc:	2264      	movs	r2, #100	; 0x64
 8001fde:	fb02 f103 	mul.w	r1, r2, r3
						+ (data[i + 1] - 48) * 10 + (data[i + 2] - 48);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4419      	add	r1, r3
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	3b30      	subs	r3, #48	; 0x30
				pads[pad].axes[j] = (data[i] - 48) * 100
 8002006:	7dba      	ldrb	r2, [r7, #22]
						+ (data[i + 1] - 48) * 10 + (data[i + 2] - 48);
 8002008:	4419      	add	r1, r3
				pads[pad].axes[j] = (data[i] - 48) * 100
 800200a:	4826      	ldr	r0, [pc, #152]	; (80020a4 <convertData+0x174>)
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4413      	add	r3, r2
 8002016:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				j++;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3301      	adds	r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
				i += 3;
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	3303      	adds	r3, #3
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	e021      	b.n	800206c <convertData+0x13c>
			} else if (!now) {
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	f083 0301 	eor.w	r3, r3, #1
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01b      	beq.n	800206c <convertData+0x13c>
				pads[pad].buttons[j] = data[i] - 48;
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	3b30      	subs	r3, #48	; 0x30
 800203e:	7dba      	ldrb	r2, [r7, #22]
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2d8      	uxtb	r0, r3
 800204a:	4916      	ldr	r1, [pc, #88]	; (80020a4 <convertData+0x174>)
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	18ca      	adds	r2, r1, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4413      	add	r3, r2
 800205a:	3310      	adds	r3, #16
 800205c:	4602      	mov	r2, r0
 800205e:	701a      	strb	r2, [r3, #0]
				j++;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
				i++;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	3301      	adds	r3, #1
 800206a:	613b      	str	r3, [r7, #16]
		for (int j = 0; data[i - 1] != '/';) {
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	3b01      	subs	r3, #1
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b2f      	cmp	r3, #47	; 0x2f
 8002078:	d19b      	bne.n	8001fb2 <convertData+0x82>
	for (int i = 1; data[i] != '\r'; i++) {
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	3301      	adds	r3, #1
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b0d      	cmp	r3, #13
 800208a:	f47f af6b 	bne.w	8001f64 <convertData+0x34>
 800208e:	e002      	b.n	8002096 <convertData+0x166>
		return;
 8002090:	bf00      	nop
 8002092:	e000      	b.n	8002096 <convertData+0x166>
			break;
 8002094:	bf00      	nop
			}
		}
	}
}
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	20000418 	.word	0x20000418
 80020a4:	20000304 	.word	0x20000304

080020a8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

	if (rx_data[0] == '%') {
 80020b0:	4b5d      	ldr	r3, [pc, #372]	; (8002228 <HAL_UART_RxCpltCallback+0x180>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b25      	cmp	r3, #37	; 0x25
 80020b6:	d10b      	bne.n	80020d0 <HAL_UART_RxCpltCallback+0x28>
		check_sum = 0;
 80020b8:	4b5c      	ldr	r3, [pc, #368]	; (800222c <HAL_UART_RxCpltCallback+0x184>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
		write_data = 1;
 80020be:	4b5c      	ldr	r3, [pc, #368]	; (8002230 <HAL_UART_RxCpltCallback+0x188>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
		ind_data = 0;
 80020c4:	4b5b      	ldr	r3, [pc, #364]	; (8002234 <HAL_UART_RxCpltCallback+0x18c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
		size_data = 0;
 80020ca:	4b5b      	ldr	r3, [pc, #364]	; (8002238 <HAL_UART_RxCpltCallback+0x190>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
	}

	if (write_data) {
 80020d0:	4b57      	ldr	r3, [pc, #348]	; (8002230 <HAL_UART_RxCpltCallback+0x188>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d040      	beq.n	800215a <HAL_UART_RxCpltCallback+0xb2>

		temp_data[ind_data] = rx_data[0];
 80020d8:	4b56      	ldr	r3, [pc, #344]	; (8002234 <HAL_UART_RxCpltCallback+0x18c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b52      	ldr	r3, [pc, #328]	; (8002228 <HAL_UART_RxCpltCallback+0x180>)
 80020e0:	7819      	ldrb	r1, [r3, #0]
 80020e2:	4b56      	ldr	r3, [pc, #344]	; (800223c <HAL_UART_RxCpltCallback+0x194>)
 80020e4:	5499      	strb	r1, [r3, r2]

		if (ind_data == 3) {
 80020e6:	4b53      	ldr	r3, [pc, #332]	; (8002234 <HAL_UART_RxCpltCallback+0x18c>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d11c      	bne.n	8002128 <HAL_UART_RxCpltCallback+0x80>
			size_data = (temp_data[1] - 48) * 100 + (temp_data[2] - 48) * 10
 80020ee:	4b53      	ldr	r3, [pc, #332]	; (800223c <HAL_UART_RxCpltCallback+0x194>)
 80020f0:	785b      	ldrb	r3, [r3, #1]
 80020f2:	461a      	mov	r2, r3
 80020f4:	0092      	lsls	r2, r2, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	461a      	mov	r2, r3
 80020fa:	0091      	lsls	r1, r2, #2
 80020fc:	461a      	mov	r2, r3
 80020fe:	460b      	mov	r3, r1
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4b4d      	ldr	r3, [pc, #308]	; (800223c <HAL_UART_RxCpltCallback+0x194>)
 8002108:	789b      	ldrb	r3, [r3, #2]
 800210a:	4619      	mov	r1, r3
 800210c:	0089      	lsls	r1, r1, #2
 800210e:	440b      	add	r3, r1
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	4413      	add	r3, r2
 8002116:	b2da      	uxtb	r2, r3
					+ (temp_data[3] - 48);
 8002118:	4b48      	ldr	r3, [pc, #288]	; (800223c <HAL_UART_RxCpltCallback+0x194>)
 800211a:	78db      	ldrb	r3, [r3, #3]
 800211c:	4413      	add	r3, r2
 800211e:	b2db      	uxtb	r3, r3
 8002120:	3330      	adds	r3, #48	; 0x30
 8002122:	b2da      	uxtb	r2, r3
			size_data = (temp_data[1] - 48) * 100 + (temp_data[2] - 48) * 10
 8002124:	4b44      	ldr	r3, [pc, #272]	; (8002238 <HAL_UART_RxCpltCallback+0x190>)
 8002126:	701a      	strb	r2, [r3, #0]
		}
		if (ind_data <= size_data - 4 || ind_data <= 3) {
 8002128:	4b43      	ldr	r3, [pc, #268]	; (8002238 <HAL_UART_RxCpltCallback+0x190>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	3b03      	subs	r3, #3
 800212e:	4a41      	ldr	r2, [pc, #260]	; (8002234 <HAL_UART_RxCpltCallback+0x18c>)
 8002130:	7812      	ldrb	r2, [r2, #0]
 8002132:	4293      	cmp	r3, r2
 8002134:	dc03      	bgt.n	800213e <HAL_UART_RxCpltCallback+0x96>
 8002136:	4b3f      	ldr	r3, [pc, #252]	; (8002234 <HAL_UART_RxCpltCallback+0x18c>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d807      	bhi.n	800214e <HAL_UART_RxCpltCallback+0xa6>
			check_sum += rx_data[0];
 800213e:	4b3a      	ldr	r3, [pc, #232]	; (8002228 <HAL_UART_RxCpltCallback+0x180>)
 8002140:	781a      	ldrb	r2, [r3, #0]
 8002142:	4b3a      	ldr	r3, [pc, #232]	; (800222c <HAL_UART_RxCpltCallback+0x184>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	4413      	add	r3, r2
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4b38      	ldr	r3, [pc, #224]	; (800222c <HAL_UART_RxCpltCallback+0x184>)
 800214c:	701a      	strb	r2, [r3, #0]
		}

		ind_data++;
 800214e:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_UART_RxCpltCallback+0x18c>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	3301      	adds	r3, #1
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b37      	ldr	r3, [pc, #220]	; (8002234 <HAL_UART_RxCpltCallback+0x18c>)
 8002158:	701a      	strb	r2, [r3, #0]
	}
	if (ind_data >= 99) {
 800215a:	4b36      	ldr	r3, [pc, #216]	; (8002234 <HAL_UART_RxCpltCallback+0x18c>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b62      	cmp	r3, #98	; 0x62
 8002160:	d90b      	bls.n	800217a <HAL_UART_RxCpltCallback+0xd2>
		check_sum = 0;
 8002162:	4b32      	ldr	r3, [pc, #200]	; (800222c <HAL_UART_RxCpltCallback+0x184>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
		write_data = 0;
 8002168:	4b31      	ldr	r3, [pc, #196]	; (8002230 <HAL_UART_RxCpltCallback+0x188>)
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
		ind_data = 0;
 800216e:	4b31      	ldr	r3, [pc, #196]	; (8002234 <HAL_UART_RxCpltCallback+0x18c>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
		size_data = 0;
 8002174:	4b30      	ldr	r3, [pc, #192]	; (8002238 <HAL_UART_RxCpltCallback+0x190>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
	}
	if (ind_data == size_data) {
 800217a:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <HAL_UART_RxCpltCallback+0x18c>)
 800217c:	781a      	ldrb	r2, [r3, #0]
 800217e:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <HAL_UART_RxCpltCallback+0x190>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d101      	bne.n	800218a <HAL_UART_RxCpltCallback+0xe2>
		HAL_GetTick();
 8002186:	f002 fce9 	bl	8004b5c <HAL_GetTick>
	}
	if (rx_data[0] == '\r') {
 800218a:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_UART_RxCpltCallback+0x180>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b0d      	cmp	r3, #13
 8002190:	d145      	bne.n	800221e <HAL_UART_RxCpltCallback+0x176>

		//size_data = (temp_data[1] - 48) * 100 + (temp_data[2] - 48) * 10 + (temp_data[3] - 48);
		uint8_t check_sum_data = (temp_data[size_data - 3] - 48) * 100
 8002192:	4b29      	ldr	r3, [pc, #164]	; (8002238 <HAL_UART_RxCpltCallback+0x190>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	3b03      	subs	r3, #3
 8002198:	4a28      	ldr	r2, [pc, #160]	; (800223c <HAL_UART_RxCpltCallback+0x194>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
				+ (temp_data[size_data - 2] - 48) * 10
 800219c:	461a      	mov	r2, r3
 800219e:	0092      	lsls	r2, r2, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	461a      	mov	r2, r3
 80021a4:	0091      	lsls	r1, r2, #2
 80021a6:	461a      	mov	r2, r3
 80021a8:	460b      	mov	r3, r1
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	4b21      	ldr	r3, [pc, #132]	; (8002238 <HAL_UART_RxCpltCallback+0x190>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	3b02      	subs	r3, #2
 80021b6:	4921      	ldr	r1, [pc, #132]	; (800223c <HAL_UART_RxCpltCallback+0x194>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	4619      	mov	r1, r3
 80021bc:	0089      	lsls	r1, r1, #2
 80021be:	440b      	add	r3, r1
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	b2da      	uxtb	r2, r3
				+ (temp_data[size_data - 1] - 48);
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <HAL_UART_RxCpltCallback+0x190>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	491b      	ldr	r1, [pc, #108]	; (800223c <HAL_UART_RxCpltCallback+0x194>)
 80021d0:	5ccb      	ldrb	r3, [r1, r3]
 80021d2:	4413      	add	r3, r2
 80021d4:	b2db      	uxtb	r3, r3
		uint8_t check_sum_data = (temp_data[size_data - 3] - 48) * 100
 80021d6:	3330      	adds	r3, #48	; 0x30
 80021d8:	73fb      	strb	r3, [r7, #15]
		write_data = 0;
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_UART_RxCpltCallback+0x188>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
		if (check_sum == check_sum_data && ind_data == size_data + 1) {
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_UART_RxCpltCallback+0x184>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d119      	bne.n	800221e <HAL_UART_RxCpltCallback+0x176>
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_UART_RxCpltCallback+0x18c>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_UART_RxCpltCallback+0x190>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d111      	bne.n	800221e <HAL_UART_RxCpltCallback+0x176>
			timer = HAL_GetTick();
 80021fa:	f002 fcaf 	bl	8004b5c <HAL_GetTick>
 80021fe:	4603      	mov	r3, r0
 8002200:	4a0f      	ldr	r2, [pc, #60]	; (8002240 <HAL_UART_RxCpltCallback+0x198>)
 8002202:	6013      	str	r3, [r2, #0]
			memcpy(data, &temp_data[5], size_data);
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <HAL_UART_RxCpltCallback+0x190>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	490e      	ldr	r1, [pc, #56]	; (8002244 <HAL_UART_RxCpltCallback+0x19c>)
 800220c:	480e      	ldr	r0, [pc, #56]	; (8002248 <HAL_UART_RxCpltCallback+0x1a0>)
 800220e:	f006 f96d 	bl	80084ec <memcpy>
			data[size_data - 8] = '\r';
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_UART_RxCpltCallback+0x190>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	3b08      	subs	r3, #8
 8002218:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <HAL_UART_RxCpltCallback+0x1a0>)
 800221a:	210d      	movs	r1, #13
 800221c:	54d1      	strb	r1, [r2, r3]
		}
	}
}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	2000034c 	.word	0x2000034c
 800222c:	2000041b 	.word	0x2000041b
 8002230:	2000041a 	.word	0x2000041a
 8002234:	20000419 	.word	0x20000419
 8002238:	20000418 	.word	0x20000418
 800223c:	20000350 	.word	0x20000350
 8002240:	2000041c 	.word	0x2000041c
 8002244:	20000355 	.word	0x20000355
 8002248:	200003b4 	.word	0x200003b4
 800224c:	00000000 	.word	0x00000000

08002250 <convert_chushpan>:
bool autonom_flag = false;
void convert_chushpan(void) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - timer >= UART_TIMEOUT) {
 8002256:	f002 fc81 	bl	8004b5c <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	4b60      	ldr	r3, [pc, #384]	; (80023e0 <convert_chushpan+0x190>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002266:	d304      	bcc.n	8002272 <convert_chushpan+0x22>
		memcpy(data, DEF_PAD_DATA, 74);
 8002268:	224a      	movs	r2, #74	; 0x4a
 800226a:	495e      	ldr	r1, [pc, #376]	; (80023e4 <convert_chushpan+0x194>)
 800226c:	485e      	ldr	r0, [pc, #376]	; (80023e8 <convert_chushpan+0x198>)
 800226e:	f006 f93d 	bl	80084ec <memcpy>
	}

	HAL_UART_Receive_DMA(&huart1, rx_data, 1);
 8002272:	2201      	movs	r2, #1
 8002274:	495d      	ldr	r1, [pc, #372]	; (80023ec <convert_chushpan+0x19c>)
 8002276:	485e      	ldr	r0, [pc, #376]	; (80023f0 <convert_chushpan+0x1a0>)
 8002278:	f005 f851 	bl	800731e <HAL_UART_Receive_DMA>

	convertData((char*) data);
 800227c:	485a      	ldr	r0, [pc, #360]	; (80023e8 <convert_chushpan+0x198>)
 800227e:	f7ff fe57 	bl	8001f30 <convertData>

	for (int i = 0; i < 4; i++) {
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	e06c      	b.n	8002362 <convert_chushpan+0x112>
		move_axes[i] =
				i % 2 == 0 ?
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0301 	and.w	r3, r3, #1
						(double) ((pads[0].axes[i]) - 256.0f) / 256.0f :
 800228e:	2b00      	cmp	r3, #0
 8002290:	d110      	bne.n	80022b4 <convert_chushpan+0x64>
 8002292:	4a58      	ldr	r2, [pc, #352]	; (80023f4 <convert_chushpan+0x1a4>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80023f8 <convert_chushpan+0x1a8>
 80022a6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022aa:	eddf 6a53 	vldr	s13, [pc, #332]	; 80023f8 <convert_chushpan+0x1a8>
 80022ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022b2:	e00f      	b.n	80022d4 <convert_chushpan+0x84>
						(double) ((pads[0].axes[i]) - 256.0f) / -256.0f;
 80022b4:	4a4f      	ldr	r2, [pc, #316]	; (80023f4 <convert_chushpan+0x1a4>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022bc:	ee07 3a90 	vmov	s15, r3
 80022c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80023f8 <convert_chushpan+0x1a8>
 80022c8:	ee37 7ac7 	vsub.f32	s14, s15, s14
						(double) ((pads[0].axes[i]) - 256.0f) / 256.0f :
 80022cc:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80023fc <convert_chushpan+0x1ac>
 80022d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
		move_axes[i] =
 80022d4:	4a4a      	ldr	r2, [pc, #296]	; (8002400 <convert_chushpan+0x1b0>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	edc3 7a00 	vstr	s15, [r3]
		move_axes[i] /= pads[0].buttons[7] ? 2 : 1;
 80022e0:	4a47      	ldr	r2, [pc, #284]	; (8002400 <convert_chushpan+0x1b0>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	edd3 6a00 	vldr	s13, [r3]
 80022ec:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <convert_chushpan+0x1a4>)
 80022ee:	7ddb      	ldrb	r3, [r3, #23]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <convert_chushpan+0xaa>
 80022f4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80022f8:	e001      	b.n	80022fe <convert_chushpan+0xae>
 80022fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002302:	4a3f      	ldr	r2, [pc, #252]	; (8002400 <convert_chushpan+0x1b0>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	edc3 7a00 	vstr	s15, [r3]
		if (move_axes[i] >= -0.2 && move_axes[i] <= 0.2)
 800230e:	4a3c      	ldr	r2, [pc, #240]	; (8002400 <convert_chushpan+0x1b0>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f8b9 	bl	8000490 <__aeabi_f2d>
 800231e:	a32c      	add	r3, pc, #176	; (adr r3, 80023d0 <convert_chushpan+0x180>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f7fe fb92 	bl	8000a4c <__aeabi_dcmpge>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d016      	beq.n	800235c <convert_chushpan+0x10c>
 800232e:	4a34      	ldr	r2, [pc, #208]	; (8002400 <convert_chushpan+0x1b0>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f8a9 	bl	8000490 <__aeabi_f2d>
 800233e:	a326      	add	r3, pc, #152	; (adr r3, 80023d8 <convert_chushpan+0x188>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe fb78 	bl	8000a38 <__aeabi_dcmple>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d006      	beq.n	800235c <convert_chushpan+0x10c>
			move_axes[i] = 0.0f;
 800234e:	4a2c      	ldr	r2, [pc, #176]	; (8002400 <convert_chushpan+0x1b0>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3301      	adds	r3, #1
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b03      	cmp	r3, #3
 8002366:	dd8f      	ble.n	8002288 <convert_chushpan+0x38>

	}
	move_axes[2] *= -1;
 8002368:	4b25      	ldr	r3, [pc, #148]	; (8002400 <convert_chushpan+0x1b0>)
 800236a:	edd3 7a02 	vldr	s15, [r3, #8]
 800236e:	eef1 7a67 	vneg.f32	s15, s15
 8002372:	4b23      	ldr	r3, [pc, #140]	; (8002400 <convert_chushpan+0x1b0>)
 8002374:	edc3 7a02 	vstr	s15, [r3, #8]

	if (pads[0].buttons[8] && pads[0].buttons[9] && pads[1].buttons[8]
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <convert_chushpan+0x1a4>)
 800237a:	7e1b      	ldrb	r3, [r3, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01d      	beq.n	80023bc <convert_chushpan+0x16c>
 8002380:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <convert_chushpan+0x1a4>)
 8002382:	7e5b      	ldrb	r3, [r3, #25]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d019      	beq.n	80023bc <convert_chushpan+0x16c>
 8002388:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <convert_chushpan+0x1a4>)
 800238a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d014      	beq.n	80023bc <convert_chushpan+0x16c>
			&& pads[1].buttons[9]) {
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <convert_chushpan+0x1a4>)
 8002394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00f      	beq.n	80023bc <convert_chushpan+0x16c>
		if (!autonom_flag) {
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <convert_chushpan+0x1b4>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	f083 0301 	eor.w	r3, r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d004      	beq.n	80023b4 <convert_chushpan+0x164>
			autonom_timer = HAL_GetTick();
 80023aa:	f002 fbd7 	bl	8004b5c <HAL_GetTick>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4a15      	ldr	r2, [pc, #84]	; (8002408 <convert_chushpan+0x1b8>)
 80023b2:	6013      	str	r3, [r2, #0]
		}

		autonom_flag = true;
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <convert_chushpan+0x1b4>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
 80023ba:	e003      	b.n	80023c4 <convert_chushpan+0x174>

	} else {
		autonom_flag = false;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <convert_chushpan+0x1b4>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
	}
}
 80023c2:	bf00      	nop
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	f3af 8000 	nop.w
 80023d0:	9999999a 	.word	0x9999999a
 80023d4:	bfc99999 	.word	0xbfc99999
 80023d8:	9999999a 	.word	0x9999999a
 80023dc:	3fc99999 	.word	0x3fc99999
 80023e0:	2000041c 	.word	0x2000041c
 80023e4:	08009690 	.word	0x08009690
 80023e8:	200003b4 	.word	0x200003b4
 80023ec:	2000034c 	.word	0x2000034c
 80023f0:	20000758 	.word	0x20000758
 80023f4:	20000304 	.word	0x20000304
 80023f8:	43800000 	.word	0x43800000
 80023fc:	c3800000 	.word	0xc3800000
 8002400:	20000420 	.word	0x20000420
 8002404:	20000430 	.word	0x20000430
 8002408:	200002f8 	.word	0x200002f8

0800240c <convert_typedef>:
void convert_typedef(void) {
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

	Wheel_1.motor = 0;
 8002410:	4b43      	ldr	r3, [pc, #268]	; (8002520 <convert_typedef+0x114>)
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_1.target = 0.0;
 8002418:	4b41      	ldr	r3, [pc, #260]	; (8002520 <convert_typedef+0x114>)
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
	Wheel_1.current = 0;
 8002420:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <convert_typedef+0x114>)
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	615a      	str	r2, [r3, #20]
	Wheel_1.Kp = 14;
 8002428:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <convert_typedef+0x114>)
 800242a:	4a3e      	ldr	r2, [pc, #248]	; (8002524 <convert_typedef+0x118>)
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_1.Ki = 1;
 800242e:	4b3c      	ldr	r3, [pc, #240]	; (8002520 <convert_typedef+0x114>)
 8002430:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_1.Kd = 0.1;
 8002436:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <convert_typedef+0x114>)
 8002438:	4a3b      	ldr	r2, [pc, #236]	; (8002528 <convert_typedef+0x11c>)
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_1.wh_L = 0.0;
 800243c:	4b38      	ldr	r3, [pc, #224]	; (8002520 <convert_typedef+0x114>)
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	639a      	str	r2, [r3, #56]	; 0x38

	Wheel_2.motor = 1;
 8002444:	4b39      	ldr	r3, [pc, #228]	; (800252c <convert_typedef+0x120>)
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_2.target = 0.0;
 800244c:	4b37      	ldr	r3, [pc, #220]	; (800252c <convert_typedef+0x120>)
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
	Wheel_2.current = 0;
 8002454:	4b35      	ldr	r3, [pc, #212]	; (800252c <convert_typedef+0x120>)
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	615a      	str	r2, [r3, #20]
	Wheel_2.Kp = 14;
 800245c:	4b33      	ldr	r3, [pc, #204]	; (800252c <convert_typedef+0x120>)
 800245e:	4a31      	ldr	r2, [pc, #196]	; (8002524 <convert_typedef+0x118>)
 8002460:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_2.Ki = 1;
 8002462:	4b32      	ldr	r3, [pc, #200]	; (800252c <convert_typedef+0x120>)
 8002464:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002468:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_2.Kd = 0.1;
 800246a:	4b30      	ldr	r3, [pc, #192]	; (800252c <convert_typedef+0x120>)
 800246c:	4a2e      	ldr	r2, [pc, #184]	; (8002528 <convert_typedef+0x11c>)
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_2.wh_L = 0.0;
 8002470:	4b2e      	ldr	r3, [pc, #184]	; (800252c <convert_typedef+0x120>)
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	639a      	str	r2, [r3, #56]	; 0x38

	Wheel_3.motor = 2;
 8002478:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <convert_typedef+0x124>)
 800247a:	2202      	movs	r2, #2
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_3.target = 0.0;
 8002480:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <convert_typedef+0x124>)
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
	Wheel_3.current = 0;
 8002488:	4b29      	ldr	r3, [pc, #164]	; (8002530 <convert_typedef+0x124>)
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	615a      	str	r2, [r3, #20]
	Wheel_3.Kp = 14;
 8002490:	4b27      	ldr	r3, [pc, #156]	; (8002530 <convert_typedef+0x124>)
 8002492:	4a24      	ldr	r2, [pc, #144]	; (8002524 <convert_typedef+0x118>)
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_3.Ki = 1;
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <convert_typedef+0x124>)
 8002498:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_3.Kd = 0.1;
 800249e:	4b24      	ldr	r3, [pc, #144]	; (8002530 <convert_typedef+0x124>)
 80024a0:	4a21      	ldr	r2, [pc, #132]	; (8002528 <convert_typedef+0x11c>)
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_3.wh_L = 0.0;
 80024a4:	4b22      	ldr	r3, [pc, #136]	; (8002530 <convert_typedef+0x124>)
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	639a      	str	r2, [r3, #56]	; 0x38

	Wheel_4.motor = 3;
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <convert_typedef+0x128>)
 80024ae:	2203      	movs	r2, #3
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_4.target = 0.0;
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <convert_typedef+0x128>)
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
	Wheel_4.current = 0;
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <convert_typedef+0x128>)
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	615a      	str	r2, [r3, #20]
	Wheel_4.Kp = 14;
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <convert_typedef+0x128>)
 80024c6:	4a17      	ldr	r2, [pc, #92]	; (8002524 <convert_typedef+0x118>)
 80024c8:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_4.Ki = 1;
 80024ca:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <convert_typedef+0x128>)
 80024cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024d0:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_4.Kd = 0.1;
 80024d2:	4b18      	ldr	r3, [pc, #96]	; (8002534 <convert_typedef+0x128>)
 80024d4:	4a14      	ldr	r2, [pc, #80]	; (8002528 <convert_typedef+0x11c>)
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_4.wh_L = 0.0;
 80024d8:	4b16      	ldr	r3, [pc, #88]	; (8002534 <convert_typedef+0x128>)
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	639a      	str	r2, [r3, #56]	; 0x38

	Chain_motor.motor = 4;
 80024e0:	4b15      	ldr	r3, [pc, #84]	; (8002538 <convert_typedef+0x12c>)
 80024e2:	2204      	movs	r2, #4
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Chain_motor.target = 0.0;
 80024e8:	4b13      	ldr	r3, [pc, #76]	; (8002538 <convert_typedef+0x12c>)
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	611a      	str	r2, [r3, #16]
	Chain_motor.current = 0;
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <convert_typedef+0x12c>)
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	615a      	str	r2, [r3, #20]
	Chain_motor.Kp = 2;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <convert_typedef+0x12c>)
 80024fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
	Chain_motor.Ki = 0.0025;
 8002500:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <convert_typedef+0x12c>)
 8002502:	4a0e      	ldr	r2, [pc, #56]	; (800253c <convert_typedef+0x130>)
 8002504:	62da      	str	r2, [r3, #44]	; 0x2c
	Chain_motor.Kd = 1.0;
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <convert_typedef+0x12c>)
 8002508:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
	Chain_motor.wh_L = 0.0;
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <convert_typedef+0x12c>)
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	200000f0 	.word	0x200000f0
 8002524:	41600000 	.word	0x41600000
 8002528:	3dcccccd 	.word	0x3dcccccd
 800252c:	20000130 	.word	0x20000130
 8002530:	20000170 	.word	0x20000170
 8002534:	200001b0 	.word	0x200001b0
 8002538:	200001f0 	.word	0x200001f0
 800253c:	3b23d70a 	.word	0x3b23d70a

08002540 <control_mod>:
void control_mod(void) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af04      	add	r7, sp, #16
	if (!autonom_flag) {
 8002546:	4b5d      	ldr	r3, [pc, #372]	; (80026bc <control_mod+0x17c>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	f083 0301 	eor.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80af 	beq.w	80026b4 <control_mod+0x174>
		check_switches();
 8002556:	f7fe fe7f 	bl	8001258 <check_switches>
		convert_chushpan();
 800255a:	f7ff fe79 	bl	8002250 <convert_chushpan>
			LEFT_BUTTON,
			RIGHT_BUTTON,
			XBOX_BUTTON
		};

		target_speed[0] = move_axes[0] / 2;
 800255e:	4b58      	ldr	r3, [pc, #352]	; (80026c0 <control_mod+0x180>)
 8002560:	ed93 7a00 	vldr	s14, [r3]
 8002564:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800256c:	4b55      	ldr	r3, [pc, #340]	; (80026c4 <control_mod+0x184>)
 800256e:	edc3 7a00 	vstr	s15, [r3]
		target_speed[1] = move_axes[1] / 2;
 8002572:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <control_mod+0x180>)
 8002574:	ed93 7a01 	vldr	s14, [r3, #4]
 8002578:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800257c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002580:	4b50      	ldr	r3, [pc, #320]	; (80026c4 <control_mod+0x184>)
 8002582:	edc3 7a01 	vstr	s15, [r3, #4]
		target_speed[2] = move_axes[2] * 1.5;
 8002586:	4b4e      	ldr	r3, [pc, #312]	; (80026c0 <control_mod+0x180>)
 8002588:	edd3 7a02 	vldr	s15, [r3, #8]
 800258c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002594:	4b4b      	ldr	r3, [pc, #300]	; (80026c4 <control_mod+0x184>)
 8002596:	edc3 7a02 	vstr	s15, [r3, #8]

		matrixMultiplyM2M(&target_speed[0], 1, 3, &robot_matrix[0][0], 3, 4,
 800259a:	4b4b      	ldr	r3, [pc, #300]	; (80026c8 <control_mod+0x188>)
 800259c:	9302      	str	r3, [sp, #8]
 800259e:	2304      	movs	r3, #4
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	2303      	movs	r3, #3
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	4b49      	ldr	r3, [pc, #292]	; (80026cc <control_mod+0x18c>)
 80025a8:	2203      	movs	r2, #3
 80025aa:	2101      	movs	r1, #1
 80025ac:	4845      	ldr	r0, [pc, #276]	; (80026c4 <control_mod+0x184>)
 80025ae:	f000 fb01 	bl	8002bb4 <matrixMultiplyM2M>
				&speed_wheels[0]);

		Wheel_1.target = speed_wheels[0];
 80025b2:	4b45      	ldr	r3, [pc, #276]	; (80026c8 <control_mod+0x188>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a46      	ldr	r2, [pc, #280]	; (80026d0 <control_mod+0x190>)
 80025b8:	6113      	str	r3, [r2, #16]
		Wheel_2.target = speed_wheels[1];
 80025ba:	4b43      	ldr	r3, [pc, #268]	; (80026c8 <control_mod+0x188>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4a45      	ldr	r2, [pc, #276]	; (80026d4 <control_mod+0x194>)
 80025c0:	6113      	str	r3, [r2, #16]
		Wheel_3.target = speed_wheels[2];
 80025c2:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <control_mod+0x188>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	4a44      	ldr	r2, [pc, #272]	; (80026d8 <control_mod+0x198>)
 80025c8:	6113      	str	r3, [r2, #16]
		Wheel_4.target = speed_wheels[3];
 80025ca:	4b3f      	ldr	r3, [pc, #252]	; (80026c8 <control_mod+0x188>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	4a43      	ldr	r2, [pc, #268]	; (80026dc <control_mod+0x19c>)
 80025d0:	6113      	str	r3, [r2, #16]

		now_speead[0] = result_speed_1;
 80025d2:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <control_mod+0x1a0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a43      	ldr	r2, [pc, #268]	; (80026e4 <control_mod+0x1a4>)
 80025d8:	6013      	str	r3, [r2, #0]
		now_speead[1] = result_speed_2;
 80025da:	4b43      	ldr	r3, [pc, #268]	; (80026e8 <control_mod+0x1a8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a41      	ldr	r2, [pc, #260]	; (80026e4 <control_mod+0x1a4>)
 80025e0:	6053      	str	r3, [r2, #4]
		now_speead[2] = result_speed_3;
 80025e2:	4b42      	ldr	r3, [pc, #264]	; (80026ec <control_mod+0x1ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a3f      	ldr	r2, [pc, #252]	; (80026e4 <control_mod+0x1a4>)
 80025e8:	6093      	str	r3, [r2, #8]

		read_speed[0] = result_speed_0;
 80025ea:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <control_mod+0x1b0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a41      	ldr	r2, [pc, #260]	; (80026f4 <control_mod+0x1b4>)
 80025f0:	6013      	str	r3, [r2, #0]
		read_speed[1] = result_speed_1;
 80025f2:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <control_mod+0x1a0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a3f      	ldr	r2, [pc, #252]	; (80026f4 <control_mod+0x1b4>)
 80025f8:	6053      	str	r3, [r2, #4]
		read_speed[2] = result_speed_2;
 80025fa:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <control_mod+0x1a8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a3d      	ldr	r2, [pc, #244]	; (80026f4 <control_mod+0x1b4>)
 8002600:	6093      	str	r3, [r2, #8]
		read_speed[3] = result_speed_3;
 8002602:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <control_mod+0x1ac>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a3b      	ldr	r2, [pc, #236]	; (80026f4 <control_mod+0x1b4>)
 8002608:	60d3      	str	r3, [r2, #12]

		matrixMultiplyM2M(&read_speed[0], 1, 4,
 800260a:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <control_mod+0x1b8>)
 800260c:	9302      	str	r3, [sp, #8]
 800260e:	2303      	movs	r3, #3
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2304      	movs	r3, #4
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	4b39      	ldr	r3, [pc, #228]	; (80026fc <control_mod+0x1bc>)
 8002618:	2204      	movs	r2, #4
 800261a:	2101      	movs	r1, #1
 800261c:	4835      	ldr	r0, [pc, #212]	; (80026f4 <control_mod+0x1b4>)
 800261e:	f000 fac9 	bl	8002bb4 <matrixMultiplyM2M>
				&axes_robot_matrix_inverse[0][0], 4, 3, &robot_speed[0]);

		if (pads[0].buttons[A_BUTTON]) {
 8002622:	4b37      	ldr	r3, [pc, #220]	; (8002700 <control_mod+0x1c0>)
 8002624:	7c1b      	ldrb	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <control_mod+0xf2>
			servo_control(1, 1);
 800262a:	2101      	movs	r1, #1
 800262c:	2001      	movs	r0, #1
 800262e:	f7fe ff2d 	bl	800148c <servo_control>

		}
		if (pads[0].buttons[B_BUTTON]) {
 8002632:	4b33      	ldr	r3, [pc, #204]	; (8002700 <control_mod+0x1c0>)
 8002634:	7c5b      	ldrb	r3, [r3, #17]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <control_mod+0x102>
			servo_control(1, 0);
 800263a:	2100      	movs	r1, #0
 800263c:	2001      	movs	r0, #1
 800263e:	f7fe ff25 	bl	800148c <servo_control>

		}
		if (pads[0].buttons[X_BUTTON]) {
 8002642:	4b2f      	ldr	r3, [pc, #188]	; (8002700 <control_mod+0x1c0>)
 8002644:	7c9b      	ldrb	r3, [r3, #18]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <control_mod+0x112>
			servo_control(0, 1);
 800264a:	2101      	movs	r1, #1
 800264c:	2000      	movs	r0, #0
 800264e:	f7fe ff1d 	bl	800148c <servo_control>

		}
		if (pads[0].buttons[Y_BUTTON]) {
 8002652:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <control_mod+0x1c0>)
 8002654:	7cdb      	ldrb	r3, [r3, #19]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <control_mod+0x122>
			servo_control(0, 0);
 800265a:	2100      	movs	r1, #0
 800265c:	2000      	movs	r0, #0
 800265e:	f7fe ff15 	bl	800148c <servo_control>

		}
		if (pads[0].buttons[LB_BUTTON]) {
 8002662:	4b27      	ldr	r3, [pc, #156]	; (8002700 <control_mod+0x1c0>)
 8002664:	7d1b      	ldrb	r3, [r3, #20]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <control_mod+0x13a>
			position = 0;
 800266a:	4b26      	ldr	r3, [pc, #152]	; (8002704 <control_mod+0x1c4>)
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
			chain_control(position);
 8002670:	4b24      	ldr	r3, [pc, #144]	; (8002704 <control_mod+0x1c4>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fe0f 	bl	8001298 <chain_control>
		}
		if (pads[0].buttons[LT_BUTTON]) {
 800267a:	4b21      	ldr	r3, [pc, #132]	; (8002700 <control_mod+0x1c0>)
 800267c:	7d9b      	ldrb	r3, [r3, #22]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <control_mod+0x152>
			position = 1;
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <control_mod+0x1c4>)
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
			chain_control(position);
 8002688:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <control_mod+0x1c4>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe fe03 	bl	8001298 <chain_control>
		}
		if (pads[0].buttons[RB_BUTTON]) {
 8002692:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <control_mod+0x1c0>)
 8002694:	7d5b      	ldrb	r3, [r3, #21]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <control_mod+0x16a>
			position = 2;
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <control_mod+0x1c4>)
 800269c:	2202      	movs	r2, #2
 800269e:	701a      	strb	r2, [r3, #0]
			chain_control(position);
 80026a0:	4b18      	ldr	r3, [pc, #96]	; (8002704 <control_mod+0x1c4>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fdf7 	bl	8001298 <chain_control>
		}
		chain_control(position);
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <control_mod+0x1c4>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fdf2 	bl	8001298 <chain_control>
	}
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000430 	.word	0x20000430
 80026c0:	20000420 	.word	0x20000420
 80026c4:	20000230 	.word	0x20000230
 80026c8:	2000023c 	.word	0x2000023c
 80026cc:	20000000 	.word	0x20000000
 80026d0:	200000f0 	.word	0x200000f0
 80026d4:	20000130 	.word	0x20000130
 80026d8:	20000170 	.word	0x20000170
 80026dc:	200001b0 	.word	0x200001b0
 80026e0:	20000448 	.word	0x20000448
 80026e4:	2000024c 	.word	0x2000024c
 80026e8:	2000044c 	.word	0x2000044c
 80026ec:	20000450 	.word	0x20000450
 80026f0:	20000444 	.word	0x20000444
 80026f4:	20000258 	.word	0x20000258
 80026f8:	20000268 	.word	0x20000268
 80026fc:	20000030 	.word	0x20000030
 8002700:	20000304 	.word	0x20000304
 8002704:	200002f1 	.word	0x200002f1

08002708 <set_voltage>:
void set_voltage(uint8_t motor, float duty) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	ed87 0a00 	vstr	s0, [r7]
 8002714:	71fb      	strb	r3, [r7, #7]
	if (duty > 1.0)
 8002716:	edd7 7a00 	vldr	s15, [r7]
 800271a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800271e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002726:	dd02      	ble.n	800272e <set_voltage+0x26>
		duty = 1.0;
 8002728:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800272c:	603b      	str	r3, [r7, #0]
	if (duty < -1.0)
 800272e:	edd7 7a00 	vldr	s15, [r7]
 8002732:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800273a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273e:	d501      	bpl.n	8002744 <set_voltage+0x3c>
		duty = -1.0;
 8002740:	4bae      	ldr	r3, [pc, #696]	; (80029fc <set_voltage+0x2f4>)
 8002742:	603b      	str	r3, [r7, #0]
	switch (motor) {
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	2b04      	cmp	r3, #4
 8002748:	f200 8153 	bhi.w	80029f2 <set_voltage+0x2ea>
 800274c:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <set_voltage+0x4c>)
 800274e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002752:	bf00      	nop
 8002754:	08002769 	.word	0x08002769
 8002758:	080027eb 	.word	0x080027eb
 800275c:	08002871 	.word	0x08002871
 8002760:	080028f3 	.word	0x080028f3
 8002764:	08002979 	.word	0x08002979
	case 0:
		if (duty >= 0.0) {
 8002768:	edd7 7a00 	vldr	s15, [r7]
 800276c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002774:	db1b      	blt.n	80027ae <set_voltage+0xa6>
			TIM4->CCR1 = ((int32_t) (TIM4->ARR * duty));
 8002776:	4ba2      	ldr	r3, [pc, #648]	; (8002a00 <set_voltage+0x2f8>)
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002782:	edd7 7a00 	vldr	s15, [r7]
 8002786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800278e:	4b9c      	ldr	r3, [pc, #624]	; (8002a00 <set_voltage+0x2f8>)
 8002790:	ee17 2a90 	vmov	r2, s15
 8002794:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8002796:	2200      	movs	r2, #0
 8002798:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800279c:	4899      	ldr	r0, [pc, #612]	; (8002a04 <set_voltage+0x2fc>)
 800279e:	f003 f8b1 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 80027a2:	2201      	movs	r2, #1
 80027a4:	2180      	movs	r1, #128	; 0x80
 80027a6:	4898      	ldr	r0, [pc, #608]	; (8002a08 <set_voltage+0x300>)
 80027a8:	f003 f8ac 	bl	8005904 <HAL_GPIO_WritePin>
		} else {
			TIM4->CCR1 = ((int32_t) (-(TIM4->ARR * duty)));
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
		}
		break;
 80027ac:	e121      	b.n	80029f2 <set_voltage+0x2ea>
			TIM4->CCR1 = ((int32_t) (-(TIM4->ARR * duty)));
 80027ae:	4b94      	ldr	r3, [pc, #592]	; (8002a00 <set_voltage+0x2f8>)
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ba:	edd7 7a00 	vldr	s15, [r7]
 80027be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c2:	eef1 7a67 	vneg.f32	s15, s15
 80027c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ca:	4b8d      	ldr	r3, [pc, #564]	; (8002a00 <set_voltage+0x2f8>)
 80027cc:	ee17 2a90 	vmov	r2, s15
 80027d0:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80027d2:	2201      	movs	r2, #1
 80027d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027d8:	488a      	ldr	r0, [pc, #552]	; (8002a04 <set_voltage+0x2fc>)
 80027da:	f003 f893 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80027de:	2200      	movs	r2, #0
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	4889      	ldr	r0, [pc, #548]	; (8002a08 <set_voltage+0x300>)
 80027e4:	f003 f88e 	bl	8005904 <HAL_GPIO_WritePin>
		break;
 80027e8:	e103      	b.n	80029f2 <set_voltage+0x2ea>
	case 1:
		if (duty >= 0.0) {
 80027ea:	edd7 7a00 	vldr	s15, [r7]
 80027ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f6:	db1c      	blt.n	8002832 <set_voltage+0x12a>
			TIM4->CCR2 = ((int32_t) (TIM4->ARR * duty));
 80027f8:	4b81      	ldr	r3, [pc, #516]	; (8002a00 <set_voltage+0x2f8>)
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	ee07 3a90 	vmov	s15, r3
 8002800:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002804:	edd7 7a00 	vldr	s15, [r7]
 8002808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002810:	4b7b      	ldr	r3, [pc, #492]	; (8002a00 <set_voltage+0x2f8>)
 8002812:	ee17 2a90 	vmov	r2, s15
 8002816:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8002818:	2200      	movs	r2, #0
 800281a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800281e:	4879      	ldr	r0, [pc, #484]	; (8002a04 <set_voltage+0x2fc>)
 8002820:	f003 f870 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8002824:	2201      	movs	r2, #1
 8002826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800282a:	4878      	ldr	r0, [pc, #480]	; (8002a0c <set_voltage+0x304>)
 800282c:	f003 f86a 	bl	8005904 <HAL_GPIO_WritePin>
		} else {
			TIM4->CCR2 = ((int32_t) (-(TIM4->ARR * duty)));
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
		}
		break;
 8002830:	e0df      	b.n	80029f2 <set_voltage+0x2ea>
			TIM4->CCR2 = ((int32_t) (-(TIM4->ARR * duty)));
 8002832:	4b73      	ldr	r3, [pc, #460]	; (8002a00 <set_voltage+0x2f8>)
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	ee07 3a90 	vmov	s15, r3
 800283a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800283e:	edd7 7a00 	vldr	s15, [r7]
 8002842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002846:	eef1 7a67 	vneg.f32	s15, s15
 800284a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800284e:	4b6c      	ldr	r3, [pc, #432]	; (8002a00 <set_voltage+0x2f8>)
 8002850:	ee17 2a90 	vmov	r2, s15
 8002854:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8002856:	2201      	movs	r2, #1
 8002858:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800285c:	4869      	ldr	r0, [pc, #420]	; (8002a04 <set_voltage+0x2fc>)
 800285e:	f003 f851 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002862:	2200      	movs	r2, #0
 8002864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002868:	4868      	ldr	r0, [pc, #416]	; (8002a0c <set_voltage+0x304>)
 800286a:	f003 f84b 	bl	8005904 <HAL_GPIO_WritePin>
		break;
 800286e:	e0c0      	b.n	80029f2 <set_voltage+0x2ea>
	case 2:
		if (duty >= 0.0) {
 8002870:	edd7 7a00 	vldr	s15, [r7]
 8002874:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287c:	db1b      	blt.n	80028b6 <set_voltage+0x1ae>
			TIM4->CCR3 = ((int32_t) (TIM4->ARR * duty));
 800287e:	4b60      	ldr	r3, [pc, #384]	; (8002a00 <set_voltage+0x2f8>)
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800288a:	edd7 7a00 	vldr	s15, [r7]
 800288e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002896:	4b5a      	ldr	r3, [pc, #360]	; (8002a00 <set_voltage+0x2f8>)
 8002898:	ee17 2a90 	vmov	r2, s15
 800289c:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 800289e:	2200      	movs	r2, #0
 80028a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028a4:	4858      	ldr	r0, [pc, #352]	; (8002a08 <set_voltage+0x300>)
 80028a6:	f003 f82d 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 80028aa:	2201      	movs	r2, #1
 80028ac:	2104      	movs	r1, #4
 80028ae:	4856      	ldr	r0, [pc, #344]	; (8002a08 <set_voltage+0x300>)
 80028b0:	f003 f828 	bl	8005904 <HAL_GPIO_WritePin>
		} else {
			TIM4->CCR3 = ((int32_t) (-(TIM4->ARR * duty)));
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
		}
		break;
 80028b4:	e09d      	b.n	80029f2 <set_voltage+0x2ea>
			TIM4->CCR3 = ((int32_t) (-(TIM4->ARR * duty)));
 80028b6:	4b52      	ldr	r3, [pc, #328]	; (8002a00 <set_voltage+0x2f8>)
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028c2:	edd7 7a00 	vldr	s15, [r7]
 80028c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ca:	eef1 7a67 	vneg.f32	s15, s15
 80028ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028d2:	4b4b      	ldr	r3, [pc, #300]	; (8002a00 <set_voltage+0x2f8>)
 80028d4:	ee17 2a90 	vmov	r2, s15
 80028d8:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80028da:	2201      	movs	r2, #1
 80028dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028e0:	4849      	ldr	r0, [pc, #292]	; (8002a08 <set_voltage+0x300>)
 80028e2:	f003 f80f 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2104      	movs	r1, #4
 80028ea:	4847      	ldr	r0, [pc, #284]	; (8002a08 <set_voltage+0x300>)
 80028ec:	f003 f80a 	bl	8005904 <HAL_GPIO_WritePin>
		break;
 80028f0:	e07f      	b.n	80029f2 <set_voltage+0x2ea>
	case 3:
		if (duty >= 0.0) {
 80028f2:	edd7 7a00 	vldr	s15, [r7]
 80028f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fe:	db1c      	blt.n	800293a <set_voltage+0x232>
			TIM4->CCR4 = ((int32_t) (TIM4->ARR * duty));
 8002900:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <set_voltage+0x2f8>)
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	ee07 3a90 	vmov	s15, r3
 8002908:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800290c:	edd7 7a00 	vldr	s15, [r7]
 8002910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002918:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <set_voltage+0x2f8>)
 800291a:	ee17 2a90 	vmov	r2, s15
 800291e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8002920:	2200      	movs	r2, #0
 8002922:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002926:	4838      	ldr	r0, [pc, #224]	; (8002a08 <set_voltage+0x300>)
 8002928:	f002 ffec 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800292c:	2201      	movs	r2, #1
 800292e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002932:	4836      	ldr	r0, [pc, #216]	; (8002a0c <set_voltage+0x304>)
 8002934:	f002 ffe6 	bl	8005904 <HAL_GPIO_WritePin>
		} else {
			TIM4->CCR4 = ((int32_t) (-(TIM4->ARR * duty)));
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
		}
		break;
 8002938:	e05b      	b.n	80029f2 <set_voltage+0x2ea>
			TIM4->CCR4 = ((int32_t) (-(TIM4->ARR * duty)));
 800293a:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <set_voltage+0x2f8>)
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	ee07 3a90 	vmov	s15, r3
 8002942:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002946:	edd7 7a00 	vldr	s15, [r7]
 800294a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294e:	eef1 7a67 	vneg.f32	s15, s15
 8002952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002956:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <set_voltage+0x2f8>)
 8002958:	ee17 2a90 	vmov	r2, s15
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800295e:	2201      	movs	r2, #1
 8002960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002964:	4828      	ldr	r0, [pc, #160]	; (8002a08 <set_voltage+0x300>)
 8002966:	f002 ffcd 	bl	8005904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800296a:	2200      	movs	r2, #0
 800296c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002970:	4826      	ldr	r0, [pc, #152]	; (8002a0c <set_voltage+0x304>)
 8002972:	f002 ffc7 	bl	8005904 <HAL_GPIO_WritePin>
		break;
 8002976:	e03c      	b.n	80029f2 <set_voltage+0x2ea>
	case 4:
		if (duty >= 0.0) {
 8002978:	edd7 7a00 	vldr	s15, [r7]
 800297c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002984:	db16      	blt.n	80029b4 <set_voltage+0x2ac>
			TIM12->CCR1 = ((int32_t) (TIM12->ARR * duty));
 8002986:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <set_voltage+0x308>)
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	ee07 3a90 	vmov	s15, r3
 800298e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002992:	edd7 7a00 	vldr	s15, [r7]
 8002996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800299e:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <set_voltage+0x308>)
 80029a0:	ee17 2a90 	vmov	r2, s15
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80029a6:	2200      	movs	r2, #0
 80029a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029ac:	4816      	ldr	r0, [pc, #88]	; (8002a08 <set_voltage+0x300>)
 80029ae:	f002 ffa9 	bl	8005904 <HAL_GPIO_WritePin>
			TIM12->CCR1 = ((int32_t) (TIM12->ARR + (TIM12->ARR * duty)));
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
		}
	}

}
 80029b2:	e01e      	b.n	80029f2 <set_voltage+0x2ea>
			TIM12->CCR1 = ((int32_t) (TIM12->ARR + (TIM12->ARR * duty)));
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <set_voltage+0x308>)
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <set_voltage+0x308>)
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	ee07 3a90 	vmov	s15, r3
 80029c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029cc:	edd7 7a00 	vldr	s15, [r7]
 80029d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <set_voltage+0x308>)
 80029de:	ee17 2a90 	vmov	r2, s15
 80029e2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80029e4:	2201      	movs	r2, #1
 80029e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029ea:	4807      	ldr	r0, [pc, #28]	; (8002a08 <set_voltage+0x300>)
 80029ec:	f002 ff8a 	bl	8005904 <HAL_GPIO_WritePin>
}
 80029f0:	e7ff      	b.n	80029f2 <set_voltage+0x2ea>
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	bf800000 	.word	0xbf800000
 8002a00:	40000800 	.word	0x40000800
 8002a04:	40020800 	.word	0x40020800
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	40001800 	.word	0x40001800

08002a14 <PID_Controller>:
void PID_Controller(PID *reg) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

	reg->error = reg->target - reg->current;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	edc3 7a06 	vstr	s15, [r3, #24]

	reg->sum_error += reg->error;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	edc3 7a07 	vstr	s15, [r3, #28]
	if (reg->sum_error > 1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5a:	dd03      	ble.n	8002a64 <PID_Controller+0x50>
		reg->sum_error = 1;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a62:	61da      	str	r2, [r3, #28]
	if (reg->sum_error < -1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a6a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a76:	d502      	bpl.n	8002a7e <PID_Controller+0x6a>
		reg->sum_error = -1;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a28      	ldr	r2, [pc, #160]	; (8002b1c <PID_Controller+0x108>)
 8002a7c:	61da      	str	r2, [r3, #28]

	reg->P = reg->Kp * reg->error;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	edc3 7a00 	vstr	s15, [r3]
	reg->I = reg->Ki * reg->sum_error;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	edc3 7a01 	vstr	s15, [r3, #4]
	reg->dif_error = reg->error - reg->old_error;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	edc3 7a08 	vstr	s15, [r3, #32]
	reg->D = reg->Kd * reg->dif_error;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	edd3 7a08 	vldr	s15, [r3, #32]
 8002acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	edc3 7a02 	vstr	s15, [r3, #8]
	reg->output = reg->P + reg->I + reg->D;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	ed93 7a00 	vldr	s14, [r3]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ae2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	set_voltage(reg->motor, reg->output);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002b02:	eeb0 0a67 	vmov.f32	s0, s15
 8002b06:	4610      	mov	r0, r2
 8002b08:	f7ff fdfe 	bl	8002708 <set_voltage>
	reg->old_error = reg->error;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699a      	ldr	r2, [r3, #24]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	bf800000 	.word	0xbf800000

08002b20 <matrixSetCell>:
	for (i = 0; i < rows; i++)
		for (j = 0; j < columns; j++)
			*(new_m + columns * i + j) = *(m + columns * i + j);
}
void matrixSetCell(float *m, char rows, char columns, char row, char column,
		float val) {
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	4608      	mov	r0, r1
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b32:	4603      	mov	r3, r0
 8002b34:	72fb      	strb	r3, [r7, #11]
 8002b36:	460b      	mov	r3, r1
 8002b38:	72bb      	strb	r3, [r7, #10]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	727b      	strb	r3, [r7, #9]
	*(m + columns * (row - 1) + column - 1) = val;
 8002b3e:	7abb      	ldrb	r3, [r7, #10]
 8002b40:	7a7a      	ldrb	r2, [r7, #9]
 8002b42:	3a01      	subs	r2, #1
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	7e3b      	ldrb	r3, [r7, #24]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b52:	3b01      	subs	r3, #1
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4413      	add	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	601a      	str	r2, [r3, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <matrixGetCell>:

	for (i = 0; i < rows; i++)
		for (j = 0; j < columns; j++)
			*(m + columns * i + j) = val;
}
float matrixGetCell(float *m, char rows, char columns, char row, char column) {
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	4608      	mov	r0, r1
 8002b74:	4611      	mov	r1, r2
 8002b76:	461a      	mov	r2, r3
 8002b78:	4603      	mov	r3, r0
 8002b7a:	70fb      	strb	r3, [r7, #3]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	70bb      	strb	r3, [r7, #2]
 8002b80:	4613      	mov	r3, r2
 8002b82:	707b      	strb	r3, [r7, #1]
	return *(m + columns * (row - 1) + column - 1);
 8002b84:	78bb      	ldrb	r3, [r7, #2]
 8002b86:	787a      	ldrb	r2, [r7, #1]
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	7c3b      	ldrb	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	ee07 3a90 	vmov	s15, r3
}
 8002ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <matrixMultiplyM2M>:
void matrixMultiplyM2M(float *m1, char rows1, char columns1, float *m2,
		char rows2, char columns2, float *new_m) {
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	72fb      	strb	r3, [r7, #11]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	72bb      	strb	r3, [r7, #10]
	float Sum;
	char i, j, k;

	if (columns1 != rows2)
 8002bc6:	7aba      	ldrb	r2, [r7, #10]
 8002bc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d004      	beq.n	8002bda <matrixMultiplyM2M+0x26>
		*new_m = 0;
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
					Sum += (*(m1 + columns1 * i + k))
							* (*(m2 + columns2 * k + j));
				*(new_m + columns2 * i + j) = Sum;
			}
	}
}
 8002bd8:	e04f      	b.n	8002c7a <matrixMultiplyM2M+0xc6>
		for (i = 0; i < rows1; i++)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	74fb      	strb	r3, [r7, #19]
 8002bde:	e048      	b.n	8002c72 <matrixMultiplyM2M+0xbe>
			for (j = 0; j < columns2; j++) {
 8002be0:	2300      	movs	r3, #0
 8002be2:	74bb      	strb	r3, [r7, #18]
 8002be4:	e03d      	b.n	8002c62 <matrixMultiplyM2M+0xae>
				Sum = 0;
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
				for (k = 0; k < columns1; k++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	747b      	strb	r3, [r7, #17]
 8002bf0:	e023      	b.n	8002c3a <matrixMultiplyM2M+0x86>
					Sum += (*(m1 + columns1 * i + k))
 8002bf2:	7abb      	ldrb	r3, [r7, #10]
 8002bf4:	7cfa      	ldrb	r2, [r7, #19]
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	7c7b      	ldrb	r3, [r7, #17]
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4413      	add	r3, r2
 8002c06:	ed93 7a00 	vldr	s14, [r3]
							* (*(m2 + columns2 * k + j));
 8002c0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c0e:	7c7a      	ldrb	r2, [r7, #17]
 8002c10:	fb02 f303 	mul.w	r3, r2, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	7cbb      	ldrb	r3, [r7, #18]
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	edd3 7a00 	vldr	s15, [r3]
 8002c24:	ee67 7a27 	vmul.f32	s15, s14, s15
					Sum += (*(m1 + columns1 * i + k))
 8002c28:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c30:	edc7 7a05 	vstr	s15, [r7, #20]
				for (k = 0; k < columns1; k++)
 8002c34:	7c7b      	ldrb	r3, [r7, #17]
 8002c36:	3301      	adds	r3, #1
 8002c38:	747b      	strb	r3, [r7, #17]
 8002c3a:	7c7a      	ldrb	r2, [r7, #17]
 8002c3c:	7abb      	ldrb	r3, [r7, #10]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d3d7      	bcc.n	8002bf2 <matrixMultiplyM2M+0x3e>
				*(new_m + columns2 * i + j) = Sum;
 8002c42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c46:	7cfa      	ldrb	r2, [r7, #19]
 8002c48:	fb02 f303 	mul.w	r3, r2, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	7cbb      	ldrb	r3, [r7, #18]
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c56:	4413      	add	r3, r2
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	601a      	str	r2, [r3, #0]
			for (j = 0; j < columns2; j++) {
 8002c5c:	7cbb      	ldrb	r3, [r7, #18]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	74bb      	strb	r3, [r7, #18]
 8002c62:	7cba      	ldrb	r2, [r7, #18]
 8002c64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d3bc      	bcc.n	8002be6 <matrixMultiplyM2M+0x32>
		for (i = 0; i < rows1; i++)
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	74fb      	strb	r3, [r7, #19]
 8002c72:	7cfa      	ldrb	r2, [r7, #19]
 8002c74:	7afb      	ldrb	r3, [r7, #11]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d3b2      	bcc.n	8002be0 <matrixMultiplyM2M+0x2c>
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <matrixTranspose>:
			for (j = 0; j < columns; j++)
				*(new_m + i * columns + j) = (*(m1 + i * columns + j))
						- (*(m2 + i * columns + j));
	}
}
void matrixTranspose(float *m, char rows, char columns, float *new_m) {
 8002c86:	b480      	push	{r7}
 8002c88:	b087      	sub	sp, #28
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	72fb      	strb	r3, [r7, #11]
 8002c94:	4613      	mov	r3, r2
 8002c96:	72bb      	strb	r3, [r7, #10]
	char i, j;
	for (i = 0; i < rows; i++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	75fb      	strb	r3, [r7, #23]
 8002c9c:	e022      	b.n	8002ce4 <matrixTranspose+0x5e>
		for (j = 0; j < columns; j++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	75bb      	strb	r3, [r7, #22]
 8002ca2:	e018      	b.n	8002cd6 <matrixTranspose+0x50>
			*(new_m + j * rows + i) = *(m + i * columns + j);
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	7aba      	ldrb	r2, [r7, #10]
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	7dbb      	ldrb	r3, [r7, #22]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	441a      	add	r2, r3
 8002cb8:	7dbb      	ldrb	r3, [r7, #22]
 8002cba:	7af9      	ldrb	r1, [r7, #11]
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	440b      	add	r3, r1
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	440b      	add	r3, r1
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	601a      	str	r2, [r3, #0]
		for (j = 0; j < columns; j++)
 8002cd0:	7dbb      	ldrb	r3, [r7, #22]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	75bb      	strb	r3, [r7, #22]
 8002cd6:	7dba      	ldrb	r2, [r7, #22]
 8002cd8:	7abb      	ldrb	r3, [r7, #10]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d3e2      	bcc.n	8002ca4 <matrixTranspose+0x1e>
	for (i = 0; i < rows; i++)
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	75fb      	strb	r3, [r7, #23]
 8002ce4:	7dfa      	ldrb	r2, [r7, #23]
 8002ce6:	7afb      	ldrb	r3, [r7, #11]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d3d8      	bcc.n	8002c9e <matrixTranspose+0x18>
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <matrixCofactor>:
void matrixCofactor(float *m, char size, float *new_m) {
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b0ec      	sub	sp, #432	; 0x1b0
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002d04:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002d08:	6018      	str	r0, [r3, #0]
 8002d0a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002d0e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002d18:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002d1c:	460a      	mov	r2, r1
 8002d1e:	701a      	strb	r2, [r3, #0]
//float *buf1 = malloc(sizeof(float) * (size-1) * (size-1));
	float bufxx[10][10];
	float *buf1 = (float*) bufxx;
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	char i = 0, j = 0, k = 0, l = 0, c = 0, d = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8002d34:	2300      	movs	r3, #0
 8002d36:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
	signed char sign;

	while (i < size) {
 8002d4c:	e0f0      	b.n	8002f30 <matrixCofactor+0x236>
		j = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
		while (j < size) {
 8002d54:	e0dd      	b.n	8002f12 <matrixCofactor+0x218>
			k = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
			c = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
			if (((i + j) % 2) == 0)
 8002d62:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 8002d66:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002d6a:	4413      	add	r3, r2
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <matrixCofactor+0x84>
				sign = 1;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9
 8002d7c:	e066      	b.n	8002e4c <matrixCofactor+0x152>
			else
				sign = -1;
 8002d7e:	23ff      	movs	r3, #255	; 0xff
 8002d80:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9

			while (k < (size - 1)) {
 8002d84:	e062      	b.n	8002e4c <matrixCofactor+0x152>
				if (c == i)
 8002d86:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 8002d8a:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d104      	bne.n	8002d9c <matrixCofactor+0xa2>
					c++;
 8002d92:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8002d96:	3301      	adds	r3, #1
 8002d98:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
				l = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
				d = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
				while (l < (size - 1)) {
 8002da8:	e03c      	b.n	8002e24 <matrixCofactor+0x12a>
					if (d == j)
 8002daa:	f897 21aa 	ldrb.w	r2, [r7, #426]	; 0x1aa
 8002dae:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d104      	bne.n	8002dc0 <matrixCofactor+0xc6>
						d++;
 8002db6:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
					*(buf1 + (size - 1) * k + l) = *(m + size * c + d);
 8002dc0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002dc4:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8002de0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	441a      	add	r2, r3
 8002de8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002dec:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	f897 11ad 	ldrb.w	r1, [r7, #429]	; 0x1ad
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 8002e02:	440b      	add	r3, r1
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8002e0a:	440b      	add	r3, r1
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	601a      	str	r2, [r3, #0]
					l++;
 8002e10:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 8002e14:	3301      	adds	r3, #1
 8002e16:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
					d++;
 8002e1a:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
				while (l < (size - 1)) {
 8002e24:	f897 21ac 	ldrb.w	r2, [r7, #428]	; 0x1ac
 8002e28:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002e2c:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	429a      	cmp	r2, r3
 8002e36:	dbb8      	blt.n	8002daa <matrixCofactor+0xb0>
				}
				k++;
 8002e38:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
				c++;
 8002e42:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8002e46:	3301      	adds	r3, #1
 8002e48:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
			while (k < (size - 1)) {
 8002e4c:	f897 21ad 	ldrb.w	r2, [r7, #429]	; 0x1ad
 8002e50:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002e54:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	db92      	blt.n	8002d86 <matrixCofactor+0x8c>
			}
			matrixDet_LU_Transform(buf1, size - 1, (new_m + size * i + j));
 8002e60:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002e64:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b2d9      	uxtb	r1, r3
 8002e6e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002e72:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 8002e7c:	fb02 f303 	mul.w	r3, r2, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8002e8e:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	4413      	add	r3, r2
 8002e96:	461a      	mov	r2, r3
 8002e98:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8002e9c:	f000 f8be 	bl	800301c <matrixDet_LU_Transform>
			*(new_m + size * i + j) *= sign;
 8002ea0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002ea4:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8002ec0:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	ed93 7a00 	vldr	s14, [r3]
 8002ecc:	f997 31a9 	ldrsb.w	r3, [r7, #425]	; 0x1a9
 8002ed0:	ee07 3a90 	vmov	s15, r3
 8002ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ed8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002edc:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8002ef8:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	4413      	add	r3, r2
 8002f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f04:	edc3 7a00 	vstr	s15, [r3]
			j++;
 8002f08:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
		while (j < size) {
 8002f12:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002f16:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002f1a:	f897 21ae 	ldrb.w	r2, [r7, #430]	; 0x1ae
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	f4ff af18 	bcc.w	8002d56 <matrixCofactor+0x5c>
		}
		i++;
 8002f26:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
	while (i < size) {
 8002f30:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002f34:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002f38:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	f4ff af05 	bcc.w	8002d4e <matrixCofactor+0x54>
	}
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <matrixInverse>:
void matrixInverse(float *m, char size, float *new_m) {
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b0b3      	sub	sp, #204	; 0xcc
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	72fb      	strb	r3, [r7, #11]
	float buf1[4][4]; // = malloc(sizeof(float) * size * size);
	float buf2[4][4]; //= malloc(sizeof(float) * size * size);
	float buf;
	float buf3[3][3];
	float det;
	matrixDet_LU_Transform(m, size, &det);
 8002f5e:	f107 0210 	add.w	r2, r7, #16
 8002f62:	7afb      	ldrb	r3, [r7, #11]
 8002f64:	4619      	mov	r1, r3
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f858 	bl	800301c <matrixDet_LU_Transform>
	char i, j;

	matrixCofactor(m, size, &buf1[0][0]);
 8002f6c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002f70:	7afb      	ldrb	r3, [r7, #11]
 8002f72:	4619      	mov	r1, r3
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff fec0 	bl	8002cfa <matrixCofactor>
	matrixTranspose(&buf1[0][0], size, size, &buf2[0][0]);
 8002f7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f7e:	7afa      	ldrb	r2, [r7, #11]
 8002f80:	7af9      	ldrb	r1, [r7, #11]
 8002f82:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002f86:	f7ff fe7e 	bl	8002c86 <matrixTranspose>

	for (i = 1; i <= size; i++)
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8002f90:	e034      	b.n	8002ffc <matrixInverse+0xac>
		for (j = 1; j <= size; j++) {
 8002f92:	2301      	movs	r3, #1
 8002f94:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 8002f98:	e026      	b.n	8002fe8 <matrixInverse+0x98>
			buf = matrixGetCell(&buf1[0][0], size, size, i, j) / det;
 8002f9a:	f897 40bf 	ldrb.w	r4, [r7, #191]	; 0xbf
 8002f9e:	7afa      	ldrb	r2, [r7, #11]
 8002fa0:	7af9      	ldrb	r1, [r7, #11]
 8002fa2:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002fa6:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	4623      	mov	r3, r4
 8002fae:	f7ff fddc 	bl	8002b6a <matrixGetCell>
 8002fb2:	eef0 6a40 	vmov.f32	s13, s0
 8002fb6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fbe:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
			matrixSetCell((float*) buf3, size, size, i, j, buf);
 8002fc2:	f897 40bf 	ldrb.w	r4, [r7, #191]	; 0xbf
 8002fc6:	7afa      	ldrb	r2, [r7, #11]
 8002fc8:	7af9      	ldrb	r1, [r7, #11]
 8002fca:	f107 0014 	add.w	r0, r7, #20
 8002fce:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8002fd8:	4623      	mov	r3, r4
 8002fda:	f7ff fda1 	bl	8002b20 <matrixSetCell>
		for (j = 1; j <= size; j++) {
 8002fde:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 8002fe8:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 8002fec:	7afb      	ldrb	r3, [r7, #11]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d9d3      	bls.n	8002f9a <matrixInverse+0x4a>
	for (i = 1; i <= size; i++)
 8002ff2:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8002ffc:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 8003000:	7afb      	ldrb	r3, [r7, #11]
 8003002:	429a      	cmp	r2, r3
 8003004:	d9c5      	bls.n	8002f92 <matrixInverse+0x42>
		}
	matrixTranspose(&buf3[0][0], size, size, new_m);
 8003006:	7afa      	ldrb	r2, [r7, #11]
 8003008:	7af9      	ldrb	r1, [r7, #11]
 800300a:	f107 0014 	add.w	r0, r7, #20
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f7ff fe39 	bl	8002c86 <matrixTranspose>
}
 8003014:	bf00      	nop
 8003016:	37c4      	adds	r7, #196	; 0xc4
 8003018:	46bd      	mov	sp, r7
 800301a:	bd90      	pop	{r4, r7, pc}

0800301c <matrixDet_LU_Transform>:
void matrixDet_LU_Transform(float *A, char n, float *out) //необходимо задать и�?ходную матрицу и переменную дл�? LU-матрицы
{
 800301c:	b480      	push	{r7}
 800301e:	b091      	sub	sp, #68	; 0x44
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	460b      	mov	r3, r1
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	72fb      	strb	r3, [r7, #11]
	float temp = 0; //, *LU = malloc(sizeof(float) * n * n);
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float LU_[3][3];
	float *LU = (float*) LU_;
 8003030:	f107 0310 	add.w	r3, r7, #16
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
	char i, j, k;
	for (j = 0; j < n; j++) {
 8003036:	2300      	movs	r3, #0
 8003038:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800303c:	e02d      	b.n	800309a <matrixDet_LU_Transform+0x7e>
		*(LU + j) = *(A + j);
 800303e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	441a      	add	r2, r3
 8003048:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003050:	440b      	add	r3, r1
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	601a      	str	r2, [r3, #0]
		if (j >= 1)
 8003056:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800305a:	2b00      	cmp	r3, #0
 800305c:	d018      	beq.n	8003090 <matrixDet_LU_Transform+0x74>
			*(LU + j * n) = *(A + j * n) / (*LU);
 800305e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003062:	7afa      	ldrb	r2, [r7, #11]
 8003064:	fb02 f303 	mul.w	r3, r2, r3
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4413      	add	r3, r2
 800306e:	edd3 6a00 	vldr	s13, [r3]
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003074:	ed93 7a00 	vldr	s14, [r3]
 8003078:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800307c:	7afa      	ldrb	r2, [r7, #11]
 800307e:	fb02 f303 	mul.w	r3, r2, r3
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003086:	4413      	add	r3, r2
 8003088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800308c:	edc3 7a00 	vstr	s15, [r3]
	for (j = 0; j < n; j++) {
 8003090:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003094:	3301      	adds	r3, #1
 8003096:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800309a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800309e:	7afb      	ldrb	r3, [r7, #11]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d3cc      	bcc.n	800303e <matrixDet_LU_Transform+0x22>
	}
	for (i = 1; i < n; i++) {
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80030aa:	e0df      	b.n	800326c <matrixDet_LU_Transform+0x250>
		for (j = i; j < n; j++) {
 80030ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80030b0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80030b4:	e05a      	b.n	800316c <matrixDet_LU_Transform+0x150>
			for (k = 0; k <= (i - 1); k++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80030bc:	e028      	b.n	8003110 <matrixDet_LU_Transform+0xf4>
				temp += (*(LU + n * i + k)) * (*(LU + k * n + j));
 80030be:	7afb      	ldrb	r3, [r7, #11]
 80030c0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d4:	4413      	add	r3, r2
 80030d6:	ed93 7a00 	vldr	s14, [r3]
 80030da:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80030de:	7afa      	ldrb	r2, [r7, #11]
 80030e0:	fb02 f303 	mul.w	r3, r2, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030f0:	4413      	add	r3, r2
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80030fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003102:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			for (k = 0; k <= (i - 1); k++)
 8003106:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800310a:	3301      	adds	r3, #1
 800310c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8003110:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003114:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003118:	429a      	cmp	r2, r3
 800311a:	d8d0      	bhi.n	80030be <matrixDet_LU_Transform+0xa2>
			*(LU + i * n + j) = *(A + i * n + j) - temp;
 800311c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003120:	7afa      	ldrb	r2, [r7, #11]
 8003122:	fb02 f303 	mul.w	r3, r2, r3
 8003126:	461a      	mov	r2, r3
 8003128:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4413      	add	r3, r2
 8003134:	ed93 7a00 	vldr	s14, [r3]
 8003138:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800313c:	7afa      	ldrb	r2, [r7, #11]
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	461a      	mov	r2, r3
 8003144:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800314e:	4413      	add	r3, r2
 8003150:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003158:	edc3 7a00 	vstr	s15, [r3]
			temp = 0;
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (j = i; j < n; j++) {
 8003162:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003166:	3301      	adds	r3, #1
 8003168:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800316c:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8003170:	7afb      	ldrb	r3, [r7, #11]
 8003172:	429a      	cmp	r2, r3
 8003174:	d39f      	bcc.n	80030b6 <matrixDet_LU_Transform+0x9a>
		}
		for (j = i + 1; j < n; j++) {
 8003176:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800317a:	3301      	adds	r3, #1
 800317c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8003180:	e06a      	b.n	8003258 <matrixDet_LU_Transform+0x23c>
			for (k = 0; k <= (i - 1); k++)
 8003182:	2300      	movs	r3, #0
 8003184:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8003188:	e028      	b.n	80031dc <matrixDet_LU_Transform+0x1c0>
				temp += (*(LU + j * n + k)) * (*(LU + k * n + i));
 800318a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800318e:	7afa      	ldrb	r2, [r7, #11]
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	461a      	mov	r2, r3
 8003196:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031a0:	4413      	add	r3, r2
 80031a2:	ed93 7a00 	vldr	s14, [r3]
 80031a6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80031aa:	7afa      	ldrb	r2, [r7, #11]
 80031ac:	fb02 f303 	mul.w	r3, r2, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031bc:	4413      	add	r3, r2
 80031be:	edd3 7a00 	vldr	s15, [r3]
 80031c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80031ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ce:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			for (k = 0; k <= (i - 1); k++)
 80031d2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80031d6:	3301      	adds	r3, #1
 80031d8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80031dc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80031e0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d8d0      	bhi.n	800318a <matrixDet_LU_Transform+0x16e>
			*(LU + j * n + i) = ((*(A + j * n + i)) - temp)
 80031e8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80031ec:	7afa      	ldrb	r2, [r7, #11]
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	ed93 7a00 	vldr	s14, [r3]
 8003204:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003208:	ee77 6a67 	vsub.f32	s13, s14, s15
					/ (*(LU + i * n + i));
 800320c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003210:	7afa      	ldrb	r2, [r7, #11]
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	461a      	mov	r2, r3
 8003218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003222:	4413      	add	r3, r2
 8003224:	ed93 7a00 	vldr	s14, [r3]
			*(LU + j * n + i) = ((*(A + j * n + i)) - temp)
 8003228:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800322c:	7afa      	ldrb	r2, [r7, #11]
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	461a      	mov	r2, r3
 8003234:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800323e:	4413      	add	r3, r2
					/ (*(LU + i * n + i));
 8003240:	eec6 7a87 	vdiv.f32	s15, s13, s14
			*(LU + j * n + i) = ((*(A + j * n + i)) - temp)
 8003244:	edc3 7a00 	vstr	s15, [r3]
			temp = 0;
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (j = i + 1; j < n; j++) {
 800324e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003252:	3301      	adds	r3, #1
 8003254:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8003258:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800325c:	7afb      	ldrb	r3, [r7, #11]
 800325e:	429a      	cmp	r2, r3
 8003260:	d38f      	bcc.n	8003182 <matrixDet_LU_Transform+0x166>
	for (i = 1; i < n; i++) {
 8003262:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003266:	3301      	adds	r3, #1
 8003268:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800326c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003270:	7afb      	ldrb	r3, [r7, #11]
 8003272:	429a      	cmp	r2, r3
 8003274:	f4ff af1a 	bcc.w	80030ac <matrixDet_LU_Transform+0x90>
		}
	}
	temp = 1;
 8003278:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800327c:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (i = 0; i < n; i++)
 800327e:	2300      	movs	r3, #0
 8003280:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003284:	e018      	b.n	80032b8 <matrixDet_LU_Transform+0x29c>
		temp *= *(LU + i * n + i);
 8003286:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800328a:	7afa      	ldrb	r2, [r7, #11]
 800328c:	fb02 f303 	mul.w	r3, r2, r3
 8003290:	461a      	mov	r2, r3
 8003292:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800329c:	4413      	add	r3, r2
 800329e:	edd3 7a00 	vldr	s15, [r3]
 80032a2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80032a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032aa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	for (i = 0; i < n; i++)
 80032ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80032b2:	3301      	adds	r3, #1
 80032b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80032b8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80032bc:	7afb      	ldrb	r3, [r7, #11]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d3e1      	bcc.n	8003286 <matrixDet_LU_Transform+0x26a>
	*out = temp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032c6:	601a      	str	r2, [r3, #0]
}
 80032c8:	bf00      	nop
 80032ca:	3744      	adds	r7, #68	; 0x44
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	convert_typedef();
 80032d8:	f7ff f898 	bl	800240c <convert_typedef>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80032dc:	f001 fbd8 	bl	8004a90 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80032e0:	f000 f900 	bl	80034e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80032e4:	f7fd fde4 	bl	8000eb0 <MX_GPIO_Init>
	MX_DMA_Init();
 80032e8:	f7fd fdba 	bl	8000e60 <MX_DMA_Init>
	MX_TIM4_Init();
 80032ec:	f000 fe40 	bl	8003f70 <MX_TIM4_Init>
	MX_TIM3_Init();
 80032f0:	f000 fdea 	bl	8003ec8 <MX_TIM3_Init>
	MX_TIM1_Init();
 80032f4:	f000 fd3c 	bl	8003d70 <MX_TIM1_Init>
	MX_TIM2_Init();
 80032f8:	f000 fd92 	bl	8003e20 <MX_TIM2_Init>
	MX_TIM8_Init();
 80032fc:	f000 ff72 	bl	80041e4 <MX_TIM8_Init>
	MX_TIM7_Init();
 8003300:	f000 ff3a 	bl	8004178 <MX_TIM7_Init>
	MX_TIM6_Init();
 8003304:	f000 ff02 	bl	800410c <MX_TIM6_Init>
	MX_USART1_UART_Init();
 8003308:	f001 fab8 	bl	800487c <MX_USART1_UART_Init>
	MX_TIM9_Init();
 800330c:	f000 ffc2 	bl	8004294 <MX_TIM9_Init>
	MX_TIM12_Init();
 8003310:	f001 f812 	bl	8004338 <MX_TIM12_Init>
	MX_TIM5_Init();
 8003314:	f000 fea6 	bl	8004064 <MX_TIM5_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003318:	2100      	movs	r1, #0
 800331a:	485d      	ldr	r0, [pc, #372]	; (8003490 <main+0x1bc>)
 800331c:	f003 f8b4 	bl	8006488 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003320:	2104      	movs	r1, #4
 8003322:	485b      	ldr	r0, [pc, #364]	; (8003490 <main+0x1bc>)
 8003324:	f003 f8b0 	bl	8006488 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003328:	2108      	movs	r1, #8
 800332a:	4859      	ldr	r0, [pc, #356]	; (8003490 <main+0x1bc>)
 800332c:	f003 f8ac 	bl	8006488 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003330:	210c      	movs	r1, #12
 8003332:	4857      	ldr	r0, [pc, #348]	; (8003490 <main+0x1bc>)
 8003334:	f003 f8a8 	bl	8006488 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8003338:	2100      	movs	r1, #0
 800333a:	4856      	ldr	r0, [pc, #344]	; (8003494 <main+0x1c0>)
 800333c:	f003 f8a4 	bl	8006488 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8003340:	2104      	movs	r1, #4
 8003342:	4854      	ldr	r0, [pc, #336]	; (8003494 <main+0x1c0>)
 8003344:	f003 f8a0 	bl	8006488 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8003348:	2100      	movs	r1, #0
 800334a:	4853      	ldr	r0, [pc, #332]	; (8003498 <main+0x1c4>)
 800334c:	f003 f89c 	bl	8006488 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8003350:	213c      	movs	r1, #60	; 0x3c
 8003352:	4852      	ldr	r0, [pc, #328]	; (800349c <main+0x1c8>)
 8003354:	f003 fa06 	bl	8006764 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003358:	213c      	movs	r1, #60	; 0x3c
 800335a:	4851      	ldr	r0, [pc, #324]	; (80034a0 <main+0x1cc>)
 800335c:	f003 fa02 	bl	8006764 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003360:	213c      	movs	r1, #60	; 0x3c
 8003362:	4850      	ldr	r0, [pc, #320]	; (80034a4 <main+0x1d0>)
 8003364:	f003 f9fe 	bl	8006764 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8003368:	213c      	movs	r1, #60	; 0x3c
 800336a:	484f      	ldr	r0, [pc, #316]	; (80034a8 <main+0x1d4>)
 800336c:	f003 f9fa 	bl	8006764 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8003370:	213c      	movs	r1, #60	; 0x3c
 8003372:	484e      	ldr	r0, [pc, #312]	; (80034ac <main+0x1d8>)
 8003374:	f003 f9f6 	bl	8006764 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 8003378:	484d      	ldr	r0, [pc, #308]	; (80034b0 <main+0x1dc>)
 800337a:	f002 ffc5 	bl	8006308 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_DMA(&huart1, rx_data, 1);
 800337e:	2201      	movs	r2, #1
 8003380:	494c      	ldr	r1, [pc, #304]	; (80034b4 <main+0x1e0>)
 8003382:	484d      	ldr	r0, [pc, #308]	; (80034b8 <main+0x1e4>)
 8003384:	f003 ffcb 	bl	800731e <HAL_UART_Receive_DMA>
	target_speed[0] = 0;
 8003388:	4b4c      	ldr	r3, [pc, #304]	; (80034bc <main+0x1e8>)
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
	target_speed[1] = 0;
 8003390:	4b4a      	ldr	r3, [pc, #296]	; (80034bc <main+0x1e8>)
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	605a      	str	r2, [r3, #4]
	target_speed[2] = 0;
 8003398:	4b48      	ldr	r3, [pc, #288]	; (80034bc <main+0x1e8>)
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
	quest_xy[0][0] = 0;
 80033a0:	4b47      	ldr	r3, [pc, #284]	; (80034c0 <main+0x1ec>)
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
	quest_xy[0][1] = 0;
 80033a8:	4b45      	ldr	r3, [pc, #276]	; (80034c0 <main+0x1ec>)
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	605a      	str	r2, [r3, #4]
	quest_xy[0][2] = 1;
 80033b0:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <main+0x1ec>)
 80033b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80033b6:	609a      	str	r2, [r3, #8]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		convert_chushpan();
 80033b8:	f7fe ff4a 	bl	8002250 <convert_chushpan>
		control_mod();
 80033bc:	f7ff f8c0 	bl	8002540 <control_mod>

//		autonom_flag = 1;
		switch (flag) {
 80033c0:	4b40      	ldr	r3, [pc, #256]	; (80034c4 <main+0x1f0>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d860      	bhi.n	800348a <main+0x1b6>
 80033c8:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <main+0xfc>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	080033e5 	.word	0x080033e5
 80033d4:	08003405 	.word	0x08003405
 80033d8:	0800341d 	.word	0x0800341d
 80033dc:	0800343d 	.word	0x0800343d
 80033e0:	08003463 	.word	0x08003463
		case (0): {
			servo_control(0, 0);
 80033e4:	2100      	movs	r1, #0
 80033e6:	2000      	movs	r0, #0
 80033e8:	f7fe f850 	bl	800148c <servo_control>
			servo_control(0, 0);
 80033ec:	2100      	movs	r1, #0
 80033ee:	2000      	movs	r0, #0
 80033f0:	f7fe f84c 	bl	800148c <servo_control>

			if (autonom_flag) {
 80033f4:	4b34      	ldr	r3, [pc, #208]	; (80034c8 <main+0x1f4>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d045      	beq.n	8003488 <main+0x1b4>
				flag_compleate = 1;
 80033fc:	4b33      	ldr	r3, [pc, #204]	; (80034cc <main+0x1f8>)
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003402:	e041      	b.n	8003488 <main+0x1b4>
		}

		case (1): {

			omron(1);
 8003404:	2001      	movs	r0, #1
 8003406:	f7fd fee1 	bl	80011cc <omron>
			servo_control(1, 1);
 800340a:	2101      	movs	r1, #1
 800340c:	2001      	movs	r0, #1
 800340e:	f7fe f83d 	bl	800148c <servo_control>
			state_timer(2);
 8003412:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003416:	f7fd fea7 	bl	8001168 <state_timer>
			break;
 800341a:	e036      	b.n	800348a <main+0x1b6>

		}
		case (2): {

			Move_robot_coordinates_X_Y_W(0.2, 0.2, 0, 0, 0.0);
 800341c:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 80034d0 <main+0x1fc>
 8003420:	eddf 1a2b 	vldr	s3, [pc, #172]	; 80034d0 <main+0x1fc>
 8003424:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 80034d0 <main+0x1fc>
 8003428:	eddf 0a2a 	vldr	s1, [pc, #168]	; 80034d4 <main+0x200>
 800342c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80034d4 <main+0x200>
 8003430:	f7fe f85a 	bl	80014e8 <Move_robot_coordinates_X_Y_W>

			flag_compleate = 1;
 8003434:	4b25      	ldr	r3, [pc, #148]	; (80034cc <main+0x1f8>)
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]

			break;
 800343a:	e026      	b.n	800348a <main+0x1b6>
		}

		case (3): {
			Move_robot_coordinates_X_Y_W(0.25, 0.7, 0.25, 0.25, 1.57);
 800343c:	ed9f 2a26 	vldr	s4, [pc, #152]	; 80034d8 <main+0x204>
 8003440:	eef5 1a00 	vmov.f32	s3, #80	; 0x3e800000  0.250
 8003444:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8003448:	eddf 0a24 	vldr	s1, [pc, #144]	; 80034dc <main+0x208>
 800344c:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8003450:	f7fe f84a 	bl	80014e8 <Move_robot_coordinates_X_Y_W>
			chain_control(1);
 8003454:	2001      	movs	r0, #1
 8003456:	f7fd ff1f 	bl	8001298 <chain_control>
			flag_compleate = 2;
 800345a:	4b1c      	ldr	r3, [pc, #112]	; (80034cc <main+0x1f8>)
 800345c:	2202      	movs	r2, #2
 800345e:	701a      	strb	r2, [r3, #0]
			break;
 8003460:	e013      	b.n	800348a <main+0x1b6>
		}
		case (4): {
			Move_robot_coordinates_X_Y_W(0.25, 0.7, 0.0, 0.0, 3.14);
 8003462:	ed9f 2a1f 	vldr	s4, [pc, #124]	; 80034e0 <main+0x20c>
 8003466:	eddf 1a1a 	vldr	s3, [pc, #104]	; 80034d0 <main+0x1fc>
 800346a:	ed9f 1a19 	vldr	s2, [pc, #100]	; 80034d0 <main+0x1fc>
 800346e:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80034dc <main+0x208>
 8003472:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8003476:	f7fe f837 	bl	80014e8 <Move_robot_coordinates_X_Y_W>
			chain_control(2);
 800347a:	2002      	movs	r0, #2
 800347c:	f7fd ff0c 	bl	8001298 <chain_control>
			flag_compleate = 2;
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <main+0x1f8>)
 8003482:	2202      	movs	r2, #2
 8003484:	701a      	strb	r2, [r3, #0]
			break;
 8003486:	e000      	b.n	800348a <main+0x1b6>
			break;
 8003488:	bf00      	nop
		}
		}
		falg_controler();
 800348a:	f7fd fe25 	bl	80010d8 <falg_controler>
		convert_chushpan();
 800348e:	e793      	b.n	80033b8 <main+0xe4>
 8003490:	20000560 	.word	0x20000560
 8003494:	200006c8 	.word	0x200006c8
 8003498:	20000710 	.word	0x20000710
 800349c:	20000680 	.word	0x20000680
 80034a0:	200004d0 	.word	0x200004d0
 80034a4:	20000518 	.word	0x20000518
 80034a8:	20000488 	.word	0x20000488
 80034ac:	200005a8 	.word	0x200005a8
 80034b0:	200005f0 	.word	0x200005f0
 80034b4:	2000034c 	.word	0x2000034c
 80034b8:	20000758 	.word	0x20000758
 80034bc:	20000230 	.word	0x20000230
 80034c0:	20000284 	.word	0x20000284
 80034c4:	200002f2 	.word	0x200002f2
 80034c8:	20000430 	.word	0x20000430
 80034cc:	200002f5 	.word	0x200002f5
 80034d0:	00000000 	.word	0x00000000
 80034d4:	3e4ccccd 	.word	0x3e4ccccd
 80034d8:	3fc8f5c3 	.word	0x3fc8f5c3
 80034dc:	3f333333 	.word	0x3f333333
 80034e0:	4048f5c3 	.word	0x4048f5c3

080034e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b094      	sub	sp, #80	; 0x50
 80034e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80034ea:	f107 0320 	add.w	r3, r7, #32
 80034ee:	2230      	movs	r2, #48	; 0x30
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f004 ffc8 	bl	8008488 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80034f8:	f107 030c 	add.w	r3, r7, #12
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003508:	2300      	movs	r3, #0
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <SystemClock_Config+0xcc>)
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	4a27      	ldr	r2, [pc, #156]	; (80035b0 <SystemClock_Config+0xcc>)
 8003512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003516:	6413      	str	r3, [r2, #64]	; 0x40
 8003518:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <SystemClock_Config+0xcc>)
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003524:	2300      	movs	r3, #0
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <SystemClock_Config+0xd0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a21      	ldr	r2, [pc, #132]	; (80035b4 <SystemClock_Config+0xd0>)
 800352e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b1f      	ldr	r3, [pc, #124]	; (80035b4 <SystemClock_Config+0xd0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003540:	2302      	movs	r3, #2
 8003542:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003544:	2301      	movs	r3, #1
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003548:	2310      	movs	r3, #16
 800354a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800354c:	2302      	movs	r3, #2
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003550:	2300      	movs	r3, #0
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003554:	2308      	movs	r3, #8
 8003556:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8003558:	23a8      	movs	r3, #168	; 0xa8
 800355a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800355c:	2302      	movs	r3, #2
 800355e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003560:	2307      	movs	r3, #7
 8003562:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003564:	f107 0320 	add.w	r3, r7, #32
 8003568:	4618      	mov	r0, r3
 800356a:	f002 f9e5 	bl	8005938 <HAL_RCC_OscConfig>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <SystemClock_Config+0x94>
		Error_Handler();
 8003574:	f000 f820 	bl	80035b8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003578:	230f      	movs	r3, #15
 800357a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800357c:	2302      	movs	r3, #2
 800357e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003584:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003588:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800358a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800358e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003590:	f107 030c 	add.w	r3, r7, #12
 8003594:	2105      	movs	r1, #5
 8003596:	4618      	mov	r0, r3
 8003598:	f002 fc46 	bl	8005e28 <HAL_RCC_ClockConfig>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <SystemClock_Config+0xc2>
		Error_Handler();
 80035a2:	f000 f809 	bl	80035b8 <Error_Handler>
	}
}
 80035a6:	bf00      	nop
 80035a8:	3750      	adds	r7, #80	; 0x50
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40007000 	.word	0x40007000

080035b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035bc:	b672      	cpsid	i
}
 80035be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80035c0:	e7fe      	b.n	80035c0 <Error_Handler+0x8>
	...

080035c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <HAL_MspInit+0x4c>)
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	4a0f      	ldr	r2, [pc, #60]	; (8003610 <HAL_MspInit+0x4c>)
 80035d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d8:	6453      	str	r3, [r2, #68]	; 0x44
 80035da:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <HAL_MspInit+0x4c>)
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_MspInit+0x4c>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	4a08      	ldr	r2, [pc, #32]	; (8003610 <HAL_MspInit+0x4c>)
 80035f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f4:	6413      	str	r3, [r2, #64]	; 0x40
 80035f6:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_MspInit+0x4c>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003602:	2007      	movs	r0, #7
 8003604:	f001 fb86 	bl	8004d14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40023800 	.word	0x40023800

08003614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003618:	e7fe      	b.n	8003618 <NMI_Handler+0x4>

0800361a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800361e:	e7fe      	b.n	800361e <HardFault_Handler+0x4>

08003620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003624:	e7fe      	b.n	8003624 <MemManage_Handler+0x4>

08003626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003626:	b480      	push	{r7}
 8003628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800362a:	e7fe      	b.n	800362a <BusFault_Handler+0x4>

0800362c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003630:	e7fe      	b.n	8003630 <UsageFault_Handler+0x4>

08003632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003632:	b480      	push	{r7}
 8003634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003636:	bf00      	nop
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800364e:	b480      	push	{r7}
 8003650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003660:	f001 fa68 	bl	8004b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003664:	bf00      	nop
 8003666:	bd80      	pop	{r7, pc}

08003668 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800366c:	4802      	ldr	r0, [pc, #8]	; (8003678 <USART1_IRQHandler+0x10>)
 800366e:	f003 fe87 	bl	8007380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000758 	.word	0x20000758
 800367c:	00000000 	.word	0x00000000

08003680 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003680:	b5b0      	push	{r4, r5, r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	state_autonom = state_autonom + 0.01;
 8003686:	4bba      	ldr	r3, [pc, #744]	; (8003970 <TIM6_DAC_IRQHandler+0x2f0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fc ff00 	bl	8000490 <__aeabi_f2d>
 8003690:	a3b1      	add	r3, pc, #708	; (adr r3, 8003958 <TIM6_DAC_IRQHandler+0x2d8>)
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	f7fc fd9d 	bl	80001d4 <__adddf3>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	f7fd fa0f 	bl	8000ac4 <__aeabi_d2f>
 80036a6:	4603      	mov	r3, r0
 80036a8:	4ab1      	ldr	r2, [pc, #708]	; (8003970 <TIM6_DAC_IRQHandler+0x2f0>)
 80036aa:	6013      	str	r3, [r2, #0]
	state_flag = state_flag + 0.01;
 80036ac:	4bb1      	ldr	r3, [pc, #708]	; (8003974 <TIM6_DAC_IRQHandler+0x2f4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fc feed 	bl	8000490 <__aeabi_f2d>
 80036b6:	a3a8      	add	r3, pc, #672	; (adr r3, 8003958 <TIM6_DAC_IRQHandler+0x2d8>)
 80036b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036bc:	f7fc fd8a 	bl	80001d4 <__adddf3>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	f7fd f9fc 	bl	8000ac4 <__aeabi_d2f>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4aa9      	ldr	r2, [pc, #676]	; (8003974 <TIM6_DAC_IRQHandler+0x2f4>)
 80036d0:	6013      	str	r3, [r2, #0]
	 Enc_Counter_0 = TIM8->CNT;
 80036d2:	4ba9      	ldr	r3, [pc, #676]	; (8003978 <TIM6_DAC_IRQHandler+0x2f8>)
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	b21a      	sxth	r2, r3
 80036d8:	4ba8      	ldr	r3, [pc, #672]	; (800397c <TIM6_DAC_IRQHandler+0x2fc>)
 80036da:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_1 = TIM2->CNT;
 80036dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	b21a      	sxth	r2, r3
 80036e4:	4ba6      	ldr	r3, [pc, #664]	; (8003980 <TIM6_DAC_IRQHandler+0x300>)
 80036e6:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_2 = TIM3->CNT;
 80036e8:	4ba6      	ldr	r3, [pc, #664]	; (8003984 <TIM6_DAC_IRQHandler+0x304>)
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	b21a      	sxth	r2, r3
 80036ee:	4ba6      	ldr	r3, [pc, #664]	; (8003988 <TIM6_DAC_IRQHandler+0x308>)
 80036f0:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_3 = TIM1->CNT;
 80036f2:	4ba6      	ldr	r3, [pc, #664]	; (800398c <TIM6_DAC_IRQHandler+0x30c>)
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	b21a      	sxth	r2, r3
 80036f8:	4ba5      	ldr	r3, [pc, #660]	; (8003990 <TIM6_DAC_IRQHandler+0x310>)
 80036fa:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_4 = TIM5->CNT;
 80036fc:	4ba5      	ldr	r3, [pc, #660]	; (8003994 <TIM6_DAC_IRQHandler+0x314>)
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	b21a      	sxth	r2, r3
 8003702:	4ba5      	ldr	r3, [pc, #660]	; (8003998 <TIM6_DAC_IRQHandler+0x318>)
 8003704:	801a      	strh	r2, [r3, #0]

	 result_speed_0 = ((float)Enc_Counter_0) *  pi_Radius_pulse_enc * 100.0;
 8003706:	4b9d      	ldr	r3, [pc, #628]	; (800397c <TIM6_DAC_IRQHandler+0x2fc>)
 8003708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800370c:	ee07 3a90 	vmov	s15, r3
 8003710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003714:	ee17 0a90 	vmov	r0, s15
 8003718:	f7fc feba 	bl	8000490 <__aeabi_f2d>
 800371c:	a390      	add	r3, pc, #576	; (adr r3, 8003960 <TIM6_DAC_IRQHandler+0x2e0>)
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f7fc ff0d 	bl	8000540 <__aeabi_dmul>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	4b9a      	ldr	r3, [pc, #616]	; (800399c <TIM6_DAC_IRQHandler+0x31c>)
 8003734:	f7fc ff04 	bl	8000540 <__aeabi_dmul>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4610      	mov	r0, r2
 800373e:	4619      	mov	r1, r3
 8003740:	f7fd f9c0 	bl	8000ac4 <__aeabi_d2f>
 8003744:	4603      	mov	r3, r0
 8003746:	4a96      	ldr	r2, [pc, #600]	; (80039a0 <TIM6_DAC_IRQHandler+0x320>)
 8003748:	6013      	str	r3, [r2, #0]
	 result_speed_1 = ((float)Enc_Counter_1) *  pi_Radius_pulse_enc * 100.0;
 800374a:	4b8d      	ldr	r3, [pc, #564]	; (8003980 <TIM6_DAC_IRQHandler+0x300>)
 800374c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003750:	ee07 3a90 	vmov	s15, r3
 8003754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003758:	ee17 0a90 	vmov	r0, s15
 800375c:	f7fc fe98 	bl	8000490 <__aeabi_f2d>
 8003760:	a37f      	add	r3, pc, #508	; (adr r3, 8003960 <TIM6_DAC_IRQHandler+0x2e0>)
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f7fc feeb 	bl	8000540 <__aeabi_dmul>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4610      	mov	r0, r2
 8003770:	4619      	mov	r1, r3
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	4b89      	ldr	r3, [pc, #548]	; (800399c <TIM6_DAC_IRQHandler+0x31c>)
 8003778:	f7fc fee2 	bl	8000540 <__aeabi_dmul>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	f7fd f99e 	bl	8000ac4 <__aeabi_d2f>
 8003788:	4603      	mov	r3, r0
 800378a:	4a86      	ldr	r2, [pc, #536]	; (80039a4 <TIM6_DAC_IRQHandler+0x324>)
 800378c:	6013      	str	r3, [r2, #0]
	 result_speed_2 = ((float)Enc_Counter_2) *  pi_Radius_pulse_enc * 100.0;
 800378e:	4b7e      	ldr	r3, [pc, #504]	; (8003988 <TIM6_DAC_IRQHandler+0x308>)
 8003790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003794:	ee07 3a90 	vmov	s15, r3
 8003798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800379c:	ee17 0a90 	vmov	r0, s15
 80037a0:	f7fc fe76 	bl	8000490 <__aeabi_f2d>
 80037a4:	a36e      	add	r3, pc, #440	; (adr r3, 8003960 <TIM6_DAC_IRQHandler+0x2e0>)
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	f7fc fec9 	bl	8000540 <__aeabi_dmul>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	4b78      	ldr	r3, [pc, #480]	; (800399c <TIM6_DAC_IRQHandler+0x31c>)
 80037bc:	f7fc fec0 	bl	8000540 <__aeabi_dmul>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	f7fd f97c 	bl	8000ac4 <__aeabi_d2f>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4a76      	ldr	r2, [pc, #472]	; (80039a8 <TIM6_DAC_IRQHandler+0x328>)
 80037d0:	6013      	str	r3, [r2, #0]
	 result_speed_3 = ((float)Enc_Counter_3) *  pi_Radius_pulse_enc * 100.0;
 80037d2:	4b6f      	ldr	r3, [pc, #444]	; (8003990 <TIM6_DAC_IRQHandler+0x310>)
 80037d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d8:	ee07 3a90 	vmov	s15, r3
 80037dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037e0:	ee17 0a90 	vmov	r0, s15
 80037e4:	f7fc fe54 	bl	8000490 <__aeabi_f2d>
 80037e8:	a35d      	add	r3, pc, #372	; (adr r3, 8003960 <TIM6_DAC_IRQHandler+0x2e0>)
 80037ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ee:	f7fc fea7 	bl	8000540 <__aeabi_dmul>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	4b67      	ldr	r3, [pc, #412]	; (800399c <TIM6_DAC_IRQHandler+0x31c>)
 8003800:	f7fc fe9e 	bl	8000540 <__aeabi_dmul>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	f7fd f95a 	bl	8000ac4 <__aeabi_d2f>
 8003810:	4603      	mov	r3, r0
 8003812:	4a66      	ldr	r2, [pc, #408]	; (80039ac <TIM6_DAC_IRQHandler+0x32c>)
 8003814:	6013      	str	r3, [r2, #0]
	 result_speed_grab = ((float)Enc_Counter_4) * pi_Radius_pulse_enc_chain  * 100.0;
 8003816:	4b60      	ldr	r3, [pc, #384]	; (8003998 <TIM6_DAC_IRQHandler+0x318>)
 8003818:	f9b3 3000 	ldrsh.w	r3, [r3]
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003824:	ee17 0a90 	vmov	r0, s15
 8003828:	f7fc fe32 	bl	8000490 <__aeabi_f2d>
 800382c:	a34e      	add	r3, pc, #312	; (adr r3, 8003968 <TIM6_DAC_IRQHandler+0x2e8>)
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f7fc fe85 	bl	8000540 <__aeabi_dmul>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	4b56      	ldr	r3, [pc, #344]	; (800399c <TIM6_DAC_IRQHandler+0x31c>)
 8003844:	f7fc fe7c 	bl	8000540 <__aeabi_dmul>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	f7fd f938 	bl	8000ac4 <__aeabi_d2f>
 8003854:	4603      	mov	r3, r0
 8003856:	4a56      	ldr	r2, [pc, #344]	; (80039b0 <TIM6_DAC_IRQHandler+0x330>)
 8003858:	6013      	str	r3, [r2, #0]

	 TIM8->CNT = 0;
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <TIM6_DAC_IRQHandler+0x2f8>)
 800385c:	2200      	movs	r2, #0
 800385e:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM2->CNT = 0;
 8003860:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003864:	2200      	movs	r2, #0
 8003866:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM3->CNT = 0;
 8003868:	4b46      	ldr	r3, [pc, #280]	; (8003984 <TIM6_DAC_IRQHandler+0x304>)
 800386a:	2200      	movs	r2, #0
 800386c:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM1->CNT = 0;
 800386e:	4b47      	ldr	r3, [pc, #284]	; (800398c <TIM6_DAC_IRQHandler+0x30c>)
 8003870:	2200      	movs	r2, #0
 8003872:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM5->CNT = 0;
 8003874:	4b47      	ldr	r3, [pc, #284]	; (8003994 <TIM6_DAC_IRQHandler+0x314>)
 8003876:	2200      	movs	r2, #0
 8003878:	625a      	str	r2, [r3, #36]	; 0x24

	 Wheel_1.current = result_speed_0;
 800387a:	4b49      	ldr	r3, [pc, #292]	; (80039a0 <TIM6_DAC_IRQHandler+0x320>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a4d      	ldr	r2, [pc, #308]	; (80039b4 <TIM6_DAC_IRQHandler+0x334>)
 8003880:	6153      	str	r3, [r2, #20]
	 Wheel_2.current = result_speed_1;
 8003882:	4b48      	ldr	r3, [pc, #288]	; (80039a4 <TIM6_DAC_IRQHandler+0x324>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a4c      	ldr	r2, [pc, #304]	; (80039b8 <TIM6_DAC_IRQHandler+0x338>)
 8003888:	6153      	str	r3, [r2, #20]
	 Wheel_3.current = result_speed_2;
 800388a:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <TIM6_DAC_IRQHandler+0x328>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a4b      	ldr	r2, [pc, #300]	; (80039bc <TIM6_DAC_IRQHandler+0x33c>)
 8003890:	6153      	str	r3, [r2, #20]
	 Wheel_4.current = result_speed_3;
 8003892:	4b46      	ldr	r3, [pc, #280]	; (80039ac <TIM6_DAC_IRQHandler+0x32c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a4a      	ldr	r2, [pc, #296]	; (80039c0 <TIM6_DAC_IRQHandler+0x340>)
 8003898:	6153      	str	r3, [r2, #20]
	 Chain_motor.current = result_speed_grab;
 800389a:	4b45      	ldr	r3, [pc, #276]	; (80039b0 <TIM6_DAC_IRQHandler+0x330>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a49      	ldr	r2, [pc, #292]	; (80039c4 <TIM6_DAC_IRQHandler+0x344>)
 80038a0:	6153      	str	r3, [r2, #20]

	 PID_Controller(&Wheel_1);
 80038a2:	4844      	ldr	r0, [pc, #272]	; (80039b4 <TIM6_DAC_IRQHandler+0x334>)
 80038a4:	f7ff f8b6 	bl	8002a14 <PID_Controller>
	 PID_Controller(&Wheel_2);
 80038a8:	4843      	ldr	r0, [pc, #268]	; (80039b8 <TIM6_DAC_IRQHandler+0x338>)
 80038aa:	f7ff f8b3 	bl	8002a14 <PID_Controller>
	 PID_Controller(&Wheel_3);
 80038ae:	4843      	ldr	r0, [pc, #268]	; (80039bc <TIM6_DAC_IRQHandler+0x33c>)
 80038b0:	f7ff f8b0 	bl	8002a14 <PID_Controller>
	 PID_Controller(&Wheel_4);
 80038b4:	4842      	ldr	r0, [pc, #264]	; (80039c0 <TIM6_DAC_IRQHandler+0x340>)
 80038b6:	f7ff f8ad 	bl	8002a14 <PID_Controller>
	 PID_Controller(&Chain_motor);
 80038ba:	4842      	ldr	r0, [pc, #264]	; (80039c4 <TIM6_DAC_IRQHandler+0x344>)
 80038bc:	f7ff f8aa 	bl	8002a14 <PID_Controller>
	 delta_UV[0][0] = speed_U *0.01;
 80038c0:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <TIM6_DAC_IRQHandler+0x348>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fc fde3 	bl	8000490 <__aeabi_f2d>
 80038ca:	a323      	add	r3, pc, #140	; (adr r3, 8003958 <TIM6_DAC_IRQHandler+0x2d8>)
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f7fc fe36 	bl	8000540 <__aeabi_dmul>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	f7fd f8f2 	bl	8000ac4 <__aeabi_d2f>
 80038e0:	4603      	mov	r3, r0
 80038e2:	4a3a      	ldr	r2, [pc, #232]	; (80039cc <TIM6_DAC_IRQHandler+0x34c>)
 80038e4:	6013      	str	r3, [r2, #0]
	 delta_UV[0][1] = speed_V *0.01;
 80038e6:	4b3a      	ldr	r3, [pc, #232]	; (80039d0 <TIM6_DAC_IRQHandler+0x350>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fc fdd0 	bl	8000490 <__aeabi_f2d>
 80038f0:	a319      	add	r3, pc, #100	; (adr r3, 8003958 <TIM6_DAC_IRQHandler+0x2d8>)
 80038f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f6:	f7fc fe23 	bl	8000540 <__aeabi_dmul>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4610      	mov	r0, r2
 8003900:	4619      	mov	r1, r3
 8003902:	f7fd f8df 	bl	8000ac4 <__aeabi_d2f>
 8003906:	4603      	mov	r3, r0
 8003908:	4a30      	ldr	r2, [pc, #192]	; (80039cc <TIM6_DAC_IRQHandler+0x34c>)
 800390a:	6053      	str	r3, [r2, #4]

	 fi = fi + speed_W * 0.01;
 800390c:	4b31      	ldr	r3, [pc, #196]	; (80039d4 <TIM6_DAC_IRQHandler+0x354>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fc fdbd 	bl	8000490 <__aeabi_f2d>
 8003916:	4604      	mov	r4, r0
 8003918:	460d      	mov	r5, r1
 800391a:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <TIM6_DAC_IRQHandler+0x358>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fc fdb6 	bl	8000490 <__aeabi_f2d>
 8003924:	a30c      	add	r3, pc, #48	; (adr r3, 8003958 <TIM6_DAC_IRQHandler+0x2d8>)
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392a:	f7fc fe09 	bl	8000540 <__aeabi_dmul>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4620      	mov	r0, r4
 8003934:	4629      	mov	r1, r5
 8003936:	f7fc fc4d 	bl	80001d4 <__adddf3>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4610      	mov	r0, r2
 8003940:	4619      	mov	r1, r3
 8003942:	f7fd f8bf 	bl	8000ac4 <__aeabi_d2f>
 8003946:	4603      	mov	r3, r0
 8003948:	4a22      	ldr	r2, [pc, #136]	; (80039d4 <TIM6_DAC_IRQHandler+0x354>)
 800394a:	6013      	str	r3, [r2, #0]
	 if(fi>=(2*pi)) fi = fi-2*pi;
 800394c:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <TIM6_DAC_IRQHandler+0x354>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7fc fd9d 	bl	8000490 <__aeabi_f2d>
 8003956:	e041      	b.n	80039dc <TIM6_DAC_IRQHandler+0x35c>
 8003958:	47ae147b 	.word	0x47ae147b
 800395c:	3f847ae1 	.word	0x3f847ae1
 8003960:	ce34e015 	.word	0xce34e015
 8003964:	3f16194c 	.word	0x3f16194c
 8003968:	ade5d2f9 	.word	0xade5d2f9
 800396c:	3f34e3d9 	.word	0x3f34e3d9
 8003970:	20000480 	.word	0x20000480
 8003974:	20000484 	.word	0x20000484
 8003978:	40010400 	.word	0x40010400
 800397c:	20000432 	.word	0x20000432
 8003980:	20000434 	.word	0x20000434
 8003984:	40000400 	.word	0x40000400
 8003988:	20000436 	.word	0x20000436
 800398c:	40010000 	.word	0x40010000
 8003990:	20000438 	.word	0x20000438
 8003994:	40000c00 	.word	0x40000c00
 8003998:	2000043a 	.word	0x2000043a
 800399c:	40590000 	.word	0x40590000
 80039a0:	20000444 	.word	0x20000444
 80039a4:	20000448 	.word	0x20000448
 80039a8:	2000044c 	.word	0x2000044c
 80039ac:	20000450 	.word	0x20000450
 80039b0:	20000454 	.word	0x20000454
 80039b4:	200000f0 	.word	0x200000f0
 80039b8:	20000130 	.word	0x20000130
 80039bc:	20000170 	.word	0x20000170
 80039c0:	200001b0 	.word	0x200001b0
 80039c4:	200001f0 	.word	0x200001f0
 80039c8:	20000278 	.word	0x20000278
 80039cc:	20000468 	.word	0x20000468
 80039d0:	2000027c 	.word	0x2000027c
 80039d4:	20000074 	.word	0x20000074
 80039d8:	20000280 	.word	0x20000280
 80039dc:	a3ba      	add	r3, pc, #744	; (adr r3, 8003cc8 <TIM6_DAC_IRQHandler+0x648>)
 80039de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e2:	f7fd f833 	bl	8000a4c <__aeabi_dcmpge>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d012      	beq.n	8003a12 <TIM6_DAC_IRQHandler+0x392>
 80039ec:	4bbc      	ldr	r3, [pc, #752]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fc fd4d 	bl	8000490 <__aeabi_f2d>
 80039f6:	a3b4      	add	r3, pc, #720	; (adr r3, 8003cc8 <TIM6_DAC_IRQHandler+0x648>)
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	f7fc fbe8 	bl	80001d0 <__aeabi_dsub>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4610      	mov	r0, r2
 8003a06:	4619      	mov	r1, r3
 8003a08:	f7fd f85c 	bl	8000ac4 <__aeabi_d2f>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	4ab4      	ldr	r2, [pc, #720]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 8003a10:	6013      	str	r3, [r2, #0]
	 if(fi<0.0)	 fi = fi+2*pi;
 8003a12:	4bb3      	ldr	r3, [pc, #716]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 8003a14:	edd3 7a00 	vldr	s15, [r3]
 8003a18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a20:	d512      	bpl.n	8003a48 <TIM6_DAC_IRQHandler+0x3c8>
 8003a22:	4baf      	ldr	r3, [pc, #700]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc fd32 	bl	8000490 <__aeabi_f2d>
 8003a2c:	a3a6      	add	r3, pc, #664	; (adr r3, 8003cc8 <TIM6_DAC_IRQHandler+0x648>)
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	f7fc fbcf 	bl	80001d4 <__adddf3>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f7fd f841 	bl	8000ac4 <__aeabi_d2f>
 8003a42:	4603      	mov	r3, r0
 8003a44:	4aa6      	ldr	r2, [pc, #664]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 8003a46:	6013      	str	r3, [r2, #0]
	 if(quest_FI>fi){
 8003a48:	4ba6      	ldr	r3, [pc, #664]	; (8003ce4 <TIM6_DAC_IRQHandler+0x664>)
 8003a4a:	ed93 7a00 	vldr	s14, [r3]
 8003a4e:	4ba4      	ldr	r3, [pc, #656]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 8003a50:	edd3 7a00 	vldr	s15, [r3]
 8003a54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5c:	dd4a      	ble.n	8003af4 <TIM6_DAC_IRQHandler+0x474>
		 if((quest_FI-fi)>pi){
 8003a5e:	4ba1      	ldr	r3, [pc, #644]	; (8003ce4 <TIM6_DAC_IRQHandler+0x664>)
 8003a60:	ed93 7a00 	vldr	s14, [r3]
 8003a64:	4b9e      	ldr	r3, [pc, #632]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 8003a66:	edd3 7a00 	vldr	s15, [r3]
 8003a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a6e:	ee17 0a90 	vmov	r0, s15
 8003a72:	f7fc fd0d 	bl	8000490 <__aeabi_f2d>
 8003a76:	a396      	add	r3, pc, #600	; (adr r3, 8003cd0 <TIM6_DAC_IRQHandler+0x650>)
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	f7fc fff0 	bl	8000a60 <__aeabi_dcmpgt>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d027      	beq.n	8003ad6 <TIM6_DAC_IRQHandler+0x456>
			delta_fi = (2*pi-quest_FI+fi);
 8003a86:	4b97      	ldr	r3, [pc, #604]	; (8003ce4 <TIM6_DAC_IRQHandler+0x664>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fc fd00 	bl	8000490 <__aeabi_f2d>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	a18c      	add	r1, pc, #560	; (adr r1, 8003cc8 <TIM6_DAC_IRQHandler+0x648>)
 8003a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a9a:	f7fc fb99 	bl	80001d0 <__aeabi_dsub>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4614      	mov	r4, r2
 8003aa4:	461d      	mov	r5, r3
 8003aa6:	4b8e      	ldr	r3, [pc, #568]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fc fcf0 	bl	8000490 <__aeabi_f2d>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7fc fb8c 	bl	80001d4 <__adddf3>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f7fc fffe 	bl	8000ac4 <__aeabi_d2f>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4a87      	ldr	r2, [pc, #540]	; (8003ce8 <TIM6_DAC_IRQHandler+0x668>)
 8003acc:	6013      	str	r3, [r2, #0]
			flaging = 1;
 8003ace:	4b87      	ldr	r3, [pc, #540]	; (8003cec <TIM6_DAC_IRQHandler+0x66c>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
 8003ad4:	e058      	b.n	8003b88 <TIM6_DAC_IRQHandler+0x508>
		 }
		 else {

			 delta_fi = (quest_FI - fi);
 8003ad6:	4b83      	ldr	r3, [pc, #524]	; (8003ce4 <TIM6_DAC_IRQHandler+0x664>)
 8003ad8:	ed93 7a00 	vldr	s14, [r3]
 8003adc:	4b80      	ldr	r3, [pc, #512]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 8003ade:	edd3 7a00 	vldr	s15, [r3]
 8003ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ae6:	4b80      	ldr	r3, [pc, #512]	; (8003ce8 <TIM6_DAC_IRQHandler+0x668>)
 8003ae8:	edc3 7a00 	vstr	s15, [r3]
			 flaging = 2;
 8003aec:	4b7f      	ldr	r3, [pc, #508]	; (8003cec <TIM6_DAC_IRQHandler+0x66c>)
 8003aee:	2202      	movs	r2, #2
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	e049      	b.n	8003b88 <TIM6_DAC_IRQHandler+0x508>
		 }

	 }
	 else{
		 if((fi-quest_FI)>pi){
 8003af4:	4b7a      	ldr	r3, [pc, #488]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 8003af6:	ed93 7a00 	vldr	s14, [r3]
 8003afa:	4b7a      	ldr	r3, [pc, #488]	; (8003ce4 <TIM6_DAC_IRQHandler+0x664>)
 8003afc:	edd3 7a00 	vldr	s15, [r3]
 8003b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b04:	ee17 0a90 	vmov	r0, s15
 8003b08:	f7fc fcc2 	bl	8000490 <__aeabi_f2d>
 8003b0c:	a370      	add	r3, pc, #448	; (adr r3, 8003cd0 <TIM6_DAC_IRQHandler+0x650>)
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	f7fc ffa5 	bl	8000a60 <__aeabi_dcmpgt>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d027      	beq.n	8003b6c <TIM6_DAC_IRQHandler+0x4ec>
			 flaging = 3;
 8003b1c:	4b73      	ldr	r3, [pc, #460]	; (8003cec <TIM6_DAC_IRQHandler+0x66c>)
 8003b1e:	2203      	movs	r2, #3
 8003b20:	701a      	strb	r2, [r3, #0]
			delta_fi =  2*pi-fi+quest_FI;;
 8003b22:	4b6f      	ldr	r3, [pc, #444]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fc fcb2 	bl	8000490 <__aeabi_f2d>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	a165      	add	r1, pc, #404	; (adr r1, 8003cc8 <TIM6_DAC_IRQHandler+0x648>)
 8003b32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b36:	f7fc fb4b 	bl	80001d0 <__aeabi_dsub>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4614      	mov	r4, r2
 8003b40:	461d      	mov	r5, r3
 8003b42:	4b68      	ldr	r3, [pc, #416]	; (8003ce4 <TIM6_DAC_IRQHandler+0x664>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fc fca2 	bl	8000490 <__aeabi_f2d>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4620      	mov	r0, r4
 8003b52:	4629      	mov	r1, r5
 8003b54:	f7fc fb3e 	bl	80001d4 <__adddf3>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4619      	mov	r1, r3
 8003b60:	f7fc ffb0 	bl	8000ac4 <__aeabi_d2f>
 8003b64:	4603      	mov	r3, r0
 8003b66:	4a60      	ldr	r2, [pc, #384]	; (8003ce8 <TIM6_DAC_IRQHandler+0x668>)
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e00d      	b.n	8003b88 <TIM6_DAC_IRQHandler+0x508>

		 }
		 else {
			 flaging = 4;
 8003b6c:	4b5f      	ldr	r3, [pc, #380]	; (8003cec <TIM6_DAC_IRQHandler+0x66c>)
 8003b6e:	2204      	movs	r2, #4
 8003b70:	701a      	strb	r2, [r3, #0]
			 delta_fi = fi-quest_FI;
 8003b72:	4b5b      	ldr	r3, [pc, #364]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 8003b74:	ed93 7a00 	vldr	s14, [r3]
 8003b78:	4b5a      	ldr	r3, [pc, #360]	; (8003ce4 <TIM6_DAC_IRQHandler+0x664>)
 8003b7a:	edd3 7a00 	vldr	s15, [r3]
 8003b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b82:	4b59      	ldr	r3, [pc, #356]	; (8003ce8 <TIM6_DAC_IRQHandler+0x668>)
 8003b84:	edc3 7a00 	vstr	s15, [r3]
		 }


	 }

	 UV_convert_xy[0][0] = cos(fi);
 8003b88:	4b55      	ldr	r3, [pc, #340]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fc fc7f 	bl	8000490 <__aeabi_f2d>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	ec43 2b10 	vmov	d0, r2, r3
 8003b9a:	f004 fcb5 	bl	8008508 <cos>
 8003b9e:	ec53 2b10 	vmov	r2, r3, d0
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f7fc ff8d 	bl	8000ac4 <__aeabi_d2f>
 8003baa:	4603      	mov	r3, r0
 8003bac:	4a50      	ldr	r2, [pc, #320]	; (8003cf0 <TIM6_DAC_IRQHandler+0x670>)
 8003bae:	6013      	str	r3, [r2, #0]
	 UV_convert_xy[0][1] = sin(fi);
 8003bb0:	4b4b      	ldr	r3, [pc, #300]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fc fc6b 	bl	8000490 <__aeabi_f2d>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	ec43 2b10 	vmov	d0, r2, r3
 8003bc2:	f004 fcf5 	bl	80085b0 <sin>
 8003bc6:	ec53 2b10 	vmov	r2, r3, d0
 8003bca:	4610      	mov	r0, r2
 8003bcc:	4619      	mov	r1, r3
 8003bce:	f7fc ff79 	bl	8000ac4 <__aeabi_d2f>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	4a46      	ldr	r2, [pc, #280]	; (8003cf0 <TIM6_DAC_IRQHandler+0x670>)
 8003bd6:	6053      	str	r3, [r2, #4]
	 UV_convert_xy[1][1] = cos(fi);
 8003bd8:	4b41      	ldr	r3, [pc, #260]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fc fc57 	bl	8000490 <__aeabi_f2d>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	ec43 2b10 	vmov	d0, r2, r3
 8003bea:	f004 fc8d 	bl	8008508 <cos>
 8003bee:	ec53 2b10 	vmov	r2, r3, d0
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f7fc ff65 	bl	8000ac4 <__aeabi_d2f>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4a3c      	ldr	r2, [pc, #240]	; (8003cf0 <TIM6_DAC_IRQHandler+0x670>)
 8003bfe:	60d3      	str	r3, [r2, #12]
	 UV_convert_xy[1][0] = -sin(fi);
 8003c00:	4b37      	ldr	r3, [pc, #220]	; (8003ce0 <TIM6_DAC_IRQHandler+0x660>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fc fc43 	bl	8000490 <__aeabi_f2d>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	ec43 2b10 	vmov	d0, r2, r3
 8003c12:	f004 fccd 	bl	80085b0 <sin>
 8003c16:	ec53 2b10 	vmov	r2, r3, d0
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f7fc ff51 	bl	8000ac4 <__aeabi_d2f>
 8003c22:	4603      	mov	r3, r0
 8003c24:	ee07 3a90 	vmov	s15, r3
 8003c28:	eef1 7a67 	vneg.f32	s15, s15
 8003c2c:	4b30      	ldr	r3, [pc, #192]	; (8003cf0 <TIM6_DAC_IRQHandler+0x670>)
 8003c2e:	edc3 7a02 	vstr	s15, [r3, #8]


	 matrixMultiplyM2M(&delta_UV[0][0],1,2,&UV_convert_xy[0][0],2,2,&delta_XY[0][0]);
 8003c32:	4b30      	ldr	r3, [pc, #192]	; (8003cf4 <TIM6_DAC_IRQHandler+0x674>)
 8003c34:	9302      	str	r3, [sp, #8]
 8003c36:	2302      	movs	r3, #2
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	4b2c      	ldr	r3, [pc, #176]	; (8003cf0 <TIM6_DAC_IRQHandler+0x670>)
 8003c40:	2202      	movs	r2, #2
 8003c42:	2101      	movs	r1, #1
 8003c44:	482c      	ldr	r0, [pc, #176]	; (8003cf8 <TIM6_DAC_IRQHandler+0x678>)
 8003c46:	f7fe ffb5 	bl	8002bb4 <matrixMultiplyM2M>
	 metr_chain = metr_chain + result_speed_grab*0.01 ;
 8003c4a:	4b2c      	ldr	r3, [pc, #176]	; (8003cfc <TIM6_DAC_IRQHandler+0x67c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fc fc1e 	bl	8000490 <__aeabi_f2d>
 8003c54:	4604      	mov	r4, r0
 8003c56:	460d      	mov	r5, r1
 8003c58:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <TIM6_DAC_IRQHandler+0x680>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fc fc17 	bl	8000490 <__aeabi_f2d>
 8003c62:	a31d      	add	r3, pc, #116	; (adr r3, 8003cd8 <TIM6_DAC_IRQHandler+0x658>)
 8003c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c68:	f7fc fc6a 	bl	8000540 <__aeabi_dmul>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4620      	mov	r0, r4
 8003c72:	4629      	mov	r1, r5
 8003c74:	f7fc faae 	bl	80001d4 <__adddf3>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f7fc ff20 	bl	8000ac4 <__aeabi_d2f>
 8003c84:	4603      	mov	r3, r0
 8003c86:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <TIM6_DAC_IRQHandler+0x67c>)
 8003c88:	6013      	str	r3, [r2, #0]
	 position_x = position_x +  delta_XY[0][0];
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <TIM6_DAC_IRQHandler+0x674>)
 8003c8c:	ed93 7a00 	vldr	s14, [r3]
 8003c90:	4b1c      	ldr	r3, [pc, #112]	; (8003d04 <TIM6_DAC_IRQHandler+0x684>)
 8003c92:	edd3 7a00 	vldr	s15, [r3]
 8003c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9a:	4b1a      	ldr	r3, [pc, #104]	; (8003d04 <TIM6_DAC_IRQHandler+0x684>)
 8003c9c:	edc3 7a00 	vstr	s15, [r3]
	 position_y = position_y +  delta_XY[0][1];
 8003ca0:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <TIM6_DAC_IRQHandler+0x674>)
 8003ca2:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ca6:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <TIM6_DAC_IRQHandler+0x688>)
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cb0:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <TIM6_DAC_IRQHandler+0x688>)
 8003cb2:	edc3 7a00 	vstr	s15, [r3]



  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003cb6:	4815      	ldr	r0, [pc, #84]	; (8003d0c <TIM6_DAC_IRQHandler+0x68c>)
 8003cb8:	f002 fde2 	bl	8006880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	f3af 8000 	nop.w
 8003cc8:	54442d18 	.word	0x54442d18
 8003ccc:	401921fb 	.word	0x401921fb
 8003cd0:	54442d18 	.word	0x54442d18
 8003cd4:	400921fb 	.word	0x400921fb
 8003cd8:	47ae147b 	.word	0x47ae147b
 8003cdc:	3f847ae1 	.word	0x3f847ae1
 8003ce0:	20000074 	.word	0x20000074
 8003ce4:	200002e8 	.word	0x200002e8
 8003ce8:	20000274 	.word	0x20000274
 8003cec:	2000043c 	.word	0x2000043c
 8003cf0:	20000458 	.word	0x20000458
 8003cf4:	20000470 	.word	0x20000470
 8003cf8:	20000468 	.word	0x20000468
 8003cfc:	20000440 	.word	0x20000440
 8003d00:	20000454 	.word	0x20000454
 8003d04:	20000478 	.word	0x20000478
 8003d08:	2000047c 	.word	0x2000047c
 8003d0c:	200005f0 	.word	0x200005f0

08003d10 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003d14:	4802      	ldr	r0, [pc, #8]	; (8003d20 <TIM7_IRQHandler+0x10>)
 8003d16:	f002 fdb3 	bl	8006880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000638 	.word	0x20000638

08003d24 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d28:	4802      	ldr	r0, [pc, #8]	; (8003d34 <DMA2_Stream2_IRQHandler+0x10>)
 8003d2a:	f001 f9cd 	bl	80050c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	2000079c 	.word	0x2000079c

08003d38 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003d3c:	4802      	ldr	r0, [pc, #8]	; (8003d48 <DMA2_Stream7_IRQHandler+0x10>)
 8003d3e:	f001 f9c3 	bl	80050c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	200007fc 	.word	0x200007fc

08003d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <SystemInit+0x20>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	4a05      	ldr	r2, [pc, #20]	; (8003d6c <SystemInit+0x20>)
 8003d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	e000ed00 	.word	0xe000ed00

08003d70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08c      	sub	sp, #48	; 0x30
 8003d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d76:	f107 030c 	add.w	r3, r7, #12
 8003d7a:	2224      	movs	r2, #36	; 0x24
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f004 fb82 	bl	8008488 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d8c:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <MX_TIM1_Init+0xa8>)
 8003d8e:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <MX_TIM1_Init+0xac>)
 8003d90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003d92:	4b21      	ldr	r3, [pc, #132]	; (8003e18 <MX_TIM1_Init+0xa8>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d98:	4b1f      	ldr	r3, [pc, #124]	; (8003e18 <MX_TIM1_Init+0xa8>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003d9e:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <MX_TIM1_Init+0xa8>)
 8003da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003da4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da6:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <MX_TIM1_Init+0xa8>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003dac:	4b1a      	ldr	r3, [pc, #104]	; (8003e18 <MX_TIM1_Init+0xa8>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003db2:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <MX_TIM1_Init+0xa8>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003db8:	2301      	movs	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	4619      	mov	r1, r3
 8003de2:	480d      	ldr	r0, [pc, #52]	; (8003e18 <MX_TIM1_Init+0xa8>)
 8003de4:	f002 fc18 	bl	8006618 <HAL_TIM_Encoder_Init>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003dee:	f7ff fbe3 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003dfa:	1d3b      	adds	r3, r7, #4
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4806      	ldr	r0, [pc, #24]	; (8003e18 <MX_TIM1_Init+0xa8>)
 8003e00:	f003 f9b0 	bl	8007164 <HAL_TIMEx_MasterConfigSynchronization>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003e0a:	f7ff fbd5 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003e0e:	bf00      	nop
 8003e10:	3730      	adds	r7, #48	; 0x30
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000488 	.word	0x20000488
 8003e1c:	40010000 	.word	0x40010000

08003e20 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	; 0x30
 8003e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e26:	f107 030c 	add.w	r3, r7, #12
 8003e2a:	2224      	movs	r2, #36	; 0x24
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f004 fb2a 	bl	8008488 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e34:	1d3b      	adds	r3, r7, #4
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e3c:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <MX_TIM2_Init+0xa4>)
 8003e3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003e44:	4b1f      	ldr	r3, [pc, #124]	; (8003ec4 <MX_TIM2_Init+0xa4>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <MX_TIM2_Init+0xa4>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003e50:	4b1c      	ldr	r3, [pc, #112]	; (8003ec4 <MX_TIM2_Init+0xa4>)
 8003e52:	f04f 32ff 	mov.w	r2, #4294967295
 8003e56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e58:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <MX_TIM2_Init+0xa4>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e5e:	4b19      	ldr	r3, [pc, #100]	; (8003ec4 <MX_TIM2_Init+0xa4>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003e64:	2301      	movs	r3, #1
 8003e66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e80:	2300      	movs	r3, #0
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003e88:	f107 030c 	add.w	r3, r7, #12
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	480d      	ldr	r0, [pc, #52]	; (8003ec4 <MX_TIM2_Init+0xa4>)
 8003e90:	f002 fbc2 	bl	8006618 <HAL_TIM_Encoder_Init>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003e9a:	f7ff fb8d 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ea6:	1d3b      	adds	r3, r7, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4806      	ldr	r0, [pc, #24]	; (8003ec4 <MX_TIM2_Init+0xa4>)
 8003eac:	f003 f95a 	bl	8007164 <HAL_TIMEx_MasterConfigSynchronization>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003eb6:	f7ff fb7f 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003eba:	bf00      	nop
 8003ebc:	3730      	adds	r7, #48	; 0x30
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	200004d0 	.word	0x200004d0

08003ec8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08c      	sub	sp, #48	; 0x30
 8003ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003ece:	f107 030c 	add.w	r3, r7, #12
 8003ed2:	2224      	movs	r2, #36	; 0x24
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f004 fad6 	bl	8008488 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003edc:	1d3b      	adds	r3, r7, #4
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ee4:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <MX_TIM3_Init+0xa0>)
 8003ee6:	4a21      	ldr	r2, [pc, #132]	; (8003f6c <MX_TIM3_Init+0xa4>)
 8003ee8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003eea:	4b1f      	ldr	r3, [pc, #124]	; (8003f68 <MX_TIM3_Init+0xa0>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <MX_TIM3_Init+0xa0>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003ef6:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <MX_TIM3_Init+0xa0>)
 8003ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003efc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003efe:	4b1a      	ldr	r3, [pc, #104]	; (8003f68 <MX_TIM3_Init+0xa0>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f04:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <MX_TIM3_Init+0xa0>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f12:	2301      	movs	r3, #1
 8003f14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f22:	2301      	movs	r3, #1
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f26:	2300      	movs	r3, #0
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003f2e:	f107 030c 	add.w	r3, r7, #12
 8003f32:	4619      	mov	r1, r3
 8003f34:	480c      	ldr	r0, [pc, #48]	; (8003f68 <MX_TIM3_Init+0xa0>)
 8003f36:	f002 fb6f 	bl	8006618 <HAL_TIM_Encoder_Init>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003f40:	f7ff fb3a 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f44:	2300      	movs	r3, #0
 8003f46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f4c:	1d3b      	adds	r3, r7, #4
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4805      	ldr	r0, [pc, #20]	; (8003f68 <MX_TIM3_Init+0xa0>)
 8003f52:	f003 f907 	bl	8007164 <HAL_TIMEx_MasterConfigSynchronization>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003f5c:	f7ff fb2c 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f60:	bf00      	nop
 8003f62:	3730      	adds	r7, #48	; 0x30
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000518 	.word	0x20000518
 8003f6c:	40000400 	.word	0x40000400

08003f70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f76:	f107 0320 	add.w	r3, r7, #32
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	605a      	str	r2, [r3, #4]
 8003f88:	609a      	str	r2, [r3, #8]
 8003f8a:	60da      	str	r2, [r3, #12]
 8003f8c:	611a      	str	r2, [r3, #16]
 8003f8e:	615a      	str	r2, [r3, #20]
 8003f90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f92:	4b32      	ldr	r3, [pc, #200]	; (800405c <MX_TIM4_Init+0xec>)
 8003f94:	4a32      	ldr	r2, [pc, #200]	; (8004060 <MX_TIM4_Init+0xf0>)
 8003f96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f98:	4b30      	ldr	r3, [pc, #192]	; (800405c <MX_TIM4_Init+0xec>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f9e:	4b2f      	ldr	r3, [pc, #188]	; (800405c <MX_TIM4_Init+0xec>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003fa4:	4b2d      	ldr	r3, [pc, #180]	; (800405c <MX_TIM4_Init+0xec>)
 8003fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003faa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fac:	4b2b      	ldr	r3, [pc, #172]	; (800405c <MX_TIM4_Init+0xec>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fb2:	4b2a      	ldr	r3, [pc, #168]	; (800405c <MX_TIM4_Init+0xec>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003fb8:	4828      	ldr	r0, [pc, #160]	; (800405c <MX_TIM4_Init+0xec>)
 8003fba:	f002 fa15 	bl	80063e8 <HAL_TIM_PWM_Init>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003fc4:	f7ff faf8 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003fd0:	f107 0320 	add.w	r3, r7, #32
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4821      	ldr	r0, [pc, #132]	; (800405c <MX_TIM4_Init+0xec>)
 8003fd8:	f003 f8c4 	bl	8007164 <HAL_TIMEx_MasterConfigSynchronization>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8003fe2:	f7ff fae9 	bl	80035b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fe6:	2360      	movs	r3, #96	; 0x60
 8003fe8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ff6:	1d3b      	adds	r3, r7, #4
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4817      	ldr	r0, [pc, #92]	; (800405c <MX_TIM4_Init+0xec>)
 8003ffe:	f002 fd47 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004008:	f7ff fad6 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800400c:	1d3b      	adds	r3, r7, #4
 800400e:	2204      	movs	r2, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4812      	ldr	r0, [pc, #72]	; (800405c <MX_TIM4_Init+0xec>)
 8004014:	f002 fd3c 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800401e:	f7ff facb 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004022:	1d3b      	adds	r3, r7, #4
 8004024:	2208      	movs	r2, #8
 8004026:	4619      	mov	r1, r3
 8004028:	480c      	ldr	r0, [pc, #48]	; (800405c <MX_TIM4_Init+0xec>)
 800402a:	f002 fd31 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8004034:	f7ff fac0 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004038:	1d3b      	adds	r3, r7, #4
 800403a:	220c      	movs	r2, #12
 800403c:	4619      	mov	r1, r3
 800403e:	4807      	ldr	r0, [pc, #28]	; (800405c <MX_TIM4_Init+0xec>)
 8004040:	f002 fd26 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800404a:	f7ff fab5 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800404e:	4803      	ldr	r0, [pc, #12]	; (800405c <MX_TIM4_Init+0xec>)
 8004050:	f000 fb88 	bl	8004764 <HAL_TIM_MspPostInit>

}
 8004054:	bf00      	nop
 8004056:	3728      	adds	r7, #40	; 0x28
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	20000560 	.word	0x20000560
 8004060:	40000800 	.word	0x40000800

08004064 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08c      	sub	sp, #48	; 0x30
 8004068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800406a:	f107 030c 	add.w	r3, r7, #12
 800406e:	2224      	movs	r2, #36	; 0x24
 8004070:	2100      	movs	r1, #0
 8004072:	4618      	mov	r0, r3
 8004074:	f004 fa08 	bl	8008488 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004078:	1d3b      	adds	r3, r7, #4
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004080:	4b20      	ldr	r3, [pc, #128]	; (8004104 <MX_TIM5_Init+0xa0>)
 8004082:	4a21      	ldr	r2, [pc, #132]	; (8004108 <MX_TIM5_Init+0xa4>)
 8004084:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004086:	4b1f      	ldr	r3, [pc, #124]	; (8004104 <MX_TIM5_Init+0xa0>)
 8004088:	2200      	movs	r2, #0
 800408a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800408c:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <MX_TIM5_Init+0xa0>)
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004092:	4b1c      	ldr	r3, [pc, #112]	; (8004104 <MX_TIM5_Init+0xa0>)
 8004094:	f04f 32ff 	mov.w	r2, #4294967295
 8004098:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800409a:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <MX_TIM5_Init+0xa0>)
 800409c:	2200      	movs	r2, #0
 800409e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040a0:	4b18      	ldr	r3, [pc, #96]	; (8004104 <MX_TIM5_Init+0xa0>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80040a6:	2301      	movs	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80040ae:	2301      	movs	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80040ba:	2300      	movs	r3, #0
 80040bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80040be:	2301      	movs	r3, #1
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80040c2:	2300      	movs	r3, #0
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80040ca:	f107 030c 	add.w	r3, r7, #12
 80040ce:	4619      	mov	r1, r3
 80040d0:	480c      	ldr	r0, [pc, #48]	; (8004104 <MX_TIM5_Init+0xa0>)
 80040d2:	f002 faa1 	bl	8006618 <HAL_TIM_Encoder_Init>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80040dc:	f7ff fa6c 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040e0:	2300      	movs	r3, #0
 80040e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80040e8:	1d3b      	adds	r3, r7, #4
 80040ea:	4619      	mov	r1, r3
 80040ec:	4805      	ldr	r0, [pc, #20]	; (8004104 <MX_TIM5_Init+0xa0>)
 80040ee:	f003 f839 	bl	8007164 <HAL_TIMEx_MasterConfigSynchronization>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80040f8:	f7ff fa5e 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80040fc:	bf00      	nop
 80040fe:	3730      	adds	r7, #48	; 0x30
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	200005a8 	.word	0x200005a8
 8004108:	40000c00 	.word	0x40000c00

0800410c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004112:	463b      	mov	r3, r7
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800411a:	4b15      	ldr	r3, [pc, #84]	; (8004170 <MX_TIM6_Init+0x64>)
 800411c:	4a15      	ldr	r2, [pc, #84]	; (8004174 <MX_TIM6_Init+0x68>)
 800411e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 21;
 8004120:	4b13      	ldr	r3, [pc, #76]	; (8004170 <MX_TIM6_Init+0x64>)
 8004122:	2215      	movs	r2, #21
 8004124:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <MX_TIM6_Init+0x64>)
 8004128:	2200      	movs	r2, #0
 800412a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 39999;
 800412c:	4b10      	ldr	r3, [pc, #64]	; (8004170 <MX_TIM6_Init+0x64>)
 800412e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8004132:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <MX_TIM6_Init+0x64>)
 8004136:	2200      	movs	r2, #0
 8004138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800413a:	480d      	ldr	r0, [pc, #52]	; (8004170 <MX_TIM6_Init+0x64>)
 800413c:	f002 f894 	bl	8006268 <HAL_TIM_Base_Init>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004146:	f7ff fa37 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800414e:	2300      	movs	r3, #0
 8004150:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004152:	463b      	mov	r3, r7
 8004154:	4619      	mov	r1, r3
 8004156:	4806      	ldr	r0, [pc, #24]	; (8004170 <MX_TIM6_Init+0x64>)
 8004158:	f003 f804 	bl	8007164 <HAL_TIMEx_MasterConfigSynchronization>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004162:	f7ff fa29 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	200005f0 	.word	0x200005f0
 8004174:	40001000 	.word	0x40001000

08004178 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800417e:	463b      	mov	r3, r7
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <MX_TIM7_Init+0x64>)
 8004188:	4a15      	ldr	r2, [pc, #84]	; (80041e0 <MX_TIM7_Init+0x68>)
 800418a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10;
 800418c:	4b13      	ldr	r3, [pc, #76]	; (80041dc <MX_TIM7_Init+0x64>)
 800418e:	220a      	movs	r2, #10
 8004190:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <MX_TIM7_Init+0x64>)
 8004194:	2200      	movs	r2, #0
 8004196:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8004198:	4b10      	ldr	r3, [pc, #64]	; (80041dc <MX_TIM7_Init+0x64>)
 800419a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800419e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041a0:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <MX_TIM7_Init+0x64>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80041a6:	480d      	ldr	r0, [pc, #52]	; (80041dc <MX_TIM7_Init+0x64>)
 80041a8:	f002 f85e 	bl	8006268 <HAL_TIM_Base_Init>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80041b2:	f7ff fa01 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80041be:	463b      	mov	r3, r7
 80041c0:	4619      	mov	r1, r3
 80041c2:	4806      	ldr	r0, [pc, #24]	; (80041dc <MX_TIM7_Init+0x64>)
 80041c4:	f002 ffce 	bl	8007164 <HAL_TIMEx_MasterConfigSynchronization>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80041ce:	f7ff f9f3 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000638 	.word	0x20000638
 80041e0:	40001400 	.word	0x40001400

080041e4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08c      	sub	sp, #48	; 0x30
 80041e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80041ea:	f107 030c 	add.w	r3, r7, #12
 80041ee:	2224      	movs	r2, #36	; 0x24
 80041f0:	2100      	movs	r1, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	f004 f948 	bl	8008488 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041f8:	1d3b      	adds	r3, r7, #4
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004200:	4b22      	ldr	r3, [pc, #136]	; (800428c <MX_TIM8_Init+0xa8>)
 8004202:	4a23      	ldr	r2, [pc, #140]	; (8004290 <MX_TIM8_Init+0xac>)
 8004204:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004206:	4b21      	ldr	r3, [pc, #132]	; (800428c <MX_TIM8_Init+0xa8>)
 8004208:	2200      	movs	r2, #0
 800420a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800420c:	4b1f      	ldr	r3, [pc, #124]	; (800428c <MX_TIM8_Init+0xa8>)
 800420e:	2200      	movs	r2, #0
 8004210:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004212:	4b1e      	ldr	r3, [pc, #120]	; (800428c <MX_TIM8_Init+0xa8>)
 8004214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004218:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800421a:	4b1c      	ldr	r3, [pc, #112]	; (800428c <MX_TIM8_Init+0xa8>)
 800421c:	2200      	movs	r2, #0
 800421e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004220:	4b1a      	ldr	r3, [pc, #104]	; (800428c <MX_TIM8_Init+0xa8>)
 8004222:	2200      	movs	r2, #0
 8004224:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004226:	4b19      	ldr	r3, [pc, #100]	; (800428c <MX_TIM8_Init+0xa8>)
 8004228:	2200      	movs	r2, #0
 800422a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800422c:	2301      	movs	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004230:	2300      	movs	r3, #0
 8004232:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004234:	2301      	movs	r3, #1
 8004236:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004238:	2300      	movs	r3, #0
 800423a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004240:	2300      	movs	r3, #0
 8004242:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004244:	2301      	movs	r3, #1
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004248:	2300      	movs	r3, #0
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004250:	f107 030c 	add.w	r3, r7, #12
 8004254:	4619      	mov	r1, r3
 8004256:	480d      	ldr	r0, [pc, #52]	; (800428c <MX_TIM8_Init+0xa8>)
 8004258:	f002 f9de 	bl	8006618 <HAL_TIM_Encoder_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004262:	f7ff f9a9 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004266:	2300      	movs	r3, #0
 8004268:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	4619      	mov	r1, r3
 8004272:	4806      	ldr	r0, [pc, #24]	; (800428c <MX_TIM8_Init+0xa8>)
 8004274:	f002 ff76 	bl	8007164 <HAL_TIMEx_MasterConfigSynchronization>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800427e:	f7ff f99b 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004282:	bf00      	nop
 8004284:	3730      	adds	r7, #48	; 0x30
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000680 	.word	0x20000680
 8004290:	40010400 	.word	0x40010400

08004294 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800429a:	1d3b      	adds	r3, r7, #4
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	605a      	str	r2, [r3, #4]
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	60da      	str	r2, [r3, #12]
 80042a6:	611a      	str	r2, [r3, #16]
 80042a8:	615a      	str	r2, [r3, #20]
 80042aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80042ac:	4b20      	ldr	r3, [pc, #128]	; (8004330 <MX_TIM9_Init+0x9c>)
 80042ae:	4a21      	ldr	r2, [pc, #132]	; (8004334 <MX_TIM9_Init+0xa0>)
 80042b0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 3359;
 80042b2:	4b1f      	ldr	r3, [pc, #124]	; (8004330 <MX_TIM9_Init+0x9c>)
 80042b4:	f640 521f 	movw	r2, #3359	; 0xd1f
 80042b8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ba:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <MX_TIM9_Init+0x9c>)
 80042bc:	2200      	movs	r2, #0
 80042be:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80042c0:	4b1b      	ldr	r3, [pc, #108]	; (8004330 <MX_TIM9_Init+0x9c>)
 80042c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042c6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <MX_TIM9_Init+0x9c>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042ce:	4b18      	ldr	r3, [pc, #96]	; (8004330 <MX_TIM9_Init+0x9c>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80042d4:	4816      	ldr	r0, [pc, #88]	; (8004330 <MX_TIM9_Init+0x9c>)
 80042d6:	f002 f887 	bl	80063e8 <HAL_TIM_PWM_Init>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 80042e0:	f7ff f96a 	bl	80035b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042e4:	2360      	movs	r3, #96	; 0x60
 80042e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042f4:	1d3b      	adds	r3, r7, #4
 80042f6:	2200      	movs	r2, #0
 80042f8:	4619      	mov	r1, r3
 80042fa:	480d      	ldr	r0, [pc, #52]	; (8004330 <MX_TIM9_Init+0x9c>)
 80042fc:	f002 fbc8 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8004306:	f7ff f957 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800430a:	1d3b      	adds	r3, r7, #4
 800430c:	2204      	movs	r2, #4
 800430e:	4619      	mov	r1, r3
 8004310:	4807      	ldr	r0, [pc, #28]	; (8004330 <MX_TIM9_Init+0x9c>)
 8004312:	f002 fbbd 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 800431c:	f7ff f94c 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8004320:	4803      	ldr	r0, [pc, #12]	; (8004330 <MX_TIM9_Init+0x9c>)
 8004322:	f000 fa1f 	bl	8004764 <HAL_TIM_MspPostInit>

}
 8004326:	bf00      	nop
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	200006c8 	.word	0x200006c8
 8004334:	40014000 	.word	0x40014000

08004338 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800433e:	1d3b      	adds	r3, r7, #4
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	60da      	str	r2, [r3, #12]
 800434a:	611a      	str	r2, [r3, #16]
 800434c:	615a      	str	r2, [r3, #20]
 800434e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004350:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <MX_TIM12_Init+0x84>)
 8004352:	4a1b      	ldr	r2, [pc, #108]	; (80043c0 <MX_TIM12_Init+0x88>)
 8004354:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8004356:	4b19      	ldr	r3, [pc, #100]	; (80043bc <MX_TIM12_Init+0x84>)
 8004358:	2200      	movs	r2, #0
 800435a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800435c:	4b17      	ldr	r3, [pc, #92]	; (80043bc <MX_TIM12_Init+0x84>)
 800435e:	2200      	movs	r2, #0
 8004360:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8004362:	4b16      	ldr	r3, [pc, #88]	; (80043bc <MX_TIM12_Init+0x84>)
 8004364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004368:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800436a:	4b14      	ldr	r3, [pc, #80]	; (80043bc <MX_TIM12_Init+0x84>)
 800436c:	2200      	movs	r2, #0
 800436e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004370:	4b12      	ldr	r3, [pc, #72]	; (80043bc <MX_TIM12_Init+0x84>)
 8004372:	2200      	movs	r2, #0
 8004374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004376:	4811      	ldr	r0, [pc, #68]	; (80043bc <MX_TIM12_Init+0x84>)
 8004378:	f002 f836 	bl	80063e8 <HAL_TIM_PWM_Init>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8004382:	f7ff f919 	bl	80035b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004386:	2360      	movs	r3, #96	; 0x60
 8004388:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004396:	1d3b      	adds	r3, r7, #4
 8004398:	2200      	movs	r2, #0
 800439a:	4619      	mov	r1, r3
 800439c:	4807      	ldr	r0, [pc, #28]	; (80043bc <MX_TIM12_Init+0x84>)
 800439e:	f002 fb77 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80043a8:	f7ff f906 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80043ac:	4803      	ldr	r0, [pc, #12]	; (80043bc <MX_TIM12_Init+0x84>)
 80043ae:	f000 f9d9 	bl	8004764 <HAL_TIM_MspPostInit>

}
 80043b2:	bf00      	nop
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000710 	.word	0x20000710
 80043c0:	40001800 	.word	0x40001800

080043c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b092      	sub	sp, #72	; 0x48
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	60da      	str	r2, [r3, #12]
 80043da:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a8d      	ldr	r2, [pc, #564]	; (8004618 <HAL_TIM_Encoder_MspInit+0x254>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d12d      	bne.n	8004442 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	633b      	str	r3, [r7, #48]	; 0x30
 80043ea:	4b8c      	ldr	r3, [pc, #560]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	4a8b      	ldr	r2, [pc, #556]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	6453      	str	r3, [r2, #68]	; 0x44
 80043f6:	4b89      	ldr	r3, [pc, #548]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	633b      	str	r3, [r7, #48]	; 0x30
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004402:	2300      	movs	r3, #0
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004406:	4b85      	ldr	r3, [pc, #532]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	4a84      	ldr	r2, [pc, #528]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 800440c:	f043 0310 	orr.w	r3, r3, #16
 8004410:	6313      	str	r3, [r2, #48]	; 0x30
 8004412:	4b82      	ldr	r3, [pc, #520]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_4_A_Pin|ENC_4_B_Pin;
 800441e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004422:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004424:	2302      	movs	r3, #2
 8004426:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004428:	2301      	movs	r3, #1
 800442a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442c:	2300      	movs	r3, #0
 800442e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004430:	2301      	movs	r3, #1
 8004432:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004434:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004438:	4619      	mov	r1, r3
 800443a:	4879      	ldr	r0, [pc, #484]	; (8004620 <HAL_TIM_Encoder_MspInit+0x25c>)
 800443c:	f001 f8ae 	bl	800559c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004440:	e0e5      	b.n	800460e <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM2)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d14b      	bne.n	80044e4 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800444c:	2300      	movs	r3, #0
 800444e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004450:	4b72      	ldr	r3, [pc, #456]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	4a71      	ldr	r2, [pc, #452]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6413      	str	r3, [r2, #64]	; 0x40
 800445c:	4b6f      	ldr	r3, [pc, #444]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	62bb      	str	r3, [r7, #40]	; 0x28
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004468:	2300      	movs	r3, #0
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
 800446c:	4b6b      	ldr	r3, [pc, #428]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	4a6a      	ldr	r2, [pc, #424]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	6313      	str	r3, [r2, #48]	; 0x30
 8004478:	4b68      	ldr	r3, [pc, #416]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004484:	2300      	movs	r3, #0
 8004486:	623b      	str	r3, [r7, #32]
 8004488:	4b64      	ldr	r3, [pc, #400]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	4a63      	ldr	r2, [pc, #396]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 800448e:	f043 0302 	orr.w	r3, r3, #2
 8004492:	6313      	str	r3, [r2, #48]	; 0x30
 8004494:	4b61      	ldr	r3, [pc, #388]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	623b      	str	r3, [r7, #32]
 800449e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = ENC_2_A_Pin;
 80044a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a6:	2302      	movs	r3, #2
 80044a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044aa:	2301      	movs	r3, #1
 80044ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ae:	2300      	movs	r3, #0
 80044b0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044b2:	2301      	movs	r3, #1
 80044b4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ENC_2_A_GPIO_Port, &GPIO_InitStruct);
 80044b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044ba:	4619      	mov	r1, r3
 80044bc:	4859      	ldr	r0, [pc, #356]	; (8004624 <HAL_TIM_Encoder_MspInit+0x260>)
 80044be:	f001 f86d 	bl	800559c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_2_B_Pin;
 80044c2:	2308      	movs	r3, #8
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c6:	2302      	movs	r3, #2
 80044c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044ca:	2301      	movs	r3, #1
 80044cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ce:	2300      	movs	r3, #0
 80044d0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044d2:	2301      	movs	r3, #1
 80044d4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ENC_2_B_GPIO_Port, &GPIO_InitStruct);
 80044d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044da:	4619      	mov	r1, r3
 80044dc:	4852      	ldr	r0, [pc, #328]	; (8004628 <HAL_TIM_Encoder_MspInit+0x264>)
 80044de:	f001 f85d 	bl	800559c <HAL_GPIO_Init>
}
 80044e2:	e094      	b.n	800460e <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM3)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a50      	ldr	r2, [pc, #320]	; (800462c <HAL_TIM_Encoder_MspInit+0x268>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d12c      	bne.n	8004548 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	4b4a      	ldr	r3, [pc, #296]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	4a49      	ldr	r2, [pc, #292]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 80044f8:	f043 0302 	orr.w	r3, r3, #2
 80044fc:	6413      	str	r3, [r2, #64]	; 0x40
 80044fe:	4b47      	ldr	r3, [pc, #284]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	61fb      	str	r3, [r7, #28]
 8004508:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	61bb      	str	r3, [r7, #24]
 800450e:	4b43      	ldr	r3, [pc, #268]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	4a42      	ldr	r2, [pc, #264]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	6313      	str	r3, [r2, #48]	; 0x30
 800451a:	4b40      	ldr	r3, [pc, #256]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	61bb      	str	r3, [r7, #24]
 8004524:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_3_A_Pin|ENC_3_B_Pin;
 8004526:	23c0      	movs	r3, #192	; 0xc0
 8004528:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452a:	2302      	movs	r3, #2
 800452c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800452e:	2301      	movs	r3, #1
 8004530:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004532:	2300      	movs	r3, #0
 8004534:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004536:	2302      	movs	r3, #2
 8004538:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800453a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800453e:	4619      	mov	r1, r3
 8004540:	4838      	ldr	r0, [pc, #224]	; (8004624 <HAL_TIM_Encoder_MspInit+0x260>)
 8004542:	f001 f82b 	bl	800559c <HAL_GPIO_Init>
}
 8004546:	e062      	b.n	800460e <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM5)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a38      	ldr	r2, [pc, #224]	; (8004630 <HAL_TIM_Encoder_MspInit+0x26c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d12c      	bne.n	80045ac <HAL_TIM_Encoder_MspInit+0x1e8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	4b31      	ldr	r3, [pc, #196]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	4a30      	ldr	r2, [pc, #192]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 800455c:	f043 0308 	orr.w	r3, r3, #8
 8004560:	6413      	str	r3, [r2, #64]	; 0x40
 8004562:	4b2e      	ldr	r3, [pc, #184]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	4b2a      	ldr	r3, [pc, #168]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	4a29      	ldr	r2, [pc, #164]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6313      	str	r3, [r2, #48]	; 0x30
 800457e:	4b27      	ldr	r3, [pc, #156]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_5_A_Pin|ENC_5_B_Pin;
 800458a:	2303      	movs	r3, #3
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458e:	2302      	movs	r3, #2
 8004590:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004592:	2301      	movs	r3, #1
 8004594:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004596:	2300      	movs	r3, #0
 8004598:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800459a:	2302      	movs	r3, #2
 800459c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800459e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80045a2:	4619      	mov	r1, r3
 80045a4:	481f      	ldr	r0, [pc, #124]	; (8004624 <HAL_TIM_Encoder_MspInit+0x260>)
 80045a6:	f000 fff9 	bl	800559c <HAL_GPIO_Init>
}
 80045aa:	e030      	b.n	800460e <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM8)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a20      	ldr	r2, [pc, #128]	; (8004634 <HAL_TIM_Encoder_MspInit+0x270>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d12b      	bne.n	800460e <HAL_TIM_Encoder_MspInit+0x24a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	4b18      	ldr	r3, [pc, #96]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	4a17      	ldr	r2, [pc, #92]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 80045c0:	f043 0302 	orr.w	r3, r3, #2
 80045c4:	6453      	str	r3, [r2, #68]	; 0x44
 80045c6:	4b15      	ldr	r3, [pc, #84]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	4b11      	ldr	r3, [pc, #68]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	4a10      	ldr	r2, [pc, #64]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 80045dc:	f043 0304 	orr.w	r3, r3, #4
 80045e0:	6313      	str	r3, [r2, #48]	; 0x30
 80045e2:	4b0e      	ldr	r3, [pc, #56]	; (800461c <HAL_TIM_Encoder_MspInit+0x258>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_1_A_Pin|ENC_1_B_Pin;
 80045ee:	23c0      	movs	r3, #192	; 0xc0
 80045f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f2:	2302      	movs	r3, #2
 80045f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045f6:	2301      	movs	r3, #1
 80045f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fa:	2300      	movs	r3, #0
 80045fc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80045fe:	2303      	movs	r3, #3
 8004600:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004602:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004606:	4619      	mov	r1, r3
 8004608:	480b      	ldr	r0, [pc, #44]	; (8004638 <HAL_TIM_Encoder_MspInit+0x274>)
 800460a:	f000 ffc7 	bl	800559c <HAL_GPIO_Init>
}
 800460e:	bf00      	nop
 8004610:	3748      	adds	r7, #72	; 0x48
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40010000 	.word	0x40010000
 800461c:	40023800 	.word	0x40023800
 8004620:	40021000 	.word	0x40021000
 8004624:	40020000 	.word	0x40020000
 8004628:	40020400 	.word	0x40020400
 800462c:	40000400 	.word	0x40000400
 8004630:	40000c00 	.word	0x40000c00
 8004634:	40010400 	.word	0x40010400
 8004638:	40020800 	.word	0x40020800

0800463c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1f      	ldr	r2, [pc, #124]	; (80046c8 <HAL_TIM_PWM_MspInit+0x8c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d10e      	bne.n	800466c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	4b1e      	ldr	r3, [pc, #120]	; (80046cc <HAL_TIM_PWM_MspInit+0x90>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	4a1d      	ldr	r2, [pc, #116]	; (80046cc <HAL_TIM_PWM_MspInit+0x90>)
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	6413      	str	r3, [r2, #64]	; 0x40
 800465e:	4b1b      	ldr	r3, [pc, #108]	; (80046cc <HAL_TIM_PWM_MspInit+0x90>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800466a:	e026      	b.n	80046ba <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM9)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <HAL_TIM_PWM_MspInit+0x94>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d10e      	bne.n	8004694 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	4b14      	ldr	r3, [pc, #80]	; (80046cc <HAL_TIM_PWM_MspInit+0x90>)
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	4a13      	ldr	r2, [pc, #76]	; (80046cc <HAL_TIM_PWM_MspInit+0x90>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004684:	6453      	str	r3, [r2, #68]	; 0x44
 8004686:	4b11      	ldr	r3, [pc, #68]	; (80046cc <HAL_TIM_PWM_MspInit+0x90>)
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	693b      	ldr	r3, [r7, #16]
}
 8004692:	e012      	b.n	80046ba <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a0e      	ldr	r2, [pc, #56]	; (80046d4 <HAL_TIM_PWM_MspInit+0x98>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10d      	bne.n	80046ba <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <HAL_TIM_PWM_MspInit+0x90>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	4a09      	ldr	r2, [pc, #36]	; (80046cc <HAL_TIM_PWM_MspInit+0x90>)
 80046a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ac:	6413      	str	r3, [r2, #64]	; 0x40
 80046ae:	4b07      	ldr	r3, [pc, #28]	; (80046cc <HAL_TIM_PWM_MspInit+0x90>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
}
 80046ba:	bf00      	nop
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40000800 	.word	0x40000800
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40014000 	.word	0x40014000
 80046d4:	40001800 	.word	0x40001800

080046d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1c      	ldr	r2, [pc, #112]	; (8004758 <HAL_TIM_Base_MspInit+0x80>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d116      	bne.n	8004718 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	4b1b      	ldr	r3, [pc, #108]	; (800475c <HAL_TIM_Base_MspInit+0x84>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	4a1a      	ldr	r2, [pc, #104]	; (800475c <HAL_TIM_Base_MspInit+0x84>)
 80046f4:	f043 0310 	orr.w	r3, r3, #16
 80046f8:	6413      	str	r3, [r2, #64]	; 0x40
 80046fa:	4b18      	ldr	r3, [pc, #96]	; (800475c <HAL_TIM_Base_MspInit+0x84>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004706:	2200      	movs	r2, #0
 8004708:	2100      	movs	r1, #0
 800470a:	2036      	movs	r0, #54	; 0x36
 800470c:	f000 fb0d 	bl	8004d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004710:	2036      	movs	r0, #54	; 0x36
 8004712:	f000 fb26 	bl	8004d62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004716:	e01a      	b.n	800474e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a10      	ldr	r2, [pc, #64]	; (8004760 <HAL_TIM_Base_MspInit+0x88>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d115      	bne.n	800474e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004722:	2300      	movs	r3, #0
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	4b0d      	ldr	r3, [pc, #52]	; (800475c <HAL_TIM_Base_MspInit+0x84>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	4a0c      	ldr	r2, [pc, #48]	; (800475c <HAL_TIM_Base_MspInit+0x84>)
 800472c:	f043 0320 	orr.w	r3, r3, #32
 8004730:	6413      	str	r3, [r2, #64]	; 0x40
 8004732:	4b0a      	ldr	r3, [pc, #40]	; (800475c <HAL_TIM_Base_MspInit+0x84>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	60bb      	str	r3, [r7, #8]
 800473c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 1);
 800473e:	2201      	movs	r2, #1
 8004740:	2100      	movs	r1, #0
 8004742:	2037      	movs	r0, #55	; 0x37
 8004744:	f000 faf1 	bl	8004d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004748:	2037      	movs	r0, #55	; 0x37
 800474a:	f000 fb0a 	bl	8004d62 <HAL_NVIC_EnableIRQ>
}
 800474e:	bf00      	nop
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40001000 	.word	0x40001000
 800475c:	40023800 	.word	0x40023800
 8004760:	40001400 	.word	0x40001400

08004764 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	; 0x28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476c:	f107 0314 	add.w	r3, r7, #20
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	60da      	str	r2, [r3, #12]
 800477a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a37      	ldr	r2, [pc, #220]	; (8004860 <HAL_TIM_MspPostInit+0xfc>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d11f      	bne.n	80047c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004786:	2300      	movs	r3, #0
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	4b36      	ldr	r3, [pc, #216]	; (8004864 <HAL_TIM_MspPostInit+0x100>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	4a35      	ldr	r2, [pc, #212]	; (8004864 <HAL_TIM_MspPostInit+0x100>)
 8004790:	f043 0308 	orr.w	r3, r3, #8
 8004794:	6313      	str	r3, [r2, #48]	; 0x30
 8004796:	4b33      	ldr	r3, [pc, #204]	; (8004864 <HAL_TIM_MspPostInit+0x100>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = pwm1_MT_Pin|pwm2_MT_Pin|pwm3_MT_Pin|pwm4_MT_Pin;
 80047a2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80047a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a8:	2302      	movs	r3, #2
 80047aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047ac:	2301      	movs	r3, #1
 80047ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047b0:	2300      	movs	r3, #0
 80047b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80047b4:	2302      	movs	r3, #2
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047b8:	f107 0314 	add.w	r3, r7, #20
 80047bc:	4619      	mov	r1, r3
 80047be:	482a      	ldr	r0, [pc, #168]	; (8004868 <HAL_TIM_MspPostInit+0x104>)
 80047c0:	f000 feec 	bl	800559c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80047c4:	e047      	b.n	8004856 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM9)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a28      	ldr	r2, [pc, #160]	; (800486c <HAL_TIM_MspPostInit+0x108>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d11e      	bne.n	800480e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	4b23      	ldr	r3, [pc, #140]	; (8004864 <HAL_TIM_MspPostInit+0x100>)
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	4a22      	ldr	r2, [pc, #136]	; (8004864 <HAL_TIM_MspPostInit+0x100>)
 80047da:	f043 0310 	orr.w	r3, r3, #16
 80047de:	6313      	str	r3, [r2, #48]	; 0x30
 80047e0:	4b20      	ldr	r3, [pc, #128]	; (8004864 <HAL_TIM_MspPostInit+0x100>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = servo_2_Pin|servo_1_Pin;
 80047ec:	2360      	movs	r3, #96	; 0x60
 80047ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f0:	2302      	movs	r3, #2
 80047f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047f4:	2301      	movs	r3, #1
 80047f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f8:	2300      	movs	r3, #0
 80047fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80047fc:	2303      	movs	r3, #3
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004800:	f107 0314 	add.w	r3, r7, #20
 8004804:	4619      	mov	r1, r3
 8004806:	481a      	ldr	r0, [pc, #104]	; (8004870 <HAL_TIM_MspPostInit+0x10c>)
 8004808:	f000 fec8 	bl	800559c <HAL_GPIO_Init>
}
 800480c:	e023      	b.n	8004856 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM12)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a18      	ldr	r2, [pc, #96]	; (8004874 <HAL_TIM_MspPostInit+0x110>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d11e      	bne.n	8004856 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004818:	2300      	movs	r3, #0
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	4b11      	ldr	r3, [pc, #68]	; (8004864 <HAL_TIM_MspPostInit+0x100>)
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	4a10      	ldr	r2, [pc, #64]	; (8004864 <HAL_TIM_MspPostInit+0x100>)
 8004822:	f043 0302 	orr.w	r3, r3, #2
 8004826:	6313      	str	r3, [r2, #48]	; 0x30
 8004828:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <HAL_TIM_MspPostInit+0x100>)
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = pwm5_MT_Pin;
 8004834:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483a:	2302      	movs	r3, #2
 800483c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800483e:	2301      	movs	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004842:	2300      	movs	r3, #0
 8004844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004846:	2309      	movs	r3, #9
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(pwm5_MT_GPIO_Port, &GPIO_InitStruct);
 800484a:	f107 0314 	add.w	r3, r7, #20
 800484e:	4619      	mov	r1, r3
 8004850:	4809      	ldr	r0, [pc, #36]	; (8004878 <HAL_TIM_MspPostInit+0x114>)
 8004852:	f000 fea3 	bl	800559c <HAL_GPIO_Init>
}
 8004856:	bf00      	nop
 8004858:	3728      	adds	r7, #40	; 0x28
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40000800 	.word	0x40000800
 8004864:	40023800 	.word	0x40023800
 8004868:	40020c00 	.word	0x40020c00
 800486c:	40014000 	.word	0x40014000
 8004870:	40021000 	.word	0x40021000
 8004874:	40001800 	.word	0x40001800
 8004878:	40020400 	.word	0x40020400

0800487c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004880:	4b11      	ldr	r3, [pc, #68]	; (80048c8 <MX_USART1_UART_Init+0x4c>)
 8004882:	4a12      	ldr	r2, [pc, #72]	; (80048cc <MX_USART1_UART_Init+0x50>)
 8004884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <MX_USART1_UART_Init+0x4c>)
 8004888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800488c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800488e:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <MX_USART1_UART_Init+0x4c>)
 8004890:	2200      	movs	r2, #0
 8004892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <MX_USART1_UART_Init+0x4c>)
 8004896:	2200      	movs	r2, #0
 8004898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800489a:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <MX_USART1_UART_Init+0x4c>)
 800489c:	2200      	movs	r2, #0
 800489e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <MX_USART1_UART_Init+0x4c>)
 80048a2:	220c      	movs	r2, #12
 80048a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048a6:	4b08      	ldr	r3, [pc, #32]	; (80048c8 <MX_USART1_UART_Init+0x4c>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048ac:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <MX_USART1_UART_Init+0x4c>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048b2:	4805      	ldr	r0, [pc, #20]	; (80048c8 <MX_USART1_UART_Init+0x4c>)
 80048b4:	f002 fce6 	bl	8007284 <HAL_UART_Init>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80048be:	f7fe fe7b 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000758 	.word	0x20000758
 80048cc:	40011000 	.word	0x40011000

080048d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08a      	sub	sp, #40	; 0x28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d8:	f107 0314 	add.w	r3, r7, #20
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a4c      	ldr	r2, [pc, #304]	; (8004a20 <HAL_UART_MspInit+0x150>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	f040 8092 	bne.w	8004a18 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048f4:	2300      	movs	r3, #0
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	4b4a      	ldr	r3, [pc, #296]	; (8004a24 <HAL_UART_MspInit+0x154>)
 80048fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fc:	4a49      	ldr	r2, [pc, #292]	; (8004a24 <HAL_UART_MspInit+0x154>)
 80048fe:	f043 0310 	orr.w	r3, r3, #16
 8004902:	6453      	str	r3, [r2, #68]	; 0x44
 8004904:	4b47      	ldr	r3, [pc, #284]	; (8004a24 <HAL_UART_MspInit+0x154>)
 8004906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	4b43      	ldr	r3, [pc, #268]	; (8004a24 <HAL_UART_MspInit+0x154>)
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	4a42      	ldr	r2, [pc, #264]	; (8004a24 <HAL_UART_MspInit+0x154>)
 800491a:	f043 0302 	orr.w	r3, r3, #2
 800491e:	6313      	str	r3, [r2, #48]	; 0x30
 8004920:	4b40      	ldr	r3, [pc, #256]	; (8004a24 <HAL_UART_MspInit+0x154>)
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800492c:	23c0      	movs	r3, #192	; 0xc0
 800492e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004930:	2302      	movs	r3, #2
 8004932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004934:	2300      	movs	r3, #0
 8004936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004938:	2303      	movs	r3, #3
 800493a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800493c:	2307      	movs	r3, #7
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004940:	f107 0314 	add.w	r3, r7, #20
 8004944:	4619      	mov	r1, r3
 8004946:	4838      	ldr	r0, [pc, #224]	; (8004a28 <HAL_UART_MspInit+0x158>)
 8004948:	f000 fe28 	bl	800559c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800494c:	4b37      	ldr	r3, [pc, #220]	; (8004a2c <HAL_UART_MspInit+0x15c>)
 800494e:	4a38      	ldr	r2, [pc, #224]	; (8004a30 <HAL_UART_MspInit+0x160>)
 8004950:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004952:	4b36      	ldr	r3, [pc, #216]	; (8004a2c <HAL_UART_MspInit+0x15c>)
 8004954:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004958:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800495a:	4b34      	ldr	r3, [pc, #208]	; (8004a2c <HAL_UART_MspInit+0x15c>)
 800495c:	2200      	movs	r2, #0
 800495e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004960:	4b32      	ldr	r3, [pc, #200]	; (8004a2c <HAL_UART_MspInit+0x15c>)
 8004962:	2200      	movs	r2, #0
 8004964:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004966:	4b31      	ldr	r3, [pc, #196]	; (8004a2c <HAL_UART_MspInit+0x15c>)
 8004968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800496c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800496e:	4b2f      	ldr	r3, [pc, #188]	; (8004a2c <HAL_UART_MspInit+0x15c>)
 8004970:	2200      	movs	r2, #0
 8004972:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004974:	4b2d      	ldr	r3, [pc, #180]	; (8004a2c <HAL_UART_MspInit+0x15c>)
 8004976:	2200      	movs	r2, #0
 8004978:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800497a:	4b2c      	ldr	r3, [pc, #176]	; (8004a2c <HAL_UART_MspInit+0x15c>)
 800497c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004980:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004982:	4b2a      	ldr	r3, [pc, #168]	; (8004a2c <HAL_UART_MspInit+0x15c>)
 8004984:	2200      	movs	r2, #0
 8004986:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004988:	4b28      	ldr	r3, [pc, #160]	; (8004a2c <HAL_UART_MspInit+0x15c>)
 800498a:	2200      	movs	r2, #0
 800498c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800498e:	4827      	ldr	r0, [pc, #156]	; (8004a2c <HAL_UART_MspInit+0x15c>)
 8004990:	f000 fa02 	bl	8004d98 <HAL_DMA_Init>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800499a:	f7fe fe0d 	bl	80035b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a22      	ldr	r2, [pc, #136]	; (8004a2c <HAL_UART_MspInit+0x15c>)
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38
 80049a4:	4a21      	ldr	r2, [pc, #132]	; (8004a2c <HAL_UART_MspInit+0x15c>)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80049aa:	4b22      	ldr	r3, [pc, #136]	; (8004a34 <HAL_UART_MspInit+0x164>)
 80049ac:	4a22      	ldr	r2, [pc, #136]	; (8004a38 <HAL_UART_MspInit+0x168>)
 80049ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80049b0:	4b20      	ldr	r3, [pc, #128]	; (8004a34 <HAL_UART_MspInit+0x164>)
 80049b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049b8:	4b1e      	ldr	r3, [pc, #120]	; (8004a34 <HAL_UART_MspInit+0x164>)
 80049ba:	2240      	movs	r2, #64	; 0x40
 80049bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049be:	4b1d      	ldr	r3, [pc, #116]	; (8004a34 <HAL_UART_MspInit+0x164>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049c4:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <HAL_UART_MspInit+0x164>)
 80049c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049cc:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <HAL_UART_MspInit+0x164>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049d2:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <HAL_UART_MspInit+0x164>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80049d8:	4b16      	ldr	r3, [pc, #88]	; (8004a34 <HAL_UART_MspInit+0x164>)
 80049da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049de:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80049e0:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <HAL_UART_MspInit+0x164>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049e6:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <HAL_UART_MspInit+0x164>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80049ec:	4811      	ldr	r0, [pc, #68]	; (8004a34 <HAL_UART_MspInit+0x164>)
 80049ee:	f000 f9d3 	bl	8004d98 <HAL_DMA_Init>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80049f8:	f7fe fdde 	bl	80035b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a0d      	ldr	r2, [pc, #52]	; (8004a34 <HAL_UART_MspInit+0x164>)
 8004a00:	635a      	str	r2, [r3, #52]	; 0x34
 8004a02:	4a0c      	ldr	r2, [pc, #48]	; (8004a34 <HAL_UART_MspInit+0x164>)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	2025      	movs	r0, #37	; 0x25
 8004a0e:	f000 f98c 	bl	8004d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a12:	2025      	movs	r0, #37	; 0x25
 8004a14:	f000 f9a5 	bl	8004d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004a18:	bf00      	nop
 8004a1a:	3728      	adds	r7, #40	; 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40011000 	.word	0x40011000
 8004a24:	40023800 	.word	0x40023800
 8004a28:	40020400 	.word	0x40020400
 8004a2c:	2000079c 	.word	0x2000079c
 8004a30:	40026440 	.word	0x40026440
 8004a34:	200007fc 	.word	0x200007fc
 8004a38:	400264b8 	.word	0x400264b8

08004a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a40:	480d      	ldr	r0, [pc, #52]	; (8004a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004a42:	490e      	ldr	r1, [pc, #56]	; (8004a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004a44:	4a0e      	ldr	r2, [pc, #56]	; (8004a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a48:	e002      	b.n	8004a50 <LoopCopyDataInit>

08004a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a4e:	3304      	adds	r3, #4

08004a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a54:	d3f9      	bcc.n	8004a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a56:	4a0b      	ldr	r2, [pc, #44]	; (8004a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004a58:	4c0b      	ldr	r4, [pc, #44]	; (8004a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a5c:	e001      	b.n	8004a62 <LoopFillZerobss>

08004a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a60:	3204      	adds	r2, #4

08004a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a64:	d3fb      	bcc.n	8004a5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a66:	f7ff f971 	bl	8003d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a6a:	f003 fd1b 	bl	80084a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a6e:	f7fe fc31 	bl	80032d4 <main>
  bx  lr    
 8004a72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004a74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a7c:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8004a80:	080098e8 	.word	0x080098e8
  ldr r2, =_sbss
 8004a84:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8004a88:	20000998 	.word	0x20000998

08004a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a8c:	e7fe      	b.n	8004a8c <ADC_IRQHandler>
	...

08004a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a94:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <HAL_Init+0x40>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a0d      	ldr	r2, [pc, #52]	; (8004ad0 <HAL_Init+0x40>)
 8004a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <HAL_Init+0x40>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <HAL_Init+0x40>)
 8004aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004aac:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <HAL_Init+0x40>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a07      	ldr	r2, [pc, #28]	; (8004ad0 <HAL_Init+0x40>)
 8004ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ab8:	2003      	movs	r0, #3
 8004aba:	f000 f92b 	bl	8004d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004abe:	2000      	movs	r0, #0
 8004ac0:	f000 f808 	bl	8004ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ac4:	f7fe fd7e 	bl	80035c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40023c00 	.word	0x40023c00

08004ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004adc:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <HAL_InitTick+0x54>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <HAL_InitTick+0x58>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 f943 	bl	8004d7e <HAL_SYSTICK_Config>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e00e      	b.n	8004b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b0f      	cmp	r3, #15
 8004b06:	d80a      	bhi.n	8004b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b08:	2200      	movs	r2, #0
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	f000 f90b 	bl	8004d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b14:	4a06      	ldr	r2, [pc, #24]	; (8004b30 <HAL_InitTick+0x5c>)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e000      	b.n	8004b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20000078 	.word	0x20000078
 8004b2c:	20000080 	.word	0x20000080
 8004b30:	2000007c 	.word	0x2000007c

08004b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <HAL_IncTick+0x20>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HAL_IncTick+0x24>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4413      	add	r3, r2
 8004b44:	4a04      	ldr	r2, [pc, #16]	; (8004b58 <HAL_IncTick+0x24>)
 8004b46:	6013      	str	r3, [r2, #0]
}
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	20000080 	.word	0x20000080
 8004b58:	2000085c 	.word	0x2000085c

08004b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8004b60:	4b03      	ldr	r3, [pc, #12]	; (8004b70 <HAL_GetTick+0x14>)
 8004b62:	681b      	ldr	r3, [r3, #0]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	2000085c 	.word	0x2000085c

08004b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b84:	4b0c      	ldr	r3, [pc, #48]	; (8004bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b90:	4013      	ands	r3, r2
 8004b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ba6:	4a04      	ldr	r2, [pc, #16]	; (8004bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	60d3      	str	r3, [r2, #12]
}
 8004bac:	bf00      	nop
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bc0:	4b04      	ldr	r3, [pc, #16]	; (8004bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	0a1b      	lsrs	r3, r3, #8
 8004bc6:	f003 0307 	and.w	r3, r3, #7
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	e000ed00 	.word	0xe000ed00

08004bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	db0b      	blt.n	8004c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	f003 021f 	and.w	r2, r3, #31
 8004bf0:	4907      	ldr	r1, [pc, #28]	; (8004c10 <__NVIC_EnableIRQ+0x38>)
 8004bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8004bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	e000e100 	.word	0xe000e100

08004c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	6039      	str	r1, [r7, #0]
 8004c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	db0a      	blt.n	8004c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	490c      	ldr	r1, [pc, #48]	; (8004c60 <__NVIC_SetPriority+0x4c>)
 8004c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c32:	0112      	lsls	r2, r2, #4
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	440b      	add	r3, r1
 8004c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c3c:	e00a      	b.n	8004c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	4908      	ldr	r1, [pc, #32]	; (8004c64 <__NVIC_SetPriority+0x50>)
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	3b04      	subs	r3, #4
 8004c4c:	0112      	lsls	r2, r2, #4
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	440b      	add	r3, r1
 8004c52:	761a      	strb	r2, [r3, #24]
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	e000e100 	.word	0xe000e100
 8004c64:	e000ed00 	.word	0xe000ed00

08004c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b089      	sub	sp, #36	; 0x24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f1c3 0307 	rsb	r3, r3, #7
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	bf28      	it	cs
 8004c86:	2304      	movcs	r3, #4
 8004c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	2b06      	cmp	r3, #6
 8004c90:	d902      	bls.n	8004c98 <NVIC_EncodePriority+0x30>
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	3b03      	subs	r3, #3
 8004c96:	e000      	b.n	8004c9a <NVIC_EncodePriority+0x32>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	43da      	mvns	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	401a      	ands	r2, r3
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cba:	43d9      	mvns	r1, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc0:	4313      	orrs	r3, r2
         );
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3724      	adds	r7, #36	; 0x24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ce0:	d301      	bcc.n	8004ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e00f      	b.n	8004d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ce6:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <SysTick_Config+0x40>)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cee:	210f      	movs	r1, #15
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	f7ff ff8e 	bl	8004c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <SysTick_Config+0x40>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cfe:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <SysTick_Config+0x40>)
 8004d00:	2207      	movs	r2, #7
 8004d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	e000e010 	.word	0xe000e010

08004d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff ff29 	bl	8004b74 <__NVIC_SetPriorityGrouping>
}
 8004d22:	bf00      	nop
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b086      	sub	sp, #24
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	4603      	mov	r3, r0
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d3c:	f7ff ff3e 	bl	8004bbc <__NVIC_GetPriorityGrouping>
 8004d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	6978      	ldr	r0, [r7, #20]
 8004d48:	f7ff ff8e 	bl	8004c68 <NVIC_EncodePriority>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d52:	4611      	mov	r1, r2
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff ff5d 	bl	8004c14 <__NVIC_SetPriority>
}
 8004d5a:	bf00      	nop
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	4603      	mov	r3, r0
 8004d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff ff31 	bl	8004bd8 <__NVIC_EnableIRQ>
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff ffa2 	bl	8004cd0 <SysTick_Config>
 8004d8c:	4603      	mov	r3, r0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004da4:	f7ff feda 	bl	8004b5c <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e099      	b.n	8004ee8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0201 	bic.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dd4:	e00f      	b.n	8004df6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dd6:	f7ff fec1 	bl	8004b5c <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b05      	cmp	r3, #5
 8004de2:	d908      	bls.n	8004df6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2203      	movs	r2, #3
 8004dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e078      	b.n	8004ee8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e8      	bne.n	8004dd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4b38      	ldr	r3, [pc, #224]	; (8004ef0 <HAL_DMA_Init+0x158>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d107      	bne.n	8004e60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f023 0307 	bic.w	r3, r3, #7
 8004e76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d117      	bne.n	8004eba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00e      	beq.n	8004eba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fb01 	bl	80054a4 <DMA_CheckFifoParam>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2240      	movs	r2, #64	; 0x40
 8004eac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e016      	b.n	8004ee8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fab8 	bl	8005438 <DMA_CalcBaseAndBitshift>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed0:	223f      	movs	r2, #63	; 0x3f
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	f010803f 	.word	0xf010803f

08004ef4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_DMA_Start_IT+0x26>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e040      	b.n	8004f9c <HAL_DMA_Start_IT+0xa8>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d12f      	bne.n	8004f8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fa4a 	bl	80053dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4c:	223f      	movs	r2, #63	; 0x3f
 8004f4e:	409a      	lsls	r2, r3
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0216 	orr.w	r2, r2, #22
 8004f62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0208 	orr.w	r2, r2, #8
 8004f7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	e005      	b.n	8004f9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f96:	2302      	movs	r3, #2
 8004f98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004fb2:	f7ff fdd3 	bl	8004b5c <HAL_GetTick>
 8004fb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d008      	beq.n	8004fd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2280      	movs	r2, #128	; 0x80
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e052      	b.n	800507c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0216 	bic.w	r2, r2, #22
 8004fe4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ff4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <HAL_DMA_Abort+0x62>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0208 	bic.w	r2, r2, #8
 8005014:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0201 	bic.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005026:	e013      	b.n	8005050 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005028:	f7ff fd98 	bl	8004b5c <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b05      	cmp	r3, #5
 8005034:	d90c      	bls.n	8005050 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2203      	movs	r2, #3
 8005040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e015      	b.n	800507c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e4      	bne.n	8005028 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005062:	223f      	movs	r2, #63	; 0x3f
 8005064:	409a      	lsls	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d004      	beq.n	80050a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2280      	movs	r2, #128	; 0x80
 800509c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e00c      	b.n	80050bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2205      	movs	r2, #5
 80050a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050d4:	4b8e      	ldr	r3, [pc, #568]	; (8005310 <HAL_DMA_IRQHandler+0x248>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a8e      	ldr	r2, [pc, #568]	; (8005314 <HAL_DMA_IRQHandler+0x24c>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	0a9b      	lsrs	r3, r3, #10
 80050e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f2:	2208      	movs	r2, #8
 80050f4:	409a      	lsls	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01a      	beq.n	8005134 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d013      	beq.n	8005134 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0204 	bic.w	r2, r2, #4
 800511a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005120:	2208      	movs	r2, #8
 8005122:	409a      	lsls	r2, r3
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512c:	f043 0201 	orr.w	r2, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005138:	2201      	movs	r2, #1
 800513a:	409a      	lsls	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4013      	ands	r3, r2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d012      	beq.n	800516a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005156:	2201      	movs	r2, #1
 8005158:	409a      	lsls	r2, r3
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	f043 0202 	orr.w	r2, r3, #2
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516e:	2204      	movs	r2, #4
 8005170:	409a      	lsls	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4013      	ands	r3, r2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d012      	beq.n	80051a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00b      	beq.n	80051a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518c:	2204      	movs	r2, #4
 800518e:	409a      	lsls	r2, r3
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005198:	f043 0204 	orr.w	r2, r3, #4
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a4:	2210      	movs	r2, #16
 80051a6:	409a      	lsls	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d043      	beq.n	8005238 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d03c      	beq.n	8005238 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c2:	2210      	movs	r2, #16
 80051c4:	409a      	lsls	r2, r3
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d018      	beq.n	800520a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d108      	bne.n	80051f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d024      	beq.n	8005238 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	4798      	blx	r3
 80051f6:	e01f      	b.n	8005238 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01b      	beq.n	8005238 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	4798      	blx	r3
 8005208:	e016      	b.n	8005238 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d107      	bne.n	8005228 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0208 	bic.w	r2, r2, #8
 8005226:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523c:	2220      	movs	r2, #32
 800523e:	409a      	lsls	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4013      	ands	r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 808f 	beq.w	8005368 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 8087 	beq.w	8005368 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525e:	2220      	movs	r2, #32
 8005260:	409a      	lsls	r2, r3
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b05      	cmp	r3, #5
 8005270:	d136      	bne.n	80052e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0216 	bic.w	r2, r2, #22
 8005280:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695a      	ldr	r2, [r3, #20]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005290:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	d103      	bne.n	80052a2 <HAL_DMA_IRQHandler+0x1da>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0208 	bic.w	r2, r2, #8
 80052b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b6:	223f      	movs	r2, #63	; 0x3f
 80052b8:	409a      	lsls	r2, r3
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d07e      	beq.n	80053d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	4798      	blx	r3
        }
        return;
 80052de:	e079      	b.n	80053d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d01d      	beq.n	800532a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10d      	bne.n	8005318 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005300:	2b00      	cmp	r3, #0
 8005302:	d031      	beq.n	8005368 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	4798      	blx	r3
 800530c:	e02c      	b.n	8005368 <HAL_DMA_IRQHandler+0x2a0>
 800530e:	bf00      	nop
 8005310:	20000078 	.word	0x20000078
 8005314:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531c:	2b00      	cmp	r3, #0
 800531e:	d023      	beq.n	8005368 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4798      	blx	r3
 8005328:	e01e      	b.n	8005368 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10f      	bne.n	8005358 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0210 	bic.w	r2, r2, #16
 8005346:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	2b00      	cmp	r3, #0
 800536e:	d032      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d022      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2205      	movs	r2, #5
 8005380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	3301      	adds	r3, #1
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	429a      	cmp	r2, r3
 800539e:	d307      	bcc.n	80053b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1f2      	bne.n	8005394 <HAL_DMA_IRQHandler+0x2cc>
 80053ae:	e000      	b.n	80053b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80053b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	4798      	blx	r3
 80053d2:	e000      	b.n	80053d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80053d4:	bf00      	nop
    }
  }
}
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b40      	cmp	r3, #64	; 0x40
 8005408:	d108      	bne.n	800541c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800541a:	e007      	b.n	800542c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	60da      	str	r2, [r3, #12]
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	3b10      	subs	r3, #16
 8005448:	4a14      	ldr	r2, [pc, #80]	; (800549c <DMA_CalcBaseAndBitshift+0x64>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	091b      	lsrs	r3, r3, #4
 8005450:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005452:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <DMA_CalcBaseAndBitshift+0x68>)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b03      	cmp	r3, #3
 8005464:	d909      	bls.n	800547a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800546e:	f023 0303 	bic.w	r3, r3, #3
 8005472:	1d1a      	adds	r2, r3, #4
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	659a      	str	r2, [r3, #88]	; 0x58
 8005478:	e007      	b.n	800548a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005482:	f023 0303 	bic.w	r3, r3, #3
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	aaaaaaab 	.word	0xaaaaaaab
 80054a0:	080096f4 	.word	0x080096f4

080054a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d11f      	bne.n	80054fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d856      	bhi.n	8005572 <DMA_CheckFifoParam+0xce>
 80054c4:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <DMA_CheckFifoParam+0x28>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080054ef 	.word	0x080054ef
 80054d4:	080054dd 	.word	0x080054dd
 80054d8:	08005573 	.word	0x08005573
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d046      	beq.n	8005576 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ec:	e043      	b.n	8005576 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054f6:	d140      	bne.n	800557a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054fc:	e03d      	b.n	800557a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005506:	d121      	bne.n	800554c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b03      	cmp	r3, #3
 800550c:	d837      	bhi.n	800557e <DMA_CheckFifoParam+0xda>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <DMA_CheckFifoParam+0x70>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005525 	.word	0x08005525
 8005518:	0800552b 	.word	0x0800552b
 800551c:	08005525 	.word	0x08005525
 8005520:	0800553d 	.word	0x0800553d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
      break;
 8005528:	e030      	b.n	800558c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d025      	beq.n	8005582 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800553a:	e022      	b.n	8005582 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005544:	d11f      	bne.n	8005586 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800554a:	e01c      	b.n	8005586 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d903      	bls.n	800555a <DMA_CheckFifoParam+0xb6>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b03      	cmp	r3, #3
 8005556:	d003      	beq.n	8005560 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005558:	e018      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	73fb      	strb	r3, [r7, #15]
      break;
 800555e:	e015      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00e      	beq.n	800558a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	73fb      	strb	r3, [r7, #15]
      break;
 8005570:	e00b      	b.n	800558a <DMA_CheckFifoParam+0xe6>
      break;
 8005572:	bf00      	nop
 8005574:	e00a      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;
 8005576:	bf00      	nop
 8005578:	e008      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;
 800557a:	bf00      	nop
 800557c:	e006      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;
 800557e:	bf00      	nop
 8005580:	e004      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;
 8005582:	bf00      	nop
 8005584:	e002      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;   
 8005586:	bf00      	nop
 8005588:	e000      	b.n	800558c <DMA_CheckFifoParam+0xe8>
      break;
 800558a:	bf00      	nop
    }
  } 
  
  return status; 
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop

0800559c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800559c:	b480      	push	{r7}
 800559e:	b089      	sub	sp, #36	; 0x24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055b2:	2300      	movs	r3, #0
 80055b4:	61fb      	str	r3, [r7, #28]
 80055b6:	e16b      	b.n	8005890 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055b8:	2201      	movs	r2, #1
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4013      	ands	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	f040 815a 	bne.w	800588a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d005      	beq.n	80055ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d130      	bne.n	8005650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	2203      	movs	r2, #3
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	43db      	mvns	r3, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4013      	ands	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	4313      	orrs	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005624:	2201      	movs	r2, #1
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	43db      	mvns	r3, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4013      	ands	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	091b      	lsrs	r3, r3, #4
 800563a:	f003 0201 	and.w	r2, r3, #1
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4313      	orrs	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	2b03      	cmp	r3, #3
 800565a:	d017      	beq.n	800568c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	2203      	movs	r2, #3
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4013      	ands	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4313      	orrs	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d123      	bne.n	80056e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	08da      	lsrs	r2, r3, #3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3208      	adds	r2, #8
 80056a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	220f      	movs	r2, #15
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	43db      	mvns	r3, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4013      	ands	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	08da      	lsrs	r2, r3, #3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3208      	adds	r2, #8
 80056da:	69b9      	ldr	r1, [r7, #24]
 80056dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	2203      	movs	r2, #3
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4013      	ands	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 0203 	and.w	r2, r3, #3
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4313      	orrs	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 80b4 	beq.w	800588a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	4b60      	ldr	r3, [pc, #384]	; (80058a8 <HAL_GPIO_Init+0x30c>)
 8005728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572a:	4a5f      	ldr	r2, [pc, #380]	; (80058a8 <HAL_GPIO_Init+0x30c>)
 800572c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005730:	6453      	str	r3, [r2, #68]	; 0x44
 8005732:	4b5d      	ldr	r3, [pc, #372]	; (80058a8 <HAL_GPIO_Init+0x30c>)
 8005734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800573e:	4a5b      	ldr	r2, [pc, #364]	; (80058ac <HAL_GPIO_Init+0x310>)
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	089b      	lsrs	r3, r3, #2
 8005744:	3302      	adds	r3, #2
 8005746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	220f      	movs	r2, #15
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43db      	mvns	r3, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4013      	ands	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a52      	ldr	r2, [pc, #328]	; (80058b0 <HAL_GPIO_Init+0x314>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d02b      	beq.n	80057c2 <HAL_GPIO_Init+0x226>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a51      	ldr	r2, [pc, #324]	; (80058b4 <HAL_GPIO_Init+0x318>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d025      	beq.n	80057be <HAL_GPIO_Init+0x222>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a50      	ldr	r2, [pc, #320]	; (80058b8 <HAL_GPIO_Init+0x31c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d01f      	beq.n	80057ba <HAL_GPIO_Init+0x21e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a4f      	ldr	r2, [pc, #316]	; (80058bc <HAL_GPIO_Init+0x320>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d019      	beq.n	80057b6 <HAL_GPIO_Init+0x21a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a4e      	ldr	r2, [pc, #312]	; (80058c0 <HAL_GPIO_Init+0x324>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_GPIO_Init+0x216>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a4d      	ldr	r2, [pc, #308]	; (80058c4 <HAL_GPIO_Init+0x328>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00d      	beq.n	80057ae <HAL_GPIO_Init+0x212>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a4c      	ldr	r2, [pc, #304]	; (80058c8 <HAL_GPIO_Init+0x32c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d007      	beq.n	80057aa <HAL_GPIO_Init+0x20e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a4b      	ldr	r2, [pc, #300]	; (80058cc <HAL_GPIO_Init+0x330>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d101      	bne.n	80057a6 <HAL_GPIO_Init+0x20a>
 80057a2:	2307      	movs	r3, #7
 80057a4:	e00e      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057a6:	2308      	movs	r3, #8
 80057a8:	e00c      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057aa:	2306      	movs	r3, #6
 80057ac:	e00a      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057ae:	2305      	movs	r3, #5
 80057b0:	e008      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057b2:	2304      	movs	r3, #4
 80057b4:	e006      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057b6:	2303      	movs	r3, #3
 80057b8:	e004      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e002      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <HAL_GPIO_Init+0x228>
 80057c2:	2300      	movs	r3, #0
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	f002 0203 	and.w	r2, r2, #3
 80057ca:	0092      	lsls	r2, r2, #2
 80057cc:	4093      	lsls	r3, r2
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057d4:	4935      	ldr	r1, [pc, #212]	; (80058ac <HAL_GPIO_Init+0x310>)
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	089b      	lsrs	r3, r3, #2
 80057da:	3302      	adds	r3, #2
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057e2:	4b3b      	ldr	r3, [pc, #236]	; (80058d0 <HAL_GPIO_Init+0x334>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	43db      	mvns	r3, r3
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	4013      	ands	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005806:	4a32      	ldr	r2, [pc, #200]	; (80058d0 <HAL_GPIO_Init+0x334>)
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800580c:	4b30      	ldr	r3, [pc, #192]	; (80058d0 <HAL_GPIO_Init+0x334>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	43db      	mvns	r3, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4013      	ands	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005830:	4a27      	ldr	r2, [pc, #156]	; (80058d0 <HAL_GPIO_Init+0x334>)
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005836:	4b26      	ldr	r3, [pc, #152]	; (80058d0 <HAL_GPIO_Init+0x334>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	43db      	mvns	r3, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4013      	ands	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800585a:	4a1d      	ldr	r2, [pc, #116]	; (80058d0 <HAL_GPIO_Init+0x334>)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005860:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <HAL_GPIO_Init+0x334>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	43db      	mvns	r3, r3
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	4013      	ands	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005884:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <HAL_GPIO_Init+0x334>)
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	3301      	adds	r3, #1
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	2b0f      	cmp	r3, #15
 8005894:	f67f ae90 	bls.w	80055b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	3724      	adds	r7, #36	; 0x24
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40023800 	.word	0x40023800
 80058ac:	40013800 	.word	0x40013800
 80058b0:	40020000 	.word	0x40020000
 80058b4:	40020400 	.word	0x40020400
 80058b8:	40020800 	.word	0x40020800
 80058bc:	40020c00 	.word	0x40020c00
 80058c0:	40021000 	.word	0x40021000
 80058c4:	40021400 	.word	0x40021400
 80058c8:	40021800 	.word	0x40021800
 80058cc:	40021c00 	.word	0x40021c00
 80058d0:	40013c00 	.word	0x40013c00

080058d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	887b      	ldrh	r3, [r7, #2]
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058ec:	2301      	movs	r3, #1
 80058ee:	73fb      	strb	r3, [r7, #15]
 80058f0:	e001      	b.n	80058f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058f2:	2300      	movs	r3, #0
 80058f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	807b      	strh	r3, [r7, #2]
 8005910:	4613      	mov	r3, r2
 8005912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005914:	787b      	ldrb	r3, [r7, #1]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800591a:	887a      	ldrh	r2, [r7, #2]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005920:	e003      	b.n	800592a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005922:	887b      	ldrh	r3, [r7, #2]
 8005924:	041a      	lsls	r2, r3, #16
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	619a      	str	r2, [r3, #24]
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
	...

08005938 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e267      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d075      	beq.n	8005a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005956:	4b88      	ldr	r3, [pc, #544]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 030c 	and.w	r3, r3, #12
 800595e:	2b04      	cmp	r3, #4
 8005960:	d00c      	beq.n	800597c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005962:	4b85      	ldr	r3, [pc, #532]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800596a:	2b08      	cmp	r3, #8
 800596c:	d112      	bne.n	8005994 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800596e:	4b82      	ldr	r3, [pc, #520]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800597a:	d10b      	bne.n	8005994 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800597c:	4b7e      	ldr	r3, [pc, #504]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d05b      	beq.n	8005a40 <HAL_RCC_OscConfig+0x108>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d157      	bne.n	8005a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e242      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800599c:	d106      	bne.n	80059ac <HAL_RCC_OscConfig+0x74>
 800599e:	4b76      	ldr	r3, [pc, #472]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a75      	ldr	r2, [pc, #468]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 80059a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	e01d      	b.n	80059e8 <HAL_RCC_OscConfig+0xb0>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059b4:	d10c      	bne.n	80059d0 <HAL_RCC_OscConfig+0x98>
 80059b6:	4b70      	ldr	r3, [pc, #448]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a6f      	ldr	r2, [pc, #444]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 80059bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	4b6d      	ldr	r3, [pc, #436]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a6c      	ldr	r2, [pc, #432]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 80059c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	e00b      	b.n	80059e8 <HAL_RCC_OscConfig+0xb0>
 80059d0:	4b69      	ldr	r3, [pc, #420]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a68      	ldr	r2, [pc, #416]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 80059d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	4b66      	ldr	r3, [pc, #408]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a65      	ldr	r2, [pc, #404]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 80059e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d013      	beq.n	8005a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f0:	f7ff f8b4 	bl	8004b5c <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059f8:	f7ff f8b0 	bl	8004b5c <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b64      	cmp	r3, #100	; 0x64
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e207      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a0a:	4b5b      	ldr	r3, [pc, #364]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0f0      	beq.n	80059f8 <HAL_RCC_OscConfig+0xc0>
 8005a16:	e014      	b.n	8005a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a18:	f7ff f8a0 	bl	8004b5c <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a20:	f7ff f89c 	bl	8004b5c <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b64      	cmp	r3, #100	; 0x64
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e1f3      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a32:	4b51      	ldr	r3, [pc, #324]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1f0      	bne.n	8005a20 <HAL_RCC_OscConfig+0xe8>
 8005a3e:	e000      	b.n	8005a42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d063      	beq.n	8005b16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a4e:	4b4a      	ldr	r3, [pc, #296]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 030c 	and.w	r3, r3, #12
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00b      	beq.n	8005a72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a5a:	4b47      	ldr	r3, [pc, #284]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d11c      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a66:	4b44      	ldr	r3, [pc, #272]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d116      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a72:	4b41      	ldr	r3, [pc, #260]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <HAL_RCC_OscConfig+0x152>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d001      	beq.n	8005a8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e1c7      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a8a:	4b3b      	ldr	r3, [pc, #236]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4937      	ldr	r1, [pc, #220]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a9e:	e03a      	b.n	8005b16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d020      	beq.n	8005aea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005aa8:	4b34      	ldr	r3, [pc, #208]	; (8005b7c <HAL_RCC_OscConfig+0x244>)
 8005aaa:	2201      	movs	r2, #1
 8005aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aae:	f7ff f855 	bl	8004b5c <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ab6:	f7ff f851 	bl	8004b5c <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e1a8      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac8:	4b2b      	ldr	r3, [pc, #172]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0f0      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad4:	4b28      	ldr	r3, [pc, #160]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	4925      	ldr	r1, [pc, #148]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	600b      	str	r3, [r1, #0]
 8005ae8:	e015      	b.n	8005b16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aea:	4b24      	ldr	r3, [pc, #144]	; (8005b7c <HAL_RCC_OscConfig+0x244>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7ff f834 	bl	8004b5c <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005af8:	f7ff f830 	bl	8004b5c <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e187      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b0a:	4b1b      	ldr	r3, [pc, #108]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d036      	beq.n	8005b90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d016      	beq.n	8005b58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b2a:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <HAL_RCC_OscConfig+0x248>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b30:	f7ff f814 	bl	8004b5c <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b38:	f7ff f810 	bl	8004b5c <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e167      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b4a:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <HAL_RCC_OscConfig+0x240>)
 8005b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0f0      	beq.n	8005b38 <HAL_RCC_OscConfig+0x200>
 8005b56:	e01b      	b.n	8005b90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b58:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <HAL_RCC_OscConfig+0x248>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b5e:	f7fe fffd 	bl	8004b5c <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b64:	e00e      	b.n	8005b84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b66:	f7fe fff9 	bl	8004b5c <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d907      	bls.n	8005b84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e150      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	42470000 	.word	0x42470000
 8005b80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b84:	4b88      	ldr	r3, [pc, #544]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1ea      	bne.n	8005b66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8097 	beq.w	8005ccc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ba2:	4b81      	ldr	r3, [pc, #516]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10f      	bne.n	8005bce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60bb      	str	r3, [r7, #8]
 8005bb2:	4b7d      	ldr	r3, [pc, #500]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	4a7c      	ldr	r2, [pc, #496]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8005bbe:	4b7a      	ldr	r3, [pc, #488]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	60bb      	str	r3, [r7, #8]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bce:	4b77      	ldr	r3, [pc, #476]	; (8005dac <HAL_RCC_OscConfig+0x474>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d118      	bne.n	8005c0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bda:	4b74      	ldr	r3, [pc, #464]	; (8005dac <HAL_RCC_OscConfig+0x474>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a73      	ldr	r2, [pc, #460]	; (8005dac <HAL_RCC_OscConfig+0x474>)
 8005be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005be6:	f7fe ffb9 	bl	8004b5c <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bee:	f7fe ffb5 	bl	8004b5c <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e10c      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c00:	4b6a      	ldr	r3, [pc, #424]	; (8005dac <HAL_RCC_OscConfig+0x474>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0f0      	beq.n	8005bee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d106      	bne.n	8005c22 <HAL_RCC_OscConfig+0x2ea>
 8005c14:	4b64      	ldr	r3, [pc, #400]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c18:	4a63      	ldr	r2, [pc, #396]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c20:	e01c      	b.n	8005c5c <HAL_RCC_OscConfig+0x324>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2b05      	cmp	r3, #5
 8005c28:	d10c      	bne.n	8005c44 <HAL_RCC_OscConfig+0x30c>
 8005c2a:	4b5f      	ldr	r3, [pc, #380]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2e:	4a5e      	ldr	r2, [pc, #376]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005c30:	f043 0304 	orr.w	r3, r3, #4
 8005c34:	6713      	str	r3, [r2, #112]	; 0x70
 8005c36:	4b5c      	ldr	r3, [pc, #368]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3a:	4a5b      	ldr	r2, [pc, #364]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005c3c:	f043 0301 	orr.w	r3, r3, #1
 8005c40:	6713      	str	r3, [r2, #112]	; 0x70
 8005c42:	e00b      	b.n	8005c5c <HAL_RCC_OscConfig+0x324>
 8005c44:	4b58      	ldr	r3, [pc, #352]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c48:	4a57      	ldr	r2, [pc, #348]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005c4a:	f023 0301 	bic.w	r3, r3, #1
 8005c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c50:	4b55      	ldr	r3, [pc, #340]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c54:	4a54      	ldr	r2, [pc, #336]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005c56:	f023 0304 	bic.w	r3, r3, #4
 8005c5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d015      	beq.n	8005c90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c64:	f7fe ff7a 	bl	8004b5c <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c6a:	e00a      	b.n	8005c82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c6c:	f7fe ff76 	bl	8004b5c <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e0cb      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c82:	4b49      	ldr	r3, [pc, #292]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0ee      	beq.n	8005c6c <HAL_RCC_OscConfig+0x334>
 8005c8e:	e014      	b.n	8005cba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c90:	f7fe ff64 	bl	8004b5c <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c96:	e00a      	b.n	8005cae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c98:	f7fe ff60 	bl	8004b5c <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e0b5      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cae:	4b3e      	ldr	r3, [pc, #248]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1ee      	bne.n	8005c98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d105      	bne.n	8005ccc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cc0:	4b39      	ldr	r3, [pc, #228]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	4a38      	ldr	r2, [pc, #224]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 80a1 	beq.w	8005e18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cd6:	4b34      	ldr	r3, [pc, #208]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 030c 	and.w	r3, r3, #12
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d05c      	beq.n	8005d9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d141      	bne.n	8005d6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cea:	4b31      	ldr	r3, [pc, #196]	; (8005db0 <HAL_RCC_OscConfig+0x478>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf0:	f7fe ff34 	bl	8004b5c <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cf8:	f7fe ff30 	bl	8004b5c <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e087      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d0a:	4b27      	ldr	r3, [pc, #156]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1f0      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69da      	ldr	r2, [r3, #28]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	019b      	lsls	r3, r3, #6
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	085b      	lsrs	r3, r3, #1
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	041b      	lsls	r3, r3, #16
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	061b      	lsls	r3, r3, #24
 8005d3a:	491b      	ldr	r1, [pc, #108]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d40:	4b1b      	ldr	r3, [pc, #108]	; (8005db0 <HAL_RCC_OscConfig+0x478>)
 8005d42:	2201      	movs	r2, #1
 8005d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d46:	f7fe ff09 	bl	8004b5c <HAL_GetTick>
 8005d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d4c:	e008      	b.n	8005d60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d4e:	f7fe ff05 	bl	8004b5c <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e05c      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d60:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0f0      	beq.n	8005d4e <HAL_RCC_OscConfig+0x416>
 8005d6c:	e054      	b.n	8005e18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d6e:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <HAL_RCC_OscConfig+0x478>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d74:	f7fe fef2 	bl	8004b5c <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d7c:	f7fe feee 	bl	8004b5c <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e045      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d8e:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <HAL_RCC_OscConfig+0x470>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1f0      	bne.n	8005d7c <HAL_RCC_OscConfig+0x444>
 8005d9a:	e03d      	b.n	8005e18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d107      	bne.n	8005db4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e038      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
 8005da8:	40023800 	.word	0x40023800
 8005dac:	40007000 	.word	0x40007000
 8005db0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005db4:	4b1b      	ldr	r3, [pc, #108]	; (8005e24 <HAL_RCC_OscConfig+0x4ec>)
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d028      	beq.n	8005e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d121      	bne.n	8005e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d11a      	bne.n	8005e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005de4:	4013      	ands	r3, r2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d111      	bne.n	8005e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfa:	085b      	lsrs	r3, r3, #1
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d107      	bne.n	8005e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d001      	beq.n	8005e18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40023800 	.word	0x40023800

08005e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e0cc      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e3c:	4b68      	ldr	r3, [pc, #416]	; (8005fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d90c      	bls.n	8005e64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e4a:	4b65      	ldr	r3, [pc, #404]	; (8005fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e52:	4b63      	ldr	r3, [pc, #396]	; (8005fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d001      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e0b8      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d020      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e7c:	4b59      	ldr	r3, [pc, #356]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	4a58      	ldr	r2, [pc, #352]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e94:	4b53      	ldr	r3, [pc, #332]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	4a52      	ldr	r2, [pc, #328]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ea0:	4b50      	ldr	r3, [pc, #320]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	494d      	ldr	r1, [pc, #308]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d044      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d107      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec6:	4b47      	ldr	r3, [pc, #284]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d119      	bne.n	8005f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e07f      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d003      	beq.n	8005ee6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d107      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ee6:	4b3f      	ldr	r3, [pc, #252]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d109      	bne.n	8005f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e06f      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef6:	4b3b      	ldr	r3, [pc, #236]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e067      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f06:	4b37      	ldr	r3, [pc, #220]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f023 0203 	bic.w	r2, r3, #3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	4934      	ldr	r1, [pc, #208]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f18:	f7fe fe20 	bl	8004b5c <HAL_GetTick>
 8005f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f1e:	e00a      	b.n	8005f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f20:	f7fe fe1c 	bl	8004b5c <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e04f      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f36:	4b2b      	ldr	r3, [pc, #172]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 020c 	and.w	r2, r3, #12
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d1eb      	bne.n	8005f20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f48:	4b25      	ldr	r3, [pc, #148]	; (8005fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d20c      	bcs.n	8005f70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f56:	4b22      	ldr	r3, [pc, #136]	; (8005fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f5e:	4b20      	ldr	r3, [pc, #128]	; (8005fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d001      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e032      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f7c:	4b19      	ldr	r3, [pc, #100]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	4916      	ldr	r1, [pc, #88]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0308 	and.w	r3, r3, #8
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d009      	beq.n	8005fae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f9a:	4b12      	ldr	r3, [pc, #72]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	490e      	ldr	r1, [pc, #56]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fae:	f000 f821 	bl	8005ff4 <HAL_RCC_GetSysClockFreq>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	091b      	lsrs	r3, r3, #4
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	490a      	ldr	r1, [pc, #40]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8005fc0:	5ccb      	ldrb	r3, [r1, r3]
 8005fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc6:	4a09      	ldr	r2, [pc, #36]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fca:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fe fd80 	bl	8004ad4 <HAL_InitTick>

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40023c00 	.word	0x40023c00
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	080096dc 	.word	0x080096dc
 8005fec:	20000078 	.word	0x20000078
 8005ff0:	2000007c 	.word	0x2000007c

08005ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ff8:	b094      	sub	sp, #80	; 0x50
 8005ffa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8006000:	2300      	movs	r3, #0
 8006002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006004:	2300      	movs	r3, #0
 8006006:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800600c:	4b79      	ldr	r3, [pc, #484]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 030c 	and.w	r3, r3, #12
 8006014:	2b08      	cmp	r3, #8
 8006016:	d00d      	beq.n	8006034 <HAL_RCC_GetSysClockFreq+0x40>
 8006018:	2b08      	cmp	r3, #8
 800601a:	f200 80e1 	bhi.w	80061e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <HAL_RCC_GetSysClockFreq+0x34>
 8006022:	2b04      	cmp	r3, #4
 8006024:	d003      	beq.n	800602e <HAL_RCC_GetSysClockFreq+0x3a>
 8006026:	e0db      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006028:	4b73      	ldr	r3, [pc, #460]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800602a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800602c:	e0db      	b.n	80061e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800602e:	4b73      	ldr	r3, [pc, #460]	; (80061fc <HAL_RCC_GetSysClockFreq+0x208>)
 8006030:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006032:	e0d8      	b.n	80061e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006034:	4b6f      	ldr	r3, [pc, #444]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800603c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800603e:	4b6d      	ldr	r3, [pc, #436]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d063      	beq.n	8006112 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800604a:	4b6a      	ldr	r3, [pc, #424]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	099b      	lsrs	r3, r3, #6
 8006050:	2200      	movs	r2, #0
 8006052:	63bb      	str	r3, [r7, #56]	; 0x38
 8006054:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605c:	633b      	str	r3, [r7, #48]	; 0x30
 800605e:	2300      	movs	r3, #0
 8006060:	637b      	str	r3, [r7, #52]	; 0x34
 8006062:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006066:	4622      	mov	r2, r4
 8006068:	462b      	mov	r3, r5
 800606a:	f04f 0000 	mov.w	r0, #0
 800606e:	f04f 0100 	mov.w	r1, #0
 8006072:	0159      	lsls	r1, r3, #5
 8006074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006078:	0150      	lsls	r0, r2, #5
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4621      	mov	r1, r4
 8006080:	1a51      	subs	r1, r2, r1
 8006082:	6139      	str	r1, [r7, #16]
 8006084:	4629      	mov	r1, r5
 8006086:	eb63 0301 	sbc.w	r3, r3, r1
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006098:	4659      	mov	r1, fp
 800609a:	018b      	lsls	r3, r1, #6
 800609c:	4651      	mov	r1, sl
 800609e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060a2:	4651      	mov	r1, sl
 80060a4:	018a      	lsls	r2, r1, #6
 80060a6:	4651      	mov	r1, sl
 80060a8:	ebb2 0801 	subs.w	r8, r2, r1
 80060ac:	4659      	mov	r1, fp
 80060ae:	eb63 0901 	sbc.w	r9, r3, r1
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060c6:	4690      	mov	r8, r2
 80060c8:	4699      	mov	r9, r3
 80060ca:	4623      	mov	r3, r4
 80060cc:	eb18 0303 	adds.w	r3, r8, r3
 80060d0:	60bb      	str	r3, [r7, #8]
 80060d2:	462b      	mov	r3, r5
 80060d4:	eb49 0303 	adc.w	r3, r9, r3
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	f04f 0200 	mov.w	r2, #0
 80060de:	f04f 0300 	mov.w	r3, #0
 80060e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060e6:	4629      	mov	r1, r5
 80060e8:	024b      	lsls	r3, r1, #9
 80060ea:	4621      	mov	r1, r4
 80060ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060f0:	4621      	mov	r1, r4
 80060f2:	024a      	lsls	r2, r1, #9
 80060f4:	4610      	mov	r0, r2
 80060f6:	4619      	mov	r1, r3
 80060f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060fa:	2200      	movs	r2, #0
 80060fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006100:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006104:	f7fa fd2e 	bl	8000b64 <__aeabi_uldivmod>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4613      	mov	r3, r2
 800610e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006110:	e058      	b.n	80061c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006112:	4b38      	ldr	r3, [pc, #224]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	099b      	lsrs	r3, r3, #6
 8006118:	2200      	movs	r2, #0
 800611a:	4618      	mov	r0, r3
 800611c:	4611      	mov	r1, r2
 800611e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006122:	623b      	str	r3, [r7, #32]
 8006124:	2300      	movs	r3, #0
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
 8006128:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800612c:	4642      	mov	r2, r8
 800612e:	464b      	mov	r3, r9
 8006130:	f04f 0000 	mov.w	r0, #0
 8006134:	f04f 0100 	mov.w	r1, #0
 8006138:	0159      	lsls	r1, r3, #5
 800613a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800613e:	0150      	lsls	r0, r2, #5
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4641      	mov	r1, r8
 8006146:	ebb2 0a01 	subs.w	sl, r2, r1
 800614a:	4649      	mov	r1, r9
 800614c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800615c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006160:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006164:	ebb2 040a 	subs.w	r4, r2, sl
 8006168:	eb63 050b 	sbc.w	r5, r3, fp
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	f04f 0300 	mov.w	r3, #0
 8006174:	00eb      	lsls	r3, r5, #3
 8006176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800617a:	00e2      	lsls	r2, r4, #3
 800617c:	4614      	mov	r4, r2
 800617e:	461d      	mov	r5, r3
 8006180:	4643      	mov	r3, r8
 8006182:	18e3      	adds	r3, r4, r3
 8006184:	603b      	str	r3, [r7, #0]
 8006186:	464b      	mov	r3, r9
 8006188:	eb45 0303 	adc.w	r3, r5, r3
 800618c:	607b      	str	r3, [r7, #4]
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	e9d7 4500 	ldrd	r4, r5, [r7]
 800619a:	4629      	mov	r1, r5
 800619c:	028b      	lsls	r3, r1, #10
 800619e:	4621      	mov	r1, r4
 80061a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061a4:	4621      	mov	r1, r4
 80061a6:	028a      	lsls	r2, r1, #10
 80061a8:	4610      	mov	r0, r2
 80061aa:	4619      	mov	r1, r3
 80061ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ae:	2200      	movs	r2, #0
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	61fa      	str	r2, [r7, #28]
 80061b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061b8:	f7fa fcd4 	bl	8000b64 <__aeabi_uldivmod>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4613      	mov	r3, r2
 80061c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061c4:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	0c1b      	lsrs	r3, r3, #16
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	3301      	adds	r3, #1
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80061d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061de:	e002      	b.n	80061e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061e0:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80061e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3750      	adds	r7, #80	; 0x50
 80061ec:	46bd      	mov	sp, r7
 80061ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061f2:	bf00      	nop
 80061f4:	40023800 	.word	0x40023800
 80061f8:	00f42400 	.word	0x00f42400
 80061fc:	007a1200 	.word	0x007a1200

08006200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006204:	4b03      	ldr	r3, [pc, #12]	; (8006214 <HAL_RCC_GetHCLKFreq+0x14>)
 8006206:	681b      	ldr	r3, [r3, #0]
}
 8006208:	4618      	mov	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	20000078 	.word	0x20000078

08006218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800621c:	f7ff fff0 	bl	8006200 <HAL_RCC_GetHCLKFreq>
 8006220:	4602      	mov	r2, r0
 8006222:	4b05      	ldr	r3, [pc, #20]	; (8006238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	0a9b      	lsrs	r3, r3, #10
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	4903      	ldr	r1, [pc, #12]	; (800623c <HAL_RCC_GetPCLK1Freq+0x24>)
 800622e:	5ccb      	ldrb	r3, [r1, r3]
 8006230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006234:	4618      	mov	r0, r3
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40023800 	.word	0x40023800
 800623c:	080096ec 	.word	0x080096ec

08006240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006244:	f7ff ffdc 	bl	8006200 <HAL_RCC_GetHCLKFreq>
 8006248:	4602      	mov	r2, r0
 800624a:	4b05      	ldr	r3, [pc, #20]	; (8006260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	0b5b      	lsrs	r3, r3, #13
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	4903      	ldr	r1, [pc, #12]	; (8006264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006256:	5ccb      	ldrb	r3, [r1, r3]
 8006258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800625c:	4618      	mov	r0, r3
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40023800 	.word	0x40023800
 8006264:	080096ec 	.word	0x080096ec

08006268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e041      	b.n	80062fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fe fa22 	bl	80046d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f000 fce6 	bl	8006c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b01      	cmp	r3, #1
 800631a:	d001      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e04e      	b.n	80063be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0201 	orr.w	r2, r2, #1
 8006336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a23      	ldr	r2, [pc, #140]	; (80063cc <HAL_TIM_Base_Start_IT+0xc4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d022      	beq.n	8006388 <HAL_TIM_Base_Start_IT+0x80>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800634a:	d01d      	beq.n	8006388 <HAL_TIM_Base_Start_IT+0x80>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a1f      	ldr	r2, [pc, #124]	; (80063d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d018      	beq.n	8006388 <HAL_TIM_Base_Start_IT+0x80>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1e      	ldr	r2, [pc, #120]	; (80063d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d013      	beq.n	8006388 <HAL_TIM_Base_Start_IT+0x80>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1c      	ldr	r2, [pc, #112]	; (80063d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d00e      	beq.n	8006388 <HAL_TIM_Base_Start_IT+0x80>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a1b      	ldr	r2, [pc, #108]	; (80063dc <HAL_TIM_Base_Start_IT+0xd4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d009      	beq.n	8006388 <HAL_TIM_Base_Start_IT+0x80>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a19      	ldr	r2, [pc, #100]	; (80063e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d004      	beq.n	8006388 <HAL_TIM_Base_Start_IT+0x80>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a18      	ldr	r2, [pc, #96]	; (80063e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d111      	bne.n	80063ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b06      	cmp	r3, #6
 8006398:	d010      	beq.n	80063bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f042 0201 	orr.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063aa:	e007      	b.n	80063bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0201 	orr.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	40010000 	.word	0x40010000
 80063d0:	40000400 	.word	0x40000400
 80063d4:	40000800 	.word	0x40000800
 80063d8:	40000c00 	.word	0x40000c00
 80063dc:	40010400 	.word	0x40010400
 80063e0:	40014000 	.word	0x40014000
 80063e4:	40001800 	.word	0x40001800

080063e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e041      	b.n	800647e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7fe f914 	bl	800463c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3304      	adds	r3, #4
 8006424:	4619      	mov	r1, r3
 8006426:	4610      	mov	r0, r2
 8006428:	f000 fc26 	bl	8006c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d109      	bne.n	80064ac <HAL_TIM_PWM_Start+0x24>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	bf14      	ite	ne
 80064a4:	2301      	movne	r3, #1
 80064a6:	2300      	moveq	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	e022      	b.n	80064f2 <HAL_TIM_PWM_Start+0x6a>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d109      	bne.n	80064c6 <HAL_TIM_PWM_Start+0x3e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	bf14      	ite	ne
 80064be:	2301      	movne	r3, #1
 80064c0:	2300      	moveq	r3, #0
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	e015      	b.n	80064f2 <HAL_TIM_PWM_Start+0x6a>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d109      	bne.n	80064e0 <HAL_TIM_PWM_Start+0x58>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	bf14      	ite	ne
 80064d8:	2301      	movne	r3, #1
 80064da:	2300      	moveq	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	e008      	b.n	80064f2 <HAL_TIM_PWM_Start+0x6a>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	bf14      	ite	ne
 80064ec:	2301      	movne	r3, #1
 80064ee:	2300      	moveq	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e07c      	b.n	80065f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d104      	bne.n	800650a <HAL_TIM_PWM_Start+0x82>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006508:	e013      	b.n	8006532 <HAL_TIM_PWM_Start+0xaa>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b04      	cmp	r3, #4
 800650e:	d104      	bne.n	800651a <HAL_TIM_PWM_Start+0x92>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006518:	e00b      	b.n	8006532 <HAL_TIM_PWM_Start+0xaa>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b08      	cmp	r3, #8
 800651e:	d104      	bne.n	800652a <HAL_TIM_PWM_Start+0xa2>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006528:	e003      	b.n	8006532 <HAL_TIM_PWM_Start+0xaa>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2202      	movs	r2, #2
 800652e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2201      	movs	r2, #1
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fdec 	bl	8007118 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a2d      	ldr	r2, [pc, #180]	; (80065fc <HAL_TIM_PWM_Start+0x174>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d004      	beq.n	8006554 <HAL_TIM_PWM_Start+0xcc>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a2c      	ldr	r2, [pc, #176]	; (8006600 <HAL_TIM_PWM_Start+0x178>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d101      	bne.n	8006558 <HAL_TIM_PWM_Start+0xd0>
 8006554:	2301      	movs	r3, #1
 8006556:	e000      	b.n	800655a <HAL_TIM_PWM_Start+0xd2>
 8006558:	2300      	movs	r3, #0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800656c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a22      	ldr	r2, [pc, #136]	; (80065fc <HAL_TIM_PWM_Start+0x174>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d022      	beq.n	80065be <HAL_TIM_PWM_Start+0x136>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006580:	d01d      	beq.n	80065be <HAL_TIM_PWM_Start+0x136>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1f      	ldr	r2, [pc, #124]	; (8006604 <HAL_TIM_PWM_Start+0x17c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d018      	beq.n	80065be <HAL_TIM_PWM_Start+0x136>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1d      	ldr	r2, [pc, #116]	; (8006608 <HAL_TIM_PWM_Start+0x180>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <HAL_TIM_PWM_Start+0x136>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a1c      	ldr	r2, [pc, #112]	; (800660c <HAL_TIM_PWM_Start+0x184>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d00e      	beq.n	80065be <HAL_TIM_PWM_Start+0x136>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a16      	ldr	r2, [pc, #88]	; (8006600 <HAL_TIM_PWM_Start+0x178>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d009      	beq.n	80065be <HAL_TIM_PWM_Start+0x136>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a18      	ldr	r2, [pc, #96]	; (8006610 <HAL_TIM_PWM_Start+0x188>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d004      	beq.n	80065be <HAL_TIM_PWM_Start+0x136>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a16      	ldr	r2, [pc, #88]	; (8006614 <HAL_TIM_PWM_Start+0x18c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d111      	bne.n	80065e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b06      	cmp	r3, #6
 80065ce:	d010      	beq.n	80065f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f042 0201 	orr.w	r2, r2, #1
 80065de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e0:	e007      	b.n	80065f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f042 0201 	orr.w	r2, r2, #1
 80065f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	40010000 	.word	0x40010000
 8006600:	40010400 	.word	0x40010400
 8006604:	40000400 	.word	0x40000400
 8006608:	40000800 	.word	0x40000800
 800660c:	40000c00 	.word	0x40000c00
 8006610:	40014000 	.word	0x40014000
 8006614:	40001800 	.word	0x40001800

08006618 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e097      	b.n	800675c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d106      	bne.n	8006646 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7fd febf 	bl	80043c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2202      	movs	r2, #2
 800664a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800665c:	f023 0307 	bic.w	r3, r3, #7
 8006660:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f000 fb03 	bl	8006c78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800669a:	f023 0303 	bic.w	r3, r3, #3
 800669e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	021b      	lsls	r3, r3, #8
 80066aa:	4313      	orrs	r3, r2
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80066b8:	f023 030c 	bic.w	r3, r3, #12
 80066bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	021b      	lsls	r3, r3, #8
 80066d4:	4313      	orrs	r3, r2
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	011a      	lsls	r2, r3, #4
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	031b      	lsls	r3, r3, #12
 80066e8:	4313      	orrs	r3, r2
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80066f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80066fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	4313      	orrs	r3, r2
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006774:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800677c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006784:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800678c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d110      	bne.n	80067b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d102      	bne.n	80067a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800679a:	7b7b      	ldrb	r3, [r7, #13]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d001      	beq.n	80067a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e069      	b.n	8006878 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067b4:	e031      	b.n	800681a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d110      	bne.n	80067de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067bc:	7bbb      	ldrb	r3, [r7, #14]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d102      	bne.n	80067c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067c2:	7b3b      	ldrb	r3, [r7, #12]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d001      	beq.n	80067cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e055      	b.n	8006878 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067dc:	e01d      	b.n	800681a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067de:	7bfb      	ldrb	r3, [r7, #15]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d108      	bne.n	80067f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d105      	bne.n	80067f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067ea:	7b7b      	ldrb	r3, [r7, #13]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d102      	bne.n	80067f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067f0:	7b3b      	ldrb	r3, [r7, #12]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d001      	beq.n	80067fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e03e      	b.n	8006878 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2202      	movs	r2, #2
 80067fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2202      	movs	r2, #2
 8006806:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2202      	movs	r2, #2
 800680e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2202      	movs	r2, #2
 8006816:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <HAL_TIM_Encoder_Start+0xc4>
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b04      	cmp	r3, #4
 8006824:	d008      	beq.n	8006838 <HAL_TIM_Encoder_Start+0xd4>
 8006826:	e00f      	b.n	8006848 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2201      	movs	r2, #1
 800682e:	2100      	movs	r1, #0
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fc71 	bl	8007118 <TIM_CCxChannelCmd>
      break;
 8006836:	e016      	b.n	8006866 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2201      	movs	r2, #1
 800683e:	2104      	movs	r1, #4
 8006840:	4618      	mov	r0, r3
 8006842:	f000 fc69 	bl	8007118 <TIM_CCxChannelCmd>
      break;
 8006846:	e00e      	b.n	8006866 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2201      	movs	r2, #1
 800684e:	2100      	movs	r1, #0
 8006850:	4618      	mov	r0, r3
 8006852:	f000 fc61 	bl	8007118 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2201      	movs	r2, #1
 800685c:	2104      	movs	r1, #4
 800685e:	4618      	mov	r0, r3
 8006860:	f000 fc5a 	bl	8007118 <TIM_CCxChannelCmd>
      break;
 8006864:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f042 0201 	orr.w	r2, r2, #1
 8006874:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b02      	cmp	r3, #2
 8006894:	d122      	bne.n	80068dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d11b      	bne.n	80068dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f06f 0202 	mvn.w	r2, #2
 80068ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f9ba 	bl	8006c3c <HAL_TIM_IC_CaptureCallback>
 80068c8:	e005      	b.n	80068d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f9ac 	bl	8006c28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f9bd 	bl	8006c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f003 0304 	and.w	r3, r3, #4
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d122      	bne.n	8006930 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d11b      	bne.n	8006930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f06f 0204 	mvn.w	r2, #4
 8006900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2202      	movs	r2, #2
 8006906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f990 	bl	8006c3c <HAL_TIM_IC_CaptureCallback>
 800691c:	e005      	b.n	800692a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f982 	bl	8006c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f993 	bl	8006c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b08      	cmp	r3, #8
 800693c:	d122      	bne.n	8006984 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b08      	cmp	r3, #8
 800694a:	d11b      	bne.n	8006984 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0208 	mvn.w	r2, #8
 8006954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2204      	movs	r2, #4
 800695a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f966 	bl	8006c3c <HAL_TIM_IC_CaptureCallback>
 8006970:	e005      	b.n	800697e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f958 	bl	8006c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f969 	bl	8006c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f003 0310 	and.w	r3, r3, #16
 800698e:	2b10      	cmp	r3, #16
 8006990:	d122      	bne.n	80069d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	2b10      	cmp	r3, #16
 800699e:	d11b      	bne.n	80069d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f06f 0210 	mvn.w	r2, #16
 80069a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2208      	movs	r2, #8
 80069ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f93c 	bl	8006c3c <HAL_TIM_IC_CaptureCallback>
 80069c4:	e005      	b.n	80069d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f92e 	bl	8006c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f93f 	bl	8006c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d10e      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d107      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f06f 0201 	mvn.w	r2, #1
 80069fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f908 	bl	8006c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0e:	2b80      	cmp	r3, #128	; 0x80
 8006a10:	d10e      	bne.n	8006a30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1c:	2b80      	cmp	r3, #128	; 0x80
 8006a1e:	d107      	bne.n	8006a30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fc20 	bl	8007270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3a:	2b40      	cmp	r3, #64	; 0x40
 8006a3c:	d10e      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a48:	2b40      	cmp	r3, #64	; 0x40
 8006a4a:	d107      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f904 	bl	8006c64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d10e      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	d107      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f06f 0220 	mvn.w	r2, #32
 8006a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fbea 	bl	800725c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a88:	bf00      	nop
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d101      	bne.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e0ae      	b.n	8006c0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b0c      	cmp	r3, #12
 8006aba:	f200 809f 	bhi.w	8006bfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006abe:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac4:	08006af9 	.word	0x08006af9
 8006ac8:	08006bfd 	.word	0x08006bfd
 8006acc:	08006bfd 	.word	0x08006bfd
 8006ad0:	08006bfd 	.word	0x08006bfd
 8006ad4:	08006b39 	.word	0x08006b39
 8006ad8:	08006bfd 	.word	0x08006bfd
 8006adc:	08006bfd 	.word	0x08006bfd
 8006ae0:	08006bfd 	.word	0x08006bfd
 8006ae4:	08006b7b 	.word	0x08006b7b
 8006ae8:	08006bfd 	.word	0x08006bfd
 8006aec:	08006bfd 	.word	0x08006bfd
 8006af0:	08006bfd 	.word	0x08006bfd
 8006af4:	08006bbb 	.word	0x08006bbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 f95a 	bl	8006db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699a      	ldr	r2, [r3, #24]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0208 	orr.w	r2, r2, #8
 8006b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699a      	ldr	r2, [r3, #24]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0204 	bic.w	r2, r2, #4
 8006b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6999      	ldr	r1, [r3, #24]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	691a      	ldr	r2, [r3, #16]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	619a      	str	r2, [r3, #24]
      break;
 8006b36:	e064      	b.n	8006c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 f9aa 	bl	8006e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699a      	ldr	r2, [r3, #24]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6999      	ldr	r1, [r3, #24]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	021a      	lsls	r2, r3, #8
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	619a      	str	r2, [r3, #24]
      break;
 8006b78:	e043      	b.n	8006c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68b9      	ldr	r1, [r7, #8]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 f9ff 	bl	8006f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	69da      	ldr	r2, [r3, #28]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0208 	orr.w	r2, r2, #8
 8006b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	69da      	ldr	r2, [r3, #28]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0204 	bic.w	r2, r2, #4
 8006ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69d9      	ldr	r1, [r3, #28]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	61da      	str	r2, [r3, #28]
      break;
 8006bb8:	e023      	b.n	8006c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68b9      	ldr	r1, [r7, #8]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 fa53 	bl	800706c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69da      	ldr	r2, [r3, #28]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	69da      	ldr	r2, [r3, #28]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69d9      	ldr	r1, [r3, #28]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	021a      	lsls	r2, r3, #8
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	61da      	str	r2, [r3, #28]
      break;
 8006bfa:	e002      	b.n	8006c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8006c00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a40      	ldr	r2, [pc, #256]	; (8006d8c <TIM_Base_SetConfig+0x114>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d013      	beq.n	8006cb8 <TIM_Base_SetConfig+0x40>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c96:	d00f      	beq.n	8006cb8 <TIM_Base_SetConfig+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a3d      	ldr	r2, [pc, #244]	; (8006d90 <TIM_Base_SetConfig+0x118>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00b      	beq.n	8006cb8 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a3c      	ldr	r2, [pc, #240]	; (8006d94 <TIM_Base_SetConfig+0x11c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d007      	beq.n	8006cb8 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a3b      	ldr	r2, [pc, #236]	; (8006d98 <TIM_Base_SetConfig+0x120>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <TIM_Base_SetConfig+0x40>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a3a      	ldr	r2, [pc, #232]	; (8006d9c <TIM_Base_SetConfig+0x124>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d108      	bne.n	8006cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a2f      	ldr	r2, [pc, #188]	; (8006d8c <TIM_Base_SetConfig+0x114>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d02b      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd8:	d027      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a2c      	ldr	r2, [pc, #176]	; (8006d90 <TIM_Base_SetConfig+0x118>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d023      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2b      	ldr	r2, [pc, #172]	; (8006d94 <TIM_Base_SetConfig+0x11c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01f      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a2a      	ldr	r2, [pc, #168]	; (8006d98 <TIM_Base_SetConfig+0x120>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01b      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a29      	ldr	r2, [pc, #164]	; (8006d9c <TIM_Base_SetConfig+0x124>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d017      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a28      	ldr	r2, [pc, #160]	; (8006da0 <TIM_Base_SetConfig+0x128>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a27      	ldr	r2, [pc, #156]	; (8006da4 <TIM_Base_SetConfig+0x12c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00f      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a26      	ldr	r2, [pc, #152]	; (8006da8 <TIM_Base_SetConfig+0x130>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00b      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a25      	ldr	r2, [pc, #148]	; (8006dac <TIM_Base_SetConfig+0x134>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d007      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a24      	ldr	r2, [pc, #144]	; (8006db0 <TIM_Base_SetConfig+0x138>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d003      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a23      	ldr	r2, [pc, #140]	; (8006db4 <TIM_Base_SetConfig+0x13c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d108      	bne.n	8006d3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a0a      	ldr	r2, [pc, #40]	; (8006d8c <TIM_Base_SetConfig+0x114>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d003      	beq.n	8006d70 <TIM_Base_SetConfig+0xf8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a0c      	ldr	r2, [pc, #48]	; (8006d9c <TIM_Base_SetConfig+0x124>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d103      	bne.n	8006d78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	615a      	str	r2, [r3, #20]
}
 8006d7e:	bf00      	nop
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	40000400 	.word	0x40000400
 8006d94:	40000800 	.word	0x40000800
 8006d98:	40000c00 	.word	0x40000c00
 8006d9c:	40010400 	.word	0x40010400
 8006da0:	40014000 	.word	0x40014000
 8006da4:	40014400 	.word	0x40014400
 8006da8:	40014800 	.word	0x40014800
 8006dac:	40001800 	.word	0x40001800
 8006db0:	40001c00 	.word	0x40001c00
 8006db4:	40002000 	.word	0x40002000

08006db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	f023 0201 	bic.w	r2, r3, #1
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0303 	bic.w	r3, r3, #3
 8006dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f023 0302 	bic.w	r3, r3, #2
 8006e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a20      	ldr	r2, [pc, #128]	; (8006e90 <TIM_OC1_SetConfig+0xd8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d003      	beq.n	8006e1c <TIM_OC1_SetConfig+0x64>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a1f      	ldr	r2, [pc, #124]	; (8006e94 <TIM_OC1_SetConfig+0xdc>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d10c      	bne.n	8006e36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f023 0308 	bic.w	r3, r3, #8
 8006e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f023 0304 	bic.w	r3, r3, #4
 8006e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a15      	ldr	r2, [pc, #84]	; (8006e90 <TIM_OC1_SetConfig+0xd8>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d003      	beq.n	8006e46 <TIM_OC1_SetConfig+0x8e>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a14      	ldr	r2, [pc, #80]	; (8006e94 <TIM_OC1_SetConfig+0xdc>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d111      	bne.n	8006e6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	621a      	str	r2, [r3, #32]
}
 8006e84:	bf00      	nop
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	40010000 	.word	0x40010000
 8006e94:	40010400 	.word	0x40010400

08006e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	f023 0210 	bic.w	r2, r3, #16
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	021b      	lsls	r3, r3, #8
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f023 0320 	bic.w	r3, r3, #32
 8006ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a22      	ldr	r2, [pc, #136]	; (8006f7c <TIM_OC2_SetConfig+0xe4>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d003      	beq.n	8006f00 <TIM_OC2_SetConfig+0x68>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a21      	ldr	r2, [pc, #132]	; (8006f80 <TIM_OC2_SetConfig+0xe8>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d10d      	bne.n	8006f1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	011b      	lsls	r3, r3, #4
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a17      	ldr	r2, [pc, #92]	; (8006f7c <TIM_OC2_SetConfig+0xe4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d003      	beq.n	8006f2c <TIM_OC2_SetConfig+0x94>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a16      	ldr	r2, [pc, #88]	; (8006f80 <TIM_OC2_SetConfig+0xe8>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d113      	bne.n	8006f54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	695b      	ldr	r3, [r3, #20]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	621a      	str	r2, [r3, #32]
}
 8006f6e:	bf00      	nop
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	40010000 	.word	0x40010000
 8006f80:	40010400 	.word	0x40010400

08006f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0303 	bic.w	r3, r3, #3
 8006fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	021b      	lsls	r3, r3, #8
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a21      	ldr	r2, [pc, #132]	; (8007064 <TIM_OC3_SetConfig+0xe0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d003      	beq.n	8006fea <TIM_OC3_SetConfig+0x66>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a20      	ldr	r2, [pc, #128]	; (8007068 <TIM_OC3_SetConfig+0xe4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d10d      	bne.n	8007006 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	021b      	lsls	r3, r3, #8
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a16      	ldr	r2, [pc, #88]	; (8007064 <TIM_OC3_SetConfig+0xe0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d003      	beq.n	8007016 <TIM_OC3_SetConfig+0x92>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a15      	ldr	r2, [pc, #84]	; (8007068 <TIM_OC3_SetConfig+0xe4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d113      	bne.n	800703e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800701c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4313      	orrs	r3, r2
 800703c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	621a      	str	r2, [r3, #32]
}
 8007058:	bf00      	nop
 800705a:	371c      	adds	r7, #28
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	40010000 	.word	0x40010000
 8007068:	40010400 	.word	0x40010400

0800706c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800709a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	021b      	lsls	r3, r3, #8
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	031b      	lsls	r3, r3, #12
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a12      	ldr	r2, [pc, #72]	; (8007110 <TIM_OC4_SetConfig+0xa4>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d003      	beq.n	80070d4 <TIM_OC4_SetConfig+0x68>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a11      	ldr	r2, [pc, #68]	; (8007114 <TIM_OC4_SetConfig+0xa8>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d109      	bne.n	80070e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	019b      	lsls	r3, r3, #6
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	621a      	str	r2, [r3, #32]
}
 8007102:	bf00      	nop
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40010000 	.word	0x40010000
 8007114:	40010400 	.word	0x40010400

08007118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f003 031f 	and.w	r3, r3, #31
 800712a:	2201      	movs	r2, #1
 800712c:	fa02 f303 	lsl.w	r3, r2, r3
 8007130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a1a      	ldr	r2, [r3, #32]
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	43db      	mvns	r3, r3
 800713a:	401a      	ands	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6a1a      	ldr	r2, [r3, #32]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f003 031f 	and.w	r3, r3, #31
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	fa01 f303 	lsl.w	r3, r1, r3
 8007150:	431a      	orrs	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	621a      	str	r2, [r3, #32]
}
 8007156:	bf00      	nop
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
	...

08007164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007178:	2302      	movs	r3, #2
 800717a:	e05a      	b.n	8007232 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a21      	ldr	r2, [pc, #132]	; (8007240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d022      	beq.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c8:	d01d      	beq.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a1d      	ldr	r2, [pc, #116]	; (8007244 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d018      	beq.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a1b      	ldr	r2, [pc, #108]	; (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d013      	beq.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a1a      	ldr	r2, [pc, #104]	; (800724c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00e      	beq.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a18      	ldr	r2, [pc, #96]	; (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d009      	beq.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a17      	ldr	r2, [pc, #92]	; (8007254 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d004      	beq.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a15      	ldr	r2, [pc, #84]	; (8007258 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d10c      	bne.n	8007220 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800720c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	4313      	orrs	r3, r2
 8007216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40010000 	.word	0x40010000
 8007244:	40000400 	.word	0x40000400
 8007248:	40000800 	.word	0x40000800
 800724c:	40000c00 	.word	0x40000c00
 8007250:	40010400 	.word	0x40010400
 8007254:	40014000 	.word	0x40014000
 8007258:	40001800 	.word	0x40001800

0800725c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e03f      	b.n	8007316 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7fd fb10 	bl	80048d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2224      	movs	r2, #36	; 0x24
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fe69 	bl	8007fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	691a      	ldr	r2, [r3, #16]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	695a      	ldr	r2, [r3, #20]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2220      	movs	r2, #32
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2220      	movs	r2, #32
 8007310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	4613      	mov	r3, r2
 800732a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b20      	cmp	r3, #32
 8007336:	d11d      	bne.n	8007374 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_UART_Receive_DMA+0x26>
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e016      	b.n	8007376 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800734e:	2b01      	cmp	r3, #1
 8007350:	d101      	bne.n	8007356 <HAL_UART_Receive_DMA+0x38>
 8007352:	2302      	movs	r3, #2
 8007354:	e00f      	b.n	8007376 <HAL_UART_Receive_DMA+0x58>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007364:	88fb      	ldrh	r3, [r7, #6]
 8007366:	461a      	mov	r2, r3
 8007368:	68b9      	ldr	r1, [r7, #8]
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 fbb8 	bl	8007ae0 <UART_Start_Receive_DMA>
 8007370:	4603      	mov	r3, r0
 8007372:	e000      	b.n	8007376 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007374:	2302      	movs	r3, #2
  }
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b0ba      	sub	sp, #232	; 0xe8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b6:	f003 030f 	and.w	r3, r3, #15
 80073ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80073be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10f      	bne.n	80073e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d009      	beq.n	80073e6 <HAL_UART_IRQHandler+0x66>
 80073d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073d6:	f003 0320 	and.w	r3, r3, #32
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fd23 	bl	8007e2a <UART_Receive_IT>
      return;
 80073e4:	e256      	b.n	8007894 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80073e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 80de 	beq.w	80075ac <HAL_UART_IRQHandler+0x22c>
 80073f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d106      	bne.n	800740a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007400:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 80d1 	beq.w	80075ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800740a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00b      	beq.n	800742e <HAL_UART_IRQHandler+0xae>
 8007416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800741a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741e:	2b00      	cmp	r3, #0
 8007420:	d005      	beq.n	800742e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	f043 0201 	orr.w	r2, r3, #1
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800742e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007432:	f003 0304 	and.w	r3, r3, #4
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00b      	beq.n	8007452 <HAL_UART_IRQHandler+0xd2>
 800743a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d005      	beq.n	8007452 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	f043 0202 	orr.w	r2, r3, #2
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00b      	beq.n	8007476 <HAL_UART_IRQHandler+0xf6>
 800745e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d005      	beq.n	8007476 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	f043 0204 	orr.w	r2, r3, #4
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800747a:	f003 0308 	and.w	r3, r3, #8
 800747e:	2b00      	cmp	r3, #0
 8007480:	d011      	beq.n	80074a6 <HAL_UART_IRQHandler+0x126>
 8007482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b00      	cmp	r3, #0
 800748c:	d105      	bne.n	800749a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800748e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	f043 0208 	orr.w	r2, r3, #8
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 81ed 	beq.w	800788a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b4:	f003 0320 	and.w	r3, r3, #32
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d008      	beq.n	80074ce <HAL_UART_IRQHandler+0x14e>
 80074bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fcae 	bl	8007e2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d8:	2b40      	cmp	r3, #64	; 0x40
 80074da:	bf0c      	ite	eq
 80074dc:	2301      	moveq	r3, #1
 80074de:	2300      	movne	r3, #0
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	f003 0308 	and.w	r3, r3, #8
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d103      	bne.n	80074fa <HAL_UART_IRQHandler+0x17a>
 80074f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d04f      	beq.n	800759a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fbb6 	bl	8007c6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750a:	2b40      	cmp	r3, #64	; 0x40
 800750c:	d141      	bne.n	8007592 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3314      	adds	r3, #20
 8007514:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007518:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800752c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3314      	adds	r3, #20
 8007536:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800753a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800753e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007546:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800754a:	e841 2300 	strex	r3, r2, [r1]
 800754e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1d9      	bne.n	800750e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	2b00      	cmp	r3, #0
 8007560:	d013      	beq.n	800758a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	4a7d      	ldr	r2, [pc, #500]	; (800775c <HAL_UART_IRQHandler+0x3dc>)
 8007568:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756e:	4618      	mov	r0, r3
 8007570:	f7fd fd88 	bl	8005084 <HAL_DMA_Abort_IT>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d016      	beq.n	80075a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007588:	e00e      	b.n	80075a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f99a 	bl	80078c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007590:	e00a      	b.n	80075a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f996 	bl	80078c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007598:	e006      	b.n	80075a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f992 	bl	80078c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80075a6:	e170      	b.n	800788a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a8:	bf00      	nop
    return;
 80075aa:	e16e      	b.n	800788a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	f040 814a 	bne.w	800784a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ba:	f003 0310 	and.w	r3, r3, #16
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 8143 	beq.w	800784a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c8:	f003 0310 	and.w	r3, r3, #16
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 813c 	beq.w	800784a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075d2:	2300      	movs	r3, #0
 80075d4:	60bb      	str	r3, [r7, #8]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	60bb      	str	r3, [r7, #8]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	60bb      	str	r3, [r7, #8]
 80075e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f2:	2b40      	cmp	r3, #64	; 0x40
 80075f4:	f040 80b4 	bne.w	8007760 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007604:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 8140 	beq.w	800788e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007612:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007616:	429a      	cmp	r2, r3
 8007618:	f080 8139 	bcs.w	800788e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007622:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800762e:	f000 8088 	beq.w	8007742 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	330c      	adds	r3, #12
 8007638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007640:	e853 3f00 	ldrex	r3, [r3]
 8007644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007648:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800764c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007650:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	330c      	adds	r3, #12
 800765a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800765e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007666:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800766a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1d9      	bne.n	8007632 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3314      	adds	r3, #20
 8007684:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007688:	e853 3f00 	ldrex	r3, [r3]
 800768c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800768e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007690:	f023 0301 	bic.w	r3, r3, #1
 8007694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3314      	adds	r3, #20
 800769e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80076a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80076aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80076b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e1      	bne.n	800767e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3314      	adds	r3, #20
 80076c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3314      	adds	r3, #20
 80076da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80076de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80076e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076e6:	e841 2300 	strex	r3, r2, [r1]
 80076ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80076ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e3      	bne.n	80076ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	330c      	adds	r3, #12
 8007706:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800770a:	e853 3f00 	ldrex	r3, [r3]
 800770e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007712:	f023 0310 	bic.w	r3, r3, #16
 8007716:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	330c      	adds	r3, #12
 8007720:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007724:	65ba      	str	r2, [r7, #88]	; 0x58
 8007726:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800772a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e3      	bne.n	8007700 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773c:	4618      	mov	r0, r3
 800773e:	f7fd fc31 	bl	8004fa4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800774a:	b29b      	uxth	r3, r3
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	b29b      	uxth	r3, r3
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f8c0 	bl	80078d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007758:	e099      	b.n	800788e <HAL_UART_IRQHandler+0x50e>
 800775a:	bf00      	nop
 800775c:	08007d33 	.word	0x08007d33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007768:	b29b      	uxth	r3, r3
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007774:	b29b      	uxth	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 808b 	beq.w	8007892 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800777c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 8086 	beq.w	8007892 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	330c      	adds	r3, #12
 800778c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007790:	e853 3f00 	ldrex	r3, [r3]
 8007794:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007798:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800779c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	330c      	adds	r3, #12
 80077a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80077aa:	647a      	str	r2, [r7, #68]	; 0x44
 80077ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e3      	bne.n	8007786 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3314      	adds	r3, #20
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	623b      	str	r3, [r7, #32]
   return(result);
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	f023 0301 	bic.w	r3, r3, #1
 80077d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3314      	adds	r3, #20
 80077de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80077e2:	633a      	str	r2, [r7, #48]	; 0x30
 80077e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1e3      	bne.n	80077be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	330c      	adds	r3, #12
 800780a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	60fb      	str	r3, [r7, #12]
   return(result);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f023 0310 	bic.w	r3, r3, #16
 800781a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	330c      	adds	r3, #12
 8007824:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007828:	61fa      	str	r2, [r7, #28]
 800782a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	69b9      	ldr	r1, [r7, #24]
 800782e:	69fa      	ldr	r2, [r7, #28]
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	617b      	str	r3, [r7, #20]
   return(result);
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e3      	bne.n	8007804 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800783c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f848 	bl	80078d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007848:	e023      	b.n	8007892 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800784a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800784e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <HAL_UART_IRQHandler+0x4ea>
 8007856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800785a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa79 	bl	8007d5a <UART_Transmit_IT>
    return;
 8007868:	e014      	b.n	8007894 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800786a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800786e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00e      	beq.n	8007894 <HAL_UART_IRQHandler+0x514>
 8007876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800787a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800787e:	2b00      	cmp	r3, #0
 8007880:	d008      	beq.n	8007894 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fab9 	bl	8007dfa <UART_EndTransmit_IT>
    return;
 8007888:	e004      	b.n	8007894 <HAL_UART_IRQHandler+0x514>
    return;
 800788a:	bf00      	nop
 800788c:	e002      	b.n	8007894 <HAL_UART_IRQHandler+0x514>
      return;
 800788e:	bf00      	nop
 8007890:	e000      	b.n	8007894 <HAL_UART_IRQHandler+0x514>
      return;
 8007892:	bf00      	nop
  }
}
 8007894:	37e8      	adds	r7, #232	; 0xe8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop

0800789c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b09c      	sub	sp, #112	; 0x70
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007908:	2b00      	cmp	r3, #0
 800790a:	d172      	bne.n	80079f2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800790c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800790e:	2200      	movs	r2, #0
 8007910:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	330c      	adds	r3, #12
 8007918:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007928:	66bb      	str	r3, [r7, #104]	; 0x68
 800792a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	330c      	adds	r3, #12
 8007930:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007932:	65ba      	str	r2, [r7, #88]	; 0x58
 8007934:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007936:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007938:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1e5      	bne.n	8007912 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3314      	adds	r3, #20
 800794c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007950:	e853 3f00 	ldrex	r3, [r3]
 8007954:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	667b      	str	r3, [r7, #100]	; 0x64
 800795e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3314      	adds	r3, #20
 8007964:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007966:	647a      	str	r2, [r7, #68]	; 0x44
 8007968:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800796c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e5      	bne.n	8007946 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800797a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3314      	adds	r3, #20
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	e853 3f00 	ldrex	r3, [r3]
 8007988:	623b      	str	r3, [r7, #32]
   return(result);
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007990:	663b      	str	r3, [r7, #96]	; 0x60
 8007992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3314      	adds	r3, #20
 8007998:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800799a:	633a      	str	r2, [r7, #48]	; 0x30
 800799c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a2:	e841 2300 	strex	r3, r2, [r1]
 80079a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1e5      	bne.n	800797a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b0:	2220      	movs	r2, #32
 80079b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d119      	bne.n	80079f2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	330c      	adds	r3, #12
 80079c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	e853 3f00 	ldrex	r3, [r3]
 80079cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f023 0310 	bic.w	r3, r3, #16
 80079d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	330c      	adds	r3, #12
 80079dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079de:	61fa      	str	r2, [r7, #28]
 80079e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e2:	69b9      	ldr	r1, [r7, #24]
 80079e4:	69fa      	ldr	r2, [r7, #28]
 80079e6:	e841 2300 	strex	r3, r2, [r1]
 80079ea:	617b      	str	r3, [r7, #20]
   return(result);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1e5      	bne.n	80079be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d106      	bne.n	8007a08 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079fe:	4619      	mov	r1, r3
 8007a00:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a02:	f7ff ff69 	bl	80078d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a06:	e002      	b.n	8007a0e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007a08:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a0a:	f7fa fb4d 	bl	80020a8 <HAL_UART_RxCpltCallback>
}
 8007a0e:	bf00      	nop
 8007a10:	3770      	adds	r7, #112	; 0x70
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d108      	bne.n	8007a3e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a30:	085b      	lsrs	r3, r3, #1
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	4619      	mov	r1, r3
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f7ff ff4e 	bl	80078d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a3c:	e002      	b.n	8007a44 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f7ff ff36 	bl	80078b0 <HAL_UART_RxHalfCpltCallback>
}
 8007a44:	bf00      	nop
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a68:	2b80      	cmp	r3, #128	; 0x80
 8007a6a:	bf0c      	ite	eq
 8007a6c:	2301      	moveq	r3, #1
 8007a6e:	2300      	movne	r3, #0
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b21      	cmp	r3, #33	; 0x21
 8007a7e:	d108      	bne.n	8007a92 <UART_DMAError+0x46>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d005      	beq.n	8007a92 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007a8c:	68b8      	ldr	r0, [r7, #8]
 8007a8e:	f000 f8c5 	bl	8007c1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9c:	2b40      	cmp	r3, #64	; 0x40
 8007a9e:	bf0c      	ite	eq
 8007aa0:	2301      	moveq	r3, #1
 8007aa2:	2300      	movne	r3, #0
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b22      	cmp	r3, #34	; 0x22
 8007ab2:	d108      	bne.n	8007ac6 <UART_DMAError+0x7a>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d005      	beq.n	8007ac6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2200      	movs	r2, #0
 8007abe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007ac0:	68b8      	ldr	r0, [r7, #8]
 8007ac2:	f000 f8d3 	bl	8007c6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	f043 0210 	orr.w	r2, r3, #16
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ad2:	68b8      	ldr	r0, [r7, #8]
 8007ad4:	f7ff fef6 	bl	80078c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ad8:	bf00      	nop
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b098      	sub	sp, #96	; 0x60
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	4613      	mov	r3, r2
 8007aec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	88fa      	ldrh	r2, [r7, #6]
 8007af8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2222      	movs	r2, #34	; 0x22
 8007b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	4a40      	ldr	r2, [pc, #256]	; (8007c10 <UART_Start_Receive_DMA+0x130>)
 8007b0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	4a3f      	ldr	r2, [pc, #252]	; (8007c14 <UART_Start_Receive_DMA+0x134>)
 8007b16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	4a3e      	ldr	r2, [pc, #248]	; (8007c18 <UART_Start_Receive_DMA+0x138>)
 8007b1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b24:	2200      	movs	r2, #0
 8007b26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007b28:	f107 0308 	add.w	r3, r7, #8
 8007b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3304      	adds	r3, #4
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	88fb      	ldrh	r3, [r7, #6]
 8007b40:	f7fd f9d8 	bl	8004ef4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007b44:	2300      	movs	r3, #0
 8007b46:	613b      	str	r3, [r7, #16]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	613b      	str	r3, [r7, #16]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	613b      	str	r3, [r7, #16]
 8007b58:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d019      	beq.n	8007b9e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	330c      	adds	r3, #12
 8007b70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b80:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	330c      	adds	r3, #12
 8007b88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b8a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007b8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b92:	e841 2300 	strex	r3, r2, [r1]
 8007b96:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1e5      	bne.n	8007b6a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3314      	adds	r3, #20
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb0:	f043 0301 	orr.w	r3, r3, #1
 8007bb4:	657b      	str	r3, [r7, #84]	; 0x54
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3314      	adds	r3, #20
 8007bbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007bbe:	63ba      	str	r2, [r7, #56]	; 0x38
 8007bc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e5      	bne.n	8007b9e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3314      	adds	r3, #20
 8007bd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	617b      	str	r3, [r7, #20]
   return(result);
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007be8:	653b      	str	r3, [r7, #80]	; 0x50
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3314      	adds	r3, #20
 8007bf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007bf2:	627a      	str	r2, [r7, #36]	; 0x24
 8007bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	6a39      	ldr	r1, [r7, #32]
 8007bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e5      	bne.n	8007bd2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3760      	adds	r7, #96	; 0x60
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	080078f1 	.word	0x080078f1
 8007c14:	08007a17 	.word	0x08007a17
 8007c18:	08007a4d 	.word	0x08007a4d

08007c1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b089      	sub	sp, #36	; 0x24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	330c      	adds	r3, #12
 8007c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	e853 3f00 	ldrex	r3, [r3]
 8007c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c3a:	61fb      	str	r3, [r7, #28]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	330c      	adds	r3, #12
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	61ba      	str	r2, [r7, #24]
 8007c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	6979      	ldr	r1, [r7, #20]
 8007c4a:	69ba      	ldr	r2, [r7, #24]
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	613b      	str	r3, [r7, #16]
   return(result);
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e5      	bne.n	8007c24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007c60:	bf00      	nop
 8007c62:	3724      	adds	r7, #36	; 0x24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b095      	sub	sp, #84	; 0x54
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	330c      	adds	r3, #12
 8007c7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	330c      	adds	r3, #12
 8007c92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c94:	643a      	str	r2, [r7, #64]	; 0x40
 8007c96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e5      	bne.n	8007c74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3314      	adds	r3, #20
 8007cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	f023 0301 	bic.w	r3, r3, #1
 8007cbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3314      	adds	r3, #20
 8007cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e5      	bne.n	8007ca8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d119      	bne.n	8007d18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	330c      	adds	r3, #12
 8007cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	e853 3f00 	ldrex	r3, [r3]
 8007cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f023 0310 	bic.w	r3, r3, #16
 8007cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	330c      	adds	r3, #12
 8007d02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d04:	61ba      	str	r2, [r7, #24]
 8007d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d08:	6979      	ldr	r1, [r7, #20]
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	e841 2300 	strex	r3, r2, [r1]
 8007d10:	613b      	str	r3, [r7, #16]
   return(result);
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1e5      	bne.n	8007ce4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2220      	movs	r2, #32
 8007d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d26:	bf00      	nop
 8007d28:	3754      	adds	r7, #84	; 0x54
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff fdb9 	bl	80078c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d52:	bf00      	nop
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b21      	cmp	r3, #33	; 0x21
 8007d6c:	d13e      	bne.n	8007dec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d76:	d114      	bne.n	8007da2 <UART_Transmit_IT+0x48>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d110      	bne.n	8007da2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	1c9a      	adds	r2, r3, #2
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	621a      	str	r2, [r3, #32]
 8007da0:	e008      	b.n	8007db4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	1c59      	adds	r1, r3, #1
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	6211      	str	r1, [r2, #32]
 8007dac:	781a      	ldrb	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10f      	bne.n	8007de8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68da      	ldr	r2, [r3, #12]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007de6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	e000      	b.n	8007dee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007dec:	2302      	movs	r3, #2
  }
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7ff fd3e 	bl	800789c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b08c      	sub	sp, #48	; 0x30
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b22      	cmp	r3, #34	; 0x22
 8007e3c:	f040 80ab 	bne.w	8007f96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e48:	d117      	bne.n	8007e7a <UART_Receive_IT+0x50>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d113      	bne.n	8007e7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e72:	1c9a      	adds	r2, r3, #2
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	629a      	str	r2, [r3, #40]	; 0x28
 8007e78:	e026      	b.n	8007ec8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007e80:	2300      	movs	r3, #0
 8007e82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8c:	d007      	beq.n	8007e9e <UART_Receive_IT+0x74>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10a      	bne.n	8007eac <UART_Receive_IT+0x82>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d106      	bne.n	8007eac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	701a      	strb	r2, [r3, #0]
 8007eaa:	e008      	b.n	8007ebe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec2:	1c5a      	adds	r2, r3, #1
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d15a      	bne.n	8007f92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68da      	ldr	r2, [r3, #12]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0220 	bic.w	r2, r2, #32
 8007eea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007efa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	695a      	ldr	r2, [r3, #20]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 0201 	bic.w	r2, r2, #1
 8007f0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d135      	bne.n	8007f88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	330c      	adds	r3, #12
 8007f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	e853 3f00 	ldrex	r3, [r3]
 8007f30:	613b      	str	r3, [r7, #16]
   return(result);
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	f023 0310 	bic.w	r3, r3, #16
 8007f38:	627b      	str	r3, [r7, #36]	; 0x24
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	330c      	adds	r3, #12
 8007f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f42:	623a      	str	r2, [r7, #32]
 8007f44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f46:	69f9      	ldr	r1, [r7, #28]
 8007f48:	6a3a      	ldr	r2, [r7, #32]
 8007f4a:	e841 2300 	strex	r3, r2, [r1]
 8007f4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1e5      	bne.n	8007f22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0310 	and.w	r3, r3, #16
 8007f60:	2b10      	cmp	r3, #16
 8007f62:	d10a      	bne.n	8007f7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff fca9 	bl	80078d8 <HAL_UARTEx_RxEventCallback>
 8007f86:	e002      	b.n	8007f8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7fa f88d 	bl	80020a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e002      	b.n	8007f98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	e000      	b.n	8007f98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007f96:	2302      	movs	r3, #2
  }
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3730      	adds	r7, #48	; 0x30
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fa4:	b0c0      	sub	sp, #256	; 0x100
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fbc:	68d9      	ldr	r1, [r3, #12]
 8007fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	ea40 0301 	orr.w	r3, r0, r1
 8007fc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ff8:	f021 010c 	bic.w	r1, r1, #12
 8007ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008006:	430b      	orrs	r3, r1
 8008008:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800800a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801a:	6999      	ldr	r1, [r3, #24]
 800801c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	ea40 0301 	orr.w	r3, r0, r1
 8008026:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	4b8f      	ldr	r3, [pc, #572]	; (800826c <UART_SetConfig+0x2cc>)
 8008030:	429a      	cmp	r2, r3
 8008032:	d005      	beq.n	8008040 <UART_SetConfig+0xa0>
 8008034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	4b8d      	ldr	r3, [pc, #564]	; (8008270 <UART_SetConfig+0x2d0>)
 800803c:	429a      	cmp	r2, r3
 800803e:	d104      	bne.n	800804a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008040:	f7fe f8fe 	bl	8006240 <HAL_RCC_GetPCLK2Freq>
 8008044:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008048:	e003      	b.n	8008052 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800804a:	f7fe f8e5 	bl	8006218 <HAL_RCC_GetPCLK1Freq>
 800804e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800805c:	f040 810c 	bne.w	8008278 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008064:	2200      	movs	r2, #0
 8008066:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800806a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800806e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008072:	4622      	mov	r2, r4
 8008074:	462b      	mov	r3, r5
 8008076:	1891      	adds	r1, r2, r2
 8008078:	65b9      	str	r1, [r7, #88]	; 0x58
 800807a:	415b      	adcs	r3, r3
 800807c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800807e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008082:	4621      	mov	r1, r4
 8008084:	eb12 0801 	adds.w	r8, r2, r1
 8008088:	4629      	mov	r1, r5
 800808a:	eb43 0901 	adc.w	r9, r3, r1
 800808e:	f04f 0200 	mov.w	r2, #0
 8008092:	f04f 0300 	mov.w	r3, #0
 8008096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800809a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800809e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080a2:	4690      	mov	r8, r2
 80080a4:	4699      	mov	r9, r3
 80080a6:	4623      	mov	r3, r4
 80080a8:	eb18 0303 	adds.w	r3, r8, r3
 80080ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80080b0:	462b      	mov	r3, r5
 80080b2:	eb49 0303 	adc.w	r3, r9, r3
 80080b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80080ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80080ce:	460b      	mov	r3, r1
 80080d0:	18db      	adds	r3, r3, r3
 80080d2:	653b      	str	r3, [r7, #80]	; 0x50
 80080d4:	4613      	mov	r3, r2
 80080d6:	eb42 0303 	adc.w	r3, r2, r3
 80080da:	657b      	str	r3, [r7, #84]	; 0x54
 80080dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80080e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80080e4:	f7f8 fd3e 	bl	8000b64 <__aeabi_uldivmod>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4b61      	ldr	r3, [pc, #388]	; (8008274 <UART_SetConfig+0x2d4>)
 80080ee:	fba3 2302 	umull	r2, r3, r3, r2
 80080f2:	095b      	lsrs	r3, r3, #5
 80080f4:	011c      	lsls	r4, r3, #4
 80080f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080fa:	2200      	movs	r2, #0
 80080fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008100:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008104:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008108:	4642      	mov	r2, r8
 800810a:	464b      	mov	r3, r9
 800810c:	1891      	adds	r1, r2, r2
 800810e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008110:	415b      	adcs	r3, r3
 8008112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008114:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008118:	4641      	mov	r1, r8
 800811a:	eb12 0a01 	adds.w	sl, r2, r1
 800811e:	4649      	mov	r1, r9
 8008120:	eb43 0b01 	adc.w	fp, r3, r1
 8008124:	f04f 0200 	mov.w	r2, #0
 8008128:	f04f 0300 	mov.w	r3, #0
 800812c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008130:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008134:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008138:	4692      	mov	sl, r2
 800813a:	469b      	mov	fp, r3
 800813c:	4643      	mov	r3, r8
 800813e:	eb1a 0303 	adds.w	r3, sl, r3
 8008142:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008146:	464b      	mov	r3, r9
 8008148:	eb4b 0303 	adc.w	r3, fp, r3
 800814c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800815c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008160:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008164:	460b      	mov	r3, r1
 8008166:	18db      	adds	r3, r3, r3
 8008168:	643b      	str	r3, [r7, #64]	; 0x40
 800816a:	4613      	mov	r3, r2
 800816c:	eb42 0303 	adc.w	r3, r2, r3
 8008170:	647b      	str	r3, [r7, #68]	; 0x44
 8008172:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008176:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800817a:	f7f8 fcf3 	bl	8000b64 <__aeabi_uldivmod>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	4611      	mov	r1, r2
 8008184:	4b3b      	ldr	r3, [pc, #236]	; (8008274 <UART_SetConfig+0x2d4>)
 8008186:	fba3 2301 	umull	r2, r3, r3, r1
 800818a:	095b      	lsrs	r3, r3, #5
 800818c:	2264      	movs	r2, #100	; 0x64
 800818e:	fb02 f303 	mul.w	r3, r2, r3
 8008192:	1acb      	subs	r3, r1, r3
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800819a:	4b36      	ldr	r3, [pc, #216]	; (8008274 <UART_SetConfig+0x2d4>)
 800819c:	fba3 2302 	umull	r2, r3, r3, r2
 80081a0:	095b      	lsrs	r3, r3, #5
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081a8:	441c      	add	r4, r3
 80081aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80081b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80081bc:	4642      	mov	r2, r8
 80081be:	464b      	mov	r3, r9
 80081c0:	1891      	adds	r1, r2, r2
 80081c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80081c4:	415b      	adcs	r3, r3
 80081c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081cc:	4641      	mov	r1, r8
 80081ce:	1851      	adds	r1, r2, r1
 80081d0:	6339      	str	r1, [r7, #48]	; 0x30
 80081d2:	4649      	mov	r1, r9
 80081d4:	414b      	adcs	r3, r1
 80081d6:	637b      	str	r3, [r7, #52]	; 0x34
 80081d8:	f04f 0200 	mov.w	r2, #0
 80081dc:	f04f 0300 	mov.w	r3, #0
 80081e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80081e4:	4659      	mov	r1, fp
 80081e6:	00cb      	lsls	r3, r1, #3
 80081e8:	4651      	mov	r1, sl
 80081ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081ee:	4651      	mov	r1, sl
 80081f0:	00ca      	lsls	r2, r1, #3
 80081f2:	4610      	mov	r0, r2
 80081f4:	4619      	mov	r1, r3
 80081f6:	4603      	mov	r3, r0
 80081f8:	4642      	mov	r2, r8
 80081fa:	189b      	adds	r3, r3, r2
 80081fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008200:	464b      	mov	r3, r9
 8008202:	460a      	mov	r2, r1
 8008204:	eb42 0303 	adc.w	r3, r2, r3
 8008208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008218:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800821c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008220:	460b      	mov	r3, r1
 8008222:	18db      	adds	r3, r3, r3
 8008224:	62bb      	str	r3, [r7, #40]	; 0x28
 8008226:	4613      	mov	r3, r2
 8008228:	eb42 0303 	adc.w	r3, r2, r3
 800822c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800822e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008232:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008236:	f7f8 fc95 	bl	8000b64 <__aeabi_uldivmod>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	4b0d      	ldr	r3, [pc, #52]	; (8008274 <UART_SetConfig+0x2d4>)
 8008240:	fba3 1302 	umull	r1, r3, r3, r2
 8008244:	095b      	lsrs	r3, r3, #5
 8008246:	2164      	movs	r1, #100	; 0x64
 8008248:	fb01 f303 	mul.w	r3, r1, r3
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	00db      	lsls	r3, r3, #3
 8008250:	3332      	adds	r3, #50	; 0x32
 8008252:	4a08      	ldr	r2, [pc, #32]	; (8008274 <UART_SetConfig+0x2d4>)
 8008254:	fba2 2303 	umull	r2, r3, r2, r3
 8008258:	095b      	lsrs	r3, r3, #5
 800825a:	f003 0207 	and.w	r2, r3, #7
 800825e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4422      	add	r2, r4
 8008266:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008268:	e106      	b.n	8008478 <UART_SetConfig+0x4d8>
 800826a:	bf00      	nop
 800826c:	40011000 	.word	0x40011000
 8008270:	40011400 	.word	0x40011400
 8008274:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800827c:	2200      	movs	r2, #0
 800827e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008282:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008286:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800828a:	4642      	mov	r2, r8
 800828c:	464b      	mov	r3, r9
 800828e:	1891      	adds	r1, r2, r2
 8008290:	6239      	str	r1, [r7, #32]
 8008292:	415b      	adcs	r3, r3
 8008294:	627b      	str	r3, [r7, #36]	; 0x24
 8008296:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800829a:	4641      	mov	r1, r8
 800829c:	1854      	adds	r4, r2, r1
 800829e:	4649      	mov	r1, r9
 80082a0:	eb43 0501 	adc.w	r5, r3, r1
 80082a4:	f04f 0200 	mov.w	r2, #0
 80082a8:	f04f 0300 	mov.w	r3, #0
 80082ac:	00eb      	lsls	r3, r5, #3
 80082ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082b2:	00e2      	lsls	r2, r4, #3
 80082b4:	4614      	mov	r4, r2
 80082b6:	461d      	mov	r5, r3
 80082b8:	4643      	mov	r3, r8
 80082ba:	18e3      	adds	r3, r4, r3
 80082bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80082c0:	464b      	mov	r3, r9
 80082c2:	eb45 0303 	adc.w	r3, r5, r3
 80082c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80082da:	f04f 0200 	mov.w	r2, #0
 80082de:	f04f 0300 	mov.w	r3, #0
 80082e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80082e6:	4629      	mov	r1, r5
 80082e8:	008b      	lsls	r3, r1, #2
 80082ea:	4621      	mov	r1, r4
 80082ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082f0:	4621      	mov	r1, r4
 80082f2:	008a      	lsls	r2, r1, #2
 80082f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80082f8:	f7f8 fc34 	bl	8000b64 <__aeabi_uldivmod>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4b60      	ldr	r3, [pc, #384]	; (8008484 <UART_SetConfig+0x4e4>)
 8008302:	fba3 2302 	umull	r2, r3, r3, r2
 8008306:	095b      	lsrs	r3, r3, #5
 8008308:	011c      	lsls	r4, r3, #4
 800830a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800830e:	2200      	movs	r2, #0
 8008310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008314:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008318:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800831c:	4642      	mov	r2, r8
 800831e:	464b      	mov	r3, r9
 8008320:	1891      	adds	r1, r2, r2
 8008322:	61b9      	str	r1, [r7, #24]
 8008324:	415b      	adcs	r3, r3
 8008326:	61fb      	str	r3, [r7, #28]
 8008328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800832c:	4641      	mov	r1, r8
 800832e:	1851      	adds	r1, r2, r1
 8008330:	6139      	str	r1, [r7, #16]
 8008332:	4649      	mov	r1, r9
 8008334:	414b      	adcs	r3, r1
 8008336:	617b      	str	r3, [r7, #20]
 8008338:	f04f 0200 	mov.w	r2, #0
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008344:	4659      	mov	r1, fp
 8008346:	00cb      	lsls	r3, r1, #3
 8008348:	4651      	mov	r1, sl
 800834a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800834e:	4651      	mov	r1, sl
 8008350:	00ca      	lsls	r2, r1, #3
 8008352:	4610      	mov	r0, r2
 8008354:	4619      	mov	r1, r3
 8008356:	4603      	mov	r3, r0
 8008358:	4642      	mov	r2, r8
 800835a:	189b      	adds	r3, r3, r2
 800835c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008360:	464b      	mov	r3, r9
 8008362:	460a      	mov	r2, r1
 8008364:	eb42 0303 	adc.w	r3, r2, r3
 8008368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800836c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	67bb      	str	r3, [r7, #120]	; 0x78
 8008376:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008378:	f04f 0200 	mov.w	r2, #0
 800837c:	f04f 0300 	mov.w	r3, #0
 8008380:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008384:	4649      	mov	r1, r9
 8008386:	008b      	lsls	r3, r1, #2
 8008388:	4641      	mov	r1, r8
 800838a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800838e:	4641      	mov	r1, r8
 8008390:	008a      	lsls	r2, r1, #2
 8008392:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008396:	f7f8 fbe5 	bl	8000b64 <__aeabi_uldivmod>
 800839a:	4602      	mov	r2, r0
 800839c:	460b      	mov	r3, r1
 800839e:	4611      	mov	r1, r2
 80083a0:	4b38      	ldr	r3, [pc, #224]	; (8008484 <UART_SetConfig+0x4e4>)
 80083a2:	fba3 2301 	umull	r2, r3, r3, r1
 80083a6:	095b      	lsrs	r3, r3, #5
 80083a8:	2264      	movs	r2, #100	; 0x64
 80083aa:	fb02 f303 	mul.w	r3, r2, r3
 80083ae:	1acb      	subs	r3, r1, r3
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	3332      	adds	r3, #50	; 0x32
 80083b4:	4a33      	ldr	r2, [pc, #204]	; (8008484 <UART_SetConfig+0x4e4>)
 80083b6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ba:	095b      	lsrs	r3, r3, #5
 80083bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083c0:	441c      	add	r4, r3
 80083c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083c6:	2200      	movs	r2, #0
 80083c8:	673b      	str	r3, [r7, #112]	; 0x70
 80083ca:	677a      	str	r2, [r7, #116]	; 0x74
 80083cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80083d0:	4642      	mov	r2, r8
 80083d2:	464b      	mov	r3, r9
 80083d4:	1891      	adds	r1, r2, r2
 80083d6:	60b9      	str	r1, [r7, #8]
 80083d8:	415b      	adcs	r3, r3
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083e0:	4641      	mov	r1, r8
 80083e2:	1851      	adds	r1, r2, r1
 80083e4:	6039      	str	r1, [r7, #0]
 80083e6:	4649      	mov	r1, r9
 80083e8:	414b      	adcs	r3, r1
 80083ea:	607b      	str	r3, [r7, #4]
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	f04f 0300 	mov.w	r3, #0
 80083f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80083f8:	4659      	mov	r1, fp
 80083fa:	00cb      	lsls	r3, r1, #3
 80083fc:	4651      	mov	r1, sl
 80083fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008402:	4651      	mov	r1, sl
 8008404:	00ca      	lsls	r2, r1, #3
 8008406:	4610      	mov	r0, r2
 8008408:	4619      	mov	r1, r3
 800840a:	4603      	mov	r3, r0
 800840c:	4642      	mov	r2, r8
 800840e:	189b      	adds	r3, r3, r2
 8008410:	66bb      	str	r3, [r7, #104]	; 0x68
 8008412:	464b      	mov	r3, r9
 8008414:	460a      	mov	r2, r1
 8008416:	eb42 0303 	adc.w	r3, r2, r3
 800841a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800841c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	663b      	str	r3, [r7, #96]	; 0x60
 8008426:	667a      	str	r2, [r7, #100]	; 0x64
 8008428:	f04f 0200 	mov.w	r2, #0
 800842c:	f04f 0300 	mov.w	r3, #0
 8008430:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008434:	4649      	mov	r1, r9
 8008436:	008b      	lsls	r3, r1, #2
 8008438:	4641      	mov	r1, r8
 800843a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800843e:	4641      	mov	r1, r8
 8008440:	008a      	lsls	r2, r1, #2
 8008442:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008446:	f7f8 fb8d 	bl	8000b64 <__aeabi_uldivmod>
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	4b0d      	ldr	r3, [pc, #52]	; (8008484 <UART_SetConfig+0x4e4>)
 8008450:	fba3 1302 	umull	r1, r3, r3, r2
 8008454:	095b      	lsrs	r3, r3, #5
 8008456:	2164      	movs	r1, #100	; 0x64
 8008458:	fb01 f303 	mul.w	r3, r1, r3
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	011b      	lsls	r3, r3, #4
 8008460:	3332      	adds	r3, #50	; 0x32
 8008462:	4a08      	ldr	r2, [pc, #32]	; (8008484 <UART_SetConfig+0x4e4>)
 8008464:	fba2 2303 	umull	r2, r3, r2, r3
 8008468:	095b      	lsrs	r3, r3, #5
 800846a:	f003 020f 	and.w	r2, r3, #15
 800846e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4422      	add	r2, r4
 8008476:	609a      	str	r2, [r3, #8]
}
 8008478:	bf00      	nop
 800847a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800847e:	46bd      	mov	sp, r7
 8008480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008484:	51eb851f 	.word	0x51eb851f

08008488 <memset>:
 8008488:	4402      	add	r2, r0
 800848a:	4603      	mov	r3, r0
 800848c:	4293      	cmp	r3, r2
 800848e:	d100      	bne.n	8008492 <memset+0xa>
 8008490:	4770      	bx	lr
 8008492:	f803 1b01 	strb.w	r1, [r3], #1
 8008496:	e7f9      	b.n	800848c <memset+0x4>

08008498 <__errno>:
 8008498:	4b01      	ldr	r3, [pc, #4]	; (80084a0 <__errno+0x8>)
 800849a:	6818      	ldr	r0, [r3, #0]
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	200000d0 	.word	0x200000d0

080084a4 <__libc_init_array>:
 80084a4:	b570      	push	{r4, r5, r6, lr}
 80084a6:	4d0d      	ldr	r5, [pc, #52]	; (80084dc <__libc_init_array+0x38>)
 80084a8:	4c0d      	ldr	r4, [pc, #52]	; (80084e0 <__libc_init_array+0x3c>)
 80084aa:	1b64      	subs	r4, r4, r5
 80084ac:	10a4      	asrs	r4, r4, #2
 80084ae:	2600      	movs	r6, #0
 80084b0:	42a6      	cmp	r6, r4
 80084b2:	d109      	bne.n	80084c8 <__libc_init_array+0x24>
 80084b4:	4d0b      	ldr	r5, [pc, #44]	; (80084e4 <__libc_init_array+0x40>)
 80084b6:	4c0c      	ldr	r4, [pc, #48]	; (80084e8 <__libc_init_array+0x44>)
 80084b8:	f001 f8de 	bl	8009678 <_init>
 80084bc:	1b64      	subs	r4, r4, r5
 80084be:	10a4      	asrs	r4, r4, #2
 80084c0:	2600      	movs	r6, #0
 80084c2:	42a6      	cmp	r6, r4
 80084c4:	d105      	bne.n	80084d2 <__libc_init_array+0x2e>
 80084c6:	bd70      	pop	{r4, r5, r6, pc}
 80084c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084cc:	4798      	blx	r3
 80084ce:	3601      	adds	r6, #1
 80084d0:	e7ee      	b.n	80084b0 <__libc_init_array+0xc>
 80084d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d6:	4798      	blx	r3
 80084d8:	3601      	adds	r6, #1
 80084da:	e7f2      	b.n	80084c2 <__libc_init_array+0x1e>
 80084dc:	080098e0 	.word	0x080098e0
 80084e0:	080098e0 	.word	0x080098e0
 80084e4:	080098e0 	.word	0x080098e0
 80084e8:	080098e4 	.word	0x080098e4

080084ec <memcpy>:
 80084ec:	440a      	add	r2, r1
 80084ee:	4291      	cmp	r1, r2
 80084f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80084f4:	d100      	bne.n	80084f8 <memcpy+0xc>
 80084f6:	4770      	bx	lr
 80084f8:	b510      	push	{r4, lr}
 80084fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008502:	4291      	cmp	r1, r2
 8008504:	d1f9      	bne.n	80084fa <memcpy+0xe>
 8008506:	bd10      	pop	{r4, pc}

08008508 <cos>:
 8008508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800850a:	ec53 2b10 	vmov	r2, r3, d0
 800850e:	4826      	ldr	r0, [pc, #152]	; (80085a8 <cos+0xa0>)
 8008510:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008514:	4281      	cmp	r1, r0
 8008516:	dc06      	bgt.n	8008526 <cos+0x1e>
 8008518:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80085a0 <cos+0x98>
 800851c:	b005      	add	sp, #20
 800851e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008522:	f000 b8c1 	b.w	80086a8 <__kernel_cos>
 8008526:	4821      	ldr	r0, [pc, #132]	; (80085ac <cos+0xa4>)
 8008528:	4281      	cmp	r1, r0
 800852a:	dd09      	ble.n	8008540 <cos+0x38>
 800852c:	ee10 0a10 	vmov	r0, s0
 8008530:	4619      	mov	r1, r3
 8008532:	f7f7 fe4d 	bl	80001d0 <__aeabi_dsub>
 8008536:	ec41 0b10 	vmov	d0, r0, r1
 800853a:	b005      	add	sp, #20
 800853c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008540:	4668      	mov	r0, sp
 8008542:	f000 fa39 	bl	80089b8 <__ieee754_rem_pio2>
 8008546:	f000 0003 	and.w	r0, r0, #3
 800854a:	2801      	cmp	r0, #1
 800854c:	d00b      	beq.n	8008566 <cos+0x5e>
 800854e:	2802      	cmp	r0, #2
 8008550:	d016      	beq.n	8008580 <cos+0x78>
 8008552:	b9e0      	cbnz	r0, 800858e <cos+0x86>
 8008554:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008558:	ed9d 0b00 	vldr	d0, [sp]
 800855c:	f000 f8a4 	bl	80086a8 <__kernel_cos>
 8008560:	ec51 0b10 	vmov	r0, r1, d0
 8008564:	e7e7      	b.n	8008536 <cos+0x2e>
 8008566:	ed9d 1b02 	vldr	d1, [sp, #8]
 800856a:	ed9d 0b00 	vldr	d0, [sp]
 800856e:	f000 f963 	bl	8008838 <__kernel_sin>
 8008572:	ec53 2b10 	vmov	r2, r3, d0
 8008576:	ee10 0a10 	vmov	r0, s0
 800857a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800857e:	e7da      	b.n	8008536 <cos+0x2e>
 8008580:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008584:	ed9d 0b00 	vldr	d0, [sp]
 8008588:	f000 f88e 	bl	80086a8 <__kernel_cos>
 800858c:	e7f1      	b.n	8008572 <cos+0x6a>
 800858e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008592:	ed9d 0b00 	vldr	d0, [sp]
 8008596:	2001      	movs	r0, #1
 8008598:	f000 f94e 	bl	8008838 <__kernel_sin>
 800859c:	e7e0      	b.n	8008560 <cos+0x58>
 800859e:	bf00      	nop
	...
 80085a8:	3fe921fb 	.word	0x3fe921fb
 80085ac:	7fefffff 	.word	0x7fefffff

080085b0 <sin>:
 80085b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085b2:	ec53 2b10 	vmov	r2, r3, d0
 80085b6:	4828      	ldr	r0, [pc, #160]	; (8008658 <sin+0xa8>)
 80085b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80085bc:	4281      	cmp	r1, r0
 80085be:	dc07      	bgt.n	80085d0 <sin+0x20>
 80085c0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008650 <sin+0xa0>
 80085c4:	2000      	movs	r0, #0
 80085c6:	b005      	add	sp, #20
 80085c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085cc:	f000 b934 	b.w	8008838 <__kernel_sin>
 80085d0:	4822      	ldr	r0, [pc, #136]	; (800865c <sin+0xac>)
 80085d2:	4281      	cmp	r1, r0
 80085d4:	dd09      	ble.n	80085ea <sin+0x3a>
 80085d6:	ee10 0a10 	vmov	r0, s0
 80085da:	4619      	mov	r1, r3
 80085dc:	f7f7 fdf8 	bl	80001d0 <__aeabi_dsub>
 80085e0:	ec41 0b10 	vmov	d0, r0, r1
 80085e4:	b005      	add	sp, #20
 80085e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80085ea:	4668      	mov	r0, sp
 80085ec:	f000 f9e4 	bl	80089b8 <__ieee754_rem_pio2>
 80085f0:	f000 0003 	and.w	r0, r0, #3
 80085f4:	2801      	cmp	r0, #1
 80085f6:	d00c      	beq.n	8008612 <sin+0x62>
 80085f8:	2802      	cmp	r0, #2
 80085fa:	d011      	beq.n	8008620 <sin+0x70>
 80085fc:	b9f0      	cbnz	r0, 800863c <sin+0x8c>
 80085fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008602:	ed9d 0b00 	vldr	d0, [sp]
 8008606:	2001      	movs	r0, #1
 8008608:	f000 f916 	bl	8008838 <__kernel_sin>
 800860c:	ec51 0b10 	vmov	r0, r1, d0
 8008610:	e7e6      	b.n	80085e0 <sin+0x30>
 8008612:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008616:	ed9d 0b00 	vldr	d0, [sp]
 800861a:	f000 f845 	bl	80086a8 <__kernel_cos>
 800861e:	e7f5      	b.n	800860c <sin+0x5c>
 8008620:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008624:	ed9d 0b00 	vldr	d0, [sp]
 8008628:	2001      	movs	r0, #1
 800862a:	f000 f905 	bl	8008838 <__kernel_sin>
 800862e:	ec53 2b10 	vmov	r2, r3, d0
 8008632:	ee10 0a10 	vmov	r0, s0
 8008636:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800863a:	e7d1      	b.n	80085e0 <sin+0x30>
 800863c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008640:	ed9d 0b00 	vldr	d0, [sp]
 8008644:	f000 f830 	bl	80086a8 <__kernel_cos>
 8008648:	e7f1      	b.n	800862e <sin+0x7e>
 800864a:	bf00      	nop
 800864c:	f3af 8000 	nop.w
	...
 8008658:	3fe921fb 	.word	0x3fe921fb
 800865c:	7fefffff 	.word	0x7fefffff

08008660 <sqrtf>:
 8008660:	b508      	push	{r3, lr}
 8008662:	ed2d 8b02 	vpush	{d8}
 8008666:	eeb0 8a40 	vmov.f32	s16, s0
 800866a:	f000 f817 	bl	800869c <__ieee754_sqrtf>
 800866e:	eeb4 8a48 	vcmp.f32	s16, s16
 8008672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008676:	d60c      	bvs.n	8008692 <sqrtf+0x32>
 8008678:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008698 <sqrtf+0x38>
 800867c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008684:	d505      	bpl.n	8008692 <sqrtf+0x32>
 8008686:	f7ff ff07 	bl	8008498 <__errno>
 800868a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800868e:	2321      	movs	r3, #33	; 0x21
 8008690:	6003      	str	r3, [r0, #0]
 8008692:	ecbd 8b02 	vpop	{d8}
 8008696:	bd08      	pop	{r3, pc}
 8008698:	00000000 	.word	0x00000000

0800869c <__ieee754_sqrtf>:
 800869c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80086a0:	4770      	bx	lr
 80086a2:	0000      	movs	r0, r0
 80086a4:	0000      	movs	r0, r0
	...

080086a8 <__kernel_cos>:
 80086a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	ec57 6b10 	vmov	r6, r7, d0
 80086b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80086b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80086b8:	ed8d 1b00 	vstr	d1, [sp]
 80086bc:	da07      	bge.n	80086ce <__kernel_cos+0x26>
 80086be:	ee10 0a10 	vmov	r0, s0
 80086c2:	4639      	mov	r1, r7
 80086c4:	f7f8 f9d6 	bl	8000a74 <__aeabi_d2iz>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	f000 8088 	beq.w	80087de <__kernel_cos+0x136>
 80086ce:	4632      	mov	r2, r6
 80086d0:	463b      	mov	r3, r7
 80086d2:	4630      	mov	r0, r6
 80086d4:	4639      	mov	r1, r7
 80086d6:	f7f7 ff33 	bl	8000540 <__aeabi_dmul>
 80086da:	4b51      	ldr	r3, [pc, #324]	; (8008820 <__kernel_cos+0x178>)
 80086dc:	2200      	movs	r2, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	460d      	mov	r5, r1
 80086e2:	f7f7 ff2d 	bl	8000540 <__aeabi_dmul>
 80086e6:	a340      	add	r3, pc, #256	; (adr r3, 80087e8 <__kernel_cos+0x140>)
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	4682      	mov	sl, r0
 80086ee:	468b      	mov	fp, r1
 80086f0:	4620      	mov	r0, r4
 80086f2:	4629      	mov	r1, r5
 80086f4:	f7f7 ff24 	bl	8000540 <__aeabi_dmul>
 80086f8:	a33d      	add	r3, pc, #244	; (adr r3, 80087f0 <__kernel_cos+0x148>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f7f7 fd69 	bl	80001d4 <__adddf3>
 8008702:	4622      	mov	r2, r4
 8008704:	462b      	mov	r3, r5
 8008706:	f7f7 ff1b 	bl	8000540 <__aeabi_dmul>
 800870a:	a33b      	add	r3, pc, #236	; (adr r3, 80087f8 <__kernel_cos+0x150>)
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	f7f7 fd5e 	bl	80001d0 <__aeabi_dsub>
 8008714:	4622      	mov	r2, r4
 8008716:	462b      	mov	r3, r5
 8008718:	f7f7 ff12 	bl	8000540 <__aeabi_dmul>
 800871c:	a338      	add	r3, pc, #224	; (adr r3, 8008800 <__kernel_cos+0x158>)
 800871e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008722:	f7f7 fd57 	bl	80001d4 <__adddf3>
 8008726:	4622      	mov	r2, r4
 8008728:	462b      	mov	r3, r5
 800872a:	f7f7 ff09 	bl	8000540 <__aeabi_dmul>
 800872e:	a336      	add	r3, pc, #216	; (adr r3, 8008808 <__kernel_cos+0x160>)
 8008730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008734:	f7f7 fd4c 	bl	80001d0 <__aeabi_dsub>
 8008738:	4622      	mov	r2, r4
 800873a:	462b      	mov	r3, r5
 800873c:	f7f7 ff00 	bl	8000540 <__aeabi_dmul>
 8008740:	a333      	add	r3, pc, #204	; (adr r3, 8008810 <__kernel_cos+0x168>)
 8008742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008746:	f7f7 fd45 	bl	80001d4 <__adddf3>
 800874a:	4622      	mov	r2, r4
 800874c:	462b      	mov	r3, r5
 800874e:	f7f7 fef7 	bl	8000540 <__aeabi_dmul>
 8008752:	4622      	mov	r2, r4
 8008754:	462b      	mov	r3, r5
 8008756:	f7f7 fef3 	bl	8000540 <__aeabi_dmul>
 800875a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800875e:	4604      	mov	r4, r0
 8008760:	460d      	mov	r5, r1
 8008762:	4630      	mov	r0, r6
 8008764:	4639      	mov	r1, r7
 8008766:	f7f7 feeb 	bl	8000540 <__aeabi_dmul>
 800876a:	460b      	mov	r3, r1
 800876c:	4602      	mov	r2, r0
 800876e:	4629      	mov	r1, r5
 8008770:	4620      	mov	r0, r4
 8008772:	f7f7 fd2d 	bl	80001d0 <__aeabi_dsub>
 8008776:	4b2b      	ldr	r3, [pc, #172]	; (8008824 <__kernel_cos+0x17c>)
 8008778:	4598      	cmp	r8, r3
 800877a:	4606      	mov	r6, r0
 800877c:	460f      	mov	r7, r1
 800877e:	dc10      	bgt.n	80087a2 <__kernel_cos+0xfa>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	4650      	mov	r0, sl
 8008786:	4659      	mov	r1, fp
 8008788:	f7f7 fd22 	bl	80001d0 <__aeabi_dsub>
 800878c:	460b      	mov	r3, r1
 800878e:	4926      	ldr	r1, [pc, #152]	; (8008828 <__kernel_cos+0x180>)
 8008790:	4602      	mov	r2, r0
 8008792:	2000      	movs	r0, #0
 8008794:	f7f7 fd1c 	bl	80001d0 <__aeabi_dsub>
 8008798:	ec41 0b10 	vmov	d0, r0, r1
 800879c:	b003      	add	sp, #12
 800879e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a2:	4b22      	ldr	r3, [pc, #136]	; (800882c <__kernel_cos+0x184>)
 80087a4:	4920      	ldr	r1, [pc, #128]	; (8008828 <__kernel_cos+0x180>)
 80087a6:	4598      	cmp	r8, r3
 80087a8:	bfcc      	ite	gt
 80087aa:	4d21      	ldrgt	r5, [pc, #132]	; (8008830 <__kernel_cos+0x188>)
 80087ac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80087b0:	2400      	movs	r4, #0
 80087b2:	4622      	mov	r2, r4
 80087b4:	462b      	mov	r3, r5
 80087b6:	2000      	movs	r0, #0
 80087b8:	f7f7 fd0a 	bl	80001d0 <__aeabi_dsub>
 80087bc:	4622      	mov	r2, r4
 80087be:	4680      	mov	r8, r0
 80087c0:	4689      	mov	r9, r1
 80087c2:	462b      	mov	r3, r5
 80087c4:	4650      	mov	r0, sl
 80087c6:	4659      	mov	r1, fp
 80087c8:	f7f7 fd02 	bl	80001d0 <__aeabi_dsub>
 80087cc:	4632      	mov	r2, r6
 80087ce:	463b      	mov	r3, r7
 80087d0:	f7f7 fcfe 	bl	80001d0 <__aeabi_dsub>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4640      	mov	r0, r8
 80087da:	4649      	mov	r1, r9
 80087dc:	e7da      	b.n	8008794 <__kernel_cos+0xec>
 80087de:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008818 <__kernel_cos+0x170>
 80087e2:	e7db      	b.n	800879c <__kernel_cos+0xf4>
 80087e4:	f3af 8000 	nop.w
 80087e8:	be8838d4 	.word	0xbe8838d4
 80087ec:	bda8fae9 	.word	0xbda8fae9
 80087f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80087f4:	3e21ee9e 	.word	0x3e21ee9e
 80087f8:	809c52ad 	.word	0x809c52ad
 80087fc:	3e927e4f 	.word	0x3e927e4f
 8008800:	19cb1590 	.word	0x19cb1590
 8008804:	3efa01a0 	.word	0x3efa01a0
 8008808:	16c15177 	.word	0x16c15177
 800880c:	3f56c16c 	.word	0x3f56c16c
 8008810:	5555554c 	.word	0x5555554c
 8008814:	3fa55555 	.word	0x3fa55555
 8008818:	00000000 	.word	0x00000000
 800881c:	3ff00000 	.word	0x3ff00000
 8008820:	3fe00000 	.word	0x3fe00000
 8008824:	3fd33332 	.word	0x3fd33332
 8008828:	3ff00000 	.word	0x3ff00000
 800882c:	3fe90000 	.word	0x3fe90000
 8008830:	3fd20000 	.word	0x3fd20000
 8008834:	00000000 	.word	0x00000000

08008838 <__kernel_sin>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	ed2d 8b04 	vpush	{d8-d9}
 8008840:	eeb0 8a41 	vmov.f32	s16, s2
 8008844:	eef0 8a61 	vmov.f32	s17, s3
 8008848:	ec55 4b10 	vmov	r4, r5, d0
 800884c:	b083      	sub	sp, #12
 800884e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008852:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008856:	9001      	str	r0, [sp, #4]
 8008858:	da06      	bge.n	8008868 <__kernel_sin+0x30>
 800885a:	ee10 0a10 	vmov	r0, s0
 800885e:	4629      	mov	r1, r5
 8008860:	f7f8 f908 	bl	8000a74 <__aeabi_d2iz>
 8008864:	2800      	cmp	r0, #0
 8008866:	d051      	beq.n	800890c <__kernel_sin+0xd4>
 8008868:	4622      	mov	r2, r4
 800886a:	462b      	mov	r3, r5
 800886c:	4620      	mov	r0, r4
 800886e:	4629      	mov	r1, r5
 8008870:	f7f7 fe66 	bl	8000540 <__aeabi_dmul>
 8008874:	4682      	mov	sl, r0
 8008876:	468b      	mov	fp, r1
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	4620      	mov	r0, r4
 800887e:	4629      	mov	r1, r5
 8008880:	f7f7 fe5e 	bl	8000540 <__aeabi_dmul>
 8008884:	a341      	add	r3, pc, #260	; (adr r3, 800898c <__kernel_sin+0x154>)
 8008886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888a:	4680      	mov	r8, r0
 800888c:	4689      	mov	r9, r1
 800888e:	4650      	mov	r0, sl
 8008890:	4659      	mov	r1, fp
 8008892:	f7f7 fe55 	bl	8000540 <__aeabi_dmul>
 8008896:	a33f      	add	r3, pc, #252	; (adr r3, 8008994 <__kernel_sin+0x15c>)
 8008898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889c:	f7f7 fc98 	bl	80001d0 <__aeabi_dsub>
 80088a0:	4652      	mov	r2, sl
 80088a2:	465b      	mov	r3, fp
 80088a4:	f7f7 fe4c 	bl	8000540 <__aeabi_dmul>
 80088a8:	a33c      	add	r3, pc, #240	; (adr r3, 800899c <__kernel_sin+0x164>)
 80088aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ae:	f7f7 fc91 	bl	80001d4 <__adddf3>
 80088b2:	4652      	mov	r2, sl
 80088b4:	465b      	mov	r3, fp
 80088b6:	f7f7 fe43 	bl	8000540 <__aeabi_dmul>
 80088ba:	a33a      	add	r3, pc, #232	; (adr r3, 80089a4 <__kernel_sin+0x16c>)
 80088bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c0:	f7f7 fc86 	bl	80001d0 <__aeabi_dsub>
 80088c4:	4652      	mov	r2, sl
 80088c6:	465b      	mov	r3, fp
 80088c8:	f7f7 fe3a 	bl	8000540 <__aeabi_dmul>
 80088cc:	a337      	add	r3, pc, #220	; (adr r3, 80089ac <__kernel_sin+0x174>)
 80088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d2:	f7f7 fc7f 	bl	80001d4 <__adddf3>
 80088d6:	9b01      	ldr	r3, [sp, #4]
 80088d8:	4606      	mov	r6, r0
 80088da:	460f      	mov	r7, r1
 80088dc:	b9eb      	cbnz	r3, 800891a <__kernel_sin+0xe2>
 80088de:	4602      	mov	r2, r0
 80088e0:	460b      	mov	r3, r1
 80088e2:	4650      	mov	r0, sl
 80088e4:	4659      	mov	r1, fp
 80088e6:	f7f7 fe2b 	bl	8000540 <__aeabi_dmul>
 80088ea:	a325      	add	r3, pc, #148	; (adr r3, 8008980 <__kernel_sin+0x148>)
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	f7f7 fc6e 	bl	80001d0 <__aeabi_dsub>
 80088f4:	4642      	mov	r2, r8
 80088f6:	464b      	mov	r3, r9
 80088f8:	f7f7 fe22 	bl	8000540 <__aeabi_dmul>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	4620      	mov	r0, r4
 8008902:	4629      	mov	r1, r5
 8008904:	f7f7 fc66 	bl	80001d4 <__adddf3>
 8008908:	4604      	mov	r4, r0
 800890a:	460d      	mov	r5, r1
 800890c:	ec45 4b10 	vmov	d0, r4, r5
 8008910:	b003      	add	sp, #12
 8008912:	ecbd 8b04 	vpop	{d8-d9}
 8008916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891a:	4b1b      	ldr	r3, [pc, #108]	; (8008988 <__kernel_sin+0x150>)
 800891c:	ec51 0b18 	vmov	r0, r1, d8
 8008920:	2200      	movs	r2, #0
 8008922:	f7f7 fe0d 	bl	8000540 <__aeabi_dmul>
 8008926:	4632      	mov	r2, r6
 8008928:	ec41 0b19 	vmov	d9, r0, r1
 800892c:	463b      	mov	r3, r7
 800892e:	4640      	mov	r0, r8
 8008930:	4649      	mov	r1, r9
 8008932:	f7f7 fe05 	bl	8000540 <__aeabi_dmul>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	ec51 0b19 	vmov	r0, r1, d9
 800893e:	f7f7 fc47 	bl	80001d0 <__aeabi_dsub>
 8008942:	4652      	mov	r2, sl
 8008944:	465b      	mov	r3, fp
 8008946:	f7f7 fdfb 	bl	8000540 <__aeabi_dmul>
 800894a:	ec53 2b18 	vmov	r2, r3, d8
 800894e:	f7f7 fc3f 	bl	80001d0 <__aeabi_dsub>
 8008952:	a30b      	add	r3, pc, #44	; (adr r3, 8008980 <__kernel_sin+0x148>)
 8008954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008958:	4606      	mov	r6, r0
 800895a:	460f      	mov	r7, r1
 800895c:	4640      	mov	r0, r8
 800895e:	4649      	mov	r1, r9
 8008960:	f7f7 fdee 	bl	8000540 <__aeabi_dmul>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	4630      	mov	r0, r6
 800896a:	4639      	mov	r1, r7
 800896c:	f7f7 fc32 	bl	80001d4 <__adddf3>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4620      	mov	r0, r4
 8008976:	4629      	mov	r1, r5
 8008978:	f7f7 fc2a 	bl	80001d0 <__aeabi_dsub>
 800897c:	e7c4      	b.n	8008908 <__kernel_sin+0xd0>
 800897e:	bf00      	nop
 8008980:	55555549 	.word	0x55555549
 8008984:	3fc55555 	.word	0x3fc55555
 8008988:	3fe00000 	.word	0x3fe00000
 800898c:	5acfd57c 	.word	0x5acfd57c
 8008990:	3de5d93a 	.word	0x3de5d93a
 8008994:	8a2b9ceb 	.word	0x8a2b9ceb
 8008998:	3e5ae5e6 	.word	0x3e5ae5e6
 800899c:	57b1fe7d 	.word	0x57b1fe7d
 80089a0:	3ec71de3 	.word	0x3ec71de3
 80089a4:	19c161d5 	.word	0x19c161d5
 80089a8:	3f2a01a0 	.word	0x3f2a01a0
 80089ac:	1110f8a6 	.word	0x1110f8a6
 80089b0:	3f811111 	.word	0x3f811111
 80089b4:	00000000 	.word	0x00000000

080089b8 <__ieee754_rem_pio2>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	ed2d 8b02 	vpush	{d8}
 80089c0:	ec55 4b10 	vmov	r4, r5, d0
 80089c4:	4bca      	ldr	r3, [pc, #808]	; (8008cf0 <__ieee754_rem_pio2+0x338>)
 80089c6:	b08b      	sub	sp, #44	; 0x2c
 80089c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80089cc:	4598      	cmp	r8, r3
 80089ce:	4682      	mov	sl, r0
 80089d0:	9502      	str	r5, [sp, #8]
 80089d2:	dc08      	bgt.n	80089e6 <__ieee754_rem_pio2+0x2e>
 80089d4:	2200      	movs	r2, #0
 80089d6:	2300      	movs	r3, #0
 80089d8:	ed80 0b00 	vstr	d0, [r0]
 80089dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80089e0:	f04f 0b00 	mov.w	fp, #0
 80089e4:	e028      	b.n	8008a38 <__ieee754_rem_pio2+0x80>
 80089e6:	4bc3      	ldr	r3, [pc, #780]	; (8008cf4 <__ieee754_rem_pio2+0x33c>)
 80089e8:	4598      	cmp	r8, r3
 80089ea:	dc78      	bgt.n	8008ade <__ieee754_rem_pio2+0x126>
 80089ec:	9b02      	ldr	r3, [sp, #8]
 80089ee:	4ec2      	ldr	r6, [pc, #776]	; (8008cf8 <__ieee754_rem_pio2+0x340>)
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	ee10 0a10 	vmov	r0, s0
 80089f6:	a3b0      	add	r3, pc, #704	; (adr r3, 8008cb8 <__ieee754_rem_pio2+0x300>)
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	4629      	mov	r1, r5
 80089fe:	dd39      	ble.n	8008a74 <__ieee754_rem_pio2+0xbc>
 8008a00:	f7f7 fbe6 	bl	80001d0 <__aeabi_dsub>
 8008a04:	45b0      	cmp	r8, r6
 8008a06:	4604      	mov	r4, r0
 8008a08:	460d      	mov	r5, r1
 8008a0a:	d01b      	beq.n	8008a44 <__ieee754_rem_pio2+0x8c>
 8008a0c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008cc0 <__ieee754_rem_pio2+0x308>)
 8008a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a12:	f7f7 fbdd 	bl	80001d0 <__aeabi_dsub>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	e9ca 2300 	strd	r2, r3, [sl]
 8008a1e:	4620      	mov	r0, r4
 8008a20:	4629      	mov	r1, r5
 8008a22:	f7f7 fbd5 	bl	80001d0 <__aeabi_dsub>
 8008a26:	a3a6      	add	r3, pc, #664	; (adr r3, 8008cc0 <__ieee754_rem_pio2+0x308>)
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	f7f7 fbd0 	bl	80001d0 <__aeabi_dsub>
 8008a30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008a34:	f04f 0b01 	mov.w	fp, #1
 8008a38:	4658      	mov	r0, fp
 8008a3a:	b00b      	add	sp, #44	; 0x2c
 8008a3c:	ecbd 8b02 	vpop	{d8}
 8008a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a44:	a3a0      	add	r3, pc, #640	; (adr r3, 8008cc8 <__ieee754_rem_pio2+0x310>)
 8008a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4a:	f7f7 fbc1 	bl	80001d0 <__aeabi_dsub>
 8008a4e:	a3a0      	add	r3, pc, #640	; (adr r3, 8008cd0 <__ieee754_rem_pio2+0x318>)
 8008a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a54:	4604      	mov	r4, r0
 8008a56:	460d      	mov	r5, r1
 8008a58:	f7f7 fbba 	bl	80001d0 <__aeabi_dsub>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	e9ca 2300 	strd	r2, r3, [sl]
 8008a64:	4620      	mov	r0, r4
 8008a66:	4629      	mov	r1, r5
 8008a68:	f7f7 fbb2 	bl	80001d0 <__aeabi_dsub>
 8008a6c:	a398      	add	r3, pc, #608	; (adr r3, 8008cd0 <__ieee754_rem_pio2+0x318>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	e7db      	b.n	8008a2c <__ieee754_rem_pio2+0x74>
 8008a74:	f7f7 fbae 	bl	80001d4 <__adddf3>
 8008a78:	45b0      	cmp	r8, r6
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	460d      	mov	r5, r1
 8008a7e:	d016      	beq.n	8008aae <__ieee754_rem_pio2+0xf6>
 8008a80:	a38f      	add	r3, pc, #572	; (adr r3, 8008cc0 <__ieee754_rem_pio2+0x308>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f7f7 fba5 	bl	80001d4 <__adddf3>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	e9ca 2300 	strd	r2, r3, [sl]
 8008a92:	4620      	mov	r0, r4
 8008a94:	4629      	mov	r1, r5
 8008a96:	f7f7 fb9b 	bl	80001d0 <__aeabi_dsub>
 8008a9a:	a389      	add	r3, pc, #548	; (adr r3, 8008cc0 <__ieee754_rem_pio2+0x308>)
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	f7f7 fb98 	bl	80001d4 <__adddf3>
 8008aa4:	f04f 3bff 	mov.w	fp, #4294967295
 8008aa8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008aac:	e7c4      	b.n	8008a38 <__ieee754_rem_pio2+0x80>
 8008aae:	a386      	add	r3, pc, #536	; (adr r3, 8008cc8 <__ieee754_rem_pio2+0x310>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	f7f7 fb8e 	bl	80001d4 <__adddf3>
 8008ab8:	a385      	add	r3, pc, #532	; (adr r3, 8008cd0 <__ieee754_rem_pio2+0x318>)
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	4604      	mov	r4, r0
 8008ac0:	460d      	mov	r5, r1
 8008ac2:	f7f7 fb87 	bl	80001d4 <__adddf3>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	e9ca 2300 	strd	r2, r3, [sl]
 8008ace:	4620      	mov	r0, r4
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	f7f7 fb7d 	bl	80001d0 <__aeabi_dsub>
 8008ad6:	a37e      	add	r3, pc, #504	; (adr r3, 8008cd0 <__ieee754_rem_pio2+0x318>)
 8008ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008adc:	e7e0      	b.n	8008aa0 <__ieee754_rem_pio2+0xe8>
 8008ade:	4b87      	ldr	r3, [pc, #540]	; (8008cfc <__ieee754_rem_pio2+0x344>)
 8008ae0:	4598      	cmp	r8, r3
 8008ae2:	f300 80d8 	bgt.w	8008c96 <__ieee754_rem_pio2+0x2de>
 8008ae6:	f000 f96d 	bl	8008dc4 <fabs>
 8008aea:	ec55 4b10 	vmov	r4, r5, d0
 8008aee:	ee10 0a10 	vmov	r0, s0
 8008af2:	a379      	add	r3, pc, #484	; (adr r3, 8008cd8 <__ieee754_rem_pio2+0x320>)
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	4629      	mov	r1, r5
 8008afa:	f7f7 fd21 	bl	8000540 <__aeabi_dmul>
 8008afe:	4b80      	ldr	r3, [pc, #512]	; (8008d00 <__ieee754_rem_pio2+0x348>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	f7f7 fb67 	bl	80001d4 <__adddf3>
 8008b06:	f7f7 ffb5 	bl	8000a74 <__aeabi_d2iz>
 8008b0a:	4683      	mov	fp, r0
 8008b0c:	f7f7 fcae 	bl	800046c <__aeabi_i2d>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	ec43 2b18 	vmov	d8, r2, r3
 8008b18:	a367      	add	r3, pc, #412	; (adr r3, 8008cb8 <__ieee754_rem_pio2+0x300>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	f7f7 fd0f 	bl	8000540 <__aeabi_dmul>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4620      	mov	r0, r4
 8008b28:	4629      	mov	r1, r5
 8008b2a:	f7f7 fb51 	bl	80001d0 <__aeabi_dsub>
 8008b2e:	a364      	add	r3, pc, #400	; (adr r3, 8008cc0 <__ieee754_rem_pio2+0x308>)
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	4606      	mov	r6, r0
 8008b36:	460f      	mov	r7, r1
 8008b38:	ec51 0b18 	vmov	r0, r1, d8
 8008b3c:	f7f7 fd00 	bl	8000540 <__aeabi_dmul>
 8008b40:	f1bb 0f1f 	cmp.w	fp, #31
 8008b44:	4604      	mov	r4, r0
 8008b46:	460d      	mov	r5, r1
 8008b48:	dc0d      	bgt.n	8008b66 <__ieee754_rem_pio2+0x1ae>
 8008b4a:	4b6e      	ldr	r3, [pc, #440]	; (8008d04 <__ieee754_rem_pio2+0x34c>)
 8008b4c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b54:	4543      	cmp	r3, r8
 8008b56:	d006      	beq.n	8008b66 <__ieee754_rem_pio2+0x1ae>
 8008b58:	4622      	mov	r2, r4
 8008b5a:	462b      	mov	r3, r5
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	4639      	mov	r1, r7
 8008b60:	f7f7 fb36 	bl	80001d0 <__aeabi_dsub>
 8008b64:	e00e      	b.n	8008b84 <__ieee754_rem_pio2+0x1cc>
 8008b66:	462b      	mov	r3, r5
 8008b68:	4622      	mov	r2, r4
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	4639      	mov	r1, r7
 8008b6e:	f7f7 fb2f 	bl	80001d0 <__aeabi_dsub>
 8008b72:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008b76:	9303      	str	r3, [sp, #12]
 8008b78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008b7c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008b80:	2b10      	cmp	r3, #16
 8008b82:	dc02      	bgt.n	8008b8a <__ieee754_rem_pio2+0x1d2>
 8008b84:	e9ca 0100 	strd	r0, r1, [sl]
 8008b88:	e039      	b.n	8008bfe <__ieee754_rem_pio2+0x246>
 8008b8a:	a34f      	add	r3, pc, #316	; (adr r3, 8008cc8 <__ieee754_rem_pio2+0x310>)
 8008b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b90:	ec51 0b18 	vmov	r0, r1, d8
 8008b94:	f7f7 fcd4 	bl	8000540 <__aeabi_dmul>
 8008b98:	4604      	mov	r4, r0
 8008b9a:	460d      	mov	r5, r1
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	f7f7 fb14 	bl	80001d0 <__aeabi_dsub>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	4680      	mov	r8, r0
 8008bae:	4689      	mov	r9, r1
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	4639      	mov	r1, r7
 8008bb4:	f7f7 fb0c 	bl	80001d0 <__aeabi_dsub>
 8008bb8:	4622      	mov	r2, r4
 8008bba:	462b      	mov	r3, r5
 8008bbc:	f7f7 fb08 	bl	80001d0 <__aeabi_dsub>
 8008bc0:	a343      	add	r3, pc, #268	; (adr r3, 8008cd0 <__ieee754_rem_pio2+0x318>)
 8008bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	460d      	mov	r5, r1
 8008bca:	ec51 0b18 	vmov	r0, r1, d8
 8008bce:	f7f7 fcb7 	bl	8000540 <__aeabi_dmul>
 8008bd2:	4622      	mov	r2, r4
 8008bd4:	462b      	mov	r3, r5
 8008bd6:	f7f7 fafb 	bl	80001d0 <__aeabi_dsub>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4604      	mov	r4, r0
 8008be0:	460d      	mov	r5, r1
 8008be2:	4640      	mov	r0, r8
 8008be4:	4649      	mov	r1, r9
 8008be6:	f7f7 faf3 	bl	80001d0 <__aeabi_dsub>
 8008bea:	9a03      	ldr	r2, [sp, #12]
 8008bec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	2b31      	cmp	r3, #49	; 0x31
 8008bf4:	dc24      	bgt.n	8008c40 <__ieee754_rem_pio2+0x288>
 8008bf6:	e9ca 0100 	strd	r0, r1, [sl]
 8008bfa:	4646      	mov	r6, r8
 8008bfc:	464f      	mov	r7, r9
 8008bfe:	e9da 8900 	ldrd	r8, r9, [sl]
 8008c02:	4630      	mov	r0, r6
 8008c04:	4642      	mov	r2, r8
 8008c06:	464b      	mov	r3, r9
 8008c08:	4639      	mov	r1, r7
 8008c0a:	f7f7 fae1 	bl	80001d0 <__aeabi_dsub>
 8008c0e:	462b      	mov	r3, r5
 8008c10:	4622      	mov	r2, r4
 8008c12:	f7f7 fadd 	bl	80001d0 <__aeabi_dsub>
 8008c16:	9b02      	ldr	r3, [sp, #8]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008c1e:	f6bf af0b 	bge.w	8008a38 <__ieee754_rem_pio2+0x80>
 8008c22:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c26:	f8ca 3004 	str.w	r3, [sl, #4]
 8008c2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c2e:	f8ca 8000 	str.w	r8, [sl]
 8008c32:	f8ca 0008 	str.w	r0, [sl, #8]
 8008c36:	f8ca 300c 	str.w	r3, [sl, #12]
 8008c3a:	f1cb 0b00 	rsb	fp, fp, #0
 8008c3e:	e6fb      	b.n	8008a38 <__ieee754_rem_pio2+0x80>
 8008c40:	a327      	add	r3, pc, #156	; (adr r3, 8008ce0 <__ieee754_rem_pio2+0x328>)
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	ec51 0b18 	vmov	r0, r1, d8
 8008c4a:	f7f7 fc79 	bl	8000540 <__aeabi_dmul>
 8008c4e:	4604      	mov	r4, r0
 8008c50:	460d      	mov	r5, r1
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4640      	mov	r0, r8
 8008c58:	4649      	mov	r1, r9
 8008c5a:	f7f7 fab9 	bl	80001d0 <__aeabi_dsub>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4606      	mov	r6, r0
 8008c64:	460f      	mov	r7, r1
 8008c66:	4640      	mov	r0, r8
 8008c68:	4649      	mov	r1, r9
 8008c6a:	f7f7 fab1 	bl	80001d0 <__aeabi_dsub>
 8008c6e:	4622      	mov	r2, r4
 8008c70:	462b      	mov	r3, r5
 8008c72:	f7f7 faad 	bl	80001d0 <__aeabi_dsub>
 8008c76:	a31c      	add	r3, pc, #112	; (adr r3, 8008ce8 <__ieee754_rem_pio2+0x330>)
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	4604      	mov	r4, r0
 8008c7e:	460d      	mov	r5, r1
 8008c80:	ec51 0b18 	vmov	r0, r1, d8
 8008c84:	f7f7 fc5c 	bl	8000540 <__aeabi_dmul>
 8008c88:	4622      	mov	r2, r4
 8008c8a:	462b      	mov	r3, r5
 8008c8c:	f7f7 faa0 	bl	80001d0 <__aeabi_dsub>
 8008c90:	4604      	mov	r4, r0
 8008c92:	460d      	mov	r5, r1
 8008c94:	e760      	b.n	8008b58 <__ieee754_rem_pio2+0x1a0>
 8008c96:	4b1c      	ldr	r3, [pc, #112]	; (8008d08 <__ieee754_rem_pio2+0x350>)
 8008c98:	4598      	cmp	r8, r3
 8008c9a:	dd37      	ble.n	8008d0c <__ieee754_rem_pio2+0x354>
 8008c9c:	ee10 2a10 	vmov	r2, s0
 8008ca0:	462b      	mov	r3, r5
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	f7f7 fa93 	bl	80001d0 <__aeabi_dsub>
 8008caa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008cae:	e9ca 0100 	strd	r0, r1, [sl]
 8008cb2:	e695      	b.n	80089e0 <__ieee754_rem_pio2+0x28>
 8008cb4:	f3af 8000 	nop.w
 8008cb8:	54400000 	.word	0x54400000
 8008cbc:	3ff921fb 	.word	0x3ff921fb
 8008cc0:	1a626331 	.word	0x1a626331
 8008cc4:	3dd0b461 	.word	0x3dd0b461
 8008cc8:	1a600000 	.word	0x1a600000
 8008ccc:	3dd0b461 	.word	0x3dd0b461
 8008cd0:	2e037073 	.word	0x2e037073
 8008cd4:	3ba3198a 	.word	0x3ba3198a
 8008cd8:	6dc9c883 	.word	0x6dc9c883
 8008cdc:	3fe45f30 	.word	0x3fe45f30
 8008ce0:	2e000000 	.word	0x2e000000
 8008ce4:	3ba3198a 	.word	0x3ba3198a
 8008ce8:	252049c1 	.word	0x252049c1
 8008cec:	397b839a 	.word	0x397b839a
 8008cf0:	3fe921fb 	.word	0x3fe921fb
 8008cf4:	4002d97b 	.word	0x4002d97b
 8008cf8:	3ff921fb 	.word	0x3ff921fb
 8008cfc:	413921fb 	.word	0x413921fb
 8008d00:	3fe00000 	.word	0x3fe00000
 8008d04:	080096fc 	.word	0x080096fc
 8008d08:	7fefffff 	.word	0x7fefffff
 8008d0c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008d10:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8008d14:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008d18:	4620      	mov	r0, r4
 8008d1a:	460d      	mov	r5, r1
 8008d1c:	f7f7 feaa 	bl	8000a74 <__aeabi_d2iz>
 8008d20:	f7f7 fba4 	bl	800046c <__aeabi_i2d>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4620      	mov	r0, r4
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d30:	f7f7 fa4e 	bl	80001d0 <__aeabi_dsub>
 8008d34:	4b21      	ldr	r3, [pc, #132]	; (8008dbc <__ieee754_rem_pio2+0x404>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	f7f7 fc02 	bl	8000540 <__aeabi_dmul>
 8008d3c:	460d      	mov	r5, r1
 8008d3e:	4604      	mov	r4, r0
 8008d40:	f7f7 fe98 	bl	8000a74 <__aeabi_d2iz>
 8008d44:	f7f7 fb92 	bl	800046c <__aeabi_i2d>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	4629      	mov	r1, r5
 8008d50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d54:	f7f7 fa3c 	bl	80001d0 <__aeabi_dsub>
 8008d58:	4b18      	ldr	r3, [pc, #96]	; (8008dbc <__ieee754_rem_pio2+0x404>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f7f7 fbf0 	bl	8000540 <__aeabi_dmul>
 8008d60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d64:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008d68:	2703      	movs	r7, #3
 8008d6a:	2400      	movs	r4, #0
 8008d6c:	2500      	movs	r5, #0
 8008d6e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8008d72:	4622      	mov	r2, r4
 8008d74:	462b      	mov	r3, r5
 8008d76:	46b9      	mov	r9, r7
 8008d78:	3f01      	subs	r7, #1
 8008d7a:	f7f7 fe49 	bl	8000a10 <__aeabi_dcmpeq>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d1f5      	bne.n	8008d6e <__ieee754_rem_pio2+0x3b6>
 8008d82:	4b0f      	ldr	r3, [pc, #60]	; (8008dc0 <__ieee754_rem_pio2+0x408>)
 8008d84:	9301      	str	r3, [sp, #4]
 8008d86:	2302      	movs	r3, #2
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	4632      	mov	r2, r6
 8008d8c:	464b      	mov	r3, r9
 8008d8e:	4651      	mov	r1, sl
 8008d90:	a804      	add	r0, sp, #16
 8008d92:	f000 f821 	bl	8008dd8 <__kernel_rem_pio2>
 8008d96:	9b02      	ldr	r3, [sp, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	4683      	mov	fp, r0
 8008d9c:	f6bf ae4c 	bge.w	8008a38 <__ieee754_rem_pio2+0x80>
 8008da0:	e9da 2100 	ldrd	r2, r1, [sl]
 8008da4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008da8:	e9ca 2300 	strd	r2, r3, [sl]
 8008dac:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008db0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008db4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008db8:	e73f      	b.n	8008c3a <__ieee754_rem_pio2+0x282>
 8008dba:	bf00      	nop
 8008dbc:	41700000 	.word	0x41700000
 8008dc0:	0800977c 	.word	0x0800977c

08008dc4 <fabs>:
 8008dc4:	ec51 0b10 	vmov	r0, r1, d0
 8008dc8:	ee10 2a10 	vmov	r2, s0
 8008dcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008dd0:	ec43 2b10 	vmov	d0, r2, r3
 8008dd4:	4770      	bx	lr
	...

08008dd8 <__kernel_rem_pio2>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	ed2d 8b02 	vpush	{d8}
 8008de0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008de4:	f112 0f14 	cmn.w	r2, #20
 8008de8:	9306      	str	r3, [sp, #24]
 8008dea:	9104      	str	r1, [sp, #16]
 8008dec:	4bc2      	ldr	r3, [pc, #776]	; (80090f8 <__kernel_rem_pio2+0x320>)
 8008dee:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008df0:	9009      	str	r0, [sp, #36]	; 0x24
 8008df2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	9b06      	ldr	r3, [sp, #24]
 8008dfa:	f103 33ff 	add.w	r3, r3, #4294967295
 8008dfe:	bfa8      	it	ge
 8008e00:	1ed4      	subge	r4, r2, #3
 8008e02:	9305      	str	r3, [sp, #20]
 8008e04:	bfb2      	itee	lt
 8008e06:	2400      	movlt	r4, #0
 8008e08:	2318      	movge	r3, #24
 8008e0a:	fb94 f4f3 	sdivge	r4, r4, r3
 8008e0e:	f06f 0317 	mvn.w	r3, #23
 8008e12:	fb04 3303 	mla	r3, r4, r3, r3
 8008e16:	eb03 0a02 	add.w	sl, r3, r2
 8008e1a:	9b00      	ldr	r3, [sp, #0]
 8008e1c:	9a05      	ldr	r2, [sp, #20]
 8008e1e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80090e8 <__kernel_rem_pio2+0x310>
 8008e22:	eb03 0802 	add.w	r8, r3, r2
 8008e26:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008e28:	1aa7      	subs	r7, r4, r2
 8008e2a:	ae20      	add	r6, sp, #128	; 0x80
 8008e2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008e30:	2500      	movs	r5, #0
 8008e32:	4545      	cmp	r5, r8
 8008e34:	dd13      	ble.n	8008e5e <__kernel_rem_pio2+0x86>
 8008e36:	9b06      	ldr	r3, [sp, #24]
 8008e38:	aa20      	add	r2, sp, #128	; 0x80
 8008e3a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008e3e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008e42:	f04f 0800 	mov.w	r8, #0
 8008e46:	9b00      	ldr	r3, [sp, #0]
 8008e48:	4598      	cmp	r8, r3
 8008e4a:	dc31      	bgt.n	8008eb0 <__kernel_rem_pio2+0xd8>
 8008e4c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80090e8 <__kernel_rem_pio2+0x310>
 8008e50:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008e54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e58:	462f      	mov	r7, r5
 8008e5a:	2600      	movs	r6, #0
 8008e5c:	e01b      	b.n	8008e96 <__kernel_rem_pio2+0xbe>
 8008e5e:	42ef      	cmn	r7, r5
 8008e60:	d407      	bmi.n	8008e72 <__kernel_rem_pio2+0x9a>
 8008e62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008e66:	f7f7 fb01 	bl	800046c <__aeabi_i2d>
 8008e6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008e6e:	3501      	adds	r5, #1
 8008e70:	e7df      	b.n	8008e32 <__kernel_rem_pio2+0x5a>
 8008e72:	ec51 0b18 	vmov	r0, r1, d8
 8008e76:	e7f8      	b.n	8008e6a <__kernel_rem_pio2+0x92>
 8008e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008e80:	f7f7 fb5e 	bl	8000540 <__aeabi_dmul>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e8c:	f7f7 f9a2 	bl	80001d4 <__adddf3>
 8008e90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e94:	3601      	adds	r6, #1
 8008e96:	9b05      	ldr	r3, [sp, #20]
 8008e98:	429e      	cmp	r6, r3
 8008e9a:	f1a7 0708 	sub.w	r7, r7, #8
 8008e9e:	ddeb      	ble.n	8008e78 <__kernel_rem_pio2+0xa0>
 8008ea0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ea4:	f108 0801 	add.w	r8, r8, #1
 8008ea8:	ecab 7b02 	vstmia	fp!, {d7}
 8008eac:	3508      	adds	r5, #8
 8008eae:	e7ca      	b.n	8008e46 <__kernel_rem_pio2+0x6e>
 8008eb0:	9b00      	ldr	r3, [sp, #0]
 8008eb2:	aa0c      	add	r2, sp, #48	; 0x30
 8008eb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008eb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eba:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008ebc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008ec0:	9c00      	ldr	r4, [sp, #0]
 8008ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ec4:	00e3      	lsls	r3, r4, #3
 8008ec6:	9308      	str	r3, [sp, #32]
 8008ec8:	ab98      	add	r3, sp, #608	; 0x260
 8008eca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ece:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008ed2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008ed6:	ab70      	add	r3, sp, #448	; 0x1c0
 8008ed8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008edc:	46c3      	mov	fp, r8
 8008ede:	46a1      	mov	r9, r4
 8008ee0:	f1b9 0f00 	cmp.w	r9, #0
 8008ee4:	f1a5 0508 	sub.w	r5, r5, #8
 8008ee8:	dc77      	bgt.n	8008fda <__kernel_rem_pio2+0x202>
 8008eea:	ec47 6b10 	vmov	d0, r6, r7
 8008eee:	4650      	mov	r0, sl
 8008ef0:	f000 fac2 	bl	8009478 <scalbn>
 8008ef4:	ec57 6b10 	vmov	r6, r7, d0
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008efe:	ee10 0a10 	vmov	r0, s0
 8008f02:	4639      	mov	r1, r7
 8008f04:	f7f7 fb1c 	bl	8000540 <__aeabi_dmul>
 8008f08:	ec41 0b10 	vmov	d0, r0, r1
 8008f0c:	f000 fb34 	bl	8009578 <floor>
 8008f10:	4b7a      	ldr	r3, [pc, #488]	; (80090fc <__kernel_rem_pio2+0x324>)
 8008f12:	ec51 0b10 	vmov	r0, r1, d0
 8008f16:	2200      	movs	r2, #0
 8008f18:	f7f7 fb12 	bl	8000540 <__aeabi_dmul>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4630      	mov	r0, r6
 8008f22:	4639      	mov	r1, r7
 8008f24:	f7f7 f954 	bl	80001d0 <__aeabi_dsub>
 8008f28:	460f      	mov	r7, r1
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	f7f7 fda2 	bl	8000a74 <__aeabi_d2iz>
 8008f30:	9002      	str	r0, [sp, #8]
 8008f32:	f7f7 fa9b 	bl	800046c <__aeabi_i2d>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	4639      	mov	r1, r7
 8008f3e:	f7f7 f947 	bl	80001d0 <__aeabi_dsub>
 8008f42:	f1ba 0f00 	cmp.w	sl, #0
 8008f46:	4606      	mov	r6, r0
 8008f48:	460f      	mov	r7, r1
 8008f4a:	dd6d      	ble.n	8009028 <__kernel_rem_pio2+0x250>
 8008f4c:	1e61      	subs	r1, r4, #1
 8008f4e:	ab0c      	add	r3, sp, #48	; 0x30
 8008f50:	9d02      	ldr	r5, [sp, #8]
 8008f52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f56:	f1ca 0018 	rsb	r0, sl, #24
 8008f5a:	fa43 f200 	asr.w	r2, r3, r0
 8008f5e:	4415      	add	r5, r2
 8008f60:	4082      	lsls	r2, r0
 8008f62:	1a9b      	subs	r3, r3, r2
 8008f64:	aa0c      	add	r2, sp, #48	; 0x30
 8008f66:	9502      	str	r5, [sp, #8]
 8008f68:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008f6c:	f1ca 0217 	rsb	r2, sl, #23
 8008f70:	fa43 fb02 	asr.w	fp, r3, r2
 8008f74:	f1bb 0f00 	cmp.w	fp, #0
 8008f78:	dd65      	ble.n	8009046 <__kernel_rem_pio2+0x26e>
 8008f7a:	9b02      	ldr	r3, [sp, #8]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	3301      	adds	r3, #1
 8008f80:	9302      	str	r3, [sp, #8]
 8008f82:	4615      	mov	r5, r2
 8008f84:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008f88:	4294      	cmp	r4, r2
 8008f8a:	f300 809f 	bgt.w	80090cc <__kernel_rem_pio2+0x2f4>
 8008f8e:	f1ba 0f00 	cmp.w	sl, #0
 8008f92:	dd07      	ble.n	8008fa4 <__kernel_rem_pio2+0x1cc>
 8008f94:	f1ba 0f01 	cmp.w	sl, #1
 8008f98:	f000 80c1 	beq.w	800911e <__kernel_rem_pio2+0x346>
 8008f9c:	f1ba 0f02 	cmp.w	sl, #2
 8008fa0:	f000 80c7 	beq.w	8009132 <__kernel_rem_pio2+0x35a>
 8008fa4:	f1bb 0f02 	cmp.w	fp, #2
 8008fa8:	d14d      	bne.n	8009046 <__kernel_rem_pio2+0x26e>
 8008faa:	4632      	mov	r2, r6
 8008fac:	463b      	mov	r3, r7
 8008fae:	4954      	ldr	r1, [pc, #336]	; (8009100 <__kernel_rem_pio2+0x328>)
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	f7f7 f90d 	bl	80001d0 <__aeabi_dsub>
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	460f      	mov	r7, r1
 8008fba:	2d00      	cmp	r5, #0
 8008fbc:	d043      	beq.n	8009046 <__kernel_rem_pio2+0x26e>
 8008fbe:	4650      	mov	r0, sl
 8008fc0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80090f0 <__kernel_rem_pio2+0x318>
 8008fc4:	f000 fa58 	bl	8009478 <scalbn>
 8008fc8:	4630      	mov	r0, r6
 8008fca:	4639      	mov	r1, r7
 8008fcc:	ec53 2b10 	vmov	r2, r3, d0
 8008fd0:	f7f7 f8fe 	bl	80001d0 <__aeabi_dsub>
 8008fd4:	4606      	mov	r6, r0
 8008fd6:	460f      	mov	r7, r1
 8008fd8:	e035      	b.n	8009046 <__kernel_rem_pio2+0x26e>
 8008fda:	4b4a      	ldr	r3, [pc, #296]	; (8009104 <__kernel_rem_pio2+0x32c>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4630      	mov	r0, r6
 8008fe0:	4639      	mov	r1, r7
 8008fe2:	f7f7 faad 	bl	8000540 <__aeabi_dmul>
 8008fe6:	f7f7 fd45 	bl	8000a74 <__aeabi_d2iz>
 8008fea:	f7f7 fa3f 	bl	800046c <__aeabi_i2d>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	ec43 2b18 	vmov	d8, r2, r3
 8008ff6:	4b44      	ldr	r3, [pc, #272]	; (8009108 <__kernel_rem_pio2+0x330>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f7f7 faa1 	bl	8000540 <__aeabi_dmul>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	4630      	mov	r0, r6
 8009004:	4639      	mov	r1, r7
 8009006:	f7f7 f8e3 	bl	80001d0 <__aeabi_dsub>
 800900a:	f7f7 fd33 	bl	8000a74 <__aeabi_d2iz>
 800900e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009012:	f84b 0b04 	str.w	r0, [fp], #4
 8009016:	ec51 0b18 	vmov	r0, r1, d8
 800901a:	f7f7 f8db 	bl	80001d4 <__adddf3>
 800901e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009022:	4606      	mov	r6, r0
 8009024:	460f      	mov	r7, r1
 8009026:	e75b      	b.n	8008ee0 <__kernel_rem_pio2+0x108>
 8009028:	d106      	bne.n	8009038 <__kernel_rem_pio2+0x260>
 800902a:	1e63      	subs	r3, r4, #1
 800902c:	aa0c      	add	r2, sp, #48	; 0x30
 800902e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009032:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8009036:	e79d      	b.n	8008f74 <__kernel_rem_pio2+0x19c>
 8009038:	4b34      	ldr	r3, [pc, #208]	; (800910c <__kernel_rem_pio2+0x334>)
 800903a:	2200      	movs	r2, #0
 800903c:	f7f7 fd06 	bl	8000a4c <__aeabi_dcmpge>
 8009040:	2800      	cmp	r0, #0
 8009042:	d140      	bne.n	80090c6 <__kernel_rem_pio2+0x2ee>
 8009044:	4683      	mov	fp, r0
 8009046:	2200      	movs	r2, #0
 8009048:	2300      	movs	r3, #0
 800904a:	4630      	mov	r0, r6
 800904c:	4639      	mov	r1, r7
 800904e:	f7f7 fcdf 	bl	8000a10 <__aeabi_dcmpeq>
 8009052:	2800      	cmp	r0, #0
 8009054:	f000 80c1 	beq.w	80091da <__kernel_rem_pio2+0x402>
 8009058:	1e65      	subs	r5, r4, #1
 800905a:	462b      	mov	r3, r5
 800905c:	2200      	movs	r2, #0
 800905e:	9900      	ldr	r1, [sp, #0]
 8009060:	428b      	cmp	r3, r1
 8009062:	da6d      	bge.n	8009140 <__kernel_rem_pio2+0x368>
 8009064:	2a00      	cmp	r2, #0
 8009066:	f000 808a 	beq.w	800917e <__kernel_rem_pio2+0x3a6>
 800906a:	ab0c      	add	r3, sp, #48	; 0x30
 800906c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009070:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 80ae 	beq.w	80091d6 <__kernel_rem_pio2+0x3fe>
 800907a:	4650      	mov	r0, sl
 800907c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80090f0 <__kernel_rem_pio2+0x318>
 8009080:	f000 f9fa 	bl	8009478 <scalbn>
 8009084:	1c6b      	adds	r3, r5, #1
 8009086:	00da      	lsls	r2, r3, #3
 8009088:	9205      	str	r2, [sp, #20]
 800908a:	ec57 6b10 	vmov	r6, r7, d0
 800908e:	aa70      	add	r2, sp, #448	; 0x1c0
 8009090:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8009104 <__kernel_rem_pio2+0x32c>
 8009094:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8009098:	462c      	mov	r4, r5
 800909a:	f04f 0800 	mov.w	r8, #0
 800909e:	2c00      	cmp	r4, #0
 80090a0:	f280 80d4 	bge.w	800924c <__kernel_rem_pio2+0x474>
 80090a4:	462c      	mov	r4, r5
 80090a6:	2c00      	cmp	r4, #0
 80090a8:	f2c0 8102 	blt.w	80092b0 <__kernel_rem_pio2+0x4d8>
 80090ac:	4b18      	ldr	r3, [pc, #96]	; (8009110 <__kernel_rem_pio2+0x338>)
 80090ae:	461e      	mov	r6, r3
 80090b0:	ab70      	add	r3, sp, #448	; 0x1c0
 80090b2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80090b6:	1b2b      	subs	r3, r5, r4
 80090b8:	f04f 0900 	mov.w	r9, #0
 80090bc:	f04f 0a00 	mov.w	sl, #0
 80090c0:	2700      	movs	r7, #0
 80090c2:	9306      	str	r3, [sp, #24]
 80090c4:	e0e6      	b.n	8009294 <__kernel_rem_pio2+0x4bc>
 80090c6:	f04f 0b02 	mov.w	fp, #2
 80090ca:	e756      	b.n	8008f7a <__kernel_rem_pio2+0x1a2>
 80090cc:	f8d8 3000 	ldr.w	r3, [r8]
 80090d0:	bb05      	cbnz	r5, 8009114 <__kernel_rem_pio2+0x33c>
 80090d2:	b123      	cbz	r3, 80090de <__kernel_rem_pio2+0x306>
 80090d4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80090d8:	f8c8 3000 	str.w	r3, [r8]
 80090dc:	2301      	movs	r3, #1
 80090de:	3201      	adds	r2, #1
 80090e0:	f108 0804 	add.w	r8, r8, #4
 80090e4:	461d      	mov	r5, r3
 80090e6:	e74f      	b.n	8008f88 <__kernel_rem_pio2+0x1b0>
	...
 80090f4:	3ff00000 	.word	0x3ff00000
 80090f8:	080098c8 	.word	0x080098c8
 80090fc:	40200000 	.word	0x40200000
 8009100:	3ff00000 	.word	0x3ff00000
 8009104:	3e700000 	.word	0x3e700000
 8009108:	41700000 	.word	0x41700000
 800910c:	3fe00000 	.word	0x3fe00000
 8009110:	08009888 	.word	0x08009888
 8009114:	1acb      	subs	r3, r1, r3
 8009116:	f8c8 3000 	str.w	r3, [r8]
 800911a:	462b      	mov	r3, r5
 800911c:	e7df      	b.n	80090de <__kernel_rem_pio2+0x306>
 800911e:	1e62      	subs	r2, r4, #1
 8009120:	ab0c      	add	r3, sp, #48	; 0x30
 8009122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009126:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800912a:	a90c      	add	r1, sp, #48	; 0x30
 800912c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009130:	e738      	b.n	8008fa4 <__kernel_rem_pio2+0x1cc>
 8009132:	1e62      	subs	r2, r4, #1
 8009134:	ab0c      	add	r3, sp, #48	; 0x30
 8009136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800913a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800913e:	e7f4      	b.n	800912a <__kernel_rem_pio2+0x352>
 8009140:	a90c      	add	r1, sp, #48	; 0x30
 8009142:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009146:	3b01      	subs	r3, #1
 8009148:	430a      	orrs	r2, r1
 800914a:	e788      	b.n	800905e <__kernel_rem_pio2+0x286>
 800914c:	3301      	adds	r3, #1
 800914e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009152:	2900      	cmp	r1, #0
 8009154:	d0fa      	beq.n	800914c <__kernel_rem_pio2+0x374>
 8009156:	9a08      	ldr	r2, [sp, #32]
 8009158:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800915c:	446a      	add	r2, sp
 800915e:	3a98      	subs	r2, #152	; 0x98
 8009160:	9208      	str	r2, [sp, #32]
 8009162:	9a06      	ldr	r2, [sp, #24]
 8009164:	a920      	add	r1, sp, #128	; 0x80
 8009166:	18a2      	adds	r2, r4, r2
 8009168:	18e3      	adds	r3, r4, r3
 800916a:	f104 0801 	add.w	r8, r4, #1
 800916e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8009172:	9302      	str	r3, [sp, #8]
 8009174:	9b02      	ldr	r3, [sp, #8]
 8009176:	4543      	cmp	r3, r8
 8009178:	da04      	bge.n	8009184 <__kernel_rem_pio2+0x3ac>
 800917a:	461c      	mov	r4, r3
 800917c:	e6a2      	b.n	8008ec4 <__kernel_rem_pio2+0xec>
 800917e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009180:	2301      	movs	r3, #1
 8009182:	e7e4      	b.n	800914e <__kernel_rem_pio2+0x376>
 8009184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009186:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800918a:	f7f7 f96f 	bl	800046c <__aeabi_i2d>
 800918e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009194:	46ab      	mov	fp, r5
 8009196:	461c      	mov	r4, r3
 8009198:	f04f 0900 	mov.w	r9, #0
 800919c:	2600      	movs	r6, #0
 800919e:	2700      	movs	r7, #0
 80091a0:	9b05      	ldr	r3, [sp, #20]
 80091a2:	4599      	cmp	r9, r3
 80091a4:	dd06      	ble.n	80091b4 <__kernel_rem_pio2+0x3dc>
 80091a6:	9b08      	ldr	r3, [sp, #32]
 80091a8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80091ac:	f108 0801 	add.w	r8, r8, #1
 80091b0:	9308      	str	r3, [sp, #32]
 80091b2:	e7df      	b.n	8009174 <__kernel_rem_pio2+0x39c>
 80091b4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80091b8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80091bc:	f7f7 f9c0 	bl	8000540 <__aeabi_dmul>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4630      	mov	r0, r6
 80091c6:	4639      	mov	r1, r7
 80091c8:	f7f7 f804 	bl	80001d4 <__adddf3>
 80091cc:	f109 0901 	add.w	r9, r9, #1
 80091d0:	4606      	mov	r6, r0
 80091d2:	460f      	mov	r7, r1
 80091d4:	e7e4      	b.n	80091a0 <__kernel_rem_pio2+0x3c8>
 80091d6:	3d01      	subs	r5, #1
 80091d8:	e747      	b.n	800906a <__kernel_rem_pio2+0x292>
 80091da:	ec47 6b10 	vmov	d0, r6, r7
 80091de:	f1ca 0000 	rsb	r0, sl, #0
 80091e2:	f000 f949 	bl	8009478 <scalbn>
 80091e6:	ec57 6b10 	vmov	r6, r7, d0
 80091ea:	4ba0      	ldr	r3, [pc, #640]	; (800946c <__kernel_rem_pio2+0x694>)
 80091ec:	ee10 0a10 	vmov	r0, s0
 80091f0:	2200      	movs	r2, #0
 80091f2:	4639      	mov	r1, r7
 80091f4:	f7f7 fc2a 	bl	8000a4c <__aeabi_dcmpge>
 80091f8:	b1f8      	cbz	r0, 800923a <__kernel_rem_pio2+0x462>
 80091fa:	4b9d      	ldr	r3, [pc, #628]	; (8009470 <__kernel_rem_pio2+0x698>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	4630      	mov	r0, r6
 8009200:	4639      	mov	r1, r7
 8009202:	f7f7 f99d 	bl	8000540 <__aeabi_dmul>
 8009206:	f7f7 fc35 	bl	8000a74 <__aeabi_d2iz>
 800920a:	4680      	mov	r8, r0
 800920c:	f7f7 f92e 	bl	800046c <__aeabi_i2d>
 8009210:	4b96      	ldr	r3, [pc, #600]	; (800946c <__kernel_rem_pio2+0x694>)
 8009212:	2200      	movs	r2, #0
 8009214:	f7f7 f994 	bl	8000540 <__aeabi_dmul>
 8009218:	460b      	mov	r3, r1
 800921a:	4602      	mov	r2, r0
 800921c:	4639      	mov	r1, r7
 800921e:	4630      	mov	r0, r6
 8009220:	f7f6 ffd6 	bl	80001d0 <__aeabi_dsub>
 8009224:	f7f7 fc26 	bl	8000a74 <__aeabi_d2iz>
 8009228:	1c65      	adds	r5, r4, #1
 800922a:	ab0c      	add	r3, sp, #48	; 0x30
 800922c:	f10a 0a18 	add.w	sl, sl, #24
 8009230:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009234:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009238:	e71f      	b.n	800907a <__kernel_rem_pio2+0x2a2>
 800923a:	4630      	mov	r0, r6
 800923c:	4639      	mov	r1, r7
 800923e:	f7f7 fc19 	bl	8000a74 <__aeabi_d2iz>
 8009242:	ab0c      	add	r3, sp, #48	; 0x30
 8009244:	4625      	mov	r5, r4
 8009246:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800924a:	e716      	b.n	800907a <__kernel_rem_pio2+0x2a2>
 800924c:	ab0c      	add	r3, sp, #48	; 0x30
 800924e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009252:	f7f7 f90b 	bl	800046c <__aeabi_i2d>
 8009256:	4632      	mov	r2, r6
 8009258:	463b      	mov	r3, r7
 800925a:	f7f7 f971 	bl	8000540 <__aeabi_dmul>
 800925e:	4642      	mov	r2, r8
 8009260:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009264:	464b      	mov	r3, r9
 8009266:	4630      	mov	r0, r6
 8009268:	4639      	mov	r1, r7
 800926a:	f7f7 f969 	bl	8000540 <__aeabi_dmul>
 800926e:	3c01      	subs	r4, #1
 8009270:	4606      	mov	r6, r0
 8009272:	460f      	mov	r7, r1
 8009274:	e713      	b.n	800909e <__kernel_rem_pio2+0x2c6>
 8009276:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800927a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800927e:	f7f7 f95f 	bl	8000540 <__aeabi_dmul>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	4648      	mov	r0, r9
 8009288:	4651      	mov	r1, sl
 800928a:	f7f6 ffa3 	bl	80001d4 <__adddf3>
 800928e:	3701      	adds	r7, #1
 8009290:	4681      	mov	r9, r0
 8009292:	468a      	mov	sl, r1
 8009294:	9b00      	ldr	r3, [sp, #0]
 8009296:	429f      	cmp	r7, r3
 8009298:	dc02      	bgt.n	80092a0 <__kernel_rem_pio2+0x4c8>
 800929a:	9b06      	ldr	r3, [sp, #24]
 800929c:	429f      	cmp	r7, r3
 800929e:	ddea      	ble.n	8009276 <__kernel_rem_pio2+0x49e>
 80092a0:	9a06      	ldr	r2, [sp, #24]
 80092a2:	ab48      	add	r3, sp, #288	; 0x120
 80092a4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80092a8:	e9c6 9a00 	strd	r9, sl, [r6]
 80092ac:	3c01      	subs	r4, #1
 80092ae:	e6fa      	b.n	80090a6 <__kernel_rem_pio2+0x2ce>
 80092b0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	dc0b      	bgt.n	80092ce <__kernel_rem_pio2+0x4f6>
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	dc39      	bgt.n	800932e <__kernel_rem_pio2+0x556>
 80092ba:	d05d      	beq.n	8009378 <__kernel_rem_pio2+0x5a0>
 80092bc:	9b02      	ldr	r3, [sp, #8]
 80092be:	f003 0007 	and.w	r0, r3, #7
 80092c2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80092c6:	ecbd 8b02 	vpop	{d8}
 80092ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d1f3      	bne.n	80092bc <__kernel_rem_pio2+0x4e4>
 80092d4:	9b05      	ldr	r3, [sp, #20]
 80092d6:	9500      	str	r5, [sp, #0]
 80092d8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80092dc:	eb0d 0403 	add.w	r4, sp, r3
 80092e0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80092e4:	46a2      	mov	sl, r4
 80092e6:	9b00      	ldr	r3, [sp, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f1aa 0a08 	sub.w	sl, sl, #8
 80092ee:	dc69      	bgt.n	80093c4 <__kernel_rem_pio2+0x5ec>
 80092f0:	46aa      	mov	sl, r5
 80092f2:	f1ba 0f01 	cmp.w	sl, #1
 80092f6:	f1a4 0408 	sub.w	r4, r4, #8
 80092fa:	f300 8083 	bgt.w	8009404 <__kernel_rem_pio2+0x62c>
 80092fe:	9c05      	ldr	r4, [sp, #20]
 8009300:	ab48      	add	r3, sp, #288	; 0x120
 8009302:	441c      	add	r4, r3
 8009304:	2000      	movs	r0, #0
 8009306:	2100      	movs	r1, #0
 8009308:	2d01      	cmp	r5, #1
 800930a:	f300 809a 	bgt.w	8009442 <__kernel_rem_pio2+0x66a>
 800930e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8009312:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009316:	f1bb 0f00 	cmp.w	fp, #0
 800931a:	f040 8098 	bne.w	800944e <__kernel_rem_pio2+0x676>
 800931e:	9b04      	ldr	r3, [sp, #16]
 8009320:	e9c3 7800 	strd	r7, r8, [r3]
 8009324:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009328:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800932c:	e7c6      	b.n	80092bc <__kernel_rem_pio2+0x4e4>
 800932e:	9e05      	ldr	r6, [sp, #20]
 8009330:	ab48      	add	r3, sp, #288	; 0x120
 8009332:	441e      	add	r6, r3
 8009334:	462c      	mov	r4, r5
 8009336:	2000      	movs	r0, #0
 8009338:	2100      	movs	r1, #0
 800933a:	2c00      	cmp	r4, #0
 800933c:	da33      	bge.n	80093a6 <__kernel_rem_pio2+0x5ce>
 800933e:	f1bb 0f00 	cmp.w	fp, #0
 8009342:	d036      	beq.n	80093b2 <__kernel_rem_pio2+0x5da>
 8009344:	4602      	mov	r2, r0
 8009346:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800934a:	9c04      	ldr	r4, [sp, #16]
 800934c:	e9c4 2300 	strd	r2, r3, [r4]
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009358:	f7f6 ff3a 	bl	80001d0 <__aeabi_dsub>
 800935c:	ae4a      	add	r6, sp, #296	; 0x128
 800935e:	2401      	movs	r4, #1
 8009360:	42a5      	cmp	r5, r4
 8009362:	da29      	bge.n	80093b8 <__kernel_rem_pio2+0x5e0>
 8009364:	f1bb 0f00 	cmp.w	fp, #0
 8009368:	d002      	beq.n	8009370 <__kernel_rem_pio2+0x598>
 800936a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800936e:	4619      	mov	r1, r3
 8009370:	9b04      	ldr	r3, [sp, #16]
 8009372:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009376:	e7a1      	b.n	80092bc <__kernel_rem_pio2+0x4e4>
 8009378:	9c05      	ldr	r4, [sp, #20]
 800937a:	ab48      	add	r3, sp, #288	; 0x120
 800937c:	441c      	add	r4, r3
 800937e:	2000      	movs	r0, #0
 8009380:	2100      	movs	r1, #0
 8009382:	2d00      	cmp	r5, #0
 8009384:	da09      	bge.n	800939a <__kernel_rem_pio2+0x5c2>
 8009386:	f1bb 0f00 	cmp.w	fp, #0
 800938a:	d002      	beq.n	8009392 <__kernel_rem_pio2+0x5ba>
 800938c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009390:	4619      	mov	r1, r3
 8009392:	9b04      	ldr	r3, [sp, #16]
 8009394:	e9c3 0100 	strd	r0, r1, [r3]
 8009398:	e790      	b.n	80092bc <__kernel_rem_pio2+0x4e4>
 800939a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800939e:	f7f6 ff19 	bl	80001d4 <__adddf3>
 80093a2:	3d01      	subs	r5, #1
 80093a4:	e7ed      	b.n	8009382 <__kernel_rem_pio2+0x5aa>
 80093a6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80093aa:	f7f6 ff13 	bl	80001d4 <__adddf3>
 80093ae:	3c01      	subs	r4, #1
 80093b0:	e7c3      	b.n	800933a <__kernel_rem_pio2+0x562>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	e7c8      	b.n	800934a <__kernel_rem_pio2+0x572>
 80093b8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80093bc:	f7f6 ff0a 	bl	80001d4 <__adddf3>
 80093c0:	3401      	adds	r4, #1
 80093c2:	e7cd      	b.n	8009360 <__kernel_rem_pio2+0x588>
 80093c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80093c8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80093cc:	9b00      	ldr	r3, [sp, #0]
 80093ce:	3b01      	subs	r3, #1
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	4632      	mov	r2, r6
 80093d4:	463b      	mov	r3, r7
 80093d6:	4640      	mov	r0, r8
 80093d8:	4649      	mov	r1, r9
 80093da:	f7f6 fefb 	bl	80001d4 <__adddf3>
 80093de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4640      	mov	r0, r8
 80093e8:	4649      	mov	r1, r9
 80093ea:	f7f6 fef1 	bl	80001d0 <__aeabi_dsub>
 80093ee:	4632      	mov	r2, r6
 80093f0:	463b      	mov	r3, r7
 80093f2:	f7f6 feef 	bl	80001d4 <__adddf3>
 80093f6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80093fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80093fe:	ed8a 7b00 	vstr	d7, [sl]
 8009402:	e770      	b.n	80092e6 <__kernel_rem_pio2+0x50e>
 8009404:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009408:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800940c:	4640      	mov	r0, r8
 800940e:	4632      	mov	r2, r6
 8009410:	463b      	mov	r3, r7
 8009412:	4649      	mov	r1, r9
 8009414:	f7f6 fede 	bl	80001d4 <__adddf3>
 8009418:	e9cd 0100 	strd	r0, r1, [sp]
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4640      	mov	r0, r8
 8009422:	4649      	mov	r1, r9
 8009424:	f7f6 fed4 	bl	80001d0 <__aeabi_dsub>
 8009428:	4632      	mov	r2, r6
 800942a:	463b      	mov	r3, r7
 800942c:	f7f6 fed2 	bl	80001d4 <__adddf3>
 8009430:	ed9d 7b00 	vldr	d7, [sp]
 8009434:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009438:	ed84 7b00 	vstr	d7, [r4]
 800943c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009440:	e757      	b.n	80092f2 <__kernel_rem_pio2+0x51a>
 8009442:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009446:	f7f6 fec5 	bl	80001d4 <__adddf3>
 800944a:	3d01      	subs	r5, #1
 800944c:	e75c      	b.n	8009308 <__kernel_rem_pio2+0x530>
 800944e:	9b04      	ldr	r3, [sp, #16]
 8009450:	9a04      	ldr	r2, [sp, #16]
 8009452:	601f      	str	r7, [r3, #0]
 8009454:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009458:	605c      	str	r4, [r3, #4]
 800945a:	609d      	str	r5, [r3, #8]
 800945c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009460:	60d3      	str	r3, [r2, #12]
 8009462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009466:	6110      	str	r0, [r2, #16]
 8009468:	6153      	str	r3, [r2, #20]
 800946a:	e727      	b.n	80092bc <__kernel_rem_pio2+0x4e4>
 800946c:	41700000 	.word	0x41700000
 8009470:	3e700000 	.word	0x3e700000
 8009474:	00000000 	.word	0x00000000

08009478 <scalbn>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	ec55 4b10 	vmov	r4, r5, d0
 800947e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009482:	4606      	mov	r6, r0
 8009484:	462b      	mov	r3, r5
 8009486:	b999      	cbnz	r1, 80094b0 <scalbn+0x38>
 8009488:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800948c:	4323      	orrs	r3, r4
 800948e:	d03f      	beq.n	8009510 <scalbn+0x98>
 8009490:	4b35      	ldr	r3, [pc, #212]	; (8009568 <scalbn+0xf0>)
 8009492:	4629      	mov	r1, r5
 8009494:	ee10 0a10 	vmov	r0, s0
 8009498:	2200      	movs	r2, #0
 800949a:	f7f7 f851 	bl	8000540 <__aeabi_dmul>
 800949e:	4b33      	ldr	r3, [pc, #204]	; (800956c <scalbn+0xf4>)
 80094a0:	429e      	cmp	r6, r3
 80094a2:	4604      	mov	r4, r0
 80094a4:	460d      	mov	r5, r1
 80094a6:	da10      	bge.n	80094ca <scalbn+0x52>
 80094a8:	a327      	add	r3, pc, #156	; (adr r3, 8009548 <scalbn+0xd0>)
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	e01f      	b.n	80094f0 <scalbn+0x78>
 80094b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80094b4:	4291      	cmp	r1, r2
 80094b6:	d10c      	bne.n	80094d2 <scalbn+0x5a>
 80094b8:	ee10 2a10 	vmov	r2, s0
 80094bc:	4620      	mov	r0, r4
 80094be:	4629      	mov	r1, r5
 80094c0:	f7f6 fe88 	bl	80001d4 <__adddf3>
 80094c4:	4604      	mov	r4, r0
 80094c6:	460d      	mov	r5, r1
 80094c8:	e022      	b.n	8009510 <scalbn+0x98>
 80094ca:	460b      	mov	r3, r1
 80094cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80094d0:	3936      	subs	r1, #54	; 0x36
 80094d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80094d6:	4296      	cmp	r6, r2
 80094d8:	dd0d      	ble.n	80094f6 <scalbn+0x7e>
 80094da:	2d00      	cmp	r5, #0
 80094dc:	a11c      	add	r1, pc, #112	; (adr r1, 8009550 <scalbn+0xd8>)
 80094de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094e2:	da02      	bge.n	80094ea <scalbn+0x72>
 80094e4:	a11c      	add	r1, pc, #112	; (adr r1, 8009558 <scalbn+0xe0>)
 80094e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094ea:	a319      	add	r3, pc, #100	; (adr r3, 8009550 <scalbn+0xd8>)
 80094ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f0:	f7f7 f826 	bl	8000540 <__aeabi_dmul>
 80094f4:	e7e6      	b.n	80094c4 <scalbn+0x4c>
 80094f6:	1872      	adds	r2, r6, r1
 80094f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80094fc:	428a      	cmp	r2, r1
 80094fe:	dcec      	bgt.n	80094da <scalbn+0x62>
 8009500:	2a00      	cmp	r2, #0
 8009502:	dd08      	ble.n	8009516 <scalbn+0x9e>
 8009504:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009508:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800950c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009510:	ec45 4b10 	vmov	d0, r4, r5
 8009514:	bd70      	pop	{r4, r5, r6, pc}
 8009516:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800951a:	da08      	bge.n	800952e <scalbn+0xb6>
 800951c:	2d00      	cmp	r5, #0
 800951e:	a10a      	add	r1, pc, #40	; (adr r1, 8009548 <scalbn+0xd0>)
 8009520:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009524:	dac0      	bge.n	80094a8 <scalbn+0x30>
 8009526:	a10e      	add	r1, pc, #56	; (adr r1, 8009560 <scalbn+0xe8>)
 8009528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800952c:	e7bc      	b.n	80094a8 <scalbn+0x30>
 800952e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009532:	3236      	adds	r2, #54	; 0x36
 8009534:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009538:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800953c:	4620      	mov	r0, r4
 800953e:	4b0c      	ldr	r3, [pc, #48]	; (8009570 <scalbn+0xf8>)
 8009540:	2200      	movs	r2, #0
 8009542:	e7d5      	b.n	80094f0 <scalbn+0x78>
 8009544:	f3af 8000 	nop.w
 8009548:	c2f8f359 	.word	0xc2f8f359
 800954c:	01a56e1f 	.word	0x01a56e1f
 8009550:	8800759c 	.word	0x8800759c
 8009554:	7e37e43c 	.word	0x7e37e43c
 8009558:	8800759c 	.word	0x8800759c
 800955c:	fe37e43c 	.word	0xfe37e43c
 8009560:	c2f8f359 	.word	0xc2f8f359
 8009564:	81a56e1f 	.word	0x81a56e1f
 8009568:	43500000 	.word	0x43500000
 800956c:	ffff3cb0 	.word	0xffff3cb0
 8009570:	3c900000 	.word	0x3c900000
 8009574:	00000000 	.word	0x00000000

08009578 <floor>:
 8009578:	ec51 0b10 	vmov	r0, r1, d0
 800957c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009584:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009588:	2e13      	cmp	r6, #19
 800958a:	ee10 5a10 	vmov	r5, s0
 800958e:	ee10 8a10 	vmov	r8, s0
 8009592:	460c      	mov	r4, r1
 8009594:	dc31      	bgt.n	80095fa <floor+0x82>
 8009596:	2e00      	cmp	r6, #0
 8009598:	da14      	bge.n	80095c4 <floor+0x4c>
 800959a:	a333      	add	r3, pc, #204	; (adr r3, 8009668 <floor+0xf0>)
 800959c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a0:	f7f6 fe18 	bl	80001d4 <__adddf3>
 80095a4:	2200      	movs	r2, #0
 80095a6:	2300      	movs	r3, #0
 80095a8:	f7f7 fa5a 	bl	8000a60 <__aeabi_dcmpgt>
 80095ac:	b138      	cbz	r0, 80095be <floor+0x46>
 80095ae:	2c00      	cmp	r4, #0
 80095b0:	da53      	bge.n	800965a <floor+0xe2>
 80095b2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80095b6:	4325      	orrs	r5, r4
 80095b8:	d052      	beq.n	8009660 <floor+0xe8>
 80095ba:	4c2d      	ldr	r4, [pc, #180]	; (8009670 <floor+0xf8>)
 80095bc:	2500      	movs	r5, #0
 80095be:	4621      	mov	r1, r4
 80095c0:	4628      	mov	r0, r5
 80095c2:	e024      	b.n	800960e <floor+0x96>
 80095c4:	4f2b      	ldr	r7, [pc, #172]	; (8009674 <floor+0xfc>)
 80095c6:	4137      	asrs	r7, r6
 80095c8:	ea01 0307 	and.w	r3, r1, r7
 80095cc:	4303      	orrs	r3, r0
 80095ce:	d01e      	beq.n	800960e <floor+0x96>
 80095d0:	a325      	add	r3, pc, #148	; (adr r3, 8009668 <floor+0xf0>)
 80095d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d6:	f7f6 fdfd 	bl	80001d4 <__adddf3>
 80095da:	2200      	movs	r2, #0
 80095dc:	2300      	movs	r3, #0
 80095de:	f7f7 fa3f 	bl	8000a60 <__aeabi_dcmpgt>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d0eb      	beq.n	80095be <floor+0x46>
 80095e6:	2c00      	cmp	r4, #0
 80095e8:	bfbe      	ittt	lt
 80095ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80095ee:	4133      	asrlt	r3, r6
 80095f0:	18e4      	addlt	r4, r4, r3
 80095f2:	ea24 0407 	bic.w	r4, r4, r7
 80095f6:	2500      	movs	r5, #0
 80095f8:	e7e1      	b.n	80095be <floor+0x46>
 80095fa:	2e33      	cmp	r6, #51	; 0x33
 80095fc:	dd0b      	ble.n	8009616 <floor+0x9e>
 80095fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009602:	d104      	bne.n	800960e <floor+0x96>
 8009604:	ee10 2a10 	vmov	r2, s0
 8009608:	460b      	mov	r3, r1
 800960a:	f7f6 fde3 	bl	80001d4 <__adddf3>
 800960e:	ec41 0b10 	vmov	d0, r0, r1
 8009612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009616:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800961a:	f04f 37ff 	mov.w	r7, #4294967295
 800961e:	40df      	lsrs	r7, r3
 8009620:	4238      	tst	r0, r7
 8009622:	d0f4      	beq.n	800960e <floor+0x96>
 8009624:	a310      	add	r3, pc, #64	; (adr r3, 8009668 <floor+0xf0>)
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	f7f6 fdd3 	bl	80001d4 <__adddf3>
 800962e:	2200      	movs	r2, #0
 8009630:	2300      	movs	r3, #0
 8009632:	f7f7 fa15 	bl	8000a60 <__aeabi_dcmpgt>
 8009636:	2800      	cmp	r0, #0
 8009638:	d0c1      	beq.n	80095be <floor+0x46>
 800963a:	2c00      	cmp	r4, #0
 800963c:	da0a      	bge.n	8009654 <floor+0xdc>
 800963e:	2e14      	cmp	r6, #20
 8009640:	d101      	bne.n	8009646 <floor+0xce>
 8009642:	3401      	adds	r4, #1
 8009644:	e006      	b.n	8009654 <floor+0xdc>
 8009646:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800964a:	2301      	movs	r3, #1
 800964c:	40b3      	lsls	r3, r6
 800964e:	441d      	add	r5, r3
 8009650:	45a8      	cmp	r8, r5
 8009652:	d8f6      	bhi.n	8009642 <floor+0xca>
 8009654:	ea25 0507 	bic.w	r5, r5, r7
 8009658:	e7b1      	b.n	80095be <floor+0x46>
 800965a:	2500      	movs	r5, #0
 800965c:	462c      	mov	r4, r5
 800965e:	e7ae      	b.n	80095be <floor+0x46>
 8009660:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009664:	e7ab      	b.n	80095be <floor+0x46>
 8009666:	bf00      	nop
 8009668:	8800759c 	.word	0x8800759c
 800966c:	7e37e43c 	.word	0x7e37e43c
 8009670:	bff00000 	.word	0xbff00000
 8009674:	000fffff 	.word	0x000fffff

08009678 <_init>:
 8009678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967a:	bf00      	nop
 800967c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800967e:	bc08      	pop	{r3}
 8009680:	469e      	mov	lr, r3
 8009682:	4770      	bx	lr

08009684 <_fini>:
 8009684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009686:	bf00      	nop
 8009688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800968a:	bc08      	pop	{r3}
 800968c:	469e      	mov	lr, r3
 800968e:	4770      	bx	lr
