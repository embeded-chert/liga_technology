
ftc_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bd8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08008d60  08008d60  00018d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f58  08008f58  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  08008f58  08008f58  00018f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f60  08008f60  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f60  08008f60  00018f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f64  08008f64  00018f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08008f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200cc  2**0
                  CONTENTS
 10 .bss          00000890  200000cc  200000cc  000200cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000095c  2000095c  000200cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fb92  00000000  00000000  0002013f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000023d7  00000000  00000000  0002fcd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000dc8  00000000  00000000  000320a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000aed  00000000  00000000  00032e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000216c5  00000000  00000000  0003395d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011530  00000000  00000000  00055022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cba70  00000000  00000000  00066552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f98  00000000  00000000  00131fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00135f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000cc 	.word	0x200000cc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008d48 	.word	0x08008d48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d0 	.word	0x200000d0
 80001c4:	08008d48 	.word	0x08008d48

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b970 	b.w	8000e5c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	460f      	mov	r7, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	d965      	bls.n	8000c76 <__udivmoddi4+0xe2>
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	b143      	cbz	r3, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	f1c3 0220 	rsb	r2, r3, #32
 8000bb8:	409f      	lsls	r7, r3
 8000bba:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	409c      	lsls	r4, r3
 8000bc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc6:	fa1f f58c 	uxth.w	r5, ip
 8000bca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bce:	0c22      	lsrs	r2, r4, #16
 8000bd0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd8:	fb01 f005 	mul.w	r0, r1, r5
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	d90a      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be0:	eb1c 0202 	adds.w	r2, ip, r2
 8000be4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be8:	f080 811c 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000bec:	4290      	cmp	r0, r2
 8000bee:	f240 8119 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	4462      	add	r2, ip
 8000bf6:	1a12      	subs	r2, r2, r0
 8000bf8:	b2a4      	uxth	r4, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c06:	fb00 f505 	mul.w	r5, r0, r5
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x90>
 8000c0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c16:	f080 8107 	bcs.w	8000e28 <__udivmoddi4+0x294>
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	f240 8104 	bls.w	8000e28 <__udivmoddi4+0x294>
 8000c20:	4464      	add	r4, ip
 8000c22:	3802      	subs	r0, #2
 8000c24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c28:	1b64      	subs	r4, r4, r5
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11e      	cbz	r6, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40dc      	lsrs	r4, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	e9c6 4300 	strd	r4, r3, [r6]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0xbc>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80ed 	beq.w	8000e1e <__udivmoddi4+0x28a>
 8000c44:	2100      	movs	r1, #0
 8000c46:	e9c6 0500 	strd	r0, r5, [r6]
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	fab3 f183 	clz	r1, r3
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d149      	bne.n	8000cec <__udivmoddi4+0x158>
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	d302      	bcc.n	8000c62 <__udivmoddi4+0xce>
 8000c5c:	4282      	cmp	r2, r0
 8000c5e:	f200 80f8 	bhi.w	8000e52 <__udivmoddi4+0x2be>
 8000c62:	1a84      	subs	r4, r0, r2
 8000c64:	eb65 0203 	sbc.w	r2, r5, r3
 8000c68:	2001      	movs	r0, #1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d0e2      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	e9c6 4700 	strd	r4, r7, [r6]
 8000c74:	e7df      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xe6>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f382 	clz	r3, r2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 8090 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c84:	1a8a      	subs	r2, r1, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f fe8c 	uxth.w	lr, ip
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c94:	fb07 2015 	mls	r0, r7, r5, r2
 8000c98:	0c22      	lsrs	r2, r4, #16
 8000c9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca6:	eb1c 0202 	adds.w	r2, ip, r2
 8000caa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f200 80cb 	bhi.w	8000e4c <__udivmoddi4+0x2b8>
 8000cb6:	4645      	mov	r5, r8
 8000cb8:	1a12      	subs	r2, r2, r0
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x14e>
 8000cd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x14c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f200 80bb 	bhi.w	8000e56 <__udivmoddi4+0x2c2>
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	eba4 040e 	sub.w	r4, r4, lr
 8000ce6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cea:	e79f      	b.n	8000c2c <__udivmoddi4+0x98>
 8000cec:	f1c1 0720 	rsb	r7, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfa:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000d02:	40fd      	lsrs	r5, r7
 8000d04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d08:	4323      	orrs	r3, r4
 8000d0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	fb09 5518 	mls	r5, r9, r8, r5
 8000d16:	0c1c      	lsrs	r4, r3, #16
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	fa00 f001 	lsl.w	r0, r0, r1
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d34:	f080 8088 	bcs.w	8000e48 <__udivmoddi4+0x2b4>
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	f240 8085 	bls.w	8000e48 <__udivmoddi4+0x2b4>
 8000d3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d42:	4464      	add	r4, ip
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	b29d      	uxth	r5, r3
 8000d48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d64:	d26c      	bcs.n	8000e40 <__udivmoddi4+0x2ac>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	d96a      	bls.n	8000e40 <__udivmoddi4+0x2ac>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	4464      	add	r4, ip
 8000d6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d72:	fba3 9502 	umull	r9, r5, r3, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	42ac      	cmp	r4, r5
 8000d7c:	46c8      	mov	r8, r9
 8000d7e:	46ae      	mov	lr, r5
 8000d80:	d356      	bcc.n	8000e30 <__udivmoddi4+0x29c>
 8000d82:	d053      	beq.n	8000e2c <__udivmoddi4+0x298>
 8000d84:	b156      	cbz	r6, 8000d9c <__udivmoddi4+0x208>
 8000d86:	ebb0 0208 	subs.w	r2, r0, r8
 8000d8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d92:	40ca      	lsrs	r2, r1
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	4317      	orrs	r7, r2
 8000d98:	e9c6 7400 	strd	r7, r4, [r6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	f1c3 0120 	rsb	r1, r3, #32
 8000da8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dac:	fa20 f201 	lsr.w	r2, r0, r1
 8000db0:	fa25 f101 	lsr.w	r1, r5, r1
 8000db4:	409d      	lsls	r5, r3
 8000db6:	432a      	orrs	r2, r5
 8000db8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc8:	0c11      	lsrs	r1, r2, #16
 8000dca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dce:	fb00 f50e 	mul.w	r5, r0, lr
 8000dd2:	428d      	cmp	r5, r1
 8000dd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x258>
 8000dda:	eb1c 0101 	adds.w	r1, ip, r1
 8000dde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de2:	d22f      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000de4:	428d      	cmp	r5, r1
 8000de6:	d92d      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	1b49      	subs	r1, r1, r5
 8000dee:	b292      	uxth	r2, r2
 8000df0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df4:	fb07 1115 	mls	r1, r7, r5, r1
 8000df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dfc:	fb05 f10e 	mul.w	r1, r5, lr
 8000e00:	4291      	cmp	r1, r2
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x282>
 8000e04:	eb1c 0202 	adds.w	r2, ip, r2
 8000e08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0c:	d216      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000e0e:	4291      	cmp	r1, r2
 8000e10:	d914      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000e12:	3d02      	subs	r5, #2
 8000e14:	4462      	add	r2, ip
 8000e16:	1a52      	subs	r2, r2, r1
 8000e18:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e1c:	e738      	b.n	8000c90 <__udivmoddi4+0xfc>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	4630      	mov	r0, r6
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000e24:	4639      	mov	r1, r7
 8000e26:	e6e6      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e6fb      	b.n	8000c24 <__udivmoddi4+0x90>
 8000e2c:	4548      	cmp	r0, r9
 8000e2e:	d2a9      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e30:	ebb9 0802 	subs.w	r8, r9, r2
 8000e34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	e7a3      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3c:	4645      	mov	r5, r8
 8000e3e:	e7ea      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e40:	462b      	mov	r3, r5
 8000e42:	e794      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7d1      	b.n	8000dec <__udivmoddi4+0x258>
 8000e48:	46d0      	mov	r8, sl
 8000e4a:	e77b      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4c:	3d02      	subs	r5, #2
 8000e4e:	4462      	add	r2, ip
 8000e50:	e732      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e70a      	b.n	8000c6c <__udivmoddi4+0xd8>
 8000e56:	4464      	add	r4, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e742      	b.n	8000ce2 <__udivmoddi4+0x14e>

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_DMA_Init+0x3c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <MX_DMA_Init+0x3c>)
 8000e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_DMA_Init+0x3c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	203a      	movs	r0, #58	; 0x3a
 8000e88:	f003 fab5 	bl	80043f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e8c:	203a      	movs	r0, #58	; 0x3a
 8000e8e:	f003 face 	bl	800442e <HAL_NVIC_EnableIRQ>

}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	4b7d      	ldr	r3, [pc, #500]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a7c      	ldr	r2, [pc, #496]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b7a      	ldr	r3, [pc, #488]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0310 	and.w	r3, r3, #16
 8000ece:	61bb      	str	r3, [r7, #24]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	4b76      	ldr	r3, [pc, #472]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a75      	ldr	r2, [pc, #468]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b73      	ldr	r3, [pc, #460]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b6f      	ldr	r3, [pc, #444]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a6e      	ldr	r2, [pc, #440]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b6c      	ldr	r3, [pc, #432]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b68      	ldr	r3, [pc, #416]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a67      	ldr	r2, [pc, #412]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b65      	ldr	r3, [pc, #404]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b61      	ldr	r3, [pc, #388]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a60      	ldr	r2, [pc, #384]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b5e      	ldr	r3, [pc, #376]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	4b5a      	ldr	r3, [pc, #360]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a59      	ldr	r2, [pc, #356]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b57      	ldr	r3, [pc, #348]	; (80010b0 <MX_GPIO_Init+0x210>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, dig_pin3_inverse_Pin|dig_pin1_inverse_Pin|dig_pin3_Pin|dig_pin5_Pin
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f245 4184 	movw	r1, #21636	; 0x5484
 8000f64:	4853      	ldr	r0, [pc, #332]	; (80010b4 <MX_GPIO_Init+0x214>)
 8000f66:	f004 f833 	bl	8004fd0 <HAL_GPIO_WritePin>
                          |dig_pin4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, dig_pin1_Pin|dig_pin2_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000f70:	4851      	ldr	r0, [pc, #324]	; (80010b8 <MX_GPIO_Init+0x218>)
 8000f72:	f004 f82d 	bl	8004fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(mosfet_enable_GPIO_Port, mosfet_enable_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4850      	ldr	r0, [pc, #320]	; (80010bc <MX_GPIO_Init+0x21c>)
 8000f7c:	f004 f828 	bl	8004fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, dig_pin4_inverse_Pin|dig_pin2_inverse_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f86:	484e      	ldr	r0, [pc, #312]	; (80010c0 <MX_GPIO_Init+0x220>)
 8000f88:	f004 f822 	bl	8004fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = dig_pin3_inverse_Pin|dig_pin1_inverse_Pin|dig_pin3_Pin|dig_pin4_Pin;
 8000f8c:	f244 4384 	movw	r3, #17540	; 0x4484
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4843      	ldr	r0, [pc, #268]	; (80010b4 <MX_GPIO_Init+0x214>)
 8000fa6:	f003 fe5f 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = dig_pin1_Pin|dig_pin2_Pin;
 8000faa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	483d      	ldr	r0, [pc, #244]	; (80010b8 <MX_GPIO_Init+0x218>)
 8000fc4:	f003 fe50 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4839      	ldr	r0, [pc, #228]	; (80010c0 <MX_GPIO_Init+0x220>)
 8000fdc:	f003 fe44 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = dig_pin5_Pin;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(dig_pin5_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	482e      	ldr	r0, [pc, #184]	; (80010b4 <MX_GPIO_Init+0x214>)
 8000ffa:	f003 fe35 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = omron_1_Pin|omron_2_Pin;
 8000ffe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	482a      	ldr	r0, [pc, #168]	; (80010bc <MX_GPIO_Init+0x21c>)
 8001014:	f003 fe28 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	4825      	ldr	r0, [pc, #148]	; (80010c4 <MX_GPIO_Init+0x224>)
 800102e:	f003 fe1b 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001032:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001044:	230a      	movs	r3, #10
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	481d      	ldr	r0, [pc, #116]	; (80010c4 <MX_GPIO_Init+0x224>)
 8001050:	f003 fe0a 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = limit_switch_1_Pin|limit_switch_3_Pin;
 8001054:	2305      	movs	r3, #5
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800105c:	2302      	movs	r3, #2
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	4815      	ldr	r0, [pc, #84]	; (80010bc <MX_GPIO_Init+0x21c>)
 8001068:	f003 fdfe 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = mosfet_enable_Pin;
 800106c:	2302      	movs	r3, #2
 800106e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001074:	2301      	movs	r3, #1
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(mosfet_enable_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	480e      	ldr	r0, [pc, #56]	; (80010bc <MX_GPIO_Init+0x21c>)
 8001084:	f003 fdf0 	bl	8004c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = dig_pin4_inverse_Pin|dig_pin2_inverse_Pin;
 8001088:	f44f 7340 	mov.w	r3, #768	; 0x300
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001092:	2301      	movs	r3, #1
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <MX_GPIO_Init+0x220>)
 80010a2:	f003 fde1 	bl	8004c68 <HAL_GPIO_Init>

}
 80010a6:	bf00      	nop
 80010a8:	3730      	adds	r7, #48	; 0x30
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020000 	.word	0x40020000

080010c8 <falg_controler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void falg_controler(void){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	if((!((flag_onesd == 0)&&(flag_move_end ==0)))&&(flag_compleate == 1)){
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <falg_controler+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d103      	bne.n	80010dc <falg_controler+0x14>
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <falg_controler+0x5c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d009      	beq.n	80010f0 <falg_controler+0x28>
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <falg_controler+0x60>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d105      	bne.n	80010f0 <falg_controler+0x28>
		flag++;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <falg_controler+0x64>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <falg_controler+0x64>)
 80010ee:	701a      	strb	r2, [r3, #0]

	}

	if(flag_old != flag){
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <falg_controler+0x68>)
 80010f2:	781a      	ldrb	r2, [r3, #0]
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <falg_controler+0x64>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d00c      	beq.n	8001116 <falg_controler+0x4e>
		flag_old = flag;
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <falg_controler+0x64>)
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <falg_controler+0x68>)
 8001102:	701a      	strb	r2, [r3, #0]
		flag_onesd = 1;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <falg_controler+0x58>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
		flag_move_end = 0;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <falg_controler+0x5c>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
		flag_compleate = 0;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <falg_controler+0x60>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
	}

}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	20000068 	.word	0x20000068
 8001124:	200002eb 	.word	0x200002eb
 8001128:	200002ec 	.word	0x200002ec
 800112c:	200002e9 	.word	0x200002e9
 8001130:	200002ea 	.word	0x200002ea

08001134 <state_timer>:
void state_timer(float tim){
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	ed87 0a01 	vstr	s0, [r7, #4]

	if(state_flag > tim){
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <state_timer+0x3c>)
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ed97 7a01 	vldr	s14, [r7, #4]
 8001148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	d400      	bmi.n	8001154 <state_timer+0x20>
		flag_compleate = 1;
		state_flag = 0.0;
	}

}
 8001152:	e006      	b.n	8001162 <state_timer+0x2e>
		flag_compleate = 1;
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <state_timer+0x40>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
		state_flag = 0.0;
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <state_timer+0x3c>)
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000418 	.word	0x20000418
 8001174:	200002ec 	.word	0x200002ec

08001178 <omron>:
void set_voltage_chain(float position){
	if(-0.35 != metr_chain )set_voltage(4,mot_grab);
	if(distante < 0)set_voltage(4,-mot_grab);
}
void omron(uint8_t robot_position) { /*robot_position = 0 left , robot_position = 1 right*/
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	if (robot_position == 0) { /*left robot position on place*/
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d119      	bne.n	80011bc <omron+0x44>
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_SET) { //left_omron
 8001188:	2108      	movs	r1, #8
 800118a:	481b      	ldr	r0, [pc, #108]	; (80011f8 <omron+0x80>)
 800118c:	f003 ff08 	bl	8004fa0 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	2b01      	cmp	r3, #1
 8001194:	d103      	bne.n	800119e <omron+0x26>
			znamya_position = 1;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <omron+0x84>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
			znamya_position = 3;
		} else
			znamya_position = 1;
	}

}
 800119c:	e027      	b.n	80011ee <omron+0x76>
		} else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == GPIO_PIN_SET) { //right_omron
 800119e:	2110      	movs	r1, #16
 80011a0:	4817      	ldr	r0, [pc, #92]	; (8001200 <omron+0x88>)
 80011a2:	f003 fefd 	bl	8004fa0 <HAL_GPIO_ReadPin>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d103      	bne.n	80011b4 <omron+0x3c>
			znamya_position = 2;
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <omron+0x84>)
 80011ae:	2202      	movs	r2, #2
 80011b0:	701a      	strb	r2, [r3, #0]
}
 80011b2:	e01c      	b.n	80011ee <omron+0x76>
			znamya_position = 3;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <omron+0x84>)
 80011b6:	2203      	movs	r2, #3
 80011b8:	701a      	strb	r2, [r3, #0]
}
 80011ba:	e018      	b.n	80011ee <omron+0x76>
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_SET) { //left_omron
 80011bc:	2108      	movs	r1, #8
 80011be:	480e      	ldr	r0, [pc, #56]	; (80011f8 <omron+0x80>)
 80011c0:	f003 feee 	bl	8004fa0 <HAL_GPIO_ReadPin>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d103      	bne.n	80011d2 <omron+0x5a>
			znamya_position = 2;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <omron+0x84>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	701a      	strb	r2, [r3, #0]
}
 80011d0:	e00d      	b.n	80011ee <omron+0x76>
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == GPIO_PIN_SET) { //right_omron
 80011d2:	2110      	movs	r1, #16
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <omron+0x88>)
 80011d6:	f003 fee3 	bl	8004fa0 <HAL_GPIO_ReadPin>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d103      	bne.n	80011e8 <omron+0x70>
			znamya_position = 3;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <omron+0x84>)
 80011e2:	2203      	movs	r2, #3
 80011e4:	701a      	strb	r2, [r3, #0]
}
 80011e6:	e002      	b.n	80011ee <omron+0x76>
			znamya_position = 1;
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <omron+0x84>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	200002e8 	.word	0x200002e8
 8001200:	40021000 	.word	0x40021000

08001204 <servo_control>:
//		set_voltage_chain(mot_1);
//	}
//	set_voltage_chain(mot_1);

}
void servo_control(uint8_t servo, uint8_t position) { /*position = 0 open , position = 1 close*/
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	460a      	mov	r2, r1
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	4613      	mov	r3, r2
 8001212:	71bb      	strb	r3, [r7, #6]
	switch (servo) {
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <servo_control+0x1c>
 800121a:	2b01      	cmp	r3, #1
 800121c:	d00b      	beq.n	8001236 <servo_control+0x32>
		} else {
			TIM9->CCR2 = 30 + 0.5 * 30;
		}
		break;
	}
}
 800121e:	e015      	b.n	800124c <servo_control+0x48>
		if (position == 0) {
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d103      	bne.n	800122e <servo_control+0x2a>
			TIM9->CCR1 = 30 + 0.5 * 90;
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <servo_control+0x54>)
 8001228:	224b      	movs	r2, #75	; 0x4b
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800122c:	e00e      	b.n	800124c <servo_control+0x48>
			TIM9->CCR1 = 30 + 0.5 * 43;
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <servo_control+0x54>)
 8001230:	2233      	movs	r2, #51	; 0x33
 8001232:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001234:	e00a      	b.n	800124c <servo_control+0x48>
		if (position == 0) {
 8001236:	79bb      	ldrb	r3, [r7, #6]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d103      	bne.n	8001244 <servo_control+0x40>
			TIM9->CCR2 = 30 + 0.5 * 120;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <servo_control+0x54>)
 800123e:	225a      	movs	r2, #90	; 0x5a
 8001240:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001242:	e002      	b.n	800124a <servo_control+0x46>
			TIM9->CCR2 = 30 + 0.5 * 30;
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <servo_control+0x54>)
 8001246:	222d      	movs	r2, #45	; 0x2d
 8001248:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800124a:	bf00      	nop
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40014000 	.word	0x40014000
 800125c:	00000000 	.word	0x00000000

08001260 <Move_robot_coordinates_X_Y_W>:
		}
		break;

	}
}
void Move_robot_coordinates_X_Y_W(float speed_v, float speed_w, float x_target,float y_target, float fi_target) {
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af04      	add	r7, sp, #16
 8001266:	ed87 0a05 	vstr	s0, [r7, #20]
 800126a:	edc7 0a04 	vstr	s1, [r7, #16]
 800126e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001272:	edc7 1a02 	vstr	s3, [r7, #8]
 8001276:	ed87 2a01 	vstr	s4, [r7, #4]
	if(flag_move_end == 0 ){
 800127a:	4b5b      	ldr	r3, [pc, #364]	; (80013e8 <Move_robot_coordinates_X_Y_W+0x188>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 8401 	bne.w	8001a86 <Move_robot_coordinates_X_Y_W+0x826>
	if(flag_onesd == 1){
 8001284:	4b59      	ldr	r3, [pc, #356]	; (80013ec <Move_robot_coordinates_X_Y_W+0x18c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80c9 	beq.w	8001420 <Move_robot_coordinates_X_Y_W+0x1c0>
	V = speed_v;
 800128e:	4a58      	ldr	r2, [pc, #352]	; (80013f0 <Move_robot_coordinates_X_Y_W+0x190>)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	6013      	str	r3, [r2, #0]
	W = speed_w;
 8001294:	4a57      	ldr	r2, [pc, #348]	; (80013f4 <Move_robot_coordinates_X_Y_W+0x194>)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	6013      	str	r3, [r2, #0]
	quest_xy[0][0] = x_target;
 800129a:	4a57      	ldr	r2, [pc, #348]	; (80013f8 <Move_robot_coordinates_X_Y_W+0x198>)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6013      	str	r3, [r2, #0]
	quest_xy[0][1] = y_target;
 80012a0:	4a55      	ldr	r2, [pc, #340]	; (80013f8 <Move_robot_coordinates_X_Y_W+0x198>)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	6053      	str	r3, [r2, #4]
	quest_FI = fi_target;
 80012a6:	4a55      	ldr	r2, [pc, #340]	; (80013fc <Move_robot_coordinates_X_Y_W+0x19c>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6013      	str	r3, [r2, #0]
	convert_xy_UV[0][0] = cos(fi);
 80012ac:	4b54      	ldr	r3, [pc, #336]	; (8001400 <Move_robot_coordinates_X_Y_W+0x1a0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f8ed 	bl	8000490 <__aeabi_f2d>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	ec43 2b10 	vmov	d0, r2, r3
 80012be:	f006 fc8b 	bl	8007bd8 <cos>
 80012c2:	ec53 2b10 	vmov	r2, r3, d0
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fbfb 	bl	8000ac4 <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a4c      	ldr	r2, [pc, #304]	; (8001404 <Move_robot_coordinates_X_Y_W+0x1a4>)
 80012d2:	6013      	str	r3, [r2, #0]
	convert_xy_UV[0][1] = sin(fi);
 80012d4:	4b4a      	ldr	r3, [pc, #296]	; (8001400 <Move_robot_coordinates_X_Y_W+0x1a0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f8d9 	bl	8000490 <__aeabi_f2d>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	ec43 2b10 	vmov	d0, r2, r3
 80012e6:	f006 fccb 	bl	8007c80 <sin>
 80012ea:	ec53 2b10 	vmov	r2, r3, d0
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff fbe7 	bl	8000ac4 <__aeabi_d2f>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a42      	ldr	r2, [pc, #264]	; (8001404 <Move_robot_coordinates_X_Y_W+0x1a4>)
 80012fa:	6053      	str	r3, [r2, #4]
	convert_xy_UV[0][2] = 0;
 80012fc:	4b41      	ldr	r3, [pc, #260]	; (8001404 <Move_robot_coordinates_X_Y_W+0x1a4>)
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
	convert_xy_UV[1][0] = -sin(fi);
 8001304:	4b3e      	ldr	r3, [pc, #248]	; (8001400 <Move_robot_coordinates_X_Y_W+0x1a0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f8c1 	bl	8000490 <__aeabi_f2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	ec43 2b10 	vmov	d0, r2, r3
 8001316:	f006 fcb3 	bl	8007c80 <sin>
 800131a:	ec53 2b10 	vmov	r2, r3, d0
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fbcf 	bl	8000ac4 <__aeabi_d2f>
 8001326:	4603      	mov	r3, r0
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef1 7a67 	vneg.f32	s15, s15
 8001330:	4b34      	ldr	r3, [pc, #208]	; (8001404 <Move_robot_coordinates_X_Y_W+0x1a4>)
 8001332:	edc3 7a03 	vstr	s15, [r3, #12]
	convert_xy_UV[1][1] = cos(fi);
 8001336:	4b32      	ldr	r3, [pc, #200]	; (8001400 <Move_robot_coordinates_X_Y_W+0x1a0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f8a8 	bl	8000490 <__aeabi_f2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	ec43 2b10 	vmov	d0, r2, r3
 8001348:	f006 fc46 	bl	8007bd8 <cos>
 800134c:	ec53 2b10 	vmov	r2, r3, d0
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fbb6 	bl	8000ac4 <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	4a2a      	ldr	r2, [pc, #168]	; (8001404 <Move_robot_coordinates_X_Y_W+0x1a4>)
 800135c:	6113      	str	r3, [r2, #16]
	convert_xy_UV[1][2] = 0;
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <Move_robot_coordinates_X_Y_W+0x1a4>)
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
	convert_xy_UV[2][0] = position_x;
 8001366:	4b28      	ldr	r3, [pc, #160]	; (8001408 <Move_robot_coordinates_X_Y_W+0x1a8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a26      	ldr	r2, [pc, #152]	; (8001404 <Move_robot_coordinates_X_Y_W+0x1a4>)
 800136c:	6193      	str	r3, [r2, #24]
	convert_xy_UV[2][1] = position_y;
 800136e:	4b27      	ldr	r3, [pc, #156]	; (800140c <Move_robot_coordinates_X_Y_W+0x1ac>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a24      	ldr	r2, [pc, #144]	; (8001404 <Move_robot_coordinates_X_Y_W+0x1a4>)
 8001374:	61d3      	str	r3, [r2, #28]
	convert_xy_UV[2][2] = 1;
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <Move_robot_coordinates_X_Y_W+0x1a4>)
 8001378:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800137c:	621a      	str	r2, [r3, #32]
	matrixInverse(&convert_xy_UV[0][0], 3, &inverse_converte_xy_UV[0][0]);
 800137e:	4a24      	ldr	r2, [pc, #144]	; (8001410 <Move_robot_coordinates_X_Y_W+0x1b0>)
 8001380:	2103      	movs	r1, #3
 8001382:	4820      	ldr	r0, [pc, #128]	; (8001404 <Move_robot_coordinates_X_Y_W+0x1a4>)
 8001384:	f001 f924 	bl	80025d0 <matrixInverse>
	matrixMultiplyM2M(&quest_xy[0][0], 1, 3, &inverse_converte_xy_UV[0][0], 3,
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <Move_robot_coordinates_X_Y_W+0x1b4>)
 800138a:	9302      	str	r3, [sp, #8]
 800138c:	2303      	movs	r3, #3
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	2303      	movs	r3, #3
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <Move_robot_coordinates_X_Y_W+0x1b0>)
 8001396:	2203      	movs	r2, #3
 8001398:	2101      	movs	r1, #1
 800139a:	4817      	ldr	r0, [pc, #92]	; (80013f8 <Move_robot_coordinates_X_Y_W+0x198>)
 800139c:	f000 ff4a 	bl	8002234 <matrixMultiplyM2M>
			3, &quest_UV[0][0]);
	gipotinus = sqrtf(
			(quest_UV[0][0] * quest_UV[0][0])
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <Move_robot_coordinates_X_Y_W+0x1b4>)
 80013a2:	ed93 7a00 	vldr	s14, [r3]
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <Move_robot_coordinates_X_Y_W+0x1b4>)
 80013a8:	edd3 7a00 	vldr	s15, [r3]
 80013ac:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (quest_UV[0][1] * quest_UV[0][1]));
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <Move_robot_coordinates_X_Y_W+0x1b4>)
 80013b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <Move_robot_coordinates_X_Y_W+0x1b4>)
 80013b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80013bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
	gipotinus = sqrtf(
 80013c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c4:	eeb0 0a67 	vmov.f32	s0, s15
 80013c8:	f006 fcb2 	bl	8007d30 <sqrtf>
 80013cc:	eef0 7a40 	vmov.f32	s15, s0
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <Move_robot_coordinates_X_Y_W+0x1b8>)
 80013d2:	edc3 7a00 	vstr	s15, [r3]
	distante = gipotinus;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <Move_robot_coordinates_X_Y_W+0x1b8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <Move_robot_coordinates_X_Y_W+0x1bc>)
 80013dc:	6013      	str	r3, [r2, #0]
//			flaging = 4;
//			delta_fi = fi - quest_FI;
//		}
//	}

	flag_onesd = 0;
 80013de:	4b03      	ldr	r3, [pc, #12]	; (80013ec <Move_robot_coordinates_X_Y_W+0x18c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
		}
	}

	}

}
 80013e4:	e34f      	b.n	8001a86 <Move_robot_coordinates_X_Y_W+0x826>
 80013e6:	bf00      	nop
 80013e8:	200002eb 	.word	0x200002eb
 80013ec:	20000068 	.word	0x20000068
 80013f0:	20000060 	.word	0x20000060
 80013f4:	20000064 	.word	0x20000064
 80013f8:	2000027c 	.word	0x2000027c
 80013fc:	200002e0 	.word	0x200002e0
 8001400:	2000006c 	.word	0x2000006c
 8001404:	20000294 	.word	0x20000294
 8001408:	2000040c 	.word	0x2000040c
 800140c:	20000410 	.word	0x20000410
 8001410:	200002b8 	.word	0x200002b8
 8001414:	20000288 	.word	0x20000288
 8001418:	200002dc 	.word	0x200002dc
 800141c:	200002e4 	.word	0x200002e4
		if (((gipotinus >= 0.005) || delta_fi >= 0.02)) {
 8001420:	4baf      	ldr	r3, [pc, #700]	; (80016e0 <Move_robot_coordinates_X_Y_W+0x480>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f833 	bl	8000490 <__aeabi_f2d>
 800142a:	a3a3      	add	r3, pc, #652	; (adr r3, 80016b8 <Move_robot_coordinates_X_Y_W+0x458>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff fb0c 	bl	8000a4c <__aeabi_dcmpge>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10d      	bne.n	8001456 <Move_robot_coordinates_X_Y_W+0x1f6>
 800143a:	4baa      	ldr	r3, [pc, #680]	; (80016e4 <Move_robot_coordinates_X_Y_W+0x484>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f826 	bl	8000490 <__aeabi_f2d>
 8001444:	a39e      	add	r3, pc, #632	; (adr r3, 80016c0 <Move_robot_coordinates_X_Y_W+0x460>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff faff 	bl	8000a4c <__aeabi_dcmpge>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 82f9 	beq.w	8001a48 <Move_robot_coordinates_X_Y_W+0x7e8>
			convert_xy_UV[0][0] = cos(fi);
 8001456:	4ba4      	ldr	r3, [pc, #656]	; (80016e8 <Move_robot_coordinates_X_Y_W+0x488>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f818 	bl	8000490 <__aeabi_f2d>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	ec43 2b10 	vmov	d0, r2, r3
 8001468:	f006 fbb6 	bl	8007bd8 <cos>
 800146c:	ec53 2b10 	vmov	r2, r3, d0
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fb26 	bl	8000ac4 <__aeabi_d2f>
 8001478:	4603      	mov	r3, r0
 800147a:	4a9c      	ldr	r2, [pc, #624]	; (80016ec <Move_robot_coordinates_X_Y_W+0x48c>)
 800147c:	6013      	str	r3, [r2, #0]
			convert_xy_UV[0][1] = sin(fi);
 800147e:	4b9a      	ldr	r3, [pc, #616]	; (80016e8 <Move_robot_coordinates_X_Y_W+0x488>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f804 	bl	8000490 <__aeabi_f2d>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	ec43 2b10 	vmov	d0, r2, r3
 8001490:	f006 fbf6 	bl	8007c80 <sin>
 8001494:	ec53 2b10 	vmov	r2, r3, d0
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fb12 	bl	8000ac4 <__aeabi_d2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4a92      	ldr	r2, [pc, #584]	; (80016ec <Move_robot_coordinates_X_Y_W+0x48c>)
 80014a4:	6053      	str	r3, [r2, #4]
			convert_xy_UV[0][2] = 0;
 80014a6:	4b91      	ldr	r3, [pc, #580]	; (80016ec <Move_robot_coordinates_X_Y_W+0x48c>)
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
			convert_xy_UV[1][0] = -sin(fi);
 80014ae:	4b8e      	ldr	r3, [pc, #568]	; (80016e8 <Move_robot_coordinates_X_Y_W+0x488>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ffec 	bl	8000490 <__aeabi_f2d>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	ec43 2b10 	vmov	d0, r2, r3
 80014c0:	f006 fbde 	bl	8007c80 <sin>
 80014c4:	ec53 2b10 	vmov	r2, r3, d0
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f7ff fafa 	bl	8000ac4 <__aeabi_d2f>
 80014d0:	4603      	mov	r3, r0
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eef1 7a67 	vneg.f32	s15, s15
 80014da:	4b84      	ldr	r3, [pc, #528]	; (80016ec <Move_robot_coordinates_X_Y_W+0x48c>)
 80014dc:	edc3 7a03 	vstr	s15, [r3, #12]
			convert_xy_UV[1][1] = cos(fi);
 80014e0:	4b81      	ldr	r3, [pc, #516]	; (80016e8 <Move_robot_coordinates_X_Y_W+0x488>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe ffd3 	bl	8000490 <__aeabi_f2d>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	ec43 2b10 	vmov	d0, r2, r3
 80014f2:	f006 fb71 	bl	8007bd8 <cos>
 80014f6:	ec53 2b10 	vmov	r2, r3, d0
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff fae1 	bl	8000ac4 <__aeabi_d2f>
 8001502:	4603      	mov	r3, r0
 8001504:	4a79      	ldr	r2, [pc, #484]	; (80016ec <Move_robot_coordinates_X_Y_W+0x48c>)
 8001506:	6113      	str	r3, [r2, #16]
			convert_xy_UV[1][2] = 0;
 8001508:	4b78      	ldr	r3, [pc, #480]	; (80016ec <Move_robot_coordinates_X_Y_W+0x48c>)
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
			convert_xy_UV[2][0] = position_x;
 8001510:	4b77      	ldr	r3, [pc, #476]	; (80016f0 <Move_robot_coordinates_X_Y_W+0x490>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a75      	ldr	r2, [pc, #468]	; (80016ec <Move_robot_coordinates_X_Y_W+0x48c>)
 8001516:	6193      	str	r3, [r2, #24]
			convert_xy_UV[2][1] = position_y;
 8001518:	4b76      	ldr	r3, [pc, #472]	; (80016f4 <Move_robot_coordinates_X_Y_W+0x494>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a73      	ldr	r2, [pc, #460]	; (80016ec <Move_robot_coordinates_X_Y_W+0x48c>)
 800151e:	61d3      	str	r3, [r2, #28]
			convert_xy_UV[2][2] = 1;
 8001520:	4b72      	ldr	r3, [pc, #456]	; (80016ec <Move_robot_coordinates_X_Y_W+0x48c>)
 8001522:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001526:	621a      	str	r2, [r3, #32]
			matrixInverse(&convert_xy_UV[0][0], 3, &inverse_converte_xy_UV[0][0]);
 8001528:	4a73      	ldr	r2, [pc, #460]	; (80016f8 <Move_robot_coordinates_X_Y_W+0x498>)
 800152a:	2103      	movs	r1, #3
 800152c:	486f      	ldr	r0, [pc, #444]	; (80016ec <Move_robot_coordinates_X_Y_W+0x48c>)
 800152e:	f001 f84f 	bl	80025d0 <matrixInverse>
			matrixMultiplyM2M(&quest_xy[0][0], 1, 3, &inverse_converte_xy_UV[0][0],
 8001532:	4b72      	ldr	r3, [pc, #456]	; (80016fc <Move_robot_coordinates_X_Y_W+0x49c>)
 8001534:	9302      	str	r3, [sp, #8]
 8001536:	2303      	movs	r3, #3
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	2303      	movs	r3, #3
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	4b6e      	ldr	r3, [pc, #440]	; (80016f8 <Move_robot_coordinates_X_Y_W+0x498>)
 8001540:	2203      	movs	r2, #3
 8001542:	2101      	movs	r1, #1
 8001544:	486e      	ldr	r0, [pc, #440]	; (8001700 <Move_robot_coordinates_X_Y_W+0x4a0>)
 8001546:	f000 fe75 	bl	8002234 <matrixMultiplyM2M>
					(quest_UV[0][0] * quest_UV[0][0])
 800154a:	4b6c      	ldr	r3, [pc, #432]	; (80016fc <Move_robot_coordinates_X_Y_W+0x49c>)
 800154c:	ed93 7a00 	vldr	s14, [r3]
 8001550:	4b6a      	ldr	r3, [pc, #424]	; (80016fc <Move_robot_coordinates_X_Y_W+0x49c>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	ee27 7a27 	vmul.f32	s14, s14, s15
							+ (quest_UV[0][1] * quest_UV[0][1]));
 800155a:	4b68      	ldr	r3, [pc, #416]	; (80016fc <Move_robot_coordinates_X_Y_W+0x49c>)
 800155c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001560:	4b66      	ldr	r3, [pc, #408]	; (80016fc <Move_robot_coordinates_X_Y_W+0x49c>)
 8001562:	edd3 7a01 	vldr	s15, [r3, #4]
 8001566:	ee66 7aa7 	vmul.f32	s15, s13, s15
			gipotinus = sqrtf(
 800156a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156e:	eeb0 0a67 	vmov.f32	s0, s15
 8001572:	f006 fbdd 	bl	8007d30 <sqrtf>
 8001576:	eef0 7a40 	vmov.f32	s15, s0
 800157a:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <Move_robot_coordinates_X_Y_W+0x480>)
 800157c:	edc3 7a00 	vstr	s15, [r3]
			if (gipotinus > 0.005) {
 8001580:	4b57      	ldr	r3, [pc, #348]	; (80016e0 <Move_robot_coordinates_X_Y_W+0x480>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ff83 	bl	8000490 <__aeabi_f2d>
 800158a:	a34b      	add	r3, pc, #300	; (adr r3, 80016b8 <Move_robot_coordinates_X_Y_W+0x458>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7ff fa66 	bl	8000a60 <__aeabi_dcmpgt>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 817b 	beq.w	8001892 <Move_robot_coordinates_X_Y_W+0x632>
				if (gipotinus < 0.15) {
 800159c:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <Move_robot_coordinates_X_Y_W+0x480>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ff75 	bl	8000490 <__aeabi_f2d>
 80015a6:	a348      	add	r3, pc, #288	; (adr r3, 80016c8 <Move_robot_coordinates_X_Y_W+0x468>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7ff fa3a 	bl	8000a24 <__aeabi_dcmplt>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 80ac 	beq.w	8001710 <Move_robot_coordinates_X_Y_W+0x4b0>
					target_speed[0] = quest_UV[0][0] / gipotinus * V
 80015b8:	4b50      	ldr	r3, [pc, #320]	; (80016fc <Move_robot_coordinates_X_Y_W+0x49c>)
 80015ba:	edd3 6a00 	vldr	s13, [r3]
 80015be:	4b48      	ldr	r3, [pc, #288]	; (80016e0 <Move_robot_coordinates_X_Y_W+0x480>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015c8:	4b4e      	ldr	r3, [pc, #312]	; (8001704 <Move_robot_coordinates_X_Y_W+0x4a4>)
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d2:	ee17 0a90 	vmov	r0, s15
 80015d6:	f7fe ff5b 	bl	8000490 <__aeabi_f2d>
 80015da:	4604      	mov	r4, r0
 80015dc:	460d      	mov	r5, r1
							* (0.4 + (0.6 * gipotinus) / 0.25);
 80015de:	4b40      	ldr	r3, [pc, #256]	; (80016e0 <Move_robot_coordinates_X_Y_W+0x480>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ff54 	bl	8000490 <__aeabi_f2d>
 80015e8:	a339      	add	r3, pc, #228	; (adr r3, 80016d0 <Move_robot_coordinates_X_Y_W+0x470>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	f7fe ffa7 	bl	8000540 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b42      	ldr	r3, [pc, #264]	; (8001708 <Move_robot_coordinates_X_Y_W+0x4a8>)
 8001600:	f7ff f8c8 	bl	8000794 <__aeabi_ddiv>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	a332      	add	r3, pc, #200	; (adr r3, 80016d8 <Move_robot_coordinates_X_Y_W+0x478>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7fe fddf 	bl	80001d4 <__adddf3>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7fe ff8f 	bl	8000540 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fa4b 	bl	8000ac4 <__aeabi_d2f>
 800162e:	4603      	mov	r3, r0
					target_speed[0] = quest_UV[0][0] / gipotinus * V
 8001630:	4a36      	ldr	r2, [pc, #216]	; (800170c <Move_robot_coordinates_X_Y_W+0x4ac>)
 8001632:	6013      	str	r3, [r2, #0]
					target_speed[1] = quest_UV[0][1] / gipotinus * V
 8001634:	4b31      	ldr	r3, [pc, #196]	; (80016fc <Move_robot_coordinates_X_Y_W+0x49c>)
 8001636:	edd3 6a01 	vldr	s13, [r3, #4]
 800163a:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <Move_robot_coordinates_X_Y_W+0x480>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001644:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <Move_robot_coordinates_X_Y_W+0x4a4>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164e:	ee17 0a90 	vmov	r0, s15
 8001652:	f7fe ff1d 	bl	8000490 <__aeabi_f2d>
 8001656:	4604      	mov	r4, r0
 8001658:	460d      	mov	r5, r1
							* (0.4 + (0.6 * gipotinus) / 0.25);
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <Move_robot_coordinates_X_Y_W+0x480>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff16 	bl	8000490 <__aeabi_f2d>
 8001664:	a31a      	add	r3, pc, #104	; (adr r3, 80016d0 <Move_robot_coordinates_X_Y_W+0x470>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7fe ff69 	bl	8000540 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b23      	ldr	r3, [pc, #140]	; (8001708 <Move_robot_coordinates_X_Y_W+0x4a8>)
 800167c:	f7ff f88a 	bl	8000794 <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	a313      	add	r3, pc, #76	; (adr r3, 80016d8 <Move_robot_coordinates_X_Y_W+0x478>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	f7fe fda1 	bl	80001d4 <__adddf3>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4620      	mov	r0, r4
 8001698:	4629      	mov	r1, r5
 800169a:	f7fe ff51 	bl	8000540 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff fa0d 	bl	8000ac4 <__aeabi_d2f>
 80016aa:	4603      	mov	r3, r0
					target_speed[1] = quest_UV[0][1] / gipotinus * V
 80016ac:	4a17      	ldr	r2, [pc, #92]	; (800170c <Move_robot_coordinates_X_Y_W+0x4ac>)
 80016ae:	6053      	str	r3, [r2, #4]
 80016b0:	e0f7      	b.n	80018a2 <Move_robot_coordinates_X_Y_W+0x642>
 80016b2:	bf00      	nop
 80016b4:	f3af 8000 	nop.w
 80016b8:	47ae147b 	.word	0x47ae147b
 80016bc:	3f747ae1 	.word	0x3f747ae1
 80016c0:	47ae147b 	.word	0x47ae147b
 80016c4:	3f947ae1 	.word	0x3f947ae1
 80016c8:	33333333 	.word	0x33333333
 80016cc:	3fc33333 	.word	0x3fc33333
 80016d0:	33333333 	.word	0x33333333
 80016d4:	3fe33333 	.word	0x3fe33333
 80016d8:	9999999a 	.word	0x9999999a
 80016dc:	3fd99999 	.word	0x3fd99999
 80016e0:	200002dc 	.word	0x200002dc
 80016e4:	2000026c 	.word	0x2000026c
 80016e8:	2000006c 	.word	0x2000006c
 80016ec:	20000294 	.word	0x20000294
 80016f0:	2000040c 	.word	0x2000040c
 80016f4:	20000410 	.word	0x20000410
 80016f8:	200002b8 	.word	0x200002b8
 80016fc:	20000288 	.word	0x20000288
 8001700:	2000027c 	.word	0x2000027c
 8001704:	20000060 	.word	0x20000060
 8001708:	3fd00000 	.word	0x3fd00000
 800170c:	20000228 	.word	0x20000228
				} else if (distante - gipotinus < 0.15) {
 8001710:	4bb3      	ldr	r3, [pc, #716]	; (80019e0 <Move_robot_coordinates_X_Y_W+0x780>)
 8001712:	ed93 7a00 	vldr	s14, [r3]
 8001716:	4bb3      	ldr	r3, [pc, #716]	; (80019e4 <Move_robot_coordinates_X_Y_W+0x784>)
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001720:	ee17 0a90 	vmov	r0, s15
 8001724:	f7fe feb4 	bl	8000490 <__aeabi_f2d>
 8001728:	a3a5      	add	r3, pc, #660	; (adr r3, 80019c0 <Move_robot_coordinates_X_Y_W+0x760>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7ff f979 	bl	8000a24 <__aeabi_dcmplt>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 808b 	beq.w	8001850 <Move_robot_coordinates_X_Y_W+0x5f0>
					target_speed[0] = quest_UV[0][0] / gipotinus * V
 800173a:	4bab      	ldr	r3, [pc, #684]	; (80019e8 <Move_robot_coordinates_X_Y_W+0x788>)
 800173c:	edd3 6a00 	vldr	s13, [r3]
 8001740:	4ba8      	ldr	r3, [pc, #672]	; (80019e4 <Move_robot_coordinates_X_Y_W+0x784>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800174a:	4ba8      	ldr	r3, [pc, #672]	; (80019ec <Move_robot_coordinates_X_Y_W+0x78c>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001754:	ee17 0a90 	vmov	r0, s15
 8001758:	f7fe fe9a 	bl	8000490 <__aeabi_f2d>
 800175c:	4604      	mov	r4, r0
 800175e:	460d      	mov	r5, r1
							* (0.4 + (0.6 * (distante - gipotinus)) / 0.25);
 8001760:	4b9f      	ldr	r3, [pc, #636]	; (80019e0 <Move_robot_coordinates_X_Y_W+0x780>)
 8001762:	ed93 7a00 	vldr	s14, [r3]
 8001766:	4b9f      	ldr	r3, [pc, #636]	; (80019e4 <Move_robot_coordinates_X_Y_W+0x784>)
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001770:	ee17 0a90 	vmov	r0, s15
 8001774:	f7fe fe8c 	bl	8000490 <__aeabi_f2d>
 8001778:	a393      	add	r3, pc, #588	; (adr r3, 80019c8 <Move_robot_coordinates_X_Y_W+0x768>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7fe fedf 	bl	8000540 <__aeabi_dmul>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	4b98      	ldr	r3, [pc, #608]	; (80019f0 <Move_robot_coordinates_X_Y_W+0x790>)
 8001790:	f7ff f800 	bl	8000794 <__aeabi_ddiv>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	a38c      	add	r3, pc, #560	; (adr r3, 80019d0 <Move_robot_coordinates_X_Y_W+0x770>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe fd17 	bl	80001d4 <__adddf3>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4620      	mov	r0, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	f7fe fec7 	bl	8000540 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f983 	bl	8000ac4 <__aeabi_d2f>
 80017be:	4603      	mov	r3, r0
					target_speed[0] = quest_UV[0][0] / gipotinus * V
 80017c0:	4a8c      	ldr	r2, [pc, #560]	; (80019f4 <Move_robot_coordinates_X_Y_W+0x794>)
 80017c2:	6013      	str	r3, [r2, #0]
					target_speed[1] = quest_UV[0][1] / gipotinus * V
 80017c4:	4b88      	ldr	r3, [pc, #544]	; (80019e8 <Move_robot_coordinates_X_Y_W+0x788>)
 80017c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80017ca:	4b86      	ldr	r3, [pc, #536]	; (80019e4 <Move_robot_coordinates_X_Y_W+0x784>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017d4:	4b85      	ldr	r3, [pc, #532]	; (80019ec <Move_robot_coordinates_X_Y_W+0x78c>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017de:	ee17 0a90 	vmov	r0, s15
 80017e2:	f7fe fe55 	bl	8000490 <__aeabi_f2d>
 80017e6:	4604      	mov	r4, r0
 80017e8:	460d      	mov	r5, r1
							* (0.4 + (0.6 * (distante - gipotinus)) / 0.25);
 80017ea:	4b7d      	ldr	r3, [pc, #500]	; (80019e0 <Move_robot_coordinates_X_Y_W+0x780>)
 80017ec:	ed93 7a00 	vldr	s14, [r3]
 80017f0:	4b7c      	ldr	r3, [pc, #496]	; (80019e4 <Move_robot_coordinates_X_Y_W+0x784>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fa:	ee17 0a90 	vmov	r0, s15
 80017fe:	f7fe fe47 	bl	8000490 <__aeabi_f2d>
 8001802:	a371      	add	r3, pc, #452	; (adr r3, 80019c8 <Move_robot_coordinates_X_Y_W+0x768>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	f7fe fe9a 	bl	8000540 <__aeabi_dmul>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b75      	ldr	r3, [pc, #468]	; (80019f0 <Move_robot_coordinates_X_Y_W+0x790>)
 800181a:	f7fe ffbb 	bl	8000794 <__aeabi_ddiv>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	a36a      	add	r3, pc, #424	; (adr r3, 80019d0 <Move_robot_coordinates_X_Y_W+0x770>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7fe fcd2 	bl	80001d4 <__adddf3>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4620      	mov	r0, r4
 8001836:	4629      	mov	r1, r5
 8001838:	f7fe fe82 	bl	8000540 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f93e 	bl	8000ac4 <__aeabi_d2f>
 8001848:	4603      	mov	r3, r0
					target_speed[1] = quest_UV[0][1] / gipotinus * V
 800184a:	4a6a      	ldr	r2, [pc, #424]	; (80019f4 <Move_robot_coordinates_X_Y_W+0x794>)
 800184c:	6053      	str	r3, [r2, #4]
 800184e:	e028      	b.n	80018a2 <Move_robot_coordinates_X_Y_W+0x642>
					target_speed[0] = quest_UV[0][0] / gipotinus * V;
 8001850:	4b65      	ldr	r3, [pc, #404]	; (80019e8 <Move_robot_coordinates_X_Y_W+0x788>)
 8001852:	edd3 6a00 	vldr	s13, [r3]
 8001856:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <Move_robot_coordinates_X_Y_W+0x784>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001860:	4b62      	ldr	r3, [pc, #392]	; (80019ec <Move_robot_coordinates_X_Y_W+0x78c>)
 8001862:	edd3 7a00 	vldr	s15, [r3]
 8001866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186a:	4b62      	ldr	r3, [pc, #392]	; (80019f4 <Move_robot_coordinates_X_Y_W+0x794>)
 800186c:	edc3 7a00 	vstr	s15, [r3]
					target_speed[1] = quest_UV[0][1] / gipotinus * V;
 8001870:	4b5d      	ldr	r3, [pc, #372]	; (80019e8 <Move_robot_coordinates_X_Y_W+0x788>)
 8001872:	edd3 6a01 	vldr	s13, [r3, #4]
 8001876:	4b5b      	ldr	r3, [pc, #364]	; (80019e4 <Move_robot_coordinates_X_Y_W+0x784>)
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001880:	4b5a      	ldr	r3, [pc, #360]	; (80019ec <Move_robot_coordinates_X_Y_W+0x78c>)
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188a:	4b5a      	ldr	r3, [pc, #360]	; (80019f4 <Move_robot_coordinates_X_Y_W+0x794>)
 800188c:	edc3 7a01 	vstr	s15, [r3, #4]
 8001890:	e007      	b.n	80018a2 <Move_robot_coordinates_X_Y_W+0x642>
				target_speed[0] = 0.0;
 8001892:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <Move_robot_coordinates_X_Y_W+0x794>)
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
				target_speed[1] = 0.0;
 800189a:	4b56      	ldr	r3, [pc, #344]	; (80019f4 <Move_robot_coordinates_X_Y_W+0x794>)
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	605a      	str	r2, [r3, #4]
			if (delta_fi > 0.02) {
 80018a2:	4b55      	ldr	r3, [pc, #340]	; (80019f8 <Move_robot_coordinates_X_Y_W+0x798>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fdf2 	bl	8000490 <__aeabi_f2d>
 80018ac:	a34a      	add	r3, pc, #296	; (adr r3, 80019d8 <Move_robot_coordinates_X_Y_W+0x778>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7ff f8d5 	bl	8000a60 <__aeabi_dcmpgt>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d02b      	beq.n	8001914 <Move_robot_coordinates_X_Y_W+0x6b4>
				switch (flaging) {
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <Move_robot_coordinates_X_Y_W+0x79c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d82a      	bhi.n	800191c <Move_robot_coordinates_X_Y_W+0x6bc>
 80018c6:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <Move_robot_coordinates_X_Y_W+0x66c>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	080018dd 	.word	0x080018dd
 80018d0:	080018e7 	.word	0x080018e7
 80018d4:	080018f9 	.word	0x080018f9
 80018d8:	0800190b 	.word	0x0800190b
					target_speed[2] = W;
 80018dc:	4b48      	ldr	r3, [pc, #288]	; (8001a00 <Move_robot_coordinates_X_Y_W+0x7a0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a44      	ldr	r2, [pc, #272]	; (80019f4 <Move_robot_coordinates_X_Y_W+0x794>)
 80018e2:	6093      	str	r3, [r2, #8]
					break;
 80018e4:	e01a      	b.n	800191c <Move_robot_coordinates_X_Y_W+0x6bc>
					target_speed[2] = -W;
 80018e6:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <Move_robot_coordinates_X_Y_W+0x7a0>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	eef1 7a67 	vneg.f32	s15, s15
 80018f0:	4b40      	ldr	r3, [pc, #256]	; (80019f4 <Move_robot_coordinates_X_Y_W+0x794>)
 80018f2:	edc3 7a02 	vstr	s15, [r3, #8]
					break;
 80018f6:	e011      	b.n	800191c <Move_robot_coordinates_X_Y_W+0x6bc>
					target_speed[2] = -W;
 80018f8:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <Move_robot_coordinates_X_Y_W+0x7a0>)
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	eef1 7a67 	vneg.f32	s15, s15
 8001902:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <Move_robot_coordinates_X_Y_W+0x794>)
 8001904:	edc3 7a02 	vstr	s15, [r3, #8]
					break;
 8001908:	e008      	b.n	800191c <Move_robot_coordinates_X_Y_W+0x6bc>
					target_speed[2] = W;
 800190a:	4b3d      	ldr	r3, [pc, #244]	; (8001a00 <Move_robot_coordinates_X_Y_W+0x7a0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a39      	ldr	r2, [pc, #228]	; (80019f4 <Move_robot_coordinates_X_Y_W+0x794>)
 8001910:	6093      	str	r3, [r2, #8]
					break;
 8001912:	e003      	b.n	800191c <Move_robot_coordinates_X_Y_W+0x6bc>
				target_speed[2] = 0.0;
 8001914:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <Move_robot_coordinates_X_Y_W+0x794>)
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
			matrixMultiplyM2M(&target_speed[0], 1, 3, &robot_matrix[0][0], 3, 4,
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <Move_robot_coordinates_X_Y_W+0x7a4>)
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2304      	movs	r3, #4
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	2303      	movs	r3, #3
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <Move_robot_coordinates_X_Y_W+0x7a8>)
 800192a:	2203      	movs	r2, #3
 800192c:	2101      	movs	r1, #1
 800192e:	4831      	ldr	r0, [pc, #196]	; (80019f4 <Move_robot_coordinates_X_Y_W+0x794>)
 8001930:	f000 fc80 	bl	8002234 <matrixMultiplyM2M>
			now_speead[0] = result_speed_1;
 8001934:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <Move_robot_coordinates_X_Y_W+0x7ac>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a35      	ldr	r2, [pc, #212]	; (8001a10 <Move_robot_coordinates_X_Y_W+0x7b0>)
 800193a:	6013      	str	r3, [r2, #0]
			now_speead[1] = result_speed_2;
 800193c:	4b35      	ldr	r3, [pc, #212]	; (8001a14 <Move_robot_coordinates_X_Y_W+0x7b4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a33      	ldr	r2, [pc, #204]	; (8001a10 <Move_robot_coordinates_X_Y_W+0x7b0>)
 8001942:	6053      	str	r3, [r2, #4]
			now_speead[2] = result_speed_3;
 8001944:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <Move_robot_coordinates_X_Y_W+0x7b8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a31      	ldr	r2, [pc, #196]	; (8001a10 <Move_robot_coordinates_X_Y_W+0x7b0>)
 800194a:	6093      	str	r3, [r2, #8]
			read_speed[0] = result_speed_0;
 800194c:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <Move_robot_coordinates_X_Y_W+0x7bc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a33      	ldr	r2, [pc, #204]	; (8001a20 <Move_robot_coordinates_X_Y_W+0x7c0>)
 8001952:	6013      	str	r3, [r2, #0]
			read_speed[1] = result_speed_1;
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <Move_robot_coordinates_X_Y_W+0x7ac>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a31      	ldr	r2, [pc, #196]	; (8001a20 <Move_robot_coordinates_X_Y_W+0x7c0>)
 800195a:	6053      	str	r3, [r2, #4]
			read_speed[2] = result_speed_2;
 800195c:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <Move_robot_coordinates_X_Y_W+0x7b4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a2f      	ldr	r2, [pc, #188]	; (8001a20 <Move_robot_coordinates_X_Y_W+0x7c0>)
 8001962:	6093      	str	r3, [r2, #8]
			read_speed[3] = result_speed_3;
 8001964:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <Move_robot_coordinates_X_Y_W+0x7b8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a2d      	ldr	r2, [pc, #180]	; (8001a20 <Move_robot_coordinates_X_Y_W+0x7c0>)
 800196a:	60d3      	str	r3, [r2, #12]
			matrixMultiplyM2M(&read_speed[0], 1, 4,
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <Move_robot_coordinates_X_Y_W+0x7c4>)
 800196e:	9302      	str	r3, [sp, #8]
 8001970:	2303      	movs	r3, #3
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	2304      	movs	r3, #4
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <Move_robot_coordinates_X_Y_W+0x7c8>)
 800197a:	2204      	movs	r2, #4
 800197c:	2101      	movs	r1, #1
 800197e:	4828      	ldr	r0, [pc, #160]	; (8001a20 <Move_robot_coordinates_X_Y_W+0x7c0>)
 8001980:	f000 fc58 	bl	8002234 <matrixMultiplyM2M>
			Wheel_1.target = speed_wheels[0];
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <Move_robot_coordinates_X_Y_W+0x7a4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a28      	ldr	r2, [pc, #160]	; (8001a2c <Move_robot_coordinates_X_Y_W+0x7cc>)
 800198a:	6113      	str	r3, [r2, #16]
			Wheel_2.target = speed_wheels[1];
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <Move_robot_coordinates_X_Y_W+0x7a4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4a27      	ldr	r2, [pc, #156]	; (8001a30 <Move_robot_coordinates_X_Y_W+0x7d0>)
 8001992:	6113      	str	r3, [r2, #16]
			Wheel_3.target = speed_wheels[2];
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <Move_robot_coordinates_X_Y_W+0x7a4>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <Move_robot_coordinates_X_Y_W+0x7d4>)
 800199a:	6113      	str	r3, [r2, #16]
			Wheel_4.target = speed_wheels[3];
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <Move_robot_coordinates_X_Y_W+0x7a4>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4a25      	ldr	r2, [pc, #148]	; (8001a38 <Move_robot_coordinates_X_Y_W+0x7d8>)
 80019a2:	6113      	str	r3, [r2, #16]
			speed_U = robot_speed[0];
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <Move_robot_coordinates_X_Y_W+0x7c4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a24      	ldr	r2, [pc, #144]	; (8001a3c <Move_robot_coordinates_X_Y_W+0x7dc>)
 80019aa:	6013      	str	r3, [r2, #0]
			speed_V = robot_speed[1];
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <Move_robot_coordinates_X_Y_W+0x7c4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4a23      	ldr	r2, [pc, #140]	; (8001a40 <Move_robot_coordinates_X_Y_W+0x7e0>)
 80019b2:	6013      	str	r3, [r2, #0]
			speed_W = robot_speed[2];
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <Move_robot_coordinates_X_Y_W+0x7c4>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <Move_robot_coordinates_X_Y_W+0x7e4>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	e063      	b.n	8001a86 <Move_robot_coordinates_X_Y_W+0x826>
 80019be:	bf00      	nop
 80019c0:	33333333 	.word	0x33333333
 80019c4:	3fc33333 	.word	0x3fc33333
 80019c8:	33333333 	.word	0x33333333
 80019cc:	3fe33333 	.word	0x3fe33333
 80019d0:	9999999a 	.word	0x9999999a
 80019d4:	3fd99999 	.word	0x3fd99999
 80019d8:	47ae147b 	.word	0x47ae147b
 80019dc:	3f947ae1 	.word	0x3f947ae1
 80019e0:	200002e4 	.word	0x200002e4
 80019e4:	200002dc 	.word	0x200002dc
 80019e8:	20000288 	.word	0x20000288
 80019ec:	20000060 	.word	0x20000060
 80019f0:	3fd00000 	.word	0x3fd00000
 80019f4:	20000228 	.word	0x20000228
 80019f8:	2000026c 	.word	0x2000026c
 80019fc:	200003d0 	.word	0x200003d0
 8001a00:	20000064 	.word	0x20000064
 8001a04:	20000234 	.word	0x20000234
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	200003dc 	.word	0x200003dc
 8001a10:	20000244 	.word	0x20000244
 8001a14:	200003e0 	.word	0x200003e0
 8001a18:	200003e4 	.word	0x200003e4
 8001a1c:	200003d8 	.word	0x200003d8
 8001a20:	20000250 	.word	0x20000250
 8001a24:	20000260 	.word	0x20000260
 8001a28:	20000030 	.word	0x20000030
 8001a2c:	200000e8 	.word	0x200000e8
 8001a30:	20000128 	.word	0x20000128
 8001a34:	20000168 	.word	0x20000168
 8001a38:	200001a8 	.word	0x200001a8
 8001a3c:	20000270 	.word	0x20000270
 8001a40:	20000274 	.word	0x20000274
 8001a44:	20000278 	.word	0x20000278
			flag_move_end = 1;
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <Move_robot_coordinates_X_Y_W+0x830>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
				speed_U = 0;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <Move_robot_coordinates_X_Y_W+0x834>)
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
		speed_V = 0;
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <Move_robot_coordinates_X_Y_W+0x838>)
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
		speed_W = 0;
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <Move_robot_coordinates_X_Y_W+0x83c>)
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
		Wheel_1.target = 0;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <Move_robot_coordinates_X_Y_W+0x840>)
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
		Wheel_2.target = 0;
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <Move_robot_coordinates_X_Y_W+0x844>)
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
		Wheel_3.target = 0;
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <Move_robot_coordinates_X_Y_W+0x848>)
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
		Wheel_4.target = 0;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <Move_robot_coordinates_X_Y_W+0x84c>)
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200002eb 	.word	0x200002eb
 8001a94:	20000270 	.word	0x20000270
 8001a98:	20000274 	.word	0x20000274
 8001a9c:	20000278 	.word	0x20000278
 8001aa0:	200000e8 	.word	0x200000e8
 8001aa4:	20000128 	.word	0x20000128
 8001aa8:	20000168 	.word	0x20000168
 8001aac:	200001a8 	.word	0x200001a8

08001ab0 <HAL_UART_RxCpltCallback>:
				i++;
			}
		}
	}
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]



	if (rx_data[0] == '%') {
 8001ab8:	4b5d      	ldr	r3, [pc, #372]	; (8001c30 <HAL_UART_RxCpltCallback+0x180>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b25      	cmp	r3, #37	; 0x25
 8001abe:	d10b      	bne.n	8001ad8 <HAL_UART_RxCpltCallback+0x28>
		check_sum = 0;
 8001ac0:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <HAL_UART_RxCpltCallback+0x184>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
		write_data = 1;
 8001ac6:	4b5c      	ldr	r3, [pc, #368]	; (8001c38 <HAL_UART_RxCpltCallback+0x188>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
		ind_data = 0;
 8001acc:	4b5b      	ldr	r3, [pc, #364]	; (8001c3c <HAL_UART_RxCpltCallback+0x18c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
		size_data = 0;
 8001ad2:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <HAL_UART_RxCpltCallback+0x190>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
	}

	if (write_data) {
 8001ad8:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <HAL_UART_RxCpltCallback+0x188>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d040      	beq.n	8001b62 <HAL_UART_RxCpltCallback+0xb2>

		temp_data[ind_data] = rx_data[0];
 8001ae0:	4b56      	ldr	r3, [pc, #344]	; (8001c3c <HAL_UART_RxCpltCallback+0x18c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b52      	ldr	r3, [pc, #328]	; (8001c30 <HAL_UART_RxCpltCallback+0x180>)
 8001ae8:	7819      	ldrb	r1, [r3, #0]
 8001aea:	4b56      	ldr	r3, [pc, #344]	; (8001c44 <HAL_UART_RxCpltCallback+0x194>)
 8001aec:	5499      	strb	r1, [r3, r2]

		if (ind_data == 3) {
 8001aee:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_UART_RxCpltCallback+0x18c>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d11c      	bne.n	8001b30 <HAL_UART_RxCpltCallback+0x80>
			size_data = (temp_data[1] - 48) * 100 + (temp_data[2] - 48) * 10
 8001af6:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <HAL_UART_RxCpltCallback+0x194>)
 8001af8:	785b      	ldrb	r3, [r3, #1]
 8001afa:	461a      	mov	r2, r3
 8001afc:	0092      	lsls	r2, r2, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	461a      	mov	r2, r3
 8001b02:	0091      	lsls	r1, r2, #2
 8001b04:	461a      	mov	r2, r3
 8001b06:	460b      	mov	r3, r1
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b4d      	ldr	r3, [pc, #308]	; (8001c44 <HAL_UART_RxCpltCallback+0x194>)
 8001b10:	789b      	ldrb	r3, [r3, #2]
 8001b12:	4619      	mov	r1, r3
 8001b14:	0089      	lsls	r1, r1, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b2da      	uxtb	r2, r3
					+ (temp_data[3] - 48);
 8001b20:	4b48      	ldr	r3, [pc, #288]	; (8001c44 <HAL_UART_RxCpltCallback+0x194>)
 8001b22:	78db      	ldrb	r3, [r3, #3]
 8001b24:	4413      	add	r3, r2
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	3330      	adds	r3, #48	; 0x30
 8001b2a:	b2da      	uxtb	r2, r3
			size_data = (temp_data[1] - 48) * 100 + (temp_data[2] - 48) * 10
 8001b2c:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <HAL_UART_RxCpltCallback+0x190>)
 8001b2e:	701a      	strb	r2, [r3, #0]
		}
		if (ind_data <= size_data - 4 || ind_data <= 3) {
 8001b30:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <HAL_UART_RxCpltCallback+0x190>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	3b03      	subs	r3, #3
 8001b36:	4a41      	ldr	r2, [pc, #260]	; (8001c3c <HAL_UART_RxCpltCallback+0x18c>)
 8001b38:	7812      	ldrb	r2, [r2, #0]
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	dc03      	bgt.n	8001b46 <HAL_UART_RxCpltCallback+0x96>
 8001b3e:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <HAL_UART_RxCpltCallback+0x18c>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d807      	bhi.n	8001b56 <HAL_UART_RxCpltCallback+0xa6>
			check_sum += rx_data[0];
 8001b46:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <HAL_UART_RxCpltCallback+0x180>)
 8001b48:	781a      	ldrb	r2, [r3, #0]
 8001b4a:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <HAL_UART_RxCpltCallback+0x184>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <HAL_UART_RxCpltCallback+0x184>)
 8001b54:	701a      	strb	r2, [r3, #0]
		}

		ind_data++;
 8001b56:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <HAL_UART_RxCpltCallback+0x18c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <HAL_UART_RxCpltCallback+0x18c>)
 8001b60:	701a      	strb	r2, [r3, #0]
	}
	if (ind_data >= 99) {
 8001b62:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <HAL_UART_RxCpltCallback+0x18c>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b62      	cmp	r3, #98	; 0x62
 8001b68:	d90b      	bls.n	8001b82 <HAL_UART_RxCpltCallback+0xd2>
		check_sum = 0;
 8001b6a:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <HAL_UART_RxCpltCallback+0x184>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
		write_data = 0;
 8001b70:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <HAL_UART_RxCpltCallback+0x188>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
		ind_data = 0;
 8001b76:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <HAL_UART_RxCpltCallback+0x18c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
		size_data = 0;
 8001b7c:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <HAL_UART_RxCpltCallback+0x190>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
	}
	if (ind_data == size_data) {
 8001b82:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <HAL_UART_RxCpltCallback+0x18c>)
 8001b84:	781a      	ldrb	r2, [r3, #0]
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <HAL_UART_RxCpltCallback+0x190>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d101      	bne.n	8001b92 <HAL_UART_RxCpltCallback+0xe2>
		HAL_GetTick();
 8001b8e:	f002 fb4b 	bl	8004228 <HAL_GetTick>
	}
	if (rx_data[0] == '\r') {
 8001b92:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_UART_RxCpltCallback+0x180>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b0d      	cmp	r3, #13
 8001b98:	d145      	bne.n	8001c26 <HAL_UART_RxCpltCallback+0x176>

		//size_data = (temp_data[1] - 48) * 100 + (temp_data[2] - 48) * 10 + (temp_data[3] - 48);
		uint8_t check_sum_data = (temp_data[size_data - 3] - 48) * 100
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <HAL_UART_RxCpltCallback+0x190>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	3b03      	subs	r3, #3
 8001ba0:	4a28      	ldr	r2, [pc, #160]	; (8001c44 <HAL_UART_RxCpltCallback+0x194>)
 8001ba2:	5cd3      	ldrb	r3, [r2, r3]
				+ (temp_data[size_data - 2] - 48) * 10
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	0092      	lsls	r2, r2, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	461a      	mov	r2, r3
 8001bac:	0091      	lsls	r1, r2, #2
 8001bae:	461a      	mov	r2, r3
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <HAL_UART_RxCpltCallback+0x190>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	3b02      	subs	r3, #2
 8001bbe:	4921      	ldr	r1, [pc, #132]	; (8001c44 <HAL_UART_RxCpltCallback+0x194>)
 8001bc0:	5ccb      	ldrb	r3, [r1, r3]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	0089      	lsls	r1, r1, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	b2da      	uxtb	r2, r3
				+ (temp_data[size_data - 1] - 48);
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_UART_RxCpltCallback+0x190>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	491b      	ldr	r1, [pc, #108]	; (8001c44 <HAL_UART_RxCpltCallback+0x194>)
 8001bd8:	5ccb      	ldrb	r3, [r1, r3]
 8001bda:	4413      	add	r3, r2
 8001bdc:	b2db      	uxtb	r3, r3
		uint8_t check_sum_data = (temp_data[size_data - 3] - 48) * 100
 8001bde:	3330      	adds	r3, #48	; 0x30
 8001be0:	73fb      	strb	r3, [r7, #15]
		write_data = 0;
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_UART_RxCpltCallback+0x188>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
		if (check_sum == check_sum_data && ind_data == size_data + 1) {
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_UART_RxCpltCallback+0x184>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d119      	bne.n	8001c26 <HAL_UART_RxCpltCallback+0x176>
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_UART_RxCpltCallback+0x18c>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_UART_RxCpltCallback+0x190>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d111      	bne.n	8001c26 <HAL_UART_RxCpltCallback+0x176>
			timer = HAL_GetTick();
 8001c02:	f002 fb11 	bl	8004228 <HAL_GetTick>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <HAL_UART_RxCpltCallback+0x198>)
 8001c0a:	6013      	str	r3, [r2, #0]
			memcpy(data, &temp_data[5], size_data);
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_UART_RxCpltCallback+0x190>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	490e      	ldr	r1, [pc, #56]	; (8001c4c <HAL_UART_RxCpltCallback+0x19c>)
 8001c14:	480e      	ldr	r0, [pc, #56]	; (8001c50 <HAL_UART_RxCpltCallback+0x1a0>)
 8001c16:	f005 ffcf 	bl	8007bb8 <memcpy>
			data[size_data - 8] = '\r';
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_UART_RxCpltCallback+0x190>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	3b08      	subs	r3, #8
 8001c20:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <HAL_UART_RxCpltCallback+0x1a0>)
 8001c22:	210d      	movs	r1, #13
 8001c24:	54d1      	strb	r1, [r2, r3]
		}
	}
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200002f0 	.word	0x200002f0
 8001c34:	200003bf 	.word	0x200003bf
 8001c38:	200003be 	.word	0x200003be
 8001c3c:	200003bd 	.word	0x200003bd
 8001c40:	200003bc 	.word	0x200003bc
 8001c44:	200002f4 	.word	0x200002f4
 8001c48:	200003c0 	.word	0x200003c0
 8001c4c:	200002f9 	.word	0x200002f9
 8001c50:	20000358 	.word	0x20000358

08001c54 <convert_typedef>:

	} else {
		autonom_flag = false;
	}
}
void convert_typedef(void) {
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

	Wheel_1.motor = 0;
 8001c58:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <convert_typedef+0x114>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_1.target = 0.0;
 8001c60:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <convert_typedef+0x114>)
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
	Wheel_1.current = 0;
 8001c68:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <convert_typedef+0x114>)
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	615a      	str	r2, [r3, #20]
	Wheel_1.Kp = 14;
 8001c70:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <convert_typedef+0x114>)
 8001c72:	4a3e      	ldr	r2, [pc, #248]	; (8001d6c <convert_typedef+0x118>)
 8001c74:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_1.Ki = 1;
 8001c76:	4b3c      	ldr	r3, [pc, #240]	; (8001d68 <convert_typedef+0x114>)
 8001c78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c7c:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_1.Kd = 0.1;
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <convert_typedef+0x114>)
 8001c80:	4a3b      	ldr	r2, [pc, #236]	; (8001d70 <convert_typedef+0x11c>)
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_1.wh_L = 0.0;
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <convert_typedef+0x114>)
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	639a      	str	r2, [r3, #56]	; 0x38

	Wheel_2.motor = 1;
 8001c8c:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <convert_typedef+0x120>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_2.target = 0.0;
 8001c94:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <convert_typedef+0x120>)
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
	Wheel_2.current = 0;
 8001c9c:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <convert_typedef+0x120>)
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]
	Wheel_2.Kp = 14;
 8001ca4:	4b33      	ldr	r3, [pc, #204]	; (8001d74 <convert_typedef+0x120>)
 8001ca6:	4a31      	ldr	r2, [pc, #196]	; (8001d6c <convert_typedef+0x118>)
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_2.Ki = 1;
 8001caa:	4b32      	ldr	r3, [pc, #200]	; (8001d74 <convert_typedef+0x120>)
 8001cac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cb0:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_2.Kd = 0.1;
 8001cb2:	4b30      	ldr	r3, [pc, #192]	; (8001d74 <convert_typedef+0x120>)
 8001cb4:	4a2e      	ldr	r2, [pc, #184]	; (8001d70 <convert_typedef+0x11c>)
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_2.wh_L = 0.0;
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <convert_typedef+0x120>)
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	639a      	str	r2, [r3, #56]	; 0x38

	Wheel_3.motor = 2;
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <convert_typedef+0x124>)
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_3.target = 0.0;
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <convert_typedef+0x124>)
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
	Wheel_3.current = 0;
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <convert_typedef+0x124>)
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
	Wheel_3.Kp = 14;
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <convert_typedef+0x124>)
 8001cda:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <convert_typedef+0x118>)
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_3.Ki = 1;
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <convert_typedef+0x124>)
 8001ce0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ce4:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_3.Kd = 0.1;
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <convert_typedef+0x124>)
 8001ce8:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <convert_typedef+0x11c>)
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_3.wh_L = 0.0;
 8001cec:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <convert_typedef+0x124>)
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	639a      	str	r2, [r3, #56]	; 0x38

	Wheel_4.motor = 3;
 8001cf4:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <convert_typedef+0x128>)
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_4.target = 0.0;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <convert_typedef+0x128>)
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
	Wheel_4.current = 0;
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <convert_typedef+0x128>)
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	615a      	str	r2, [r3, #20]
	Wheel_4.Kp = 14;
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <convert_typedef+0x128>)
 8001d0e:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <convert_typedef+0x118>)
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_4.Ki = 1;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <convert_typedef+0x128>)
 8001d14:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_4.Kd = 0.1;
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <convert_typedef+0x128>)
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <convert_typedef+0x11c>)
 8001d1e:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_4.wh_L = 0.0;
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <convert_typedef+0x128>)
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	639a      	str	r2, [r3, #56]	; 0x38

	Chain_motor.motor = 4;
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <convert_typedef+0x12c>)
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Chain_motor.target = 0.0;
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <convert_typedef+0x12c>)
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
	Chain_motor.current = 0;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <convert_typedef+0x12c>)
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	615a      	str	r2, [r3, #20]
	Chain_motor.Kp = 2;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <convert_typedef+0x12c>)
 8001d42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28
	Chain_motor.Ki = 0.0025;
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <convert_typedef+0x12c>)
 8001d4a:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <convert_typedef+0x130>)
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c
	Chain_motor.Kd = 1.0;
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <convert_typedef+0x12c>)
 8001d50:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
	Chain_motor.wh_L = 0.0;
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <convert_typedef+0x12c>)
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	200000e8 	.word	0x200000e8
 8001d6c:	41600000 	.word	0x41600000
 8001d70:	3dcccccd 	.word	0x3dcccccd
 8001d74:	20000128 	.word	0x20000128
 8001d78:	20000168 	.word	0x20000168
 8001d7c:	200001a8 	.word	0x200001a8
 8001d80:	200001e8 	.word	0x200001e8
 8001d84:	3b23d70a 	.word	0x3b23d70a

08001d88 <set_voltage>:
			chain_control(position);
		}
		chain_control(position);
	}
}
void set_voltage(uint8_t motor, float duty) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	ed87 0a00 	vstr	s0, [r7]
 8001d94:	71fb      	strb	r3, [r7, #7]
	if (duty > 1.0)
 8001d96:	edd7 7a00 	vldr	s15, [r7]
 8001d9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	dd02      	ble.n	8001dae <set_voltage+0x26>
		duty = 1.0;
 8001da8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001dac:	603b      	str	r3, [r7, #0]
	if (duty < -1.0)
 8001dae:	edd7 7a00 	vldr	s15, [r7]
 8001db2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	d501      	bpl.n	8001dc4 <set_voltage+0x3c>
		duty = -1.0;
 8001dc0:	4bae      	ldr	r3, [pc, #696]	; (800207c <set_voltage+0x2f4>)
 8001dc2:	603b      	str	r3, [r7, #0]
	switch (motor) {
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	f200 8153 	bhi.w	8002072 <set_voltage+0x2ea>
 8001dcc:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <set_voltage+0x4c>)
 8001dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd2:	bf00      	nop
 8001dd4:	08001de9 	.word	0x08001de9
 8001dd8:	08001e6b 	.word	0x08001e6b
 8001ddc:	08001ef1 	.word	0x08001ef1
 8001de0:	08001f73 	.word	0x08001f73
 8001de4:	08001ff9 	.word	0x08001ff9
	case 0:
		if (duty >= 0.0) {
 8001de8:	edd7 7a00 	vldr	s15, [r7]
 8001dec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	db1b      	blt.n	8001e2e <set_voltage+0xa6>
			TIM4->CCR1 = ((int32_t) (TIM4->ARR * duty));
 8001df6:	4ba2      	ldr	r3, [pc, #648]	; (8002080 <set_voltage+0x2f8>)
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e02:	edd7 7a00 	vldr	s15, [r7]
 8001e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e0e:	4b9c      	ldr	r3, [pc, #624]	; (8002080 <set_voltage+0x2f8>)
 8001e10:	ee17 2a90 	vmov	r2, s15
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e1c:	4899      	ldr	r0, [pc, #612]	; (8002084 <set_voltage+0x2fc>)
 8001e1e:	f003 f8d7 	bl	8004fd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001e22:	2201      	movs	r2, #1
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	4898      	ldr	r0, [pc, #608]	; (8002088 <set_voltage+0x300>)
 8001e28:	f003 f8d2 	bl	8004fd0 <HAL_GPIO_WritePin>
		} else {
			TIM4->CCR1 = ((int32_t) (-(TIM4->ARR * duty)));
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
		}
		break;
 8001e2c:	e121      	b.n	8002072 <set_voltage+0x2ea>
			TIM4->CCR1 = ((int32_t) (-(TIM4->ARR * duty)));
 8001e2e:	4b94      	ldr	r3, [pc, #592]	; (8002080 <set_voltage+0x2f8>)
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e3a:	edd7 7a00 	vldr	s15, [r7]
 8001e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e42:	eef1 7a67 	vneg.f32	s15, s15
 8001e46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e4a:	4b8d      	ldr	r3, [pc, #564]	; (8002080 <set_voltage+0x2f8>)
 8001e4c:	ee17 2a90 	vmov	r2, s15
 8001e50:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e58:	488a      	ldr	r0, [pc, #552]	; (8002084 <set_voltage+0x2fc>)
 8001e5a:	f003 f8b9 	bl	8004fd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	4889      	ldr	r0, [pc, #548]	; (8002088 <set_voltage+0x300>)
 8001e64:	f003 f8b4 	bl	8004fd0 <HAL_GPIO_WritePin>
		break;
 8001e68:	e103      	b.n	8002072 <set_voltage+0x2ea>
	case 1:
		if (duty >= 0.0) {
 8001e6a:	edd7 7a00 	vldr	s15, [r7]
 8001e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	db1c      	blt.n	8001eb2 <set_voltage+0x12a>
			TIM4->CCR2 = ((int32_t) (TIM4->ARR * duty));
 8001e78:	4b81      	ldr	r3, [pc, #516]	; (8002080 <set_voltage+0x2f8>)
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	ee07 3a90 	vmov	s15, r3
 8001e80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e84:	edd7 7a00 	vldr	s15, [r7]
 8001e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e90:	4b7b      	ldr	r3, [pc, #492]	; (8002080 <set_voltage+0x2f8>)
 8001e92:	ee17 2a90 	vmov	r2, s15
 8001e96:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e9e:	4879      	ldr	r0, [pc, #484]	; (8002084 <set_voltage+0x2fc>)
 8001ea0:	f003 f896 	bl	8004fd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001eaa:	4878      	ldr	r0, [pc, #480]	; (800208c <set_voltage+0x304>)
 8001eac:	f003 f890 	bl	8004fd0 <HAL_GPIO_WritePin>
		} else {
			TIM4->CCR2 = ((int32_t) (-(TIM4->ARR * duty)));
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
		}
		break;
 8001eb0:	e0df      	b.n	8002072 <set_voltage+0x2ea>
			TIM4->CCR2 = ((int32_t) (-(TIM4->ARR * duty)));
 8001eb2:	4b73      	ldr	r3, [pc, #460]	; (8002080 <set_voltage+0x2f8>)
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ebe:	edd7 7a00 	vldr	s15, [r7]
 8001ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec6:	eef1 7a67 	vneg.f32	s15, s15
 8001eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ece:	4b6c      	ldr	r3, [pc, #432]	; (8002080 <set_voltage+0x2f8>)
 8001ed0:	ee17 2a90 	vmov	r2, s15
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001edc:	4869      	ldr	r0, [pc, #420]	; (8002084 <set_voltage+0x2fc>)
 8001ede:	f003 f877 	bl	8004fd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ee8:	4868      	ldr	r0, [pc, #416]	; (800208c <set_voltage+0x304>)
 8001eea:	f003 f871 	bl	8004fd0 <HAL_GPIO_WritePin>
		break;
 8001eee:	e0c0      	b.n	8002072 <set_voltage+0x2ea>
	case 2:
		if (duty >= 0.0) {
 8001ef0:	edd7 7a00 	vldr	s15, [r7]
 8001ef4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efc:	db1b      	blt.n	8001f36 <set_voltage+0x1ae>
			TIM4->CCR3 = ((int32_t) (TIM4->ARR * duty));
 8001efe:	4b60      	ldr	r3, [pc, #384]	; (8002080 <set_voltage+0x2f8>)
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f0a:	edd7 7a00 	vldr	s15, [r7]
 8001f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f16:	4b5a      	ldr	r3, [pc, #360]	; (8002080 <set_voltage+0x2f8>)
 8001f18:	ee17 2a90 	vmov	r2, s15
 8001f1c:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f24:	4858      	ldr	r0, [pc, #352]	; (8002088 <set_voltage+0x300>)
 8001f26:	f003 f853 	bl	8004fd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	2104      	movs	r1, #4
 8001f2e:	4856      	ldr	r0, [pc, #344]	; (8002088 <set_voltage+0x300>)
 8001f30:	f003 f84e 	bl	8004fd0 <HAL_GPIO_WritePin>
		} else {
			TIM4->CCR3 = ((int32_t) (-(TIM4->ARR * duty)));
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
		}
		break;
 8001f34:	e09d      	b.n	8002072 <set_voltage+0x2ea>
			TIM4->CCR3 = ((int32_t) (-(TIM4->ARR * duty)));
 8001f36:	4b52      	ldr	r3, [pc, #328]	; (8002080 <set_voltage+0x2f8>)
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f42:	edd7 7a00 	vldr	s15, [r7]
 8001f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4a:	eef1 7a67 	vneg.f32	s15, s15
 8001f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f52:	4b4b      	ldr	r3, [pc, #300]	; (8002080 <set_voltage+0x2f8>)
 8001f54:	ee17 2a90 	vmov	r2, s15
 8001f58:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f60:	4849      	ldr	r0, [pc, #292]	; (8002088 <set_voltage+0x300>)
 8001f62:	f003 f835 	bl	8004fd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2104      	movs	r1, #4
 8001f6a:	4847      	ldr	r0, [pc, #284]	; (8002088 <set_voltage+0x300>)
 8001f6c:	f003 f830 	bl	8004fd0 <HAL_GPIO_WritePin>
		break;
 8001f70:	e07f      	b.n	8002072 <set_voltage+0x2ea>
	case 3:
		if (duty >= 0.0) {
 8001f72:	edd7 7a00 	vldr	s15, [r7]
 8001f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	db1c      	blt.n	8001fba <set_voltage+0x232>
			TIM4->CCR4 = ((int32_t) (TIM4->ARR * duty));
 8001f80:	4b3f      	ldr	r3, [pc, #252]	; (8002080 <set_voltage+0x2f8>)
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f8c:	edd7 7a00 	vldr	s15, [r7]
 8001f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f98:	4b39      	ldr	r3, [pc, #228]	; (8002080 <set_voltage+0x2f8>)
 8001f9a:	ee17 2a90 	vmov	r2, s15
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fa6:	4838      	ldr	r0, [pc, #224]	; (8002088 <set_voltage+0x300>)
 8001fa8:	f003 f812 	bl	8004fd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001fac:	2201      	movs	r2, #1
 8001fae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fb2:	4836      	ldr	r0, [pc, #216]	; (800208c <set_voltage+0x304>)
 8001fb4:	f003 f80c 	bl	8004fd0 <HAL_GPIO_WritePin>
		} else {
			TIM4->CCR4 = ((int32_t) (-(TIM4->ARR * duty)));
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
		}
		break;
 8001fb8:	e05b      	b.n	8002072 <set_voltage+0x2ea>
			TIM4->CCR4 = ((int32_t) (-(TIM4->ARR * duty)));
 8001fba:	4b31      	ldr	r3, [pc, #196]	; (8002080 <set_voltage+0x2f8>)
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fc6:	edd7 7a00 	vldr	s15, [r7]
 8001fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fce:	eef1 7a67 	vneg.f32	s15, s15
 8001fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <set_voltage+0x2f8>)
 8001fd8:	ee17 2a90 	vmov	r2, s15
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fe4:	4828      	ldr	r0, [pc, #160]	; (8002088 <set_voltage+0x300>)
 8001fe6:	f002 fff3 	bl	8004fd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff0:	4826      	ldr	r0, [pc, #152]	; (800208c <set_voltage+0x304>)
 8001ff2:	f002 ffed 	bl	8004fd0 <HAL_GPIO_WritePin>
		break;
 8001ff6:	e03c      	b.n	8002072 <set_voltage+0x2ea>
	case 4:
			 if(duty >= 0.0)  {
 8001ff8:	edd7 7a00 	vldr	s15, [r7]
 8001ffc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002004:	db16      	blt.n	8002034 <set_voltage+0x2ac>
				 TIM12->CCR1 = ((int32_t)(TIM12->ARR * duty));
 8002006:	4b22      	ldr	r3, [pc, #136]	; (8002090 <set_voltage+0x308>)
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002012:	edd7 7a00 	vldr	s15, [r7]
 8002016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800201e:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <set_voltage+0x308>)
 8002020:	ee17 2a90 	vmov	r2, s15
 8002024:	635a      	str	r2, [r3, #52]	; 0x34
				 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800202c:	4816      	ldr	r0, [pc, #88]	; (8002088 <set_voltage+0x300>)
 800202e:	f002 ffcf 	bl	8004fd0 <HAL_GPIO_WritePin>
			 else {
				 TIM12->CCR1 = ((int32_t)(TIM12->ARR + (TIM12->ARR * duty)));
			 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);  }
		}

}
 8002032:	e01e      	b.n	8002072 <set_voltage+0x2ea>
				 TIM12->CCR1 = ((int32_t)(TIM12->ARR + (TIM12->ARR * duty)));
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <set_voltage+0x308>)
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	ee07 3a90 	vmov	s15, r3
 800203c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <set_voltage+0x308>)
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	ee07 3a90 	vmov	s15, r3
 8002048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800204c:	edd7 7a00 	vldr	s15, [r7]
 8002050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002058:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <set_voltage+0x308>)
 800205e:	ee17 2a90 	vmov	r2, s15
 8002062:	635a      	str	r2, [r3, #52]	; 0x34
			 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);  }
 8002064:	2201      	movs	r2, #1
 8002066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800206a:	4807      	ldr	r0, [pc, #28]	; (8002088 <set_voltage+0x300>)
 800206c:	f002 ffb0 	bl	8004fd0 <HAL_GPIO_WritePin>
}
 8002070:	e7ff      	b.n	8002072 <set_voltage+0x2ea>
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	bf800000 	.word	0xbf800000
 8002080:	40000800 	.word	0x40000800
 8002084:	40020800 	.word	0x40020800
 8002088:	40021000 	.word	0x40021000
 800208c:	40020400 	.word	0x40020400
 8002090:	40001800 	.word	0x40001800

08002094 <PID_Controller>:
void PID_Controller(PID *reg) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

	reg->error = reg->target - reg->current;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	ed93 7a04 	vldr	s14, [r3, #16]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80020a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	edc3 7a06 	vstr	s15, [r3, #24]

	reg->sum_error += reg->error;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	ed93 7a07 	vldr	s14, [r3, #28]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80020be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	edc3 7a07 	vstr	s15, [r3, #28]
	if (reg->sum_error > 1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80020ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	dd03      	ble.n	80020e4 <PID_Controller+0x50>
		reg->sum_error = 1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020e2:	61da      	str	r2, [r3, #28]
	if (reg->sum_error < -1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80020ea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80020ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f6:	d502      	bpl.n	80020fe <PID_Controller+0x6a>
		reg->sum_error = -1;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a28      	ldr	r2, [pc, #160]	; (800219c <PID_Controller+0x108>)
 80020fc:	61da      	str	r2, [r3, #28]

	reg->P = reg->Kp * reg->error;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	edd3 7a06 	vldr	s15, [r3, #24]
 800210a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	edc3 7a00 	vstr	s15, [r3]
	reg->I = reg->Ki * reg->sum_error;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	edc3 7a01 	vstr	s15, [r3, #4]
	reg->dif_error = reg->error - reg->old_error;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	edc3 7a08 	vstr	s15, [r3, #32]
	reg->D = reg->Kd * reg->dif_error;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	edd3 7a08 	vldr	s15, [r3, #32]
 800214c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	edc3 7a02 	vstr	s15, [r3, #8]
	reg->output = reg->P + reg->I + reg->D;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	ed93 7a00 	vldr	s14, [r3]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002162:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	edd3 7a02 	vldr	s15, [r3, #8]
 800216c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	set_voltage(reg->motor, reg->output);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002182:	eeb0 0a67 	vmov.f32	s0, s15
 8002186:	4610      	mov	r0, r2
 8002188:	f7ff fdfe 	bl	8001d88 <set_voltage>
	reg->old_error = reg->error;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699a      	ldr	r2, [r3, #24]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	bf800000 	.word	0xbf800000

080021a0 <matrixSetCell>:
	for (i = 0; i < rows; i++)
		for (j = 0; j < columns; j++)
			*(new_m + columns * i + j) = *(m + columns * i + j);
}
void matrixSetCell(float *m, char rows, char columns, char row, char column,
		float val) {
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	4608      	mov	r0, r1
 80021aa:	4611      	mov	r1, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80021b2:	4603      	mov	r3, r0
 80021b4:	72fb      	strb	r3, [r7, #11]
 80021b6:	460b      	mov	r3, r1
 80021b8:	72bb      	strb	r3, [r7, #10]
 80021ba:	4613      	mov	r3, r2
 80021bc:	727b      	strb	r3, [r7, #9]
	*(m + columns * (row - 1) + column - 1) = val;
 80021be:	7abb      	ldrb	r3, [r7, #10]
 80021c0:	7a7a      	ldrb	r2, [r7, #9]
 80021c2:	3a01      	subs	r2, #1
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	7e3b      	ldrb	r3, [r7, #24]
 80021cc:	4413      	add	r3, r2
 80021ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021d2:	3b01      	subs	r3, #1
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4413      	add	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	601a      	str	r2, [r3, #0]
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <matrixGetCell>:

	for (i = 0; i < rows; i++)
		for (j = 0; j < columns; j++)
			*(m + columns * i + j) = val;
}
float matrixGetCell(float *m, char rows, char columns, char row, char column) {
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	4608      	mov	r0, r1
 80021f4:	4611      	mov	r1, r2
 80021f6:	461a      	mov	r2, r3
 80021f8:	4603      	mov	r3, r0
 80021fa:	70fb      	strb	r3, [r7, #3]
 80021fc:	460b      	mov	r3, r1
 80021fe:	70bb      	strb	r3, [r7, #2]
 8002200:	4613      	mov	r3, r2
 8002202:	707b      	strb	r3, [r7, #1]
	return *(m + columns * (row - 1) + column - 1);
 8002204:	78bb      	ldrb	r3, [r7, #2]
 8002206:	787a      	ldrb	r2, [r7, #1]
 8002208:	3a01      	subs	r2, #1
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	461a      	mov	r2, r3
 8002210:	7c3b      	ldrb	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002218:	3b01      	subs	r3, #1
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	4413      	add	r3, r2
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	ee07 3a90 	vmov	s15, r3
}
 8002226:	eeb0 0a67 	vmov.f32	s0, s15
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <matrixMultiplyM2M>:
void matrixMultiplyM2M(float *m1, char rows1, char columns1, float *m2,
		char rows2, char columns2, float *new_m) {
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	72fb      	strb	r3, [r7, #11]
 8002242:	4613      	mov	r3, r2
 8002244:	72bb      	strb	r3, [r7, #10]
	float Sum;
	char i, j, k;

	if (columns1 != rows2)
 8002246:	7aba      	ldrb	r2, [r7, #10]
 8002248:	f897 3020 	ldrb.w	r3, [r7, #32]
 800224c:	429a      	cmp	r2, r3
 800224e:	d004      	beq.n	800225a <matrixMultiplyM2M+0x26>
		*new_m = 0;
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
					Sum += (*(m1 + columns1 * i + k))
							* (*(m2 + columns2 * k + j));
				*(new_m + columns2 * i + j) = Sum;
			}
	}
}
 8002258:	e04f      	b.n	80022fa <matrixMultiplyM2M+0xc6>
		for (i = 0; i < rows1; i++)
 800225a:	2300      	movs	r3, #0
 800225c:	74fb      	strb	r3, [r7, #19]
 800225e:	e048      	b.n	80022f2 <matrixMultiplyM2M+0xbe>
			for (j = 0; j < columns2; j++) {
 8002260:	2300      	movs	r3, #0
 8002262:	74bb      	strb	r3, [r7, #18]
 8002264:	e03d      	b.n	80022e2 <matrixMultiplyM2M+0xae>
				Sum = 0;
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
				for (k = 0; k < columns1; k++)
 800226c:	2300      	movs	r3, #0
 800226e:	747b      	strb	r3, [r7, #17]
 8002270:	e023      	b.n	80022ba <matrixMultiplyM2M+0x86>
					Sum += (*(m1 + columns1 * i + k))
 8002272:	7abb      	ldrb	r3, [r7, #10]
 8002274:	7cfa      	ldrb	r2, [r7, #19]
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	461a      	mov	r2, r3
 800227c:	7c7b      	ldrb	r3, [r7, #17]
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	ed93 7a00 	vldr	s14, [r3]
							* (*(m2 + columns2 * k + j));
 800228a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800228e:	7c7a      	ldrb	r2, [r7, #17]
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	461a      	mov	r2, r3
 8002296:	7cbb      	ldrb	r3, [r7, #18]
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	edd3 7a00 	vldr	s15, [r3]
 80022a4:	ee67 7a27 	vmul.f32	s15, s14, s15
					Sum += (*(m1 + columns1 * i + k))
 80022a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80022ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b0:	edc7 7a05 	vstr	s15, [r7, #20]
				for (k = 0; k < columns1; k++)
 80022b4:	7c7b      	ldrb	r3, [r7, #17]
 80022b6:	3301      	adds	r3, #1
 80022b8:	747b      	strb	r3, [r7, #17]
 80022ba:	7c7a      	ldrb	r2, [r7, #17]
 80022bc:	7abb      	ldrb	r3, [r7, #10]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d3d7      	bcc.n	8002272 <matrixMultiplyM2M+0x3e>
				*(new_m + columns2 * i + j) = Sum;
 80022c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80022c6:	7cfa      	ldrb	r2, [r7, #19]
 80022c8:	fb02 f303 	mul.w	r3, r2, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	7cbb      	ldrb	r3, [r7, #18]
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d6:	4413      	add	r3, r2
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	601a      	str	r2, [r3, #0]
			for (j = 0; j < columns2; j++) {
 80022dc:	7cbb      	ldrb	r3, [r7, #18]
 80022de:	3301      	adds	r3, #1
 80022e0:	74bb      	strb	r3, [r7, #18]
 80022e2:	7cba      	ldrb	r2, [r7, #18]
 80022e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d3bc      	bcc.n	8002266 <matrixMultiplyM2M+0x32>
		for (i = 0; i < rows1; i++)
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	3301      	adds	r3, #1
 80022f0:	74fb      	strb	r3, [r7, #19]
 80022f2:	7cfa      	ldrb	r2, [r7, #19]
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d3b2      	bcc.n	8002260 <matrixMultiplyM2M+0x2c>
}
 80022fa:	bf00      	nop
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <matrixTranspose>:
			for (j = 0; j < columns; j++)
				*(new_m + i * columns + j) = (*(m1 + i * columns + j))
						- (*(m2 + i * columns + j));
	}
}
void matrixTranspose(float *m, char rows, char columns, float *new_m) {
 8002306:	b480      	push	{r7}
 8002308:	b087      	sub	sp, #28
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	72fb      	strb	r3, [r7, #11]
 8002314:	4613      	mov	r3, r2
 8002316:	72bb      	strb	r3, [r7, #10]
	char i, j;
	for (i = 0; i < rows; i++)
 8002318:	2300      	movs	r3, #0
 800231a:	75fb      	strb	r3, [r7, #23]
 800231c:	e022      	b.n	8002364 <matrixTranspose+0x5e>
		for (j = 0; j < columns; j++)
 800231e:	2300      	movs	r3, #0
 8002320:	75bb      	strb	r3, [r7, #22]
 8002322:	e018      	b.n	8002356 <matrixTranspose+0x50>
			*(new_m + j * rows + i) = *(m + i * columns + j);
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	7aba      	ldrb	r2, [r7, #10]
 8002328:	fb02 f303 	mul.w	r3, r2, r3
 800232c:	461a      	mov	r2, r3
 800232e:	7dbb      	ldrb	r3, [r7, #22]
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	441a      	add	r2, r3
 8002338:	7dbb      	ldrb	r3, [r7, #22]
 800233a:	7af9      	ldrb	r1, [r7, #11]
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	4619      	mov	r1, r3
 8002342:	7dfb      	ldrb	r3, [r7, #23]
 8002344:	440b      	add	r3, r1
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	440b      	add	r3, r1
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	601a      	str	r2, [r3, #0]
		for (j = 0; j < columns; j++)
 8002350:	7dbb      	ldrb	r3, [r7, #22]
 8002352:	3301      	adds	r3, #1
 8002354:	75bb      	strb	r3, [r7, #22]
 8002356:	7dba      	ldrb	r2, [r7, #22]
 8002358:	7abb      	ldrb	r3, [r7, #10]
 800235a:	429a      	cmp	r2, r3
 800235c:	d3e2      	bcc.n	8002324 <matrixTranspose+0x1e>
	for (i = 0; i < rows; i++)
 800235e:	7dfb      	ldrb	r3, [r7, #23]
 8002360:	3301      	adds	r3, #1
 8002362:	75fb      	strb	r3, [r7, #23]
 8002364:	7dfa      	ldrb	r2, [r7, #23]
 8002366:	7afb      	ldrb	r3, [r7, #11]
 8002368:	429a      	cmp	r2, r3
 800236a:	d3d8      	bcc.n	800231e <matrixTranspose+0x18>
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	371c      	adds	r7, #28
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <matrixCofactor>:
void matrixCofactor(float *m, char size, float *new_m) {
 800237a:	b580      	push	{r7, lr}
 800237c:	b0ec      	sub	sp, #432	; 0x1b0
 800237e:	af00      	add	r7, sp, #0
 8002380:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002384:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002388:	6018      	str	r0, [r3, #0]
 800238a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800238e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002398:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 800239c:	460a      	mov	r2, r1
 800239e:	701a      	strb	r2, [r3, #0]
//float *buf1 = malloc(sizeof(float) * (size-1) * (size-1));
	float bufxx[10][10];
	float *buf1 = (float*) bufxx;
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	char i = 0, j = 0, k = 0, l = 0, c = 0, d = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
 80023ae:	2300      	movs	r3, #0
 80023b0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 80023b4:	2300      	movs	r3, #0
 80023b6:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80023ba:	2300      	movs	r3, #0
 80023bc:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
 80023c0:	2300      	movs	r3, #0
 80023c2:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 80023c6:	2300      	movs	r3, #0
 80023c8:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
	signed char sign;

	while (i < size) {
 80023cc:	e0f0      	b.n	80025b0 <matrixCofactor+0x236>
		j = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
		while (j < size) {
 80023d4:	e0dd      	b.n	8002592 <matrixCofactor+0x218>
			k = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
			c = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
			if (((i + j) % 2) == 0)
 80023e2:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 80023e6:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80023ea:	4413      	add	r3, r2
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d103      	bne.n	80023fe <matrixCofactor+0x84>
				sign = 1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9
 80023fc:	e066      	b.n	80024cc <matrixCofactor+0x152>
			else
				sign = -1;
 80023fe:	23ff      	movs	r3, #255	; 0xff
 8002400:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9

			while (k < (size - 1)) {
 8002404:	e062      	b.n	80024cc <matrixCofactor+0x152>
				if (c == i)
 8002406:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 800240a:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 800240e:	429a      	cmp	r2, r3
 8002410:	d104      	bne.n	800241c <matrixCofactor+0xa2>
					c++;
 8002412:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8002416:	3301      	adds	r3, #1
 8002418:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
				l = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
				d = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
				while (l < (size - 1)) {
 8002428:	e03c      	b.n	80024a4 <matrixCofactor+0x12a>
					if (d == j)
 800242a:	f897 21aa 	ldrb.w	r2, [r7, #426]	; 0x1aa
 800242e:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002432:	429a      	cmp	r2, r3
 8002434:	d104      	bne.n	8002440 <matrixCofactor+0xc6>
						d++;
 8002436:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 800243a:	3301      	adds	r3, #1
 800243c:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
					*(buf1 + (size - 1) * k + l) = *(m + size * c + d);
 8002440:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002444:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	461a      	mov	r2, r3
 8002454:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8002460:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	441a      	add	r2, r3
 8002468:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800246c:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	3b01      	subs	r3, #1
 8002474:	f897 11ad 	ldrb.w	r1, [r7, #429]	; 0x1ad
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4619      	mov	r1, r3
 800247e:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 8002482:	440b      	add	r3, r1
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 800248a:	440b      	add	r3, r1
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	601a      	str	r2, [r3, #0]
					l++;
 8002490:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 8002494:	3301      	adds	r3, #1
 8002496:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
					d++;
 800249a:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 800249e:	3301      	adds	r3, #1
 80024a0:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
				while (l < (size - 1)) {
 80024a4:	f897 21ac 	ldrb.w	r2, [r7, #428]	; 0x1ac
 80024a8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80024ac:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	429a      	cmp	r2, r3
 80024b6:	dbb8      	blt.n	800242a <matrixCofactor+0xb0>
				}
				k++;
 80024b8:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80024bc:	3301      	adds	r3, #1
 80024be:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
				c++;
 80024c2:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 80024c6:	3301      	adds	r3, #1
 80024c8:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
			while (k < (size - 1)) {
 80024cc:	f897 21ad 	ldrb.w	r2, [r7, #429]	; 0x1ad
 80024d0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80024d4:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	3b01      	subs	r3, #1
 80024dc:	429a      	cmp	r2, r3
 80024de:	db92      	blt.n	8002406 <matrixCofactor+0x8c>
			}
			matrixDet_LU_Transform(buf1, size - 1, (new_m + size * i + j));
 80024e0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80024e4:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b2d9      	uxtb	r1, r3
 80024ee:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80024f2:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 80024fc:	fb02 f303 	mul.w	r3, r2, r3
 8002500:	461a      	mov	r2, r3
 8002502:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 800250e:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	4413      	add	r3, r2
 8002516:	461a      	mov	r2, r3
 8002518:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 800251c:	f000 f8be 	bl	800269c <matrixDet_LU_Transform>
			*(new_m + size * i + j) *= sign;
 8002520:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002524:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 800252e:	fb02 f303 	mul.w	r3, r2, r3
 8002532:	461a      	mov	r2, r3
 8002534:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8002540:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	4413      	add	r3, r2
 8002548:	ed93 7a00 	vldr	s14, [r3]
 800254c:	f997 31a9 	ldrsb.w	r3, [r7, #425]	; 0x1a9
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002558:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800255c:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	461a      	mov	r2, r3
 800256c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8002578:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	4413      	add	r3, r2
 8002580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002584:	edc3 7a00 	vstr	s15, [r3]
			j++;
 8002588:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800258c:	3301      	adds	r3, #1
 800258e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
		while (j < size) {
 8002592:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002596:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 800259a:	f897 21ae 	ldrb.w	r2, [r7, #430]	; 0x1ae
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	f4ff af18 	bcc.w	80023d6 <matrixCofactor+0x5c>
		}
		i++;
 80025a6:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80025aa:	3301      	adds	r3, #1
 80025ac:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
	while (i < size) {
 80025b0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80025b4:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 80025b8:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	f4ff af05 	bcc.w	80023ce <matrixCofactor+0x54>
	}
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <matrixInverse>:
void matrixInverse(float *m, char size, float *new_m) {
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b0b3      	sub	sp, #204	; 0xcc
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	460b      	mov	r3, r1
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	72fb      	strb	r3, [r7, #11]
	float buf1[4][4]; // = malloc(sizeof(float) * size * size);
	float buf2[4][4]; //= malloc(sizeof(float) * size * size);
	float buf;
	float buf3[3][3];
	float det;
	matrixDet_LU_Transform(m, size, &det);
 80025de:	f107 0210 	add.w	r2, r7, #16
 80025e2:	7afb      	ldrb	r3, [r7, #11]
 80025e4:	4619      	mov	r1, r3
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f858 	bl	800269c <matrixDet_LU_Transform>
	char i, j;

	matrixCofactor(m, size, &buf1[0][0]);
 80025ec:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80025f0:	7afb      	ldrb	r3, [r7, #11]
 80025f2:	4619      	mov	r1, r3
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f7ff fec0 	bl	800237a <matrixCofactor>
	matrixTranspose(&buf1[0][0], size, size, &buf2[0][0]);
 80025fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025fe:	7afa      	ldrb	r2, [r7, #11]
 8002600:	7af9      	ldrb	r1, [r7, #11]
 8002602:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002606:	f7ff fe7e 	bl	8002306 <matrixTranspose>

	for (i = 1; i <= size; i++)
 800260a:	2301      	movs	r3, #1
 800260c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8002610:	e034      	b.n	800267c <matrixInverse+0xac>
		for (j = 1; j <= size; j++) {
 8002612:	2301      	movs	r3, #1
 8002614:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 8002618:	e026      	b.n	8002668 <matrixInverse+0x98>
			buf = matrixGetCell(&buf1[0][0], size, size, i, j) / det;
 800261a:	f897 40bf 	ldrb.w	r4, [r7, #191]	; 0xbf
 800261e:	7afa      	ldrb	r2, [r7, #11]
 8002620:	7af9      	ldrb	r1, [r7, #11]
 8002622:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002626:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	4623      	mov	r3, r4
 800262e:	f7ff fddc 	bl	80021ea <matrixGetCell>
 8002632:	eef0 6a40 	vmov.f32	s13, s0
 8002636:	ed97 7a04 	vldr	s14, [r7, #16]
 800263a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800263e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
			matrixSetCell((float*) buf3, size, size, i, j, buf);
 8002642:	f897 40bf 	ldrb.w	r4, [r7, #191]	; 0xbf
 8002646:	7afa      	ldrb	r2, [r7, #11]
 8002648:	7af9      	ldrb	r1, [r7, #11]
 800264a:	f107 0014 	add.w	r0, r7, #20
 800264e:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8002658:	4623      	mov	r3, r4
 800265a:	f7ff fda1 	bl	80021a0 <matrixSetCell>
		for (j = 1; j <= size; j++) {
 800265e:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8002662:	3301      	adds	r3, #1
 8002664:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 8002668:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 800266c:	7afb      	ldrb	r3, [r7, #11]
 800266e:	429a      	cmp	r2, r3
 8002670:	d9d3      	bls.n	800261a <matrixInverse+0x4a>
	for (i = 1; i <= size; i++)
 8002672:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8002676:	3301      	adds	r3, #1
 8002678:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800267c:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 8002680:	7afb      	ldrb	r3, [r7, #11]
 8002682:	429a      	cmp	r2, r3
 8002684:	d9c5      	bls.n	8002612 <matrixInverse+0x42>
		}
	matrixTranspose(&buf3[0][0], size, size, new_m);
 8002686:	7afa      	ldrb	r2, [r7, #11]
 8002688:	7af9      	ldrb	r1, [r7, #11]
 800268a:	f107 0014 	add.w	r0, r7, #20
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f7ff fe39 	bl	8002306 <matrixTranspose>
}
 8002694:	bf00      	nop
 8002696:	37c4      	adds	r7, #196	; 0xc4
 8002698:	46bd      	mov	sp, r7
 800269a:	bd90      	pop	{r4, r7, pc}

0800269c <matrixDet_LU_Transform>:
void matrixDet_LU_Transform(float *A, char n, float *out) //необходимо задать и�?ходную матрицу и переменную дл�? LU-матрицы
{
 800269c:	b480      	push	{r7}
 800269e:	b091      	sub	sp, #68	; 0x44
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	460b      	mov	r3, r1
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	72fb      	strb	r3, [r7, #11]
	float temp = 0; //, *LU = malloc(sizeof(float) * n * n);
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	float LU_[3][3];
	float *LU = (float*) LU_;
 80026b0:	f107 0310 	add.w	r3, r7, #16
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
	char i, j, k;
	for (j = 0; j < n; j++) {
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80026bc:	e02d      	b.n	800271a <matrixDet_LU_Transform+0x7e>
		*(LU + j) = *(A + j);
 80026be:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	441a      	add	r2, r3
 80026c8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026d0:	440b      	add	r3, r1
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	601a      	str	r2, [r3, #0]
		if (j >= 1)
 80026d6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d018      	beq.n	8002710 <matrixDet_LU_Transform+0x74>
			*(LU + j * n) = *(A + j * n) / (*LU);
 80026de:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80026e2:	7afa      	ldrb	r2, [r7, #11]
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4413      	add	r3, r2
 80026ee:	edd3 6a00 	vldr	s13, [r3]
 80026f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f4:	ed93 7a00 	vldr	s14, [r3]
 80026f8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80026fc:	7afa      	ldrb	r2, [r7, #11]
 80026fe:	fb02 f303 	mul.w	r3, r2, r3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002706:	4413      	add	r3, r2
 8002708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800270c:	edc3 7a00 	vstr	s15, [r3]
	for (j = 0; j < n; j++) {
 8002710:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002714:	3301      	adds	r3, #1
 8002716:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800271a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800271e:	7afb      	ldrb	r3, [r7, #11]
 8002720:	429a      	cmp	r2, r3
 8002722:	d3cc      	bcc.n	80026be <matrixDet_LU_Transform+0x22>
	}
	for (i = 1; i < n; i++) {
 8002724:	2301      	movs	r3, #1
 8002726:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800272a:	e0df      	b.n	80028ec <matrixDet_LU_Transform+0x250>
		for (j = i; j < n; j++) {
 800272c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002730:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002734:	e05a      	b.n	80027ec <matrixDet_LU_Transform+0x150>
			for (k = 0; k <= (i - 1); k++)
 8002736:	2300      	movs	r3, #0
 8002738:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800273c:	e028      	b.n	8002790 <matrixDet_LU_Transform+0xf4>
				temp += (*(LU + n * i + k)) * (*(LU + k * n + j));
 800273e:	7afb      	ldrb	r3, [r7, #11]
 8002740:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002744:	fb02 f303 	mul.w	r3, r2, r3
 8002748:	461a      	mov	r2, r3
 800274a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002754:	4413      	add	r3, r2
 8002756:	ed93 7a00 	vldr	s14, [r3]
 800275a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800275e:	7afa      	ldrb	r2, [r7, #11]
 8002760:	fb02 f303 	mul.w	r3, r2, r3
 8002764:	461a      	mov	r2, r3
 8002766:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002770:	4413      	add	r3, r2
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800277e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002782:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			for (k = 0; k <= (i - 1); k++)
 8002786:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800278a:	3301      	adds	r3, #1
 800278c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002790:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002794:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002798:	429a      	cmp	r2, r3
 800279a:	d8d0      	bhi.n	800273e <matrixDet_LU_Transform+0xa2>
			*(LU + i * n + j) = *(A + i * n + j) - temp;
 800279c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80027a0:	7afa      	ldrb	r2, [r7, #11]
 80027a2:	fb02 f303 	mul.w	r3, r2, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	ed93 7a00 	vldr	s14, [r3]
 80027b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80027bc:	7afa      	ldrb	r2, [r7, #11]
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ce:	4413      	add	r3, r2
 80027d0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80027d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d8:	edc3 7a00 	vstr	s15, [r3]
			temp = 0;
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (j = i; j < n; j++) {
 80027e2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80027e6:	3301      	adds	r3, #1
 80027e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80027ec:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80027f0:	7afb      	ldrb	r3, [r7, #11]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d39f      	bcc.n	8002736 <matrixDet_LU_Transform+0x9a>
		}
		for (j = i + 1; j < n; j++) {
 80027f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80027fa:	3301      	adds	r3, #1
 80027fc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002800:	e06a      	b.n	80028d8 <matrixDet_LU_Transform+0x23c>
			for (k = 0; k <= (i - 1); k++)
 8002802:	2300      	movs	r3, #0
 8002804:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002808:	e028      	b.n	800285c <matrixDet_LU_Transform+0x1c0>
				temp += (*(LU + j * n + k)) * (*(LU + k * n + i));
 800280a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800280e:	7afa      	ldrb	r2, [r7, #11]
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	461a      	mov	r2, r3
 8002816:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002820:	4413      	add	r3, r2
 8002822:	ed93 7a00 	vldr	s14, [r3]
 8002826:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800282a:	7afa      	ldrb	r2, [r7, #11]
 800282c:	fb02 f303 	mul.w	r3, r2, r3
 8002830:	461a      	mov	r2, r3
 8002832:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800283c:	4413      	add	r3, r2
 800283e:	edd3 7a00 	vldr	s15, [r3]
 8002842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002846:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800284a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800284e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			for (k = 0; k <= (i - 1); k++)
 8002852:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002856:	3301      	adds	r3, #1
 8002858:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800285c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002860:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002864:	429a      	cmp	r2, r3
 8002866:	d8d0      	bhi.n	800280a <matrixDet_LU_Transform+0x16e>
			*(LU + j * n + i) = ((*(A + j * n + i)) - temp)
 8002868:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800286c:	7afa      	ldrb	r2, [r7, #11]
 800286e:	fb02 f303 	mul.w	r3, r2, r3
 8002872:	461a      	mov	r2, r3
 8002874:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	ed93 7a00 	vldr	s14, [r3]
 8002884:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002888:	ee77 6a67 	vsub.f32	s13, s14, s15
					/ (*(LU + i * n + i));
 800288c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002890:	7afa      	ldrb	r2, [r7, #11]
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	461a      	mov	r2, r3
 8002898:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028a2:	4413      	add	r3, r2
 80028a4:	ed93 7a00 	vldr	s14, [r3]
			*(LU + j * n + i) = ((*(A + j * n + i)) - temp)
 80028a8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80028ac:	7afa      	ldrb	r2, [r7, #11]
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028be:	4413      	add	r3, r2
					/ (*(LU + i * n + i));
 80028c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
			*(LU + j * n + i) = ((*(A + j * n + i)) - temp)
 80028c4:	edc3 7a00 	vstr	s15, [r3]
			temp = 0;
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (j = i + 1; j < n; j++) {
 80028ce:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80028d2:	3301      	adds	r3, #1
 80028d4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80028d8:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80028dc:	7afb      	ldrb	r3, [r7, #11]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d38f      	bcc.n	8002802 <matrixDet_LU_Transform+0x166>
	for (i = 1; i < n; i++) {
 80028e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80028e6:	3301      	adds	r3, #1
 80028e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80028ec:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80028f0:	7afb      	ldrb	r3, [r7, #11]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	f4ff af1a 	bcc.w	800272c <matrixDet_LU_Transform+0x90>
		}
	}
	temp = 1;
 80028f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80028fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (i = 0; i < n; i++)
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002904:	e018      	b.n	8002938 <matrixDet_LU_Transform+0x29c>
		temp *= *(LU + i * n + i);
 8002906:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800290a:	7afa      	ldrb	r2, [r7, #11]
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	461a      	mov	r2, r3
 8002912:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800291c:	4413      	add	r3, r2
 800291e:	edd3 7a00 	vldr	s15, [r3]
 8002922:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	for (i = 0; i < n; i++)
 800292e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002932:	3301      	adds	r3, #1
 8002934:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002938:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800293c:	7afb      	ldrb	r3, [r7, #11]
 800293e:	429a      	cmp	r2, r3
 8002940:	d3e1      	bcc.n	8002906 <matrixDet_LU_Transform+0x26a>
	*out = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002946:	601a      	str	r2, [r3, #0]
}
 8002948:	bf00      	nop
 800294a:	3744      	adds	r7, #68	; 0x44
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
int main(void)
 800295a:	f107 0310 	add.w	r3, r7, #16
 800295e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN 1 */
	convert_typedef();
 8002960:	f7ff f978 	bl	8001c54 <convert_typedef>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002964:	f001 fbfa 	bl	800415c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002968:	f000 f8ec 	bl	8002b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800296c:	f7fe fa98 	bl	8000ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002970:	f7fe fa76 	bl	8000e60 <MX_DMA_Init>
  MX_TIM4_Init();
 8002974:	f000 fe22 	bl	80035bc <MX_TIM4_Init>
  MX_TIM3_Init();
 8002978:	f000 fdcc 	bl	8003514 <MX_TIM3_Init>
  MX_TIM1_Init();
 800297c:	f000 fd1e 	bl	80033bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8002980:	f000 fd74 	bl	800346c <MX_TIM2_Init>
  MX_TIM8_Init();
 8002984:	f000 ff54 	bl	8003830 <MX_TIM8_Init>
  MX_TIM7_Init();
 8002988:	f000 ff1c 	bl	80037c4 <MX_TIM7_Init>
  MX_TIM6_Init();
 800298c:	f000 fee4 	bl	8003758 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8002990:	f001 fb0e 	bl	8003fb0 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8002994:	f000 fff6 	bl	8003984 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002998:	f001 f818 	bl	80039cc <MX_TIM11_Init>
  MX_TIM9_Init();
 800299c:	f000 ffa0 	bl	80038e0 <MX_TIM9_Init>
  MX_TIM12_Init();
 80029a0:	f001 f838 	bl	8003a14 <MX_TIM12_Init>
  MX_TIM5_Init();
 80029a4:	f000 fe84 	bl	80036b0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80029a8:	2100      	movs	r1, #0
 80029aa:	4850      	ldr	r0, [pc, #320]	; (8002aec <main+0x198>)
 80029ac:	f003 f8d2 	bl	8005b54 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80029b0:	2104      	movs	r1, #4
 80029b2:	484e      	ldr	r0, [pc, #312]	; (8002aec <main+0x198>)
 80029b4:	f003 f8ce 	bl	8005b54 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80029b8:	2108      	movs	r1, #8
 80029ba:	484c      	ldr	r0, [pc, #304]	; (8002aec <main+0x198>)
 80029bc:	f003 f8ca 	bl	8005b54 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80029c0:	210c      	movs	r1, #12
 80029c2:	484a      	ldr	r0, [pc, #296]	; (8002aec <main+0x198>)
 80029c4:	f003 f8c6 	bl	8005b54 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80029c8:	2100      	movs	r1, #0
 80029ca:	4849      	ldr	r0, [pc, #292]	; (8002af0 <main+0x19c>)
 80029cc:	f003 f8c2 	bl	8005b54 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 80029d0:	2104      	movs	r1, #4
 80029d2:	4847      	ldr	r0, [pc, #284]	; (8002af0 <main+0x19c>)
 80029d4:	f003 f8be 	bl	8005b54 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80029d8:	2100      	movs	r1, #0
 80029da:	4846      	ldr	r0, [pc, #280]	; (8002af4 <main+0x1a0>)
 80029dc:	f003 f8ba 	bl	8005b54 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80029e0:	213c      	movs	r1, #60	; 0x3c
 80029e2:	4845      	ldr	r0, [pc, #276]	; (8002af8 <main+0x1a4>)
 80029e4:	f003 fa24 	bl	8005e30 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80029e8:	213c      	movs	r1, #60	; 0x3c
 80029ea:	4844      	ldr	r0, [pc, #272]	; (8002afc <main+0x1a8>)
 80029ec:	f003 fa20 	bl	8005e30 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80029f0:	213c      	movs	r1, #60	; 0x3c
 80029f2:	4843      	ldr	r0, [pc, #268]	; (8002b00 <main+0x1ac>)
 80029f4:	f003 fa1c 	bl	8005e30 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80029f8:	213c      	movs	r1, #60	; 0x3c
 80029fa:	4842      	ldr	r0, [pc, #264]	; (8002b04 <main+0x1b0>)
 80029fc:	f003 fa18 	bl	8005e30 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8002a00:	213c      	movs	r1, #60	; 0x3c
 8002a02:	4841      	ldr	r0, [pc, #260]	; (8002b08 <main+0x1b4>)
 8002a04:	f003 fa14 	bl	8005e30 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 8002a08:	4840      	ldr	r0, [pc, #256]	; (8002b0c <main+0x1b8>)
 8002a0a:	f002 ffe3 	bl	80059d4 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_DMA(&huart1, rx_data, 1);
 8002a0e:	2201      	movs	r2, #1
 8002a10:	493f      	ldr	r1, [pc, #252]	; (8002b10 <main+0x1bc>)
 8002a12:	4840      	ldr	r0, [pc, #256]	; (8002b14 <main+0x1c0>)
 8002a14:	f003 ffe9 	bl	80069ea <HAL_UART_Receive_DMA>
	target_speed[0] = 0;
 8002a18:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <main+0x1c4>)
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
	target_speed[1] = 0;
 8002a20:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <main+0x1c4>)
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
	target_speed[2] = 0;
 8002a28:	4b3b      	ldr	r3, [pc, #236]	; (8002b18 <main+0x1c4>)
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
	quest_xy[0][0] = 0;
 8002a30:	4b3a      	ldr	r3, [pc, #232]	; (8002b1c <main+0x1c8>)
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
	quest_xy[0][1] = 0;
 8002a38:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <main+0x1c8>)
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	605a      	str	r2, [r3, #4]
	quest_xy[0][2] = 1;
 8002a40:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <main+0x1c8>)
 8002a42:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a46:	609a      	str	r2, [r3, #8]
//set_voltage(1,mot_2);
//set_voltage(2,mot_3);
//set_voltage(3,mot_4);


		autonom_flag = 1;
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <main+0x1cc>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
	switch(flag){
 8002a4e:	4b35      	ldr	r3, [pc, #212]	; (8002b24 <main+0x1d0>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d847      	bhi.n	8002ae6 <main+0x192>
 8002a56:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <main+0x108>)
 8002a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5c:	08002a6d 	.word	0x08002a6d
 8002a60:	08002a8d 	.word	0x08002a8d
 8002a64:	08002aa5 	.word	0x08002aa5
 8002a68:	08002ac5 	.word	0x08002ac5
	case (0):{
		servo_control(0,0);
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7fe fbc8 	bl	8001204 <servo_control>
		servo_control(0,0);
 8002a74:	2100      	movs	r1, #0
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7fe fbc4 	bl	8001204 <servo_control>
		void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
		{

		}

		if (autonom_flag) {
 8002a7c:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <main+0x1cc>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d02f      	beq.n	8002ae4 <main+0x190>
			flag_compleate = 1;
 8002a84:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <main+0x1d4>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002a8a:	e02b      	b.n	8002ae4 <main+0x190>


	case(1):
		{

			omron(1);
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f7fe fb73 	bl	8001178 <omron>
			servo_control(1,1);
 8002a92:	2101      	movs	r1, #1
 8002a94:	2001      	movs	r0, #1
 8002a96:	f7fe fbb5 	bl	8001204 <servo_control>
			state_timer(20);
 8002a9a:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002a9e:	f7fe fb49 	bl	8001134 <state_timer>
						break;
 8002aa2:	e020      	b.n	8002ae6 <main+0x192>

	}
	case(2):{
				Move_robot_coordinates_X_Y_W(0.2, 0.2, 1, 1, 0.0);
 8002aa4:	ed9f 2a21 	vldr	s4, [pc, #132]	; 8002b2c <main+0x1d8>
 8002aa8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8002aac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002ab0:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8002b30 <main+0x1dc>
 8002ab4:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8002b30 <main+0x1dc>
 8002ab8:	f7fe fbd2 	bl	8001260 <Move_robot_coordinates_X_Y_W>
				flag_compleate = 1;
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <main+0x1d4>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	701a      	strb	r2, [r3, #0]
				break;
 8002ac2:	e010      	b.n	8002ae6 <main+0x192>
	}



	case(3):{
				Move_robot_coordinates_X_Y_W(0.25, 0.7, 0.03, 2.1, 3.3);
 8002ac4:	ed9f 2a1b 	vldr	s4, [pc, #108]	; 8002b34 <main+0x1e0>
 8002ac8:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8002b38 <main+0x1e4>
 8002acc:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8002b3c <main+0x1e8>
 8002ad0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8002b40 <main+0x1ec>
 8002ad4:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8002ad8:	f7fe fbc2 	bl	8001260 <Move_robot_coordinates_X_Y_W>
				flag_compleate = 1;
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <main+0x1d4>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
				break;
 8002ae2:	e000      	b.n	8002ae6 <main+0x192>
		break;
 8002ae4:	bf00      	nop
	}


	}
	falg_controler();
 8002ae6:	f7fe faef 	bl	80010c8 <falg_controler>
		autonom_flag = 1;
 8002aea:	e7ad      	b.n	8002a48 <main+0xf4>
 8002aec:	200004f4 	.word	0x200004f4
 8002af0:	2000065c 	.word	0x2000065c
 8002af4:	20000734 	.word	0x20000734
 8002af8:	20000614 	.word	0x20000614
 8002afc:	20000464 	.word	0x20000464
 8002b00:	200004ac 	.word	0x200004ac
 8002b04:	2000041c 	.word	0x2000041c
 8002b08:	2000053c 	.word	0x2000053c
 8002b0c:	20000584 	.word	0x20000584
 8002b10:	200002f0 	.word	0x200002f0
 8002b14:	2000077c 	.word	0x2000077c
 8002b18:	20000228 	.word	0x20000228
 8002b1c:	2000027c 	.word	0x2000027c
 8002b20:	200003c4 	.word	0x200003c4
 8002b24:	200002e9 	.word	0x200002e9
 8002b28:	200002ec 	.word	0x200002ec
 8002b2c:	00000000 	.word	0x00000000
 8002b30:	3e4ccccd 	.word	0x3e4ccccd
 8002b34:	40533333 	.word	0x40533333
 8002b38:	40066666 	.word	0x40066666
 8002b3c:	3cf5c28f 	.word	0x3cf5c28f
 8002b40:	3f333333 	.word	0x3f333333

08002b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b094      	sub	sp, #80	; 0x50
 8002b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b4a:	f107 0320 	add.w	r3, r7, #32
 8002b4e:	2230      	movs	r2, #48	; 0x30
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f004 fffe 	bl	8007b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b58:	f107 030c 	add.w	r3, r7, #12
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <SystemClock_Config+0xcc>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	4a27      	ldr	r2, [pc, #156]	; (8002c10 <SystemClock_Config+0xcc>)
 8002b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b76:	6413      	str	r3, [r2, #64]	; 0x40
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <SystemClock_Config+0xcc>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b84:	2300      	movs	r3, #0
 8002b86:	607b      	str	r3, [r7, #4]
 8002b88:	4b22      	ldr	r3, [pc, #136]	; (8002c14 <SystemClock_Config+0xd0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <SystemClock_Config+0xd0>)
 8002b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <SystemClock_Config+0xd0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ba8:	2310      	movs	r3, #16
 8002baa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bac:	2302      	movs	r3, #2
 8002bae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002bb4:	2308      	movs	r3, #8
 8002bb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002bb8:	23a8      	movs	r3, #168	; 0xa8
 8002bba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002bc0:	2307      	movs	r3, #7
 8002bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bc4:	f107 0320 	add.w	r3, r7, #32
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f002 fa1b 	bl	8005004 <HAL_RCC_OscConfig>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002bd4:	f000 f820 	bl	8002c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bd8:	230f      	movs	r3, #15
 8002bda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002be4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002be8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002bf0:	f107 030c 	add.w	r3, r7, #12
 8002bf4:	2105      	movs	r1, #5
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 fc7c 	bl	80054f4 <HAL_RCC_ClockConfig>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002c02:	f000 f809 	bl	8002c18 <Error_Handler>
  }
}
 8002c06:	bf00      	nop
 8002c08:	3750      	adds	r7, #80	; 0x50
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40007000 	.word	0x40007000

08002c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c1c:	b672      	cpsid	i
}
 8002c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c20:	e7fe      	b.n	8002c20 <Error_Handler+0x8>
	...

08002c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	4a0f      	ldr	r2, [pc, #60]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c38:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c42:	607b      	str	r3, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c62:	2007      	movs	r0, #7
 8002c64:	f001 fbbc 	bl	80043e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800

08002c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <NMI_Handler+0x4>

08002c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c7e:	e7fe      	b.n	8002c7e <HardFault_Handler+0x4>

08002c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <MemManage_Handler+0x4>

08002c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c8a:	e7fe      	b.n	8002c8a <BusFault_Handler+0x4>

08002c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c90:	e7fe      	b.n	8002c90 <UsageFault_Handler+0x4>

08002c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cc0:	f001 fa9e 	bl	8004200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ccc:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <USART1_IRQHandler+0x10>)
 8002cce:	f003 febd 	bl	8006a4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	2000077c 	.word	0x2000077c
 8002cdc:	00000000 	.word	0x00000000

08002ce0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ce0:	b5b0      	push	{r4, r5, r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	state_autonom = state_autonom + 0.01;
 8002ce6:	4bba      	ldr	r3, [pc, #744]	; (8002fd0 <TIM6_DAC_IRQHandler+0x2f0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fd fbd0 	bl	8000490 <__aeabi_f2d>
 8002cf0:	a3b1      	add	r3, pc, #708	; (adr r3, 8002fb8 <TIM6_DAC_IRQHandler+0x2d8>)
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	f7fd fa6d 	bl	80001d4 <__adddf3>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7fd fedf 	bl	8000ac4 <__aeabi_d2f>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4ab1      	ldr	r2, [pc, #708]	; (8002fd0 <TIM6_DAC_IRQHandler+0x2f0>)
 8002d0a:	6013      	str	r3, [r2, #0]
	state_flag = state_flag + 0.01;
 8002d0c:	4bb1      	ldr	r3, [pc, #708]	; (8002fd4 <TIM6_DAC_IRQHandler+0x2f4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fbbd 	bl	8000490 <__aeabi_f2d>
 8002d16:	a3a8      	add	r3, pc, #672	; (adr r3, 8002fb8 <TIM6_DAC_IRQHandler+0x2d8>)
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f7fd fa5a 	bl	80001d4 <__adddf3>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	f7fd fecc 	bl	8000ac4 <__aeabi_d2f>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4aa9      	ldr	r2, [pc, #676]	; (8002fd4 <TIM6_DAC_IRQHandler+0x2f4>)
 8002d30:	6013      	str	r3, [r2, #0]
	 Enc_Counter_0 = TIM8->CNT;
 8002d32:	4ba9      	ldr	r3, [pc, #676]	; (8002fd8 <TIM6_DAC_IRQHandler+0x2f8>)
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	b21a      	sxth	r2, r3
 8002d38:	4ba8      	ldr	r3, [pc, #672]	; (8002fdc <TIM6_DAC_IRQHandler+0x2fc>)
 8002d3a:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_1 = TIM2->CNT;
 8002d3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	b21a      	sxth	r2, r3
 8002d44:	4ba6      	ldr	r3, [pc, #664]	; (8002fe0 <TIM6_DAC_IRQHandler+0x300>)
 8002d46:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_2 = TIM3->CNT;
 8002d48:	4ba6      	ldr	r3, [pc, #664]	; (8002fe4 <TIM6_DAC_IRQHandler+0x304>)
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	b21a      	sxth	r2, r3
 8002d4e:	4ba6      	ldr	r3, [pc, #664]	; (8002fe8 <TIM6_DAC_IRQHandler+0x308>)
 8002d50:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_3 = TIM1->CNT;
 8002d52:	4ba6      	ldr	r3, [pc, #664]	; (8002fec <TIM6_DAC_IRQHandler+0x30c>)
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	b21a      	sxth	r2, r3
 8002d58:	4ba5      	ldr	r3, [pc, #660]	; (8002ff0 <TIM6_DAC_IRQHandler+0x310>)
 8002d5a:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_4 = TIM5->CNT;
 8002d5c:	4ba5      	ldr	r3, [pc, #660]	; (8002ff4 <TIM6_DAC_IRQHandler+0x314>)
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	b21a      	sxth	r2, r3
 8002d62:	4ba5      	ldr	r3, [pc, #660]	; (8002ff8 <TIM6_DAC_IRQHandler+0x318>)
 8002d64:	801a      	strh	r2, [r3, #0]

	 result_speed_0 = ((float)Enc_Counter_0) *  pi_Radius_pulse_enc * 100.0;
 8002d66:	4b9d      	ldr	r3, [pc, #628]	; (8002fdc <TIM6_DAC_IRQHandler+0x2fc>)
 8002d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d6c:	ee07 3a90 	vmov	s15, r3
 8002d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d74:	ee17 0a90 	vmov	r0, s15
 8002d78:	f7fd fb8a 	bl	8000490 <__aeabi_f2d>
 8002d7c:	a390      	add	r3, pc, #576	; (adr r3, 8002fc0 <TIM6_DAC_IRQHandler+0x2e0>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fbdd 	bl	8000540 <__aeabi_dmul>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	4b9a      	ldr	r3, [pc, #616]	; (8002ffc <TIM6_DAC_IRQHandler+0x31c>)
 8002d94:	f7fd fbd4 	bl	8000540 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f7fd fe90 	bl	8000ac4 <__aeabi_d2f>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4a96      	ldr	r2, [pc, #600]	; (8003000 <TIM6_DAC_IRQHandler+0x320>)
 8002da8:	6013      	str	r3, [r2, #0]
	 result_speed_1 = ((float)Enc_Counter_1) *  pi_Radius_pulse_enc * 100.0;
 8002daa:	4b8d      	ldr	r3, [pc, #564]	; (8002fe0 <TIM6_DAC_IRQHandler+0x300>)
 8002dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db0:	ee07 3a90 	vmov	s15, r3
 8002db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002db8:	ee17 0a90 	vmov	r0, s15
 8002dbc:	f7fd fb68 	bl	8000490 <__aeabi_f2d>
 8002dc0:	a37f      	add	r3, pc, #508	; (adr r3, 8002fc0 <TIM6_DAC_IRQHandler+0x2e0>)
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	f7fd fbbb 	bl	8000540 <__aeabi_dmul>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	4b89      	ldr	r3, [pc, #548]	; (8002ffc <TIM6_DAC_IRQHandler+0x31c>)
 8002dd8:	f7fd fbb2 	bl	8000540 <__aeabi_dmul>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	f7fd fe6e 	bl	8000ac4 <__aeabi_d2f>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4a86      	ldr	r2, [pc, #536]	; (8003004 <TIM6_DAC_IRQHandler+0x324>)
 8002dec:	6013      	str	r3, [r2, #0]
	 result_speed_2 = ((float)Enc_Counter_2) *  pi_Radius_pulse_enc * 100.0;
 8002dee:	4b7e      	ldr	r3, [pc, #504]	; (8002fe8 <TIM6_DAC_IRQHandler+0x308>)
 8002df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dfc:	ee17 0a90 	vmov	r0, s15
 8002e00:	f7fd fb46 	bl	8000490 <__aeabi_f2d>
 8002e04:	a36e      	add	r3, pc, #440	; (adr r3, 8002fc0 <TIM6_DAC_IRQHandler+0x2e0>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd fb99 	bl	8000540 <__aeabi_dmul>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	4b78      	ldr	r3, [pc, #480]	; (8002ffc <TIM6_DAC_IRQHandler+0x31c>)
 8002e1c:	f7fd fb90 	bl	8000540 <__aeabi_dmul>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	f7fd fe4c 	bl	8000ac4 <__aeabi_d2f>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4a76      	ldr	r2, [pc, #472]	; (8003008 <TIM6_DAC_IRQHandler+0x328>)
 8002e30:	6013      	str	r3, [r2, #0]
	 result_speed_3 = ((float)Enc_Counter_3) *  pi_Radius_pulse_enc * 100.0;
 8002e32:	4b6f      	ldr	r3, [pc, #444]	; (8002ff0 <TIM6_DAC_IRQHandler+0x310>)
 8002e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e38:	ee07 3a90 	vmov	s15, r3
 8002e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e40:	ee17 0a90 	vmov	r0, s15
 8002e44:	f7fd fb24 	bl	8000490 <__aeabi_f2d>
 8002e48:	a35d      	add	r3, pc, #372	; (adr r3, 8002fc0 <TIM6_DAC_IRQHandler+0x2e0>)
 8002e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4e:	f7fd fb77 	bl	8000540 <__aeabi_dmul>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <TIM6_DAC_IRQHandler+0x31c>)
 8002e60:	f7fd fb6e 	bl	8000540 <__aeabi_dmul>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f7fd fe2a 	bl	8000ac4 <__aeabi_d2f>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4a66      	ldr	r2, [pc, #408]	; (800300c <TIM6_DAC_IRQHandler+0x32c>)
 8002e74:	6013      	str	r3, [r2, #0]
	 result_speed_grab = ((float)Enc_Counter_4) * pi_Radius_pulse_enc_chain  * 100.0;
 8002e76:	4b60      	ldr	r3, [pc, #384]	; (8002ff8 <TIM6_DAC_IRQHandler+0x318>)
 8002e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e7c:	ee07 3a90 	vmov	s15, r3
 8002e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e84:	ee17 0a90 	vmov	r0, s15
 8002e88:	f7fd fb02 	bl	8000490 <__aeabi_f2d>
 8002e8c:	a34e      	add	r3, pc, #312	; (adr r3, 8002fc8 <TIM6_DAC_IRQHandler+0x2e8>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f7fd fb55 	bl	8000540 <__aeabi_dmul>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	4b56      	ldr	r3, [pc, #344]	; (8002ffc <TIM6_DAC_IRQHandler+0x31c>)
 8002ea4:	f7fd fb4c 	bl	8000540 <__aeabi_dmul>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7fd fe08 	bl	8000ac4 <__aeabi_d2f>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4a56      	ldr	r2, [pc, #344]	; (8003010 <TIM6_DAC_IRQHandler+0x330>)
 8002eb8:	6013      	str	r3, [r2, #0]

	 TIM8->CNT = 0;
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <TIM6_DAC_IRQHandler+0x2f8>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM2->CNT = 0;
 8002ec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM3->CNT = 0;
 8002ec8:	4b46      	ldr	r3, [pc, #280]	; (8002fe4 <TIM6_DAC_IRQHandler+0x304>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM1->CNT = 0;
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <TIM6_DAC_IRQHandler+0x30c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM5->CNT = 0;
 8002ed4:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <TIM6_DAC_IRQHandler+0x314>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24

	 Wheel_1.current = result_speed_0;
 8002eda:	4b49      	ldr	r3, [pc, #292]	; (8003000 <TIM6_DAC_IRQHandler+0x320>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a4d      	ldr	r2, [pc, #308]	; (8003014 <TIM6_DAC_IRQHandler+0x334>)
 8002ee0:	6153      	str	r3, [r2, #20]
	 Wheel_2.current = result_speed_1;
 8002ee2:	4b48      	ldr	r3, [pc, #288]	; (8003004 <TIM6_DAC_IRQHandler+0x324>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a4c      	ldr	r2, [pc, #304]	; (8003018 <TIM6_DAC_IRQHandler+0x338>)
 8002ee8:	6153      	str	r3, [r2, #20]
	 Wheel_3.current = result_speed_2;
 8002eea:	4b47      	ldr	r3, [pc, #284]	; (8003008 <TIM6_DAC_IRQHandler+0x328>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a4b      	ldr	r2, [pc, #300]	; (800301c <TIM6_DAC_IRQHandler+0x33c>)
 8002ef0:	6153      	str	r3, [r2, #20]
	 Wheel_4.current = result_speed_3;
 8002ef2:	4b46      	ldr	r3, [pc, #280]	; (800300c <TIM6_DAC_IRQHandler+0x32c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a4a      	ldr	r2, [pc, #296]	; (8003020 <TIM6_DAC_IRQHandler+0x340>)
 8002ef8:	6153      	str	r3, [r2, #20]
	 Chain_motor.current = result_speed_grab;
 8002efa:	4b45      	ldr	r3, [pc, #276]	; (8003010 <TIM6_DAC_IRQHandler+0x330>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a49      	ldr	r2, [pc, #292]	; (8003024 <TIM6_DAC_IRQHandler+0x344>)
 8002f00:	6153      	str	r3, [r2, #20]

	 PID_Controller(&Wheel_1);
 8002f02:	4844      	ldr	r0, [pc, #272]	; (8003014 <TIM6_DAC_IRQHandler+0x334>)
 8002f04:	f7ff f8c6 	bl	8002094 <PID_Controller>
	 PID_Controller(&Wheel_2);
 8002f08:	4843      	ldr	r0, [pc, #268]	; (8003018 <TIM6_DAC_IRQHandler+0x338>)
 8002f0a:	f7ff f8c3 	bl	8002094 <PID_Controller>
	 PID_Controller(&Wheel_3);
 8002f0e:	4843      	ldr	r0, [pc, #268]	; (800301c <TIM6_DAC_IRQHandler+0x33c>)
 8002f10:	f7ff f8c0 	bl	8002094 <PID_Controller>
	 PID_Controller(&Wheel_4);
 8002f14:	4842      	ldr	r0, [pc, #264]	; (8003020 <TIM6_DAC_IRQHandler+0x340>)
 8002f16:	f7ff f8bd 	bl	8002094 <PID_Controller>
	 PID_Controller(&Chain_motor);
 8002f1a:	4842      	ldr	r0, [pc, #264]	; (8003024 <TIM6_DAC_IRQHandler+0x344>)
 8002f1c:	f7ff f8ba 	bl	8002094 <PID_Controller>
	 delta_UV[0][0] = speed_U *0.01;
 8002f20:	4b41      	ldr	r3, [pc, #260]	; (8003028 <TIM6_DAC_IRQHandler+0x348>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fab3 	bl	8000490 <__aeabi_f2d>
 8002f2a:	a323      	add	r3, pc, #140	; (adr r3, 8002fb8 <TIM6_DAC_IRQHandler+0x2d8>)
 8002f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f30:	f7fd fb06 	bl	8000540 <__aeabi_dmul>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f7fd fdc2 	bl	8000ac4 <__aeabi_d2f>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4a3a      	ldr	r2, [pc, #232]	; (800302c <TIM6_DAC_IRQHandler+0x34c>)
 8002f44:	6013      	str	r3, [r2, #0]
	 delta_UV[0][1] = speed_V *0.01;
 8002f46:	4b3a      	ldr	r3, [pc, #232]	; (8003030 <TIM6_DAC_IRQHandler+0x350>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd faa0 	bl	8000490 <__aeabi_f2d>
 8002f50:	a319      	add	r3, pc, #100	; (adr r3, 8002fb8 <TIM6_DAC_IRQHandler+0x2d8>)
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	f7fd faf3 	bl	8000540 <__aeabi_dmul>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	f7fd fdaf 	bl	8000ac4 <__aeabi_d2f>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4a30      	ldr	r2, [pc, #192]	; (800302c <TIM6_DAC_IRQHandler+0x34c>)
 8002f6a:	6053      	str	r3, [r2, #4]

	 fi = fi + speed_W * 0.01;
 8002f6c:	4b31      	ldr	r3, [pc, #196]	; (8003034 <TIM6_DAC_IRQHandler+0x354>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fa8d 	bl	8000490 <__aeabi_f2d>
 8002f76:	4604      	mov	r4, r0
 8002f78:	460d      	mov	r5, r1
 8002f7a:	4b2f      	ldr	r3, [pc, #188]	; (8003038 <TIM6_DAC_IRQHandler+0x358>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fa86 	bl	8000490 <__aeabi_f2d>
 8002f84:	a30c      	add	r3, pc, #48	; (adr r3, 8002fb8 <TIM6_DAC_IRQHandler+0x2d8>)
 8002f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8a:	f7fd fad9 	bl	8000540 <__aeabi_dmul>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4620      	mov	r0, r4
 8002f94:	4629      	mov	r1, r5
 8002f96:	f7fd f91d 	bl	80001d4 <__adddf3>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f7fd fd8f 	bl	8000ac4 <__aeabi_d2f>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4a22      	ldr	r2, [pc, #136]	; (8003034 <TIM6_DAC_IRQHandler+0x354>)
 8002faa:	6013      	str	r3, [r2, #0]
	 if(fi>=(2*pi)) fi = fi-2*pi;
 8002fac:	4b21      	ldr	r3, [pc, #132]	; (8003034 <TIM6_DAC_IRQHandler+0x354>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd fa6d 	bl	8000490 <__aeabi_f2d>
 8002fb6:	e041      	b.n	800303c <TIM6_DAC_IRQHandler+0x35c>
 8002fb8:	47ae147b 	.word	0x47ae147b
 8002fbc:	3f847ae1 	.word	0x3f847ae1
 8002fc0:	ce34e015 	.word	0xce34e015
 8002fc4:	3f16194c 	.word	0x3f16194c
 8002fc8:	4c4ff567 	.word	0x4c4ff567
 8002fcc:	3f2326fe 	.word	0x3f2326fe
 8002fd0:	20000414 	.word	0x20000414
 8002fd4:	20000418 	.word	0x20000418
 8002fd8:	40010400 	.word	0x40010400
 8002fdc:	200003c6 	.word	0x200003c6
 8002fe0:	200003c8 	.word	0x200003c8
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	200003ca 	.word	0x200003ca
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	200003cc 	.word	0x200003cc
 8002ff4:	40000c00 	.word	0x40000c00
 8002ff8:	200003ce 	.word	0x200003ce
 8002ffc:	40590000 	.word	0x40590000
 8003000:	200003d8 	.word	0x200003d8
 8003004:	200003dc 	.word	0x200003dc
 8003008:	200003e0 	.word	0x200003e0
 800300c:	200003e4 	.word	0x200003e4
 8003010:	200003e8 	.word	0x200003e8
 8003014:	200000e8 	.word	0x200000e8
 8003018:	20000128 	.word	0x20000128
 800301c:	20000168 	.word	0x20000168
 8003020:	200001a8 	.word	0x200001a8
 8003024:	200001e8 	.word	0x200001e8
 8003028:	20000270 	.word	0x20000270
 800302c:	200003fc 	.word	0x200003fc
 8003030:	20000274 	.word	0x20000274
 8003034:	2000006c 	.word	0x2000006c
 8003038:	20000278 	.word	0x20000278
 800303c:	a3ba      	add	r3, pc, #744	; (adr r3, 8003328 <TIM6_DAC_IRQHandler+0x648>)
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	f7fd fd03 	bl	8000a4c <__aeabi_dcmpge>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d012      	beq.n	8003072 <TIM6_DAC_IRQHandler+0x392>
 800304c:	4bbc      	ldr	r3, [pc, #752]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd fa1d 	bl	8000490 <__aeabi_f2d>
 8003056:	a3b4      	add	r3, pc, #720	; (adr r3, 8003328 <TIM6_DAC_IRQHandler+0x648>)
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f7fd f8b8 	bl	80001d0 <__aeabi_dsub>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	f7fd fd2c 	bl	8000ac4 <__aeabi_d2f>
 800306c:	4603      	mov	r3, r0
 800306e:	4ab4      	ldr	r2, [pc, #720]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 8003070:	6013      	str	r3, [r2, #0]
	 if(fi<0.0)	 fi = fi+2*pi;
 8003072:	4bb3      	ldr	r3, [pc, #716]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 8003074:	edd3 7a00 	vldr	s15, [r3]
 8003078:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800307c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003080:	d512      	bpl.n	80030a8 <TIM6_DAC_IRQHandler+0x3c8>
 8003082:	4baf      	ldr	r3, [pc, #700]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fa02 	bl	8000490 <__aeabi_f2d>
 800308c:	a3a6      	add	r3, pc, #664	; (adr r3, 8003328 <TIM6_DAC_IRQHandler+0x648>)
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f7fd f89f 	bl	80001d4 <__adddf3>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	f7fd fd11 	bl	8000ac4 <__aeabi_d2f>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4aa6      	ldr	r2, [pc, #664]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 80030a6:	6013      	str	r3, [r2, #0]
	 if(quest_FI>fi){
 80030a8:	4ba6      	ldr	r3, [pc, #664]	; (8003344 <TIM6_DAC_IRQHandler+0x664>)
 80030aa:	ed93 7a00 	vldr	s14, [r3]
 80030ae:	4ba4      	ldr	r3, [pc, #656]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 80030b0:	edd3 7a00 	vldr	s15, [r3]
 80030b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030bc:	dd4a      	ble.n	8003154 <TIM6_DAC_IRQHandler+0x474>
		 if((quest_FI-fi)>pi){
 80030be:	4ba1      	ldr	r3, [pc, #644]	; (8003344 <TIM6_DAC_IRQHandler+0x664>)
 80030c0:	ed93 7a00 	vldr	s14, [r3]
 80030c4:	4b9e      	ldr	r3, [pc, #632]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 80030c6:	edd3 7a00 	vldr	s15, [r3]
 80030ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ce:	ee17 0a90 	vmov	r0, s15
 80030d2:	f7fd f9dd 	bl	8000490 <__aeabi_f2d>
 80030d6:	a396      	add	r3, pc, #600	; (adr r3, 8003330 <TIM6_DAC_IRQHandler+0x650>)
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f7fd fcc0 	bl	8000a60 <__aeabi_dcmpgt>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d027      	beq.n	8003136 <TIM6_DAC_IRQHandler+0x456>
			delta_fi = (2*pi-quest_FI+fi);
 80030e6:	4b97      	ldr	r3, [pc, #604]	; (8003344 <TIM6_DAC_IRQHandler+0x664>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd f9d0 	bl	8000490 <__aeabi_f2d>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	a18c      	add	r1, pc, #560	; (adr r1, 8003328 <TIM6_DAC_IRQHandler+0x648>)
 80030f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030fa:	f7fd f869 	bl	80001d0 <__aeabi_dsub>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4614      	mov	r4, r2
 8003104:	461d      	mov	r5, r3
 8003106:	4b8e      	ldr	r3, [pc, #568]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd f9c0 	bl	8000490 <__aeabi_f2d>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4620      	mov	r0, r4
 8003116:	4629      	mov	r1, r5
 8003118:	f7fd f85c 	bl	80001d4 <__adddf3>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4610      	mov	r0, r2
 8003122:	4619      	mov	r1, r3
 8003124:	f7fd fcce 	bl	8000ac4 <__aeabi_d2f>
 8003128:	4603      	mov	r3, r0
 800312a:	4a87      	ldr	r2, [pc, #540]	; (8003348 <TIM6_DAC_IRQHandler+0x668>)
 800312c:	6013      	str	r3, [r2, #0]
			flaging = 1;
 800312e:	4b87      	ldr	r3, [pc, #540]	; (800334c <TIM6_DAC_IRQHandler+0x66c>)
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	e058      	b.n	80031e8 <TIM6_DAC_IRQHandler+0x508>
		 }
		 else {

			 delta_fi = (quest_FI - fi);
 8003136:	4b83      	ldr	r3, [pc, #524]	; (8003344 <TIM6_DAC_IRQHandler+0x664>)
 8003138:	ed93 7a00 	vldr	s14, [r3]
 800313c:	4b80      	ldr	r3, [pc, #512]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003146:	4b80      	ldr	r3, [pc, #512]	; (8003348 <TIM6_DAC_IRQHandler+0x668>)
 8003148:	edc3 7a00 	vstr	s15, [r3]
			 flaging = 2;
 800314c:	4b7f      	ldr	r3, [pc, #508]	; (800334c <TIM6_DAC_IRQHandler+0x66c>)
 800314e:	2202      	movs	r2, #2
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e049      	b.n	80031e8 <TIM6_DAC_IRQHandler+0x508>
		 }

	 }
	 else{
		 if((fi-quest_FI)>pi){
 8003154:	4b7a      	ldr	r3, [pc, #488]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 8003156:	ed93 7a00 	vldr	s14, [r3]
 800315a:	4b7a      	ldr	r3, [pc, #488]	; (8003344 <TIM6_DAC_IRQHandler+0x664>)
 800315c:	edd3 7a00 	vldr	s15, [r3]
 8003160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003164:	ee17 0a90 	vmov	r0, s15
 8003168:	f7fd f992 	bl	8000490 <__aeabi_f2d>
 800316c:	a370      	add	r3, pc, #448	; (adr r3, 8003330 <TIM6_DAC_IRQHandler+0x650>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	f7fd fc75 	bl	8000a60 <__aeabi_dcmpgt>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d027      	beq.n	80031cc <TIM6_DAC_IRQHandler+0x4ec>
			 flaging = 3;
 800317c:	4b73      	ldr	r3, [pc, #460]	; (800334c <TIM6_DAC_IRQHandler+0x66c>)
 800317e:	2203      	movs	r2, #3
 8003180:	701a      	strb	r2, [r3, #0]
			delta_fi =  2*pi-fi+quest_FI;;
 8003182:	4b6f      	ldr	r3, [pc, #444]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f982 	bl	8000490 <__aeabi_f2d>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	a165      	add	r1, pc, #404	; (adr r1, 8003328 <TIM6_DAC_IRQHandler+0x648>)
 8003192:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003196:	f7fd f81b 	bl	80001d0 <__aeabi_dsub>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4614      	mov	r4, r2
 80031a0:	461d      	mov	r5, r3
 80031a2:	4b68      	ldr	r3, [pc, #416]	; (8003344 <TIM6_DAC_IRQHandler+0x664>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd f972 	bl	8000490 <__aeabi_f2d>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4620      	mov	r0, r4
 80031b2:	4629      	mov	r1, r5
 80031b4:	f7fd f80e 	bl	80001d4 <__adddf3>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4610      	mov	r0, r2
 80031be:	4619      	mov	r1, r3
 80031c0:	f7fd fc80 	bl	8000ac4 <__aeabi_d2f>
 80031c4:	4603      	mov	r3, r0
 80031c6:	4a60      	ldr	r2, [pc, #384]	; (8003348 <TIM6_DAC_IRQHandler+0x668>)
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e00d      	b.n	80031e8 <TIM6_DAC_IRQHandler+0x508>

		 }
		 else {
			 flaging = 4;
 80031cc:	4b5f      	ldr	r3, [pc, #380]	; (800334c <TIM6_DAC_IRQHandler+0x66c>)
 80031ce:	2204      	movs	r2, #4
 80031d0:	701a      	strb	r2, [r3, #0]
			 delta_fi = fi-quest_FI;
 80031d2:	4b5b      	ldr	r3, [pc, #364]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 80031d4:	ed93 7a00 	vldr	s14, [r3]
 80031d8:	4b5a      	ldr	r3, [pc, #360]	; (8003344 <TIM6_DAC_IRQHandler+0x664>)
 80031da:	edd3 7a00 	vldr	s15, [r3]
 80031de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e2:	4b59      	ldr	r3, [pc, #356]	; (8003348 <TIM6_DAC_IRQHandler+0x668>)
 80031e4:	edc3 7a00 	vstr	s15, [r3]
		 }


	 }

	 UV_convert_xy[0][0] = cos(fi);
 80031e8:	4b55      	ldr	r3, [pc, #340]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd f94f 	bl	8000490 <__aeabi_f2d>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	ec43 2b10 	vmov	d0, r2, r3
 80031fa:	f004 fced 	bl	8007bd8 <cos>
 80031fe:	ec53 2b10 	vmov	r2, r3, d0
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	f7fd fc5d 	bl	8000ac4 <__aeabi_d2f>
 800320a:	4603      	mov	r3, r0
 800320c:	4a50      	ldr	r2, [pc, #320]	; (8003350 <TIM6_DAC_IRQHandler+0x670>)
 800320e:	6013      	str	r3, [r2, #0]
	 UV_convert_xy[0][1] = sin(fi);
 8003210:	4b4b      	ldr	r3, [pc, #300]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd f93b 	bl	8000490 <__aeabi_f2d>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	ec43 2b10 	vmov	d0, r2, r3
 8003222:	f004 fd2d 	bl	8007c80 <sin>
 8003226:	ec53 2b10 	vmov	r2, r3, d0
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	f7fd fc49 	bl	8000ac4 <__aeabi_d2f>
 8003232:	4603      	mov	r3, r0
 8003234:	4a46      	ldr	r2, [pc, #280]	; (8003350 <TIM6_DAC_IRQHandler+0x670>)
 8003236:	6053      	str	r3, [r2, #4]
	 UV_convert_xy[1][1] = cos(fi);
 8003238:	4b41      	ldr	r3, [pc, #260]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd f927 	bl	8000490 <__aeabi_f2d>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	ec43 2b10 	vmov	d0, r2, r3
 800324a:	f004 fcc5 	bl	8007bd8 <cos>
 800324e:	ec53 2b10 	vmov	r2, r3, d0
 8003252:	4610      	mov	r0, r2
 8003254:	4619      	mov	r1, r3
 8003256:	f7fd fc35 	bl	8000ac4 <__aeabi_d2f>
 800325a:	4603      	mov	r3, r0
 800325c:	4a3c      	ldr	r2, [pc, #240]	; (8003350 <TIM6_DAC_IRQHandler+0x670>)
 800325e:	60d3      	str	r3, [r2, #12]
	 UV_convert_xy[1][0] = -sin(fi);
 8003260:	4b37      	ldr	r3, [pc, #220]	; (8003340 <TIM6_DAC_IRQHandler+0x660>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7fd f913 	bl	8000490 <__aeabi_f2d>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	ec43 2b10 	vmov	d0, r2, r3
 8003272:	f004 fd05 	bl	8007c80 <sin>
 8003276:	ec53 2b10 	vmov	r2, r3, d0
 800327a:	4610      	mov	r0, r2
 800327c:	4619      	mov	r1, r3
 800327e:	f7fd fc21 	bl	8000ac4 <__aeabi_d2f>
 8003282:	4603      	mov	r3, r0
 8003284:	ee07 3a90 	vmov	s15, r3
 8003288:	eef1 7a67 	vneg.f32	s15, s15
 800328c:	4b30      	ldr	r3, [pc, #192]	; (8003350 <TIM6_DAC_IRQHandler+0x670>)
 800328e:	edc3 7a02 	vstr	s15, [r3, #8]


	 matrixMultiplyM2M(&delta_UV[0][0],1,2,&UV_convert_xy[0][0],2,2,&delta_XY[0][0]);
 8003292:	4b30      	ldr	r3, [pc, #192]	; (8003354 <TIM6_DAC_IRQHandler+0x674>)
 8003294:	9302      	str	r3, [sp, #8]
 8003296:	2302      	movs	r3, #2
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	2302      	movs	r3, #2
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	4b2c      	ldr	r3, [pc, #176]	; (8003350 <TIM6_DAC_IRQHandler+0x670>)
 80032a0:	2202      	movs	r2, #2
 80032a2:	2101      	movs	r1, #1
 80032a4:	482c      	ldr	r0, [pc, #176]	; (8003358 <TIM6_DAC_IRQHandler+0x678>)
 80032a6:	f7fe ffc5 	bl	8002234 <matrixMultiplyM2M>
	 metr_chain = metr_chain + result_speed_grab*0.01 ;
 80032aa:	4b2c      	ldr	r3, [pc, #176]	; (800335c <TIM6_DAC_IRQHandler+0x67c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd f8ee 	bl	8000490 <__aeabi_f2d>
 80032b4:	4604      	mov	r4, r0
 80032b6:	460d      	mov	r5, r1
 80032b8:	4b29      	ldr	r3, [pc, #164]	; (8003360 <TIM6_DAC_IRQHandler+0x680>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fd f8e7 	bl	8000490 <__aeabi_f2d>
 80032c2:	a31d      	add	r3, pc, #116	; (adr r3, 8003338 <TIM6_DAC_IRQHandler+0x658>)
 80032c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c8:	f7fd f93a 	bl	8000540 <__aeabi_dmul>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4620      	mov	r0, r4
 80032d2:	4629      	mov	r1, r5
 80032d4:	f7fc ff7e 	bl	80001d4 <__adddf3>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	f7fd fbf0 	bl	8000ac4 <__aeabi_d2f>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4a1d      	ldr	r2, [pc, #116]	; (800335c <TIM6_DAC_IRQHandler+0x67c>)
 80032e8:	6013      	str	r3, [r2, #0]
	 position_x = position_x +  delta_XY[0][0];
 80032ea:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <TIM6_DAC_IRQHandler+0x674>)
 80032ec:	ed93 7a00 	vldr	s14, [r3]
 80032f0:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <TIM6_DAC_IRQHandler+0x684>)
 80032f2:	edd3 7a00 	vldr	s15, [r3]
 80032f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032fa:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <TIM6_DAC_IRQHandler+0x684>)
 80032fc:	edc3 7a00 	vstr	s15, [r3]
	 position_y = position_y +  delta_XY[0][1];
 8003300:	4b14      	ldr	r3, [pc, #80]	; (8003354 <TIM6_DAC_IRQHandler+0x674>)
 8003302:	ed93 7a01 	vldr	s14, [r3, #4]
 8003306:	4b18      	ldr	r3, [pc, #96]	; (8003368 <TIM6_DAC_IRQHandler+0x688>)
 8003308:	edd3 7a00 	vldr	s15, [r3]
 800330c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003310:	4b15      	ldr	r3, [pc, #84]	; (8003368 <TIM6_DAC_IRQHandler+0x688>)
 8003312:	edc3 7a00 	vstr	s15, [r3]


  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003316:	4815      	ldr	r0, [pc, #84]	; (800336c <TIM6_DAC_IRQHandler+0x68c>)
 8003318:	f002 fe18 	bl	8005f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	bdb0      	pop	{r4, r5, r7, pc}
 8003322:	bf00      	nop
 8003324:	f3af 8000 	nop.w
 8003328:	54442d18 	.word	0x54442d18
 800332c:	401921fb 	.word	0x401921fb
 8003330:	54442d18 	.word	0x54442d18
 8003334:	400921fb 	.word	0x400921fb
 8003338:	47ae147b 	.word	0x47ae147b
 800333c:	3f847ae1 	.word	0x3f847ae1
 8003340:	2000006c 	.word	0x2000006c
 8003344:	200002e0 	.word	0x200002e0
 8003348:	2000026c 	.word	0x2000026c
 800334c:	200003d0 	.word	0x200003d0
 8003350:	200003ec 	.word	0x200003ec
 8003354:	20000404 	.word	0x20000404
 8003358:	200003fc 	.word	0x200003fc
 800335c:	200003d4 	.word	0x200003d4
 8003360:	200003e8 	.word	0x200003e8
 8003364:	2000040c 	.word	0x2000040c
 8003368:	20000410 	.word	0x20000410
 800336c:	20000584 	.word	0x20000584

08003370 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003374:	4802      	ldr	r0, [pc, #8]	; (8003380 <TIM7_IRQHandler+0x10>)
 8003376:	f002 fde9 	bl	8005f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	200005cc 	.word	0x200005cc

08003384 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003388:	4802      	ldr	r0, [pc, #8]	; (8003394 <DMA2_Stream2_IRQHandler+0x10>)
 800338a:	f001 fa03 	bl	8004794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200007c0 	.word	0x200007c0

08003398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <SystemInit+0x20>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a2:	4a05      	ldr	r2, [pc, #20]	; (80033b8 <SystemInit+0x20>)
 80033a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08c      	sub	sp, #48	; 0x30
 80033c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80033c2:	f107 030c 	add.w	r3, r7, #12
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f004 fbc2 	bl	8007b54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033d8:	4b22      	ldr	r3, [pc, #136]	; (8003464 <MX_TIM1_Init+0xa8>)
 80033da:	4a23      	ldr	r2, [pc, #140]	; (8003468 <MX_TIM1_Init+0xac>)
 80033dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80033de:	4b21      	ldr	r3, [pc, #132]	; (8003464 <MX_TIM1_Init+0xa8>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033e4:	4b1f      	ldr	r3, [pc, #124]	; (8003464 <MX_TIM1_Init+0xa8>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80033ea:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <MX_TIM1_Init+0xa8>)
 80033ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033f2:	4b1c      	ldr	r3, [pc, #112]	; (8003464 <MX_TIM1_Init+0xa8>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033f8:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <MX_TIM1_Init+0xa8>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <MX_TIM1_Init+0xa8>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003404:	2301      	movs	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003408:	2300      	movs	r3, #0
 800340a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800340c:	2301      	movs	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003410:	2300      	movs	r3, #0
 8003412:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003418:	2300      	movs	r3, #0
 800341a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800341c:	2301      	movs	r3, #1
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003420:	2300      	movs	r3, #0
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003428:	f107 030c 	add.w	r3, r7, #12
 800342c:	4619      	mov	r1, r3
 800342e:	480d      	ldr	r0, [pc, #52]	; (8003464 <MX_TIM1_Init+0xa8>)
 8003430:	f002 fc58 	bl	8005ce4 <HAL_TIM_Encoder_Init>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800343a:	f7ff fbed 	bl	8002c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	4619      	mov	r1, r3
 800344a:	4806      	ldr	r0, [pc, #24]	; (8003464 <MX_TIM1_Init+0xa8>)
 800344c:	f003 f9f0 	bl	8006830 <HAL_TIMEx_MasterConfigSynchronization>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003456:	f7ff fbdf 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800345a:	bf00      	nop
 800345c:	3730      	adds	r7, #48	; 0x30
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	2000041c 	.word	0x2000041c
 8003468:	40010000 	.word	0x40010000

0800346c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08c      	sub	sp, #48	; 0x30
 8003470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003472:	f107 030c 	add.w	r3, r7, #12
 8003476:	2224      	movs	r2, #36	; 0x24
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f004 fb6a 	bl	8007b54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003480:	1d3b      	adds	r3, r7, #4
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <MX_TIM2_Init+0xa4>)
 800348a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800348e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003490:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <MX_TIM2_Init+0xa4>)
 8003492:	2200      	movs	r2, #0
 8003494:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003496:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <MX_TIM2_Init+0xa4>)
 8003498:	2200      	movs	r2, #0
 800349a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800349c:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <MX_TIM2_Init+0xa4>)
 800349e:	f04f 32ff 	mov.w	r2, #4294967295
 80034a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <MX_TIM2_Init+0xa4>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034aa:	4b19      	ldr	r3, [pc, #100]	; (8003510 <MX_TIM2_Init+0xa4>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80034b0:	2301      	movs	r3, #1
 80034b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034b4:	2300      	movs	r3, #0
 80034b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034b8:	2301      	movs	r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80034c4:	2300      	movs	r3, #0
 80034c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80034c8:	2301      	movs	r3, #1
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80034d4:	f107 030c 	add.w	r3, r7, #12
 80034d8:	4619      	mov	r1, r3
 80034da:	480d      	ldr	r0, [pc, #52]	; (8003510 <MX_TIM2_Init+0xa4>)
 80034dc:	f002 fc02 	bl	8005ce4 <HAL_TIM_Encoder_Init>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80034e6:	f7ff fb97 	bl	8002c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	4619      	mov	r1, r3
 80034f6:	4806      	ldr	r0, [pc, #24]	; (8003510 <MX_TIM2_Init+0xa4>)
 80034f8:	f003 f99a 	bl	8006830 <HAL_TIMEx_MasterConfigSynchronization>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003502:	f7ff fb89 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003506:	bf00      	nop
 8003508:	3730      	adds	r7, #48	; 0x30
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000464 	.word	0x20000464

08003514 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08c      	sub	sp, #48	; 0x30
 8003518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800351a:	f107 030c 	add.w	r3, r7, #12
 800351e:	2224      	movs	r2, #36	; 0x24
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f004 fb16 	bl	8007b54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003528:	1d3b      	adds	r3, r7, #4
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003530:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <MX_TIM3_Init+0xa0>)
 8003532:	4a21      	ldr	r2, [pc, #132]	; (80035b8 <MX_TIM3_Init+0xa4>)
 8003534:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003536:	4b1f      	ldr	r3, [pc, #124]	; (80035b4 <MX_TIM3_Init+0xa0>)
 8003538:	2200      	movs	r2, #0
 800353a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800353c:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <MX_TIM3_Init+0xa0>)
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003542:	4b1c      	ldr	r3, [pc, #112]	; (80035b4 <MX_TIM3_Init+0xa0>)
 8003544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003548:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800354a:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <MX_TIM3_Init+0xa0>)
 800354c:	2200      	movs	r2, #0
 800354e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003550:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <MX_TIM3_Init+0xa0>)
 8003552:	2200      	movs	r2, #0
 8003554:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003556:	2301      	movs	r3, #1
 8003558:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800355e:	2301      	movs	r3, #1
 8003560:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003562:	2300      	movs	r3, #0
 8003564:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800356a:	2300      	movs	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800356e:	2301      	movs	r3, #1
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003572:	2300      	movs	r3, #0
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800357a:	f107 030c 	add.w	r3, r7, #12
 800357e:	4619      	mov	r1, r3
 8003580:	480c      	ldr	r0, [pc, #48]	; (80035b4 <MX_TIM3_Init+0xa0>)
 8003582:	f002 fbaf 	bl	8005ce4 <HAL_TIM_Encoder_Init>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800358c:	f7ff fb44 	bl	8002c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003590:	2300      	movs	r3, #0
 8003592:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003594:	2300      	movs	r3, #0
 8003596:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003598:	1d3b      	adds	r3, r7, #4
 800359a:	4619      	mov	r1, r3
 800359c:	4805      	ldr	r0, [pc, #20]	; (80035b4 <MX_TIM3_Init+0xa0>)
 800359e:	f003 f947 	bl	8006830 <HAL_TIMEx_MasterConfigSynchronization>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80035a8:	f7ff fb36 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80035ac:	bf00      	nop
 80035ae:	3730      	adds	r7, #48	; 0x30
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	200004ac 	.word	0x200004ac
 80035b8:	40000400 	.word	0x40000400

080035bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	; 0x28
 80035c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035c2:	f107 0320 	add.w	r3, r7, #32
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	60da      	str	r2, [r3, #12]
 80035d8:	611a      	str	r2, [r3, #16]
 80035da:	615a      	str	r2, [r3, #20]
 80035dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80035de:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <MX_TIM4_Init+0xec>)
 80035e0:	4a32      	ldr	r2, [pc, #200]	; (80036ac <MX_TIM4_Init+0xf0>)
 80035e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80035e4:	4b30      	ldr	r3, [pc, #192]	; (80036a8 <MX_TIM4_Init+0xec>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ea:	4b2f      	ldr	r3, [pc, #188]	; (80036a8 <MX_TIM4_Init+0xec>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80035f0:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <MX_TIM4_Init+0xec>)
 80035f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035f8:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <MX_TIM4_Init+0xec>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035fe:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <MX_TIM4_Init+0xec>)
 8003600:	2200      	movs	r2, #0
 8003602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003604:	4828      	ldr	r0, [pc, #160]	; (80036a8 <MX_TIM4_Init+0xec>)
 8003606:	f002 fa55 	bl	8005ab4 <HAL_TIM_PWM_Init>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003610:	f7ff fb02 	bl	8002c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003614:	2300      	movs	r3, #0
 8003616:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003618:	2300      	movs	r3, #0
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800361c:	f107 0320 	add.w	r3, r7, #32
 8003620:	4619      	mov	r1, r3
 8003622:	4821      	ldr	r0, [pc, #132]	; (80036a8 <MX_TIM4_Init+0xec>)
 8003624:	f003 f904 	bl	8006830 <HAL_TIMEx_MasterConfigSynchronization>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800362e:	f7ff faf3 	bl	8002c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003632:	2360      	movs	r3, #96	; 0x60
 8003634:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	2200      	movs	r2, #0
 8003646:	4619      	mov	r1, r3
 8003648:	4817      	ldr	r0, [pc, #92]	; (80036a8 <MX_TIM4_Init+0xec>)
 800364a:	f002 fd87 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003654:	f7ff fae0 	bl	8002c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003658:	1d3b      	adds	r3, r7, #4
 800365a:	2204      	movs	r2, #4
 800365c:	4619      	mov	r1, r3
 800365e:	4812      	ldr	r0, [pc, #72]	; (80036a8 <MX_TIM4_Init+0xec>)
 8003660:	f002 fd7c 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800366a:	f7ff fad5 	bl	8002c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	2208      	movs	r2, #8
 8003672:	4619      	mov	r1, r3
 8003674:	480c      	ldr	r0, [pc, #48]	; (80036a8 <MX_TIM4_Init+0xec>)
 8003676:	f002 fd71 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8003680:	f7ff faca 	bl	8002c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	220c      	movs	r2, #12
 8003688:	4619      	mov	r1, r3
 800368a:	4807      	ldr	r0, [pc, #28]	; (80036a8 <MX_TIM4_Init+0xec>)
 800368c:	f002 fd66 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8003696:	f7ff fabf 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800369a:	4803      	ldr	r0, [pc, #12]	; (80036a8 <MX_TIM4_Init+0xec>)
 800369c:	f000 fbfc 	bl	8003e98 <HAL_TIM_MspPostInit>

}
 80036a0:	bf00      	nop
 80036a2:	3728      	adds	r7, #40	; 0x28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	200004f4 	.word	0x200004f4
 80036ac:	40000800 	.word	0x40000800

080036b0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08c      	sub	sp, #48	; 0x30
 80036b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036b6:	f107 030c 	add.w	r3, r7, #12
 80036ba:	2224      	movs	r2, #36	; 0x24
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f004 fa48 	bl	8007b54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80036cc:	4b20      	ldr	r3, [pc, #128]	; (8003750 <MX_TIM5_Init+0xa0>)
 80036ce:	4a21      	ldr	r2, [pc, #132]	; (8003754 <MX_TIM5_Init+0xa4>)
 80036d0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80036d2:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <MX_TIM5_Init+0xa0>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <MX_TIM5_Init+0xa0>)
 80036da:	2200      	movs	r2, #0
 80036dc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80036de:	4b1c      	ldr	r3, [pc, #112]	; (8003750 <MX_TIM5_Init+0xa0>)
 80036e0:	f04f 32ff 	mov.w	r2, #4294967295
 80036e4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036e6:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <MX_TIM5_Init+0xa0>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ec:	4b18      	ldr	r3, [pc, #96]	; (8003750 <MX_TIM5_Init+0xa0>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80036f2:	2301      	movs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036fa:	2301      	movs	r3, #1
 80036fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003706:	2300      	movs	r3, #0
 8003708:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800370a:	2301      	movs	r3, #1
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800370e:	2300      	movs	r3, #0
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003716:	f107 030c 	add.w	r3, r7, #12
 800371a:	4619      	mov	r1, r3
 800371c:	480c      	ldr	r0, [pc, #48]	; (8003750 <MX_TIM5_Init+0xa0>)
 800371e:	f002 fae1 	bl	8005ce4 <HAL_TIM_Encoder_Init>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003728:	f7ff fa76 	bl	8002c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800372c:	2300      	movs	r3, #0
 800372e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003730:	2300      	movs	r3, #0
 8003732:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	4619      	mov	r1, r3
 8003738:	4805      	ldr	r0, [pc, #20]	; (8003750 <MX_TIM5_Init+0xa0>)
 800373a:	f003 f879 	bl	8006830 <HAL_TIMEx_MasterConfigSynchronization>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003744:	f7ff fa68 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003748:	bf00      	nop
 800374a:	3730      	adds	r7, #48	; 0x30
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	2000053c 	.word	0x2000053c
 8003754:	40000c00 	.word	0x40000c00

08003758 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800375e:	463b      	mov	r3, r7
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <MX_TIM6_Init+0x64>)
 8003768:	4a15      	ldr	r2, [pc, #84]	; (80037c0 <MX_TIM6_Init+0x68>)
 800376a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 21;
 800376c:	4b13      	ldr	r3, [pc, #76]	; (80037bc <MX_TIM6_Init+0x64>)
 800376e:	2215      	movs	r2, #21
 8003770:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <MX_TIM6_Init+0x64>)
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 39999;
 8003778:	4b10      	ldr	r3, [pc, #64]	; (80037bc <MX_TIM6_Init+0x64>)
 800377a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800377e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <MX_TIM6_Init+0x64>)
 8003782:	2200      	movs	r2, #0
 8003784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003786:	480d      	ldr	r0, [pc, #52]	; (80037bc <MX_TIM6_Init+0x64>)
 8003788:	f002 f8d4 	bl	8005934 <HAL_TIM_Base_Init>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003792:	f7ff fa41 	bl	8002c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003796:	2300      	movs	r3, #0
 8003798:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800379a:	2300      	movs	r3, #0
 800379c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800379e:	463b      	mov	r3, r7
 80037a0:	4619      	mov	r1, r3
 80037a2:	4806      	ldr	r0, [pc, #24]	; (80037bc <MX_TIM6_Init+0x64>)
 80037a4:	f003 f844 	bl	8006830 <HAL_TIMEx_MasterConfigSynchronization>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80037ae:	f7ff fa33 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000584 	.word	0x20000584
 80037c0:	40001000 	.word	0x40001000

080037c4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ca:	463b      	mov	r3, r7
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <MX_TIM7_Init+0x64>)
 80037d4:	4a15      	ldr	r2, [pc, #84]	; (800382c <MX_TIM7_Init+0x68>)
 80037d6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10;
 80037d8:	4b13      	ldr	r3, [pc, #76]	; (8003828 <MX_TIM7_Init+0x64>)
 80037da:	220a      	movs	r2, #10
 80037dc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <MX_TIM7_Init+0x64>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 80037e4:	4b10      	ldr	r3, [pc, #64]	; (8003828 <MX_TIM7_Init+0x64>)
 80037e6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80037ea:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ec:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <MX_TIM7_Init+0x64>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80037f2:	480d      	ldr	r0, [pc, #52]	; (8003828 <MX_TIM7_Init+0x64>)
 80037f4:	f002 f89e 	bl	8005934 <HAL_TIM_Base_Init>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80037fe:	f7ff fa0b 	bl	8002c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003806:	2300      	movs	r3, #0
 8003808:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800380a:	463b      	mov	r3, r7
 800380c:	4619      	mov	r1, r3
 800380e:	4806      	ldr	r0, [pc, #24]	; (8003828 <MX_TIM7_Init+0x64>)
 8003810:	f003 f80e 	bl	8006830 <HAL_TIMEx_MasterConfigSynchronization>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800381a:	f7ff f9fd 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	200005cc 	.word	0x200005cc
 800382c:	40001400 	.word	0x40001400

08003830 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08c      	sub	sp, #48	; 0x30
 8003834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003836:	f107 030c 	add.w	r3, r7, #12
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f004 f988 	bl	8007b54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003844:	1d3b      	adds	r3, r7, #4
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800384c:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <MX_TIM8_Init+0xa8>)
 800384e:	4a23      	ldr	r2, [pc, #140]	; (80038dc <MX_TIM8_Init+0xac>)
 8003850:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003852:	4b21      	ldr	r3, [pc, #132]	; (80038d8 <MX_TIM8_Init+0xa8>)
 8003854:	2200      	movs	r2, #0
 8003856:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003858:	4b1f      	ldr	r3, [pc, #124]	; (80038d8 <MX_TIM8_Init+0xa8>)
 800385a:	2200      	movs	r2, #0
 800385c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800385e:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <MX_TIM8_Init+0xa8>)
 8003860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003864:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003866:	4b1c      	ldr	r3, [pc, #112]	; (80038d8 <MX_TIM8_Init+0xa8>)
 8003868:	2200      	movs	r2, #0
 800386a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800386c:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <MX_TIM8_Init+0xa8>)
 800386e:	2200      	movs	r2, #0
 8003870:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003872:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <MX_TIM8_Init+0xa8>)
 8003874:	2200      	movs	r2, #0
 8003876:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003878:	2301      	movs	r3, #1
 800387a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003880:	2301      	movs	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003884:	2300      	movs	r3, #0
 8003886:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800388c:	2300      	movs	r3, #0
 800388e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003890:	2301      	movs	r3, #1
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003894:	2300      	movs	r3, #0
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	4619      	mov	r1, r3
 80038a2:	480d      	ldr	r0, [pc, #52]	; (80038d8 <MX_TIM8_Init+0xa8>)
 80038a4:	f002 fa1e 	bl	8005ce4 <HAL_TIM_Encoder_Init>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80038ae:	f7ff f9b3 	bl	8002c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	4619      	mov	r1, r3
 80038be:	4806      	ldr	r0, [pc, #24]	; (80038d8 <MX_TIM8_Init+0xa8>)
 80038c0:	f002 ffb6 	bl	8006830 <HAL_TIMEx_MasterConfigSynchronization>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80038ca:	f7ff f9a5 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80038ce:	bf00      	nop
 80038d0:	3730      	adds	r7, #48	; 0x30
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000614 	.word	0x20000614
 80038dc:	40010400 	.word	0x40010400

080038e0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80038e6:	1d3b      	adds	r3, r7, #4
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]
 80038f4:	615a      	str	r2, [r3, #20]
 80038f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80038f8:	4b20      	ldr	r3, [pc, #128]	; (800397c <MX_TIM9_Init+0x9c>)
 80038fa:	4a21      	ldr	r2, [pc, #132]	; (8003980 <MX_TIM9_Init+0xa0>)
 80038fc:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 3359;
 80038fe:	4b1f      	ldr	r3, [pc, #124]	; (800397c <MX_TIM9_Init+0x9c>)
 8003900:	f640 521f 	movw	r2, #3359	; 0xd1f
 8003904:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003906:	4b1d      	ldr	r3, [pc, #116]	; (800397c <MX_TIM9_Init+0x9c>)
 8003908:	2200      	movs	r2, #0
 800390a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <MX_TIM9_Init+0x9c>)
 800390e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003912:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003914:	4b19      	ldr	r3, [pc, #100]	; (800397c <MX_TIM9_Init+0x9c>)
 8003916:	2200      	movs	r2, #0
 8003918:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800391a:	4b18      	ldr	r3, [pc, #96]	; (800397c <MX_TIM9_Init+0x9c>)
 800391c:	2200      	movs	r2, #0
 800391e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003920:	4816      	ldr	r0, [pc, #88]	; (800397c <MX_TIM9_Init+0x9c>)
 8003922:	f002 f8c7 	bl	8005ab4 <HAL_TIM_PWM_Init>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 800392c:	f7ff f974 	bl	8002c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003930:	2360      	movs	r3, #96	; 0x60
 8003932:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	2200      	movs	r2, #0
 8003944:	4619      	mov	r1, r3
 8003946:	480d      	ldr	r0, [pc, #52]	; (800397c <MX_TIM9_Init+0x9c>)
 8003948:	f002 fc08 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8003952:	f7ff f961 	bl	8002c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003956:	1d3b      	adds	r3, r7, #4
 8003958:	2204      	movs	r2, #4
 800395a:	4619      	mov	r1, r3
 800395c:	4807      	ldr	r0, [pc, #28]	; (800397c <MX_TIM9_Init+0x9c>)
 800395e:	f002 fbfd 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 8003968:	f7ff f956 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800396c:	4803      	ldr	r0, [pc, #12]	; (800397c <MX_TIM9_Init+0x9c>)
 800396e:	f000 fa93 	bl	8003e98 <HAL_TIM_MspPostInit>

}
 8003972:	bf00      	nop
 8003974:	3720      	adds	r7, #32
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	2000065c 	.word	0x2000065c
 8003980:	40014000 	.word	0x40014000

08003984 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <MX_TIM10_Init+0x40>)
 800398a:	4a0f      	ldr	r2, [pc, #60]	; (80039c8 <MX_TIM10_Init+0x44>)
 800398c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 90;
 800398e:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <MX_TIM10_Init+0x40>)
 8003990:	225a      	movs	r2, #90	; 0x5a
 8003992:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <MX_TIM10_Init+0x40>)
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 39999;
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <MX_TIM10_Init+0x40>)
 800399c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80039a0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a2:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <MX_TIM10_Init+0x40>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <MX_TIM10_Init+0x40>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80039ae:	4805      	ldr	r0, [pc, #20]	; (80039c4 <MX_TIM10_Init+0x40>)
 80039b0:	f001 ffc0 	bl	8005934 <HAL_TIM_Base_Init>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80039ba:	f7ff f92d 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	200006a4 	.word	0x200006a4
 80039c8:	40014400 	.word	0x40014400

080039cc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <MX_TIM11_Init+0x40>)
 80039d2:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <MX_TIM11_Init+0x44>)
 80039d4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 90;
 80039d6:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <MX_TIM11_Init+0x40>)
 80039d8:	225a      	movs	r2, #90	; 0x5a
 80039da:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <MX_TIM11_Init+0x40>)
 80039de:	2200      	movs	r2, #0
 80039e0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 39999;
 80039e2:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <MX_TIM11_Init+0x40>)
 80039e4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80039e8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <MX_TIM11_Init+0x40>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <MX_TIM11_Init+0x40>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80039f6:	4805      	ldr	r0, [pc, #20]	; (8003a0c <MX_TIM11_Init+0x40>)
 80039f8:	f001 ff9c 	bl	8005934 <HAL_TIM_Base_Init>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003a02:	f7ff f909 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	200006ec 	.word	0x200006ec
 8003a10:	40014800 	.word	0x40014800

08003a14 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a1a:	1d3b      	adds	r3, r7, #4
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	60da      	str	r2, [r3, #12]
 8003a26:	611a      	str	r2, [r3, #16]
 8003a28:	615a      	str	r2, [r3, #20]
 8003a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003a2c:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <MX_TIM12_Init+0x84>)
 8003a2e:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <MX_TIM12_Init+0x88>)
 8003a30:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003a32:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <MX_TIM12_Init+0x84>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a38:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <MX_TIM12_Init+0x84>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8003a3e:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <MX_TIM12_Init+0x84>)
 8003a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a44:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a46:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <MX_TIM12_Init+0x84>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a4c:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <MX_TIM12_Init+0x84>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003a52:	4811      	ldr	r0, [pc, #68]	; (8003a98 <MX_TIM12_Init+0x84>)
 8003a54:	f002 f82e 	bl	8005ab4 <HAL_TIM_PWM_Init>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8003a5e:	f7ff f8db 	bl	8002c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a62:	2360      	movs	r3, #96	; 0x60
 8003a64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a72:	1d3b      	adds	r3, r7, #4
 8003a74:	2200      	movs	r2, #0
 8003a76:	4619      	mov	r1, r3
 8003a78:	4807      	ldr	r0, [pc, #28]	; (8003a98 <MX_TIM12_Init+0x84>)
 8003a7a:	f002 fb6f 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8003a84:	f7ff f8c8 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8003a88:	4803      	ldr	r0, [pc, #12]	; (8003a98 <MX_TIM12_Init+0x84>)
 8003a8a:	f000 fa05 	bl	8003e98 <HAL_TIM_MspPostInit>

}
 8003a8e:	bf00      	nop
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000734 	.word	0x20000734
 8003a9c:	40001800 	.word	0x40001800

08003aa0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b092      	sub	sp, #72	; 0x48
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a8d      	ldr	r2, [pc, #564]	; (8003cf4 <HAL_TIM_Encoder_MspInit+0x254>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d12d      	bne.n	8003b1e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ac6:	4b8c      	ldr	r3, [pc, #560]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	4a8b      	ldr	r2, [pc, #556]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ad2:	4b89      	ldr	r3, [pc, #548]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	633b      	str	r3, [r7, #48]	; 0x30
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae2:	4b85      	ldr	r3, [pc, #532]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a84      	ldr	r2, [pc, #528]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003ae8:	f043 0310 	orr.w	r3, r3, #16
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b82      	ldr	r3, [pc, #520]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_4_A_Pin|ENC_4_B_Pin;
 8003afa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003afe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b00:	2302      	movs	r3, #2
 8003b02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b04:	2301      	movs	r3, #1
 8003b06:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b14:	4619      	mov	r1, r3
 8003b16:	4879      	ldr	r0, [pc, #484]	; (8003cfc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b18:	f001 f8a6 	bl	8004c68 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003b1c:	e0e5      	b.n	8003cea <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b26:	d14b      	bne.n	8003bc0 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b28:	2300      	movs	r3, #0
 8003b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b2c:	4b72      	ldr	r3, [pc, #456]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	4a71      	ldr	r2, [pc, #452]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	6413      	str	r3, [r2, #64]	; 0x40
 8003b38:	4b6f      	ldr	r3, [pc, #444]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b44:	2300      	movs	r3, #0
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
 8003b48:	4b6b      	ldr	r3, [pc, #428]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	4a6a      	ldr	r2, [pc, #424]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	6313      	str	r3, [r2, #48]	; 0x30
 8003b54:	4b68      	ldr	r3, [pc, #416]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b60:	2300      	movs	r3, #0
 8003b62:	623b      	str	r3, [r7, #32]
 8003b64:	4b64      	ldr	r3, [pc, #400]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	4a63      	ldr	r2, [pc, #396]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003b6a:	f043 0302 	orr.w	r3, r3, #2
 8003b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b70:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	623b      	str	r3, [r7, #32]
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = ENC_2_A_Pin;
 8003b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b82:	2302      	movs	r3, #2
 8003b84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b86:	2301      	movs	r3, #1
 8003b88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ENC_2_A_GPIO_Port, &GPIO_InitStruct);
 8003b92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b96:	4619      	mov	r1, r3
 8003b98:	4859      	ldr	r0, [pc, #356]	; (8003d00 <HAL_TIM_Encoder_MspInit+0x260>)
 8003b9a:	f001 f865 	bl	8004c68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_2_B_Pin;
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003baa:	2300      	movs	r3, #0
 8003bac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ENC_2_B_GPIO_Port, &GPIO_InitStruct);
 8003bb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4852      	ldr	r0, [pc, #328]	; (8003d04 <HAL_TIM_Encoder_MspInit+0x264>)
 8003bba:	f001 f855 	bl	8004c68 <HAL_GPIO_Init>
}
 8003bbe:	e094      	b.n	8003cea <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM3)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a50      	ldr	r2, [pc, #320]	; (8003d08 <HAL_TIM_Encoder_MspInit+0x268>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d12c      	bne.n	8003c24 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	4b4a      	ldr	r3, [pc, #296]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	4a49      	ldr	r2, [pc, #292]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003bd4:	f043 0302 	orr.w	r3, r3, #2
 8003bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bda:	4b47      	ldr	r3, [pc, #284]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	61fb      	str	r3, [r7, #28]
 8003be4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	4b43      	ldr	r3, [pc, #268]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	4a42      	ldr	r2, [pc, #264]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf6:	4b40      	ldr	r3, [pc, #256]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_3_A_Pin|ENC_3_B_Pin;
 8003c02:	23c0      	movs	r3, #192	; 0xc0
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c06:	2302      	movs	r3, #2
 8003c08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c12:	2302      	movs	r3, #2
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4838      	ldr	r0, [pc, #224]	; (8003d00 <HAL_TIM_Encoder_MspInit+0x260>)
 8003c1e:	f001 f823 	bl	8004c68 <HAL_GPIO_Init>
}
 8003c22:	e062      	b.n	8003cea <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM5)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a38      	ldr	r2, [pc, #224]	; (8003d0c <HAL_TIM_Encoder_MspInit+0x26c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d12c      	bne.n	8003c88 <HAL_TIM_Encoder_MspInit+0x1e8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	4a30      	ldr	r2, [pc, #192]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003c38:	f043 0308 	orr.w	r3, r3, #8
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3e:	4b2e      	ldr	r3, [pc, #184]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5a:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_5_A_Pin|ENC_5_B_Pin;
 8003c66:	2303      	movs	r3, #3
 8003c68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c72:	2300      	movs	r3, #0
 8003c74:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003c76:	2302      	movs	r3, #2
 8003c78:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c7e:	4619      	mov	r1, r3
 8003c80:	481f      	ldr	r0, [pc, #124]	; (8003d00 <HAL_TIM_Encoder_MspInit+0x260>)
 8003c82:	f000 fff1 	bl	8004c68 <HAL_GPIO_Init>
}
 8003c86:	e030      	b.n	8003cea <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM8)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a20      	ldr	r2, [pc, #128]	; (8003d10 <HAL_TIM_Encoder_MspInit+0x270>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d12b      	bne.n	8003cea <HAL_TIM_Encoder_MspInit+0x24a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ca2:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	4a10      	ldr	r2, [pc, #64]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003cb8:	f043 0304 	orr.w	r3, r3, #4
 8003cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	; (8003cf8 <HAL_TIM_Encoder_MspInit+0x258>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_1_A_Pin|ENC_1_B_Pin;
 8003cca:	23c0      	movs	r3, #192	; 0xc0
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	480b      	ldr	r0, [pc, #44]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x274>)
 8003ce6:	f000 ffbf 	bl	8004c68 <HAL_GPIO_Init>
}
 8003cea:	bf00      	nop
 8003cec:	3748      	adds	r7, #72	; 0x48
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40020000 	.word	0x40020000
 8003d04:	40020400 	.word	0x40020400
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	40000c00 	.word	0x40000c00
 8003d10:	40010400 	.word	0x40010400
 8003d14:	40020800 	.word	0x40020800

08003d18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a1f      	ldr	r2, [pc, #124]	; (8003da4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d10e      	bne.n	8003d48 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <HAL_TIM_PWM_MspInit+0x90>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <HAL_TIM_PWM_MspInit+0x90>)
 8003d34:	f043 0304 	orr.w	r3, r3, #4
 8003d38:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <HAL_TIM_PWM_MspInit+0x90>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003d46:	e026      	b.n	8003d96 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM9)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a17      	ldr	r2, [pc, #92]	; (8003dac <HAL_TIM_PWM_MspInit+0x94>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d10e      	bne.n	8003d70 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <HAL_TIM_PWM_MspInit+0x90>)
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	4a13      	ldr	r2, [pc, #76]	; (8003da8 <HAL_TIM_PWM_MspInit+0x90>)
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d60:	6453      	str	r3, [r2, #68]	; 0x44
 8003d62:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <HAL_TIM_PWM_MspInit+0x90>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]
}
 8003d6e:	e012      	b.n	8003d96 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a0e      	ldr	r2, [pc, #56]	; (8003db0 <HAL_TIM_PWM_MspInit+0x98>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d10d      	bne.n	8003d96 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_TIM_PWM_MspInit+0x90>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4a09      	ldr	r2, [pc, #36]	; (8003da8 <HAL_TIM_PWM_MspInit+0x90>)
 8003d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d88:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8a:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_TIM_PWM_MspInit+0x90>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40000800 	.word	0x40000800
 8003da8:	40023800 	.word	0x40023800
 8003dac:	40014000 	.word	0x40014000
 8003db0:	40001800 	.word	0x40001800

08003db4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a30      	ldr	r2, [pc, #192]	; (8003e84 <HAL_TIM_Base_MspInit+0xd0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d116      	bne.n	8003df4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <HAL_TIM_Base_MspInit+0xd4>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	4a2e      	ldr	r2, [pc, #184]	; (8003e88 <HAL_TIM_Base_MspInit+0xd4>)
 8003dd0:	f043 0310 	orr.w	r3, r3, #16
 8003dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd6:	4b2c      	ldr	r3, [pc, #176]	; (8003e88 <HAL_TIM_Base_MspInit+0xd4>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f003 0310 	and.w	r3, r3, #16
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003de2:	2200      	movs	r2, #0
 8003de4:	2100      	movs	r1, #0
 8003de6:	2036      	movs	r0, #54	; 0x36
 8003de8:	f000 fb05 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003dec:	2036      	movs	r0, #54	; 0x36
 8003dee:	f000 fb1e 	bl	800442e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003df2:	e042      	b.n	8003e7a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a24      	ldr	r2, [pc, #144]	; (8003e8c <HAL_TIM_Base_MspInit+0xd8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d116      	bne.n	8003e2c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <HAL_TIM_Base_MspInit+0xd4>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	4a20      	ldr	r2, [pc, #128]	; (8003e88 <HAL_TIM_Base_MspInit+0xd4>)
 8003e08:	f043 0320 	orr.w	r3, r3, #32
 8003e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0e:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <HAL_TIM_Base_MspInit+0xd4>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 1);
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	2037      	movs	r0, #55	; 0x37
 8003e20:	f000 fae9 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e24:	2037      	movs	r0, #55	; 0x37
 8003e26:	f000 fb02 	bl	800442e <HAL_NVIC_EnableIRQ>
}
 8003e2a:	e026      	b.n	8003e7a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM10)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <HAL_TIM_Base_MspInit+0xdc>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d10e      	bne.n	8003e54 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <HAL_TIM_Base_MspInit+0xd4>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <HAL_TIM_Base_MspInit+0xd4>)
 8003e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e44:	6453      	str	r3, [r2, #68]	; 0x44
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <HAL_TIM_Base_MspInit+0xd4>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
}
 8003e52:	e012      	b.n	8003e7a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM11)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <HAL_TIM_Base_MspInit+0xe0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d10d      	bne.n	8003e7a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_TIM_Base_MspInit+0xd4>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	4a08      	ldr	r2, [pc, #32]	; (8003e88 <HAL_TIM_Base_MspInit+0xd4>)
 8003e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_TIM_Base_MspInit+0xd4>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	68bb      	ldr	r3, [r7, #8]
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40001000 	.word	0x40001000
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40001400 	.word	0x40001400
 8003e90:	40014400 	.word	0x40014400
 8003e94:	40014800 	.word	0x40014800

08003e98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	; 0x28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea0:	f107 0314 	add.w	r3, r7, #20
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	60da      	str	r2, [r3, #12]
 8003eae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a37      	ldr	r2, [pc, #220]	; (8003f94 <HAL_TIM_MspPostInit+0xfc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d11f      	bne.n	8003efa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	4b36      	ldr	r3, [pc, #216]	; (8003f98 <HAL_TIM_MspPostInit+0x100>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	4a35      	ldr	r2, [pc, #212]	; (8003f98 <HAL_TIM_MspPostInit+0x100>)
 8003ec4:	f043 0308 	orr.w	r3, r3, #8
 8003ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eca:	4b33      	ldr	r3, [pc, #204]	; (8003f98 <HAL_TIM_MspPostInit+0x100>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = pwm1_MT_Pin|pwm2_MT_Pin|pwm3_MT_Pin|pwm4_MT_Pin;
 8003ed6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003edc:	2302      	movs	r3, #2
 8003ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003eec:	f107 0314 	add.w	r3, r7, #20
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	482a      	ldr	r0, [pc, #168]	; (8003f9c <HAL_TIM_MspPostInit+0x104>)
 8003ef4:	f000 feb8 	bl	8004c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003ef8:	e047      	b.n	8003f8a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM9)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a28      	ldr	r2, [pc, #160]	; (8003fa0 <HAL_TIM_MspPostInit+0x108>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d11e      	bne.n	8003f42 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	4b23      	ldr	r3, [pc, #140]	; (8003f98 <HAL_TIM_MspPostInit+0x100>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	4a22      	ldr	r2, [pc, #136]	; (8003f98 <HAL_TIM_MspPostInit+0x100>)
 8003f0e:	f043 0310 	orr.w	r3, r3, #16
 8003f12:	6313      	str	r3, [r2, #48]	; 0x30
 8003f14:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <HAL_TIM_MspPostInit+0x100>)
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = servo_2_Pin|servo_1_Pin;
 8003f20:	2360      	movs	r3, #96	; 0x60
 8003f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f24:	2302      	movs	r3, #2
 8003f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003f30:	2303      	movs	r3, #3
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	4619      	mov	r1, r3
 8003f3a:	481a      	ldr	r0, [pc, #104]	; (8003fa4 <HAL_TIM_MspPostInit+0x10c>)
 8003f3c:	f000 fe94 	bl	8004c68 <HAL_GPIO_Init>
}
 8003f40:	e023      	b.n	8003f8a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM12)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <HAL_TIM_MspPostInit+0x110>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d11e      	bne.n	8003f8a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <HAL_TIM_MspPostInit+0x100>)
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	4a10      	ldr	r2, [pc, #64]	; (8003f98 <HAL_TIM_MspPostInit+0x100>)
 8003f56:	f043 0302 	orr.w	r3, r3, #2
 8003f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <HAL_TIM_MspPostInit+0x100>)
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = pwm5_MT_Pin;
 8003f68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f76:	2300      	movs	r3, #0
 8003f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003f7a:	2309      	movs	r3, #9
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(pwm5_MT_GPIO_Port, &GPIO_InitStruct);
 8003f7e:	f107 0314 	add.w	r3, r7, #20
 8003f82:	4619      	mov	r1, r3
 8003f84:	4809      	ldr	r0, [pc, #36]	; (8003fac <HAL_TIM_MspPostInit+0x114>)
 8003f86:	f000 fe6f 	bl	8004c68 <HAL_GPIO_Init>
}
 8003f8a:	bf00      	nop
 8003f8c:	3728      	adds	r7, #40	; 0x28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40000800 	.word	0x40000800
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40020c00 	.word	0x40020c00
 8003fa0:	40014000 	.word	0x40014000
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40001800 	.word	0x40001800
 8003fac:	40020400 	.word	0x40020400

08003fb0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fb4:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <MX_USART1_UART_Init+0x4c>)
 8003fb6:	4a12      	ldr	r2, [pc, #72]	; (8004000 <MX_USART1_UART_Init+0x50>)
 8003fb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <MX_USART1_UART_Init+0x4c>)
 8003fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <MX_USART1_UART_Init+0x4c>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fc8:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <MX_USART1_UART_Init+0x4c>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fce:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <MX_USART1_UART_Init+0x4c>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fd4:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <MX_USART1_UART_Init+0x4c>)
 8003fd6:	220c      	movs	r2, #12
 8003fd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fda:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <MX_USART1_UART_Init+0x4c>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <MX_USART1_UART_Init+0x4c>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fe6:	4805      	ldr	r0, [pc, #20]	; (8003ffc <MX_USART1_UART_Init+0x4c>)
 8003fe8:	f002 fcb2 	bl	8006950 <HAL_UART_Init>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003ff2:	f7fe fe11 	bl	8002c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ff6:	bf00      	nop
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	2000077c 	.word	0x2000077c
 8004000:	40011000 	.word	0x40011000

08004004 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800400c:	f107 0314 	add.w	r3, r7, #20
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	605a      	str	r2, [r3, #4]
 8004016:	609a      	str	r2, [r3, #8]
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a34      	ldr	r2, [pc, #208]	; (80040f4 <HAL_UART_MspInit+0xf0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d162      	bne.n	80040ec <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	4b33      	ldr	r3, [pc, #204]	; (80040f8 <HAL_UART_MspInit+0xf4>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	4a32      	ldr	r2, [pc, #200]	; (80040f8 <HAL_UART_MspInit+0xf4>)
 8004030:	f043 0310 	orr.w	r3, r3, #16
 8004034:	6453      	str	r3, [r2, #68]	; 0x44
 8004036:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <HAL_UART_MspInit+0xf4>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	4b2c      	ldr	r3, [pc, #176]	; (80040f8 <HAL_UART_MspInit+0xf4>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	4a2b      	ldr	r2, [pc, #172]	; (80040f8 <HAL_UART_MspInit+0xf4>)
 800404c:	f043 0302 	orr.w	r3, r3, #2
 8004050:	6313      	str	r3, [r2, #48]	; 0x30
 8004052:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <HAL_UART_MspInit+0xf4>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800405e:	23c0      	movs	r3, #192	; 0xc0
 8004060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004062:	2302      	movs	r3, #2
 8004064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800406a:	2303      	movs	r3, #3
 800406c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800406e:	2307      	movs	r3, #7
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004072:	f107 0314 	add.w	r3, r7, #20
 8004076:	4619      	mov	r1, r3
 8004078:	4820      	ldr	r0, [pc, #128]	; (80040fc <HAL_UART_MspInit+0xf8>)
 800407a:	f000 fdf5 	bl	8004c68 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800407e:	4b20      	ldr	r3, [pc, #128]	; (8004100 <HAL_UART_MspInit+0xfc>)
 8004080:	4a20      	ldr	r2, [pc, #128]	; (8004104 <HAL_UART_MspInit+0x100>)
 8004082:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004084:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <HAL_UART_MspInit+0xfc>)
 8004086:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800408a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800408c:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <HAL_UART_MspInit+0xfc>)
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004092:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <HAL_UART_MspInit+0xfc>)
 8004094:	2200      	movs	r2, #0
 8004096:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004098:	4b19      	ldr	r3, [pc, #100]	; (8004100 <HAL_UART_MspInit+0xfc>)
 800409a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800409e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040a0:	4b17      	ldr	r3, [pc, #92]	; (8004100 <HAL_UART_MspInit+0xfc>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <HAL_UART_MspInit+0xfc>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80040ac:	4b14      	ldr	r3, [pc, #80]	; (8004100 <HAL_UART_MspInit+0xfc>)
 80040ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040b2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040b4:	4b12      	ldr	r3, [pc, #72]	; (8004100 <HAL_UART_MspInit+0xfc>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <HAL_UART_MspInit+0xfc>)
 80040bc:	2200      	movs	r2, #0
 80040be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80040c0:	480f      	ldr	r0, [pc, #60]	; (8004100 <HAL_UART_MspInit+0xfc>)
 80040c2:	f000 f9cf 	bl	8004464 <HAL_DMA_Init>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80040cc:	f7fe fda4 	bl	8002c18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a0b      	ldr	r2, [pc, #44]	; (8004100 <HAL_UART_MspInit+0xfc>)
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38
 80040d6:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <HAL_UART_MspInit+0xfc>)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80040dc:	2200      	movs	r2, #0
 80040de:	2100      	movs	r1, #0
 80040e0:	2025      	movs	r0, #37	; 0x25
 80040e2:	f000 f988 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80040e6:	2025      	movs	r0, #37	; 0x25
 80040e8:	f000 f9a1 	bl	800442e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80040ec:	bf00      	nop
 80040ee:	3728      	adds	r7, #40	; 0x28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40011000 	.word	0x40011000
 80040f8:	40023800 	.word	0x40023800
 80040fc:	40020400 	.word	0x40020400
 8004100:	200007c0 	.word	0x200007c0
 8004104:	40026440 	.word	0x40026440

08004108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004140 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800410c:	480d      	ldr	r0, [pc, #52]	; (8004144 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800410e:	490e      	ldr	r1, [pc, #56]	; (8004148 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004110:	4a0e      	ldr	r2, [pc, #56]	; (800414c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004114:	e002      	b.n	800411c <LoopCopyDataInit>

08004116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800411a:	3304      	adds	r3, #4

0800411c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800411c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800411e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004120:	d3f9      	bcc.n	8004116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004122:	4a0b      	ldr	r2, [pc, #44]	; (8004150 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004124:	4c0b      	ldr	r4, [pc, #44]	; (8004154 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004128:	e001      	b.n	800412e <LoopFillZerobss>

0800412a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800412a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800412c:	3204      	adds	r2, #4

0800412e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800412e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004130:	d3fb      	bcc.n	800412a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004132:	f7ff f931 	bl	8003398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004136:	f003 fd1b 	bl	8007b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800413a:	f7fe fc0b 	bl	8002954 <main>
  bx  lr    
 800413e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004148:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 800414c:	08008f68 	.word	0x08008f68
  ldr r2, =_sbss
 8004150:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8004154:	2000095c 	.word	0x2000095c

08004158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004158:	e7fe      	b.n	8004158 <ADC_IRQHandler>
	...

0800415c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004160:	4b0e      	ldr	r3, [pc, #56]	; (800419c <HAL_Init+0x40>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a0d      	ldr	r2, [pc, #52]	; (800419c <HAL_Init+0x40>)
 8004166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800416a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800416c:	4b0b      	ldr	r3, [pc, #44]	; (800419c <HAL_Init+0x40>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a0a      	ldr	r2, [pc, #40]	; (800419c <HAL_Init+0x40>)
 8004172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004178:	4b08      	ldr	r3, [pc, #32]	; (800419c <HAL_Init+0x40>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a07      	ldr	r2, [pc, #28]	; (800419c <HAL_Init+0x40>)
 800417e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004184:	2003      	movs	r0, #3
 8004186:	f000 f92b 	bl	80043e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800418a:	2000      	movs	r0, #0
 800418c:	f000 f808 	bl	80041a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004190:	f7fe fd48 	bl	8002c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40023c00 	.word	0x40023c00

080041a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041a8:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <HAL_InitTick+0x54>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <HAL_InitTick+0x58>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	4619      	mov	r1, r3
 80041b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f943 	bl	800444a <HAL_SYSTICK_Config>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e00e      	b.n	80041ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b0f      	cmp	r3, #15
 80041d2:	d80a      	bhi.n	80041ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041d4:	2200      	movs	r2, #0
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295
 80041dc:	f000 f90b 	bl	80043f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041e0:	4a06      	ldr	r2, [pc, #24]	; (80041fc <HAL_InitTick+0x5c>)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e000      	b.n	80041ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000070 	.word	0x20000070
 80041f8:	20000078 	.word	0x20000078
 80041fc:	20000074 	.word	0x20000074

08004200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_IncTick+0x20>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_IncTick+0x24>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4413      	add	r3, r2
 8004210:	4a04      	ldr	r2, [pc, #16]	; (8004224 <HAL_IncTick+0x24>)
 8004212:	6013      	str	r3, [r2, #0]
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000078 	.word	0x20000078
 8004224:	20000820 	.word	0x20000820

08004228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return uwTick;
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <HAL_GetTick+0x14>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000820 	.word	0x20000820

08004240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <__NVIC_SetPriorityGrouping+0x44>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800425c:	4013      	ands	r3, r2
 800425e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800426c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004272:	4a04      	ldr	r2, [pc, #16]	; (8004284 <__NVIC_SetPriorityGrouping+0x44>)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	60d3      	str	r3, [r2, #12]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <__NVIC_GetPriorityGrouping+0x18>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	0a1b      	lsrs	r3, r3, #8
 8004292:	f003 0307 	and.w	r3, r3, #7
}
 8004296:	4618      	mov	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4603      	mov	r3, r0
 80042ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	db0b      	blt.n	80042ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	f003 021f 	and.w	r2, r3, #31
 80042bc:	4907      	ldr	r1, [pc, #28]	; (80042dc <__NVIC_EnableIRQ+0x38>)
 80042be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	2001      	movs	r0, #1
 80042c6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	e000e100 	.word	0xe000e100

080042e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	6039      	str	r1, [r7, #0]
 80042ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	db0a      	blt.n	800430a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	490c      	ldr	r1, [pc, #48]	; (800432c <__NVIC_SetPriority+0x4c>)
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	0112      	lsls	r2, r2, #4
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	440b      	add	r3, r1
 8004304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004308:	e00a      	b.n	8004320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	4908      	ldr	r1, [pc, #32]	; (8004330 <__NVIC_SetPriority+0x50>)
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	3b04      	subs	r3, #4
 8004318:	0112      	lsls	r2, r2, #4
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	440b      	add	r3, r1
 800431e:	761a      	strb	r2, [r3, #24]
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	e000e100 	.word	0xe000e100
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004334:	b480      	push	{r7}
 8004336:	b089      	sub	sp, #36	; 0x24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f1c3 0307 	rsb	r3, r3, #7
 800434e:	2b04      	cmp	r3, #4
 8004350:	bf28      	it	cs
 8004352:	2304      	movcs	r3, #4
 8004354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	3304      	adds	r3, #4
 800435a:	2b06      	cmp	r3, #6
 800435c:	d902      	bls.n	8004364 <NVIC_EncodePriority+0x30>
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3b03      	subs	r3, #3
 8004362:	e000      	b.n	8004366 <NVIC_EncodePriority+0x32>
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004368:	f04f 32ff 	mov.w	r2, #4294967295
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43da      	mvns	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	401a      	ands	r2, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800437c:	f04f 31ff 	mov.w	r1, #4294967295
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	fa01 f303 	lsl.w	r3, r1, r3
 8004386:	43d9      	mvns	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800438c:	4313      	orrs	r3, r2
         );
}
 800438e:	4618      	mov	r0, r3
 8004390:	3724      	adds	r7, #36	; 0x24
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043ac:	d301      	bcc.n	80043b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ae:	2301      	movs	r3, #1
 80043b0:	e00f      	b.n	80043d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043b2:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <SysTick_Config+0x40>)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ba:	210f      	movs	r1, #15
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295
 80043c0:	f7ff ff8e 	bl	80042e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <SysTick_Config+0x40>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ca:	4b04      	ldr	r3, [pc, #16]	; (80043dc <SysTick_Config+0x40>)
 80043cc:	2207      	movs	r2, #7
 80043ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	e000e010 	.word	0xe000e010

080043e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ff29 	bl	8004240 <__NVIC_SetPriorityGrouping>
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b086      	sub	sp, #24
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	4603      	mov	r3, r0
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004408:	f7ff ff3e 	bl	8004288 <__NVIC_GetPriorityGrouping>
 800440c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68b9      	ldr	r1, [r7, #8]
 8004412:	6978      	ldr	r0, [r7, #20]
 8004414:	f7ff ff8e 	bl	8004334 <NVIC_EncodePriority>
 8004418:	4602      	mov	r2, r0
 800441a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff ff5d 	bl	80042e0 <__NVIC_SetPriority>
}
 8004426:	bf00      	nop
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b082      	sub	sp, #8
 8004432:	af00      	add	r7, sp, #0
 8004434:	4603      	mov	r3, r0
 8004436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff ff31 	bl	80042a4 <__NVIC_EnableIRQ>
}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff ffa2 	bl	800439c <SysTick_Config>
 8004458:	4603      	mov	r3, r0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004470:	f7ff feda 	bl	8004228 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e099      	b.n	80045b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044a0:	e00f      	b.n	80044c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044a2:	f7ff fec1 	bl	8004228 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b05      	cmp	r3, #5
 80044ae:	d908      	bls.n	80044c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2203      	movs	r2, #3
 80044ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e078      	b.n	80045b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e8      	bne.n	80044a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4b38      	ldr	r3, [pc, #224]	; (80045bc <HAL_DMA_Init+0x158>)
 80044dc:	4013      	ands	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004506:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	2b04      	cmp	r3, #4
 800451a:	d107      	bne.n	800452c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004524:	4313      	orrs	r3, r2
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f023 0307 	bic.w	r3, r3, #7
 8004542:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	2b04      	cmp	r3, #4
 8004554:	d117      	bne.n	8004586 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00e      	beq.n	8004586 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fb01 	bl	8004b70 <DMA_CheckFifoParam>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2240      	movs	r2, #64	; 0x40
 8004578:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004582:	2301      	movs	r3, #1
 8004584:	e016      	b.n	80045b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fab8 	bl	8004b04 <DMA_CalcBaseAndBitshift>
 8004594:	4603      	mov	r3, r0
 8004596:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459c:	223f      	movs	r2, #63	; 0x3f
 800459e:	409a      	lsls	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	f010803f 	.word	0xf010803f

080045c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <HAL_DMA_Start_IT+0x26>
 80045e2:	2302      	movs	r3, #2
 80045e4:	e040      	b.n	8004668 <HAL_DMA_Start_IT+0xa8>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d12f      	bne.n	800465a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fa4a 	bl	8004aa8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004618:	223f      	movs	r2, #63	; 0x3f
 800461a:	409a      	lsls	r2, r3
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0216 	orr.w	r2, r2, #22
 800462e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0208 	orr.w	r2, r2, #8
 8004646:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	e005      	b.n	8004666 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004662:	2302      	movs	r3, #2
 8004664:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004666:	7dfb      	ldrb	r3, [r7, #23]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800467e:	f7ff fdd3 	bl	8004228 <HAL_GetTick>
 8004682:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d008      	beq.n	80046a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e052      	b.n	8004748 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0216 	bic.w	r2, r2, #22
 80046b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d103      	bne.n	80046d2 <HAL_DMA_Abort+0x62>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0208 	bic.w	r2, r2, #8
 80046e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046f2:	e013      	b.n	800471c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046f4:	f7ff fd98 	bl	8004228 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b05      	cmp	r3, #5
 8004700:	d90c      	bls.n	800471c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2203      	movs	r2, #3
 800470c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e015      	b.n	8004748 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e4      	bne.n	80046f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472e:	223f      	movs	r2, #63	; 0x3f
 8004730:	409a      	lsls	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d004      	beq.n	800476e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2280      	movs	r2, #128	; 0x80
 8004768:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e00c      	b.n	8004788 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2205      	movs	r2, #5
 8004772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047a0:	4b8e      	ldr	r3, [pc, #568]	; (80049dc <HAL_DMA_IRQHandler+0x248>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a8e      	ldr	r2, [pc, #568]	; (80049e0 <HAL_DMA_IRQHandler+0x24c>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	0a9b      	lsrs	r3, r3, #10
 80047ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	2208      	movs	r2, #8
 80047c0:	409a      	lsls	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01a      	beq.n	8004800 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d013      	beq.n	8004800 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0204 	bic.w	r2, r2, #4
 80047e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ec:	2208      	movs	r2, #8
 80047ee:	409a      	lsls	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f8:	f043 0201 	orr.w	r2, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004804:	2201      	movs	r2, #1
 8004806:	409a      	lsls	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d012      	beq.n	8004836 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00b      	beq.n	8004836 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004822:	2201      	movs	r2, #1
 8004824:	409a      	lsls	r2, r3
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	f043 0202 	orr.w	r2, r3, #2
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483a:	2204      	movs	r2, #4
 800483c:	409a      	lsls	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d012      	beq.n	800486c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004858:	2204      	movs	r2, #4
 800485a:	409a      	lsls	r2, r3
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	f043 0204 	orr.w	r2, r3, #4
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004870:	2210      	movs	r2, #16
 8004872:	409a      	lsls	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4013      	ands	r3, r2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d043      	beq.n	8004904 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d03c      	beq.n	8004904 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488e:	2210      	movs	r2, #16
 8004890:	409a      	lsls	r2, r3
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d018      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d108      	bne.n	80048c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d024      	beq.n	8004904 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	4798      	blx	r3
 80048c2:	e01f      	b.n	8004904 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01b      	beq.n	8004904 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	4798      	blx	r3
 80048d4:	e016      	b.n	8004904 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d107      	bne.n	80048f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0208 	bic.w	r2, r2, #8
 80048f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004908:	2220      	movs	r2, #32
 800490a:	409a      	lsls	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 808f 	beq.w	8004a34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8087 	beq.w	8004a34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492a:	2220      	movs	r2, #32
 800492c:	409a      	lsls	r2, r3
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b05      	cmp	r3, #5
 800493c:	d136      	bne.n	80049ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0216 	bic.w	r2, r2, #22
 800494c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695a      	ldr	r2, [r3, #20]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800495c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	2b00      	cmp	r3, #0
 8004964:	d103      	bne.n	800496e <HAL_DMA_IRQHandler+0x1da>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0208 	bic.w	r2, r2, #8
 800497c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004982:	223f      	movs	r2, #63	; 0x3f
 8004984:	409a      	lsls	r2, r3
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d07e      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	4798      	blx	r3
        }
        return;
 80049aa:	e079      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01d      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10d      	bne.n	80049e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d031      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	4798      	blx	r3
 80049d8:	e02c      	b.n	8004a34 <HAL_DMA_IRQHandler+0x2a0>
 80049da:	bf00      	nop
 80049dc:	20000070 	.word	0x20000070
 80049e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d023      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	4798      	blx	r3
 80049f4:	e01e      	b.n	8004a34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10f      	bne.n	8004a24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0210 	bic.w	r2, r2, #16
 8004a12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d032      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d022      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2205      	movs	r2, #5
 8004a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	3301      	adds	r3, #1
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d307      	bcc.n	8004a7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f2      	bne.n	8004a60 <HAL_DMA_IRQHandler+0x2cc>
 8004a7a:	e000      	b.n	8004a7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	4798      	blx	r3
 8004a9e:	e000      	b.n	8004aa2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004aa0:	bf00      	nop
    }
  }
}
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ac4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d108      	bne.n	8004ae8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ae6:	e007      	b.n	8004af8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	60da      	str	r2, [r3, #12]
}
 8004af8:	bf00      	nop
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	3b10      	subs	r3, #16
 8004b14:	4a14      	ldr	r2, [pc, #80]	; (8004b68 <DMA_CalcBaseAndBitshift+0x64>)
 8004b16:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1a:	091b      	lsrs	r3, r3, #4
 8004b1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b1e:	4a13      	ldr	r2, [pc, #76]	; (8004b6c <DMA_CalcBaseAndBitshift+0x68>)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d909      	bls.n	8004b46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b3a:	f023 0303 	bic.w	r3, r3, #3
 8004b3e:	1d1a      	adds	r2, r3, #4
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	659a      	str	r2, [r3, #88]	; 0x58
 8004b44:	e007      	b.n	8004b56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	aaaaaaab 	.word	0xaaaaaaab
 8004b6c:	08008d78 	.word	0x08008d78

08004b70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d11f      	bne.n	8004bca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d856      	bhi.n	8004c3e <DMA_CheckFifoParam+0xce>
 8004b90:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <DMA_CheckFifoParam+0x28>)
 8004b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b96:	bf00      	nop
 8004b98:	08004ba9 	.word	0x08004ba9
 8004b9c:	08004bbb 	.word	0x08004bbb
 8004ba0:	08004ba9 	.word	0x08004ba9
 8004ba4:	08004c3f 	.word	0x08004c3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d046      	beq.n	8004c42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bb8:	e043      	b.n	8004c42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bc2:	d140      	bne.n	8004c46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bc8:	e03d      	b.n	8004c46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd2:	d121      	bne.n	8004c18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d837      	bhi.n	8004c4a <DMA_CheckFifoParam+0xda>
 8004bda:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <DMA_CheckFifoParam+0x70>)
 8004bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be0:	08004bf1 	.word	0x08004bf1
 8004be4:	08004bf7 	.word	0x08004bf7
 8004be8:	08004bf1 	.word	0x08004bf1
 8004bec:	08004c09 	.word	0x08004c09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf4:	e030      	b.n	8004c58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d025      	beq.n	8004c4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c06:	e022      	b.n	8004c4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c10:	d11f      	bne.n	8004c52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c16:	e01c      	b.n	8004c52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d903      	bls.n	8004c26 <DMA_CheckFifoParam+0xb6>
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b03      	cmp	r3, #3
 8004c22:	d003      	beq.n	8004c2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c24:	e018      	b.n	8004c58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
      break;
 8004c2a:	e015      	b.n	8004c58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00e      	beq.n	8004c56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3c:	e00b      	b.n	8004c56 <DMA_CheckFifoParam+0xe6>
      break;
 8004c3e:	bf00      	nop
 8004c40:	e00a      	b.n	8004c58 <DMA_CheckFifoParam+0xe8>
      break;
 8004c42:	bf00      	nop
 8004c44:	e008      	b.n	8004c58 <DMA_CheckFifoParam+0xe8>
      break;
 8004c46:	bf00      	nop
 8004c48:	e006      	b.n	8004c58 <DMA_CheckFifoParam+0xe8>
      break;
 8004c4a:	bf00      	nop
 8004c4c:	e004      	b.n	8004c58 <DMA_CheckFifoParam+0xe8>
      break;
 8004c4e:	bf00      	nop
 8004c50:	e002      	b.n	8004c58 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c52:	bf00      	nop
 8004c54:	e000      	b.n	8004c58 <DMA_CheckFifoParam+0xe8>
      break;
 8004c56:	bf00      	nop
    }
  } 
  
  return status; 
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop

08004c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b089      	sub	sp, #36	; 0x24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	e16b      	b.n	8004f5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c84:	2201      	movs	r2, #1
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4013      	ands	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	f040 815a 	bne.w	8004f56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d005      	beq.n	8004cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d130      	bne.n	8004d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	2203      	movs	r2, #3
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	091b      	lsrs	r3, r3, #4
 8004d06:	f003 0201 	and.w	r2, r3, #1
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d017      	beq.n	8004d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	2203      	movs	r2, #3
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d123      	bne.n	8004dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	08da      	lsrs	r2, r3, #3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3208      	adds	r2, #8
 8004d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	220f      	movs	r2, #15
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	08da      	lsrs	r2, r3, #3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3208      	adds	r2, #8
 8004da6:	69b9      	ldr	r1, [r7, #24]
 8004da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	2203      	movs	r2, #3
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f003 0203 	and.w	r2, r3, #3
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80b4 	beq.w	8004f56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	4b60      	ldr	r3, [pc, #384]	; (8004f74 <HAL_GPIO_Init+0x30c>)
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	4a5f      	ldr	r2, [pc, #380]	; (8004f74 <HAL_GPIO_Init+0x30c>)
 8004df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8004dfe:	4b5d      	ldr	r3, [pc, #372]	; (8004f74 <HAL_GPIO_Init+0x30c>)
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e0a:	4a5b      	ldr	r2, [pc, #364]	; (8004f78 <HAL_GPIO_Init+0x310>)
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	089b      	lsrs	r3, r3, #2
 8004e10:	3302      	adds	r3, #2
 8004e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	220f      	movs	r2, #15
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	43db      	mvns	r3, r3
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a52      	ldr	r2, [pc, #328]	; (8004f7c <HAL_GPIO_Init+0x314>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d02b      	beq.n	8004e8e <HAL_GPIO_Init+0x226>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a51      	ldr	r2, [pc, #324]	; (8004f80 <HAL_GPIO_Init+0x318>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d025      	beq.n	8004e8a <HAL_GPIO_Init+0x222>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a50      	ldr	r2, [pc, #320]	; (8004f84 <HAL_GPIO_Init+0x31c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d01f      	beq.n	8004e86 <HAL_GPIO_Init+0x21e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a4f      	ldr	r2, [pc, #316]	; (8004f88 <HAL_GPIO_Init+0x320>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d019      	beq.n	8004e82 <HAL_GPIO_Init+0x21a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a4e      	ldr	r2, [pc, #312]	; (8004f8c <HAL_GPIO_Init+0x324>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d013      	beq.n	8004e7e <HAL_GPIO_Init+0x216>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a4d      	ldr	r2, [pc, #308]	; (8004f90 <HAL_GPIO_Init+0x328>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00d      	beq.n	8004e7a <HAL_GPIO_Init+0x212>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a4c      	ldr	r2, [pc, #304]	; (8004f94 <HAL_GPIO_Init+0x32c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d007      	beq.n	8004e76 <HAL_GPIO_Init+0x20e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a4b      	ldr	r2, [pc, #300]	; (8004f98 <HAL_GPIO_Init+0x330>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d101      	bne.n	8004e72 <HAL_GPIO_Init+0x20a>
 8004e6e:	2307      	movs	r3, #7
 8004e70:	e00e      	b.n	8004e90 <HAL_GPIO_Init+0x228>
 8004e72:	2308      	movs	r3, #8
 8004e74:	e00c      	b.n	8004e90 <HAL_GPIO_Init+0x228>
 8004e76:	2306      	movs	r3, #6
 8004e78:	e00a      	b.n	8004e90 <HAL_GPIO_Init+0x228>
 8004e7a:	2305      	movs	r3, #5
 8004e7c:	e008      	b.n	8004e90 <HAL_GPIO_Init+0x228>
 8004e7e:	2304      	movs	r3, #4
 8004e80:	e006      	b.n	8004e90 <HAL_GPIO_Init+0x228>
 8004e82:	2303      	movs	r3, #3
 8004e84:	e004      	b.n	8004e90 <HAL_GPIO_Init+0x228>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e002      	b.n	8004e90 <HAL_GPIO_Init+0x228>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <HAL_GPIO_Init+0x228>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	f002 0203 	and.w	r2, r2, #3
 8004e96:	0092      	lsls	r2, r2, #2
 8004e98:	4093      	lsls	r3, r2
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ea0:	4935      	ldr	r1, [pc, #212]	; (8004f78 <HAL_GPIO_Init+0x310>)
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	089b      	lsrs	r3, r3, #2
 8004ea6:	3302      	adds	r3, #2
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004eae:	4b3b      	ldr	r3, [pc, #236]	; (8004f9c <HAL_GPIO_Init+0x334>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ed2:	4a32      	ldr	r2, [pc, #200]	; (8004f9c <HAL_GPIO_Init+0x334>)
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ed8:	4b30      	ldr	r3, [pc, #192]	; (8004f9c <HAL_GPIO_Init+0x334>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004efc:	4a27      	ldr	r2, [pc, #156]	; (8004f9c <HAL_GPIO_Init+0x334>)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f02:	4b26      	ldr	r3, [pc, #152]	; (8004f9c <HAL_GPIO_Init+0x334>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f26:	4a1d      	ldr	r2, [pc, #116]	; (8004f9c <HAL_GPIO_Init+0x334>)
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f2c:	4b1b      	ldr	r3, [pc, #108]	; (8004f9c <HAL_GPIO_Init+0x334>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	43db      	mvns	r3, r3
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f50:	4a12      	ldr	r2, [pc, #72]	; (8004f9c <HAL_GPIO_Init+0x334>)
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	61fb      	str	r3, [r7, #28]
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2b0f      	cmp	r3, #15
 8004f60:	f67f ae90 	bls.w	8004c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f64:	bf00      	nop
 8004f66:	bf00      	nop
 8004f68:	3724      	adds	r7, #36	; 0x24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40023800 	.word	0x40023800
 8004f78:	40013800 	.word	0x40013800
 8004f7c:	40020000 	.word	0x40020000
 8004f80:	40020400 	.word	0x40020400
 8004f84:	40020800 	.word	0x40020800
 8004f88:	40020c00 	.word	0x40020c00
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40021400 	.word	0x40021400
 8004f94:	40021800 	.word	0x40021800
 8004f98:	40021c00 	.word	0x40021c00
 8004f9c:	40013c00 	.word	0x40013c00

08004fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	887b      	ldrh	r3, [r7, #2]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
 8004fbc:	e001      	b.n	8004fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	807b      	strh	r3, [r7, #2]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fe0:	787b      	ldrb	r3, [r7, #1]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fe6:	887a      	ldrh	r2, [r7, #2]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fec:	e003      	b.n	8004ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fee:	887b      	ldrh	r3, [r7, #2]
 8004ff0:	041a      	lsls	r2, r3, #16
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	619a      	str	r2, [r3, #24]
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
	...

08005004 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e267      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d075      	beq.n	800510e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005022:	4b88      	ldr	r3, [pc, #544]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 030c 	and.w	r3, r3, #12
 800502a:	2b04      	cmp	r3, #4
 800502c:	d00c      	beq.n	8005048 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800502e:	4b85      	ldr	r3, [pc, #532]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005036:	2b08      	cmp	r3, #8
 8005038:	d112      	bne.n	8005060 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800503a:	4b82      	ldr	r3, [pc, #520]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005046:	d10b      	bne.n	8005060 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005048:	4b7e      	ldr	r3, [pc, #504]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d05b      	beq.n	800510c <HAL_RCC_OscConfig+0x108>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d157      	bne.n	800510c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e242      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005068:	d106      	bne.n	8005078 <HAL_RCC_OscConfig+0x74>
 800506a:	4b76      	ldr	r3, [pc, #472]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a75      	ldr	r2, [pc, #468]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 8005070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	e01d      	b.n	80050b4 <HAL_RCC_OscConfig+0xb0>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005080:	d10c      	bne.n	800509c <HAL_RCC_OscConfig+0x98>
 8005082:	4b70      	ldr	r3, [pc, #448]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a6f      	ldr	r2, [pc, #444]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 8005088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	4b6d      	ldr	r3, [pc, #436]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a6c      	ldr	r2, [pc, #432]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 8005094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e00b      	b.n	80050b4 <HAL_RCC_OscConfig+0xb0>
 800509c:	4b69      	ldr	r3, [pc, #420]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a68      	ldr	r2, [pc, #416]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 80050a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	4b66      	ldr	r3, [pc, #408]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a65      	ldr	r2, [pc, #404]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 80050ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d013      	beq.n	80050e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050bc:	f7ff f8b4 	bl	8004228 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050c4:	f7ff f8b0 	bl	8004228 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b64      	cmp	r3, #100	; 0x64
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e207      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d6:	4b5b      	ldr	r3, [pc, #364]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <HAL_RCC_OscConfig+0xc0>
 80050e2:	e014      	b.n	800510e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e4:	f7ff f8a0 	bl	8004228 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050ec:	f7ff f89c 	bl	8004228 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	; 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e1f3      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050fe:	4b51      	ldr	r3, [pc, #324]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0xe8>
 800510a:	e000      	b.n	800510e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800510c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d063      	beq.n	80051e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800511a:	4b4a      	ldr	r3, [pc, #296]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 030c 	and.w	r3, r3, #12
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00b      	beq.n	800513e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005126:	4b47      	ldr	r3, [pc, #284]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800512e:	2b08      	cmp	r3, #8
 8005130:	d11c      	bne.n	800516c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005132:	4b44      	ldr	r3, [pc, #272]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d116      	bne.n	800516c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800513e:	4b41      	ldr	r3, [pc, #260]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <HAL_RCC_OscConfig+0x152>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d001      	beq.n	8005156 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e1c7      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005156:	4b3b      	ldr	r3, [pc, #236]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	4937      	ldr	r1, [pc, #220]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 8005166:	4313      	orrs	r3, r2
 8005168:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800516a:	e03a      	b.n	80051e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d020      	beq.n	80051b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005174:	4b34      	ldr	r3, [pc, #208]	; (8005248 <HAL_RCC_OscConfig+0x244>)
 8005176:	2201      	movs	r2, #1
 8005178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517a:	f7ff f855 	bl	8004228 <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005182:	f7ff f851 	bl	8004228 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e1a8      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005194:	4b2b      	ldr	r3, [pc, #172]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0f0      	beq.n	8005182 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a0:	4b28      	ldr	r3, [pc, #160]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4925      	ldr	r1, [pc, #148]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	600b      	str	r3, [r1, #0]
 80051b4:	e015      	b.n	80051e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051b6:	4b24      	ldr	r3, [pc, #144]	; (8005248 <HAL_RCC_OscConfig+0x244>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051bc:	f7ff f834 	bl	8004228 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051c4:	f7ff f830 	bl	8004228 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e187      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d6:	4b1b      	ldr	r3, [pc, #108]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f0      	bne.n	80051c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d036      	beq.n	800525c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d016      	beq.n	8005224 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051f6:	4b15      	ldr	r3, [pc, #84]	; (800524c <HAL_RCC_OscConfig+0x248>)
 80051f8:	2201      	movs	r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051fc:	f7ff f814 	bl	8004228 <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005204:	f7ff f810 	bl	8004228 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e167      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005216:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <HAL_RCC_OscConfig+0x240>)
 8005218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0f0      	beq.n	8005204 <HAL_RCC_OscConfig+0x200>
 8005222:	e01b      	b.n	800525c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005224:	4b09      	ldr	r3, [pc, #36]	; (800524c <HAL_RCC_OscConfig+0x248>)
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800522a:	f7fe fffd 	bl	8004228 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005230:	e00e      	b.n	8005250 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005232:	f7fe fff9 	bl	8004228 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d907      	bls.n	8005250 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e150      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
 8005244:	40023800 	.word	0x40023800
 8005248:	42470000 	.word	0x42470000
 800524c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005250:	4b88      	ldr	r3, [pc, #544]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 8005252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1ea      	bne.n	8005232 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 8097 	beq.w	8005398 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800526a:	2300      	movs	r3, #0
 800526c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800526e:	4b81      	ldr	r3, [pc, #516]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10f      	bne.n	800529a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800527a:	2300      	movs	r3, #0
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	4b7d      	ldr	r3, [pc, #500]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	4a7c      	ldr	r2, [pc, #496]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 8005284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005288:	6413      	str	r3, [r2, #64]	; 0x40
 800528a:	4b7a      	ldr	r3, [pc, #488]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005292:	60bb      	str	r3, [r7, #8]
 8005294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005296:	2301      	movs	r3, #1
 8005298:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800529a:	4b77      	ldr	r3, [pc, #476]	; (8005478 <HAL_RCC_OscConfig+0x474>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d118      	bne.n	80052d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052a6:	4b74      	ldr	r3, [pc, #464]	; (8005478 <HAL_RCC_OscConfig+0x474>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a73      	ldr	r2, [pc, #460]	; (8005478 <HAL_RCC_OscConfig+0x474>)
 80052ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052b2:	f7fe ffb9 	bl	8004228 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ba:	f7fe ffb5 	bl	8004228 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e10c      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052cc:	4b6a      	ldr	r3, [pc, #424]	; (8005478 <HAL_RCC_OscConfig+0x474>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d106      	bne.n	80052ee <HAL_RCC_OscConfig+0x2ea>
 80052e0:	4b64      	ldr	r3, [pc, #400]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 80052e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e4:	4a63      	ldr	r2, [pc, #396]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	6713      	str	r3, [r2, #112]	; 0x70
 80052ec:	e01c      	b.n	8005328 <HAL_RCC_OscConfig+0x324>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	2b05      	cmp	r3, #5
 80052f4:	d10c      	bne.n	8005310 <HAL_RCC_OscConfig+0x30c>
 80052f6:	4b5f      	ldr	r3, [pc, #380]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	4a5e      	ldr	r2, [pc, #376]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 80052fc:	f043 0304 	orr.w	r3, r3, #4
 8005300:	6713      	str	r3, [r2, #112]	; 0x70
 8005302:	4b5c      	ldr	r3, [pc, #368]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 8005304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005306:	4a5b      	ldr	r2, [pc, #364]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	6713      	str	r3, [r2, #112]	; 0x70
 800530e:	e00b      	b.n	8005328 <HAL_RCC_OscConfig+0x324>
 8005310:	4b58      	ldr	r3, [pc, #352]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 8005312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005314:	4a57      	ldr	r2, [pc, #348]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 8005316:	f023 0301 	bic.w	r3, r3, #1
 800531a:	6713      	str	r3, [r2, #112]	; 0x70
 800531c:	4b55      	ldr	r3, [pc, #340]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	4a54      	ldr	r2, [pc, #336]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 8005322:	f023 0304 	bic.w	r3, r3, #4
 8005326:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d015      	beq.n	800535c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005330:	f7fe ff7a 	bl	8004228 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005336:	e00a      	b.n	800534e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005338:	f7fe ff76 	bl	8004228 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	f241 3288 	movw	r2, #5000	; 0x1388
 8005346:	4293      	cmp	r3, r2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e0cb      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534e:	4b49      	ldr	r3, [pc, #292]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0ee      	beq.n	8005338 <HAL_RCC_OscConfig+0x334>
 800535a:	e014      	b.n	8005386 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800535c:	f7fe ff64 	bl	8004228 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005362:	e00a      	b.n	800537a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005364:	f7fe ff60 	bl	8004228 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005372:	4293      	cmp	r3, r2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e0b5      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800537a:	4b3e      	ldr	r3, [pc, #248]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1ee      	bne.n	8005364 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005386:	7dfb      	ldrb	r3, [r7, #23]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d105      	bne.n	8005398 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800538c:	4b39      	ldr	r3, [pc, #228]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	4a38      	ldr	r2, [pc, #224]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 8005392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005396:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80a1 	beq.w	80054e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053a2:	4b34      	ldr	r3, [pc, #208]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 030c 	and.w	r3, r3, #12
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d05c      	beq.n	8005468 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d141      	bne.n	800543a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b6:	4b31      	ldr	r3, [pc, #196]	; (800547c <HAL_RCC_OscConfig+0x478>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053bc:	f7fe ff34 	bl	8004228 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c4:	f7fe ff30 	bl	8004228 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e087      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d6:	4b27      	ldr	r3, [pc, #156]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69da      	ldr	r2, [r3, #28]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	019b      	lsls	r3, r3, #6
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	085b      	lsrs	r3, r3, #1
 80053fa:	3b01      	subs	r3, #1
 80053fc:	041b      	lsls	r3, r3, #16
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	061b      	lsls	r3, r3, #24
 8005406:	491b      	ldr	r1, [pc, #108]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 8005408:	4313      	orrs	r3, r2
 800540a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800540c:	4b1b      	ldr	r3, [pc, #108]	; (800547c <HAL_RCC_OscConfig+0x478>)
 800540e:	2201      	movs	r2, #1
 8005410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005412:	f7fe ff09 	bl	8004228 <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800541a:	f7fe ff05 	bl	8004228 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e05c      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800542c:	4b11      	ldr	r3, [pc, #68]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0f0      	beq.n	800541a <HAL_RCC_OscConfig+0x416>
 8005438:	e054      	b.n	80054e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543a:	4b10      	ldr	r3, [pc, #64]	; (800547c <HAL_RCC_OscConfig+0x478>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005440:	f7fe fef2 	bl	8004228 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005448:	f7fe feee 	bl	8004228 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e045      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545a:	4b06      	ldr	r3, [pc, #24]	; (8005474 <HAL_RCC_OscConfig+0x470>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x444>
 8005466:	e03d      	b.n	80054e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d107      	bne.n	8005480 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e038      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
 8005474:	40023800 	.word	0x40023800
 8005478:	40007000 	.word	0x40007000
 800547c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005480:	4b1b      	ldr	r3, [pc, #108]	; (80054f0 <HAL_RCC_OscConfig+0x4ec>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d028      	beq.n	80054e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005498:	429a      	cmp	r2, r3
 800549a:	d121      	bne.n	80054e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d11a      	bne.n	80054e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054b0:	4013      	ands	r3, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d111      	bne.n	80054e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	3b01      	subs	r3, #1
 80054ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d107      	bne.n	80054e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054dc:	429a      	cmp	r2, r3
 80054de:	d001      	beq.n	80054e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40023800 	.word	0x40023800

080054f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e0cc      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005508:	4b68      	ldr	r3, [pc, #416]	; (80056ac <HAL_RCC_ClockConfig+0x1b8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d90c      	bls.n	8005530 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005516:	4b65      	ldr	r3, [pc, #404]	; (80056ac <HAL_RCC_ClockConfig+0x1b8>)
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800551e:	4b63      	ldr	r3, [pc, #396]	; (80056ac <HAL_RCC_ClockConfig+0x1b8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	429a      	cmp	r2, r3
 800552a:	d001      	beq.n	8005530 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e0b8      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d020      	beq.n	800557e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005548:	4b59      	ldr	r3, [pc, #356]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	4a58      	ldr	r2, [pc, #352]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 800554e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005552:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005560:	4b53      	ldr	r3, [pc, #332]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	4a52      	ldr	r2, [pc, #328]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800556a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800556c:	4b50      	ldr	r3, [pc, #320]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	494d      	ldr	r1, [pc, #308]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	4313      	orrs	r3, r2
 800557c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d044      	beq.n	8005614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d107      	bne.n	80055a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005592:	4b47      	ldr	r3, [pc, #284]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d119      	bne.n	80055d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e07f      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d003      	beq.n	80055b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d107      	bne.n	80055c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b2:	4b3f      	ldr	r3, [pc, #252]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d109      	bne.n	80055d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e06f      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055c2:	4b3b      	ldr	r3, [pc, #236]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e067      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055d2:	4b37      	ldr	r3, [pc, #220]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f023 0203 	bic.w	r2, r3, #3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	4934      	ldr	r1, [pc, #208]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055e4:	f7fe fe20 	bl	8004228 <HAL_GetTick>
 80055e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ea:	e00a      	b.n	8005602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ec:	f7fe fe1c 	bl	8004228 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e04f      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005602:	4b2b      	ldr	r3, [pc, #172]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 020c 	and.w	r2, r3, #12
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	429a      	cmp	r2, r3
 8005612:	d1eb      	bne.n	80055ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005614:	4b25      	ldr	r3, [pc, #148]	; (80056ac <HAL_RCC_ClockConfig+0x1b8>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d20c      	bcs.n	800563c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005622:	4b22      	ldr	r3, [pc, #136]	; (80056ac <HAL_RCC_ClockConfig+0x1b8>)
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800562a:	4b20      	ldr	r3, [pc, #128]	; (80056ac <HAL_RCC_ClockConfig+0x1b8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d001      	beq.n	800563c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e032      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005648:	4b19      	ldr	r3, [pc, #100]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	4916      	ldr	r1, [pc, #88]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	4313      	orrs	r3, r2
 8005658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d009      	beq.n	800567a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005666:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	490e      	ldr	r1, [pc, #56]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005676:	4313      	orrs	r3, r2
 8005678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800567a:	f000 f821 	bl	80056c0 <HAL_RCC_GetSysClockFreq>
 800567e:	4602      	mov	r2, r0
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	091b      	lsrs	r3, r3, #4
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	490a      	ldr	r1, [pc, #40]	; (80056b4 <HAL_RCC_ClockConfig+0x1c0>)
 800568c:	5ccb      	ldrb	r3, [r1, r3]
 800568e:	fa22 f303 	lsr.w	r3, r2, r3
 8005692:	4a09      	ldr	r2, [pc, #36]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005696:	4b09      	ldr	r3, [pc, #36]	; (80056bc <HAL_RCC_ClockConfig+0x1c8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f7fe fd80 	bl	80041a0 <HAL_InitTick>

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40023c00 	.word	0x40023c00
 80056b0:	40023800 	.word	0x40023800
 80056b4:	08008d60 	.word	0x08008d60
 80056b8:	20000070 	.word	0x20000070
 80056bc:	20000074 	.word	0x20000074

080056c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056c4:	b094      	sub	sp, #80	; 0x50
 80056c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	647b      	str	r3, [r7, #68]	; 0x44
 80056cc:	2300      	movs	r3, #0
 80056ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d0:	2300      	movs	r3, #0
 80056d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056d8:	4b79      	ldr	r3, [pc, #484]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 030c 	and.w	r3, r3, #12
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d00d      	beq.n	8005700 <HAL_RCC_GetSysClockFreq+0x40>
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	f200 80e1 	bhi.w	80058ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <HAL_RCC_GetSysClockFreq+0x34>
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d003      	beq.n	80056fa <HAL_RCC_GetSysClockFreq+0x3a>
 80056f2:	e0db      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056f4:	4b73      	ldr	r3, [pc, #460]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80056f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80056f8:	e0db      	b.n	80058b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056fa:	4b73      	ldr	r3, [pc, #460]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80056fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056fe:	e0d8      	b.n	80058b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005700:	4b6f      	ldr	r3, [pc, #444]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005708:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800570a:	4b6d      	ldr	r3, [pc, #436]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d063      	beq.n	80057de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005716:	4b6a      	ldr	r3, [pc, #424]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	099b      	lsrs	r3, r3, #6
 800571c:	2200      	movs	r2, #0
 800571e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005720:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005728:	633b      	str	r3, [r7, #48]	; 0x30
 800572a:	2300      	movs	r3, #0
 800572c:	637b      	str	r3, [r7, #52]	; 0x34
 800572e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005732:	4622      	mov	r2, r4
 8005734:	462b      	mov	r3, r5
 8005736:	f04f 0000 	mov.w	r0, #0
 800573a:	f04f 0100 	mov.w	r1, #0
 800573e:	0159      	lsls	r1, r3, #5
 8005740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005744:	0150      	lsls	r0, r2, #5
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4621      	mov	r1, r4
 800574c:	1a51      	subs	r1, r2, r1
 800574e:	6139      	str	r1, [r7, #16]
 8005750:	4629      	mov	r1, r5
 8005752:	eb63 0301 	sbc.w	r3, r3, r1
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005764:	4659      	mov	r1, fp
 8005766:	018b      	lsls	r3, r1, #6
 8005768:	4651      	mov	r1, sl
 800576a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800576e:	4651      	mov	r1, sl
 8005770:	018a      	lsls	r2, r1, #6
 8005772:	4651      	mov	r1, sl
 8005774:	ebb2 0801 	subs.w	r8, r2, r1
 8005778:	4659      	mov	r1, fp
 800577a:	eb63 0901 	sbc.w	r9, r3, r1
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800578a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800578e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005792:	4690      	mov	r8, r2
 8005794:	4699      	mov	r9, r3
 8005796:	4623      	mov	r3, r4
 8005798:	eb18 0303 	adds.w	r3, r8, r3
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	462b      	mov	r3, r5
 80057a0:	eb49 0303 	adc.w	r3, r9, r3
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057b2:	4629      	mov	r1, r5
 80057b4:	024b      	lsls	r3, r1, #9
 80057b6:	4621      	mov	r1, r4
 80057b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057bc:	4621      	mov	r1, r4
 80057be:	024a      	lsls	r2, r1, #9
 80057c0:	4610      	mov	r0, r2
 80057c2:	4619      	mov	r1, r3
 80057c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c6:	2200      	movs	r2, #0
 80057c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057d0:	f7fb f9c8 	bl	8000b64 <__aeabi_uldivmod>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4613      	mov	r3, r2
 80057da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057dc:	e058      	b.n	8005890 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057de:	4b38      	ldr	r3, [pc, #224]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	099b      	lsrs	r3, r3, #6
 80057e4:	2200      	movs	r2, #0
 80057e6:	4618      	mov	r0, r3
 80057e8:	4611      	mov	r1, r2
 80057ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057ee:	623b      	str	r3, [r7, #32]
 80057f0:	2300      	movs	r3, #0
 80057f2:	627b      	str	r3, [r7, #36]	; 0x24
 80057f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057f8:	4642      	mov	r2, r8
 80057fa:	464b      	mov	r3, r9
 80057fc:	f04f 0000 	mov.w	r0, #0
 8005800:	f04f 0100 	mov.w	r1, #0
 8005804:	0159      	lsls	r1, r3, #5
 8005806:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800580a:	0150      	lsls	r0, r2, #5
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4641      	mov	r1, r8
 8005812:	ebb2 0a01 	subs.w	sl, r2, r1
 8005816:	4649      	mov	r1, r9
 8005818:	eb63 0b01 	sbc.w	fp, r3, r1
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005828:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800582c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005830:	ebb2 040a 	subs.w	r4, r2, sl
 8005834:	eb63 050b 	sbc.w	r5, r3, fp
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	00eb      	lsls	r3, r5, #3
 8005842:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005846:	00e2      	lsls	r2, r4, #3
 8005848:	4614      	mov	r4, r2
 800584a:	461d      	mov	r5, r3
 800584c:	4643      	mov	r3, r8
 800584e:	18e3      	adds	r3, r4, r3
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	464b      	mov	r3, r9
 8005854:	eb45 0303 	adc.w	r3, r5, r3
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005866:	4629      	mov	r1, r5
 8005868:	028b      	lsls	r3, r1, #10
 800586a:	4621      	mov	r1, r4
 800586c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005870:	4621      	mov	r1, r4
 8005872:	028a      	lsls	r2, r1, #10
 8005874:	4610      	mov	r0, r2
 8005876:	4619      	mov	r1, r3
 8005878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587a:	2200      	movs	r2, #0
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	61fa      	str	r2, [r7, #28]
 8005880:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005884:	f7fb f96e 	bl	8000b64 <__aeabi_uldivmod>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	4613      	mov	r3, r2
 800588e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	0c1b      	lsrs	r3, r3, #16
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	3301      	adds	r3, #1
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80058a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058aa:	e002      	b.n	80058b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058ac:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80058ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3750      	adds	r7, #80	; 0x50
 80058b8:	46bd      	mov	sp, r7
 80058ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058be:	bf00      	nop
 80058c0:	40023800 	.word	0x40023800
 80058c4:	00f42400 	.word	0x00f42400
 80058c8:	007a1200 	.word	0x007a1200

080058cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058d0:	4b03      	ldr	r3, [pc, #12]	; (80058e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058d2:	681b      	ldr	r3, [r3, #0]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	20000070 	.word	0x20000070

080058e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058e8:	f7ff fff0 	bl	80058cc <HAL_RCC_GetHCLKFreq>
 80058ec:	4602      	mov	r2, r0
 80058ee:	4b05      	ldr	r3, [pc, #20]	; (8005904 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	0a9b      	lsrs	r3, r3, #10
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	4903      	ldr	r1, [pc, #12]	; (8005908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058fa:	5ccb      	ldrb	r3, [r1, r3]
 80058fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005900:	4618      	mov	r0, r3
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40023800 	.word	0x40023800
 8005908:	08008d70 	.word	0x08008d70

0800590c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005910:	f7ff ffdc 	bl	80058cc <HAL_RCC_GetHCLKFreq>
 8005914:	4602      	mov	r2, r0
 8005916:	4b05      	ldr	r3, [pc, #20]	; (800592c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	0b5b      	lsrs	r3, r3, #13
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	4903      	ldr	r1, [pc, #12]	; (8005930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005922:	5ccb      	ldrb	r3, [r1, r3]
 8005924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005928:	4618      	mov	r0, r3
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40023800 	.word	0x40023800
 8005930:	08008d70 	.word	0x08008d70

08005934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e041      	b.n	80059ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fe fa2a 	bl	8003db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3304      	adds	r3, #4
 8005970:	4619      	mov	r1, r3
 8005972:	4610      	mov	r0, r2
 8005974:	f000 fce6 	bl	8006344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d001      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e04e      	b.n	8005a8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a23      	ldr	r2, [pc, #140]	; (8005a98 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d022      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x80>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a16:	d01d      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x80>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1f      	ldr	r2, [pc, #124]	; (8005a9c <HAL_TIM_Base_Start_IT+0xc8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d018      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x80>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1e      	ldr	r2, [pc, #120]	; (8005aa0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d013      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x80>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1c      	ldr	r2, [pc, #112]	; (8005aa4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00e      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x80>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1b      	ldr	r2, [pc, #108]	; (8005aa8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x80>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a19      	ldr	r2, [pc, #100]	; (8005aac <HAL_TIM_Base_Start_IT+0xd8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d004      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x80>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a18      	ldr	r2, [pc, #96]	; (8005ab0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d111      	bne.n	8005a78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b06      	cmp	r3, #6
 8005a64:	d010      	beq.n	8005a88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a76:	e007      	b.n	8005a88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40010000 	.word	0x40010000
 8005a9c:	40000400 	.word	0x40000400
 8005aa0:	40000800 	.word	0x40000800
 8005aa4:	40000c00 	.word	0x40000c00
 8005aa8:	40010400 	.word	0x40010400
 8005aac:	40014000 	.word	0x40014000
 8005ab0:	40001800 	.word	0x40001800

08005ab4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e041      	b.n	8005b4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fe f91c 	bl	8003d18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3304      	adds	r3, #4
 8005af0:	4619      	mov	r1, r3
 8005af2:	4610      	mov	r0, r2
 8005af4:	f000 fc26 	bl	8006344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d109      	bne.n	8005b78 <HAL_TIM_PWM_Start+0x24>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	bf14      	ite	ne
 8005b70:	2301      	movne	r3, #1
 8005b72:	2300      	moveq	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	e022      	b.n	8005bbe <HAL_TIM_PWM_Start+0x6a>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d109      	bne.n	8005b92 <HAL_TIM_PWM_Start+0x3e>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	bf14      	ite	ne
 8005b8a:	2301      	movne	r3, #1
 8005b8c:	2300      	moveq	r3, #0
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	e015      	b.n	8005bbe <HAL_TIM_PWM_Start+0x6a>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d109      	bne.n	8005bac <HAL_TIM_PWM_Start+0x58>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	bf14      	ite	ne
 8005ba4:	2301      	movne	r3, #1
 8005ba6:	2300      	moveq	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	e008      	b.n	8005bbe <HAL_TIM_PWM_Start+0x6a>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	bf14      	ite	ne
 8005bb8:	2301      	movne	r3, #1
 8005bba:	2300      	moveq	r3, #0
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e07c      	b.n	8005cc0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d104      	bne.n	8005bd6 <HAL_TIM_PWM_Start+0x82>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bd4:	e013      	b.n	8005bfe <HAL_TIM_PWM_Start+0xaa>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	d104      	bne.n	8005be6 <HAL_TIM_PWM_Start+0x92>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005be4:	e00b      	b.n	8005bfe <HAL_TIM_PWM_Start+0xaa>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d104      	bne.n	8005bf6 <HAL_TIM_PWM_Start+0xa2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bf4:	e003      	b.n	8005bfe <HAL_TIM_PWM_Start+0xaa>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2201      	movs	r2, #1
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fdec 	bl	80067e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a2d      	ldr	r2, [pc, #180]	; (8005cc8 <HAL_TIM_PWM_Start+0x174>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d004      	beq.n	8005c20 <HAL_TIM_PWM_Start+0xcc>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a2c      	ldr	r2, [pc, #176]	; (8005ccc <HAL_TIM_PWM_Start+0x178>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d101      	bne.n	8005c24 <HAL_TIM_PWM_Start+0xd0>
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <HAL_TIM_PWM_Start+0xd2>
 8005c24:	2300      	movs	r3, #0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a22      	ldr	r2, [pc, #136]	; (8005cc8 <HAL_TIM_PWM_Start+0x174>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d022      	beq.n	8005c8a <HAL_TIM_PWM_Start+0x136>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4c:	d01d      	beq.n	8005c8a <HAL_TIM_PWM_Start+0x136>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <HAL_TIM_PWM_Start+0x17c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d018      	beq.n	8005c8a <HAL_TIM_PWM_Start+0x136>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <HAL_TIM_PWM_Start+0x180>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d013      	beq.n	8005c8a <HAL_TIM_PWM_Start+0x136>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <HAL_TIM_PWM_Start+0x184>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00e      	beq.n	8005c8a <HAL_TIM_PWM_Start+0x136>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a16      	ldr	r2, [pc, #88]	; (8005ccc <HAL_TIM_PWM_Start+0x178>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d009      	beq.n	8005c8a <HAL_TIM_PWM_Start+0x136>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a18      	ldr	r2, [pc, #96]	; (8005cdc <HAL_TIM_PWM_Start+0x188>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d004      	beq.n	8005c8a <HAL_TIM_PWM_Start+0x136>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a16      	ldr	r2, [pc, #88]	; (8005ce0 <HAL_TIM_PWM_Start+0x18c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d111      	bne.n	8005cae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b06      	cmp	r3, #6
 8005c9a:	d010      	beq.n	8005cbe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cac:	e007      	b.n	8005cbe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0201 	orr.w	r2, r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40010000 	.word	0x40010000
 8005ccc:	40010400 	.word	0x40010400
 8005cd0:	40000400 	.word	0x40000400
 8005cd4:	40000800 	.word	0x40000800
 8005cd8:	40000c00 	.word	0x40000c00
 8005cdc:	40014000 	.word	0x40014000
 8005ce0:	40001800 	.word	0x40001800

08005ce4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e097      	b.n	8005e28 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d106      	bne.n	8005d12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7fd fec7 	bl	8003aa0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6812      	ldr	r2, [r2, #0]
 8005d24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d28:	f023 0307 	bic.w	r3, r3, #7
 8005d2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3304      	adds	r3, #4
 8005d36:	4619      	mov	r1, r3
 8005d38:	4610      	mov	r0, r2
 8005d3a:	f000 fb03 	bl	8006344 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d66:	f023 0303 	bic.w	r3, r3, #3
 8005d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	4313      	orrs	r3, r2
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005d84:	f023 030c 	bic.w	r3, r3, #12
 8005d88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	4313      	orrs	r3, r2
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	011a      	lsls	r2, r3, #4
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	031b      	lsls	r3, r3, #12
 8005db4:	4313      	orrs	r3, r2
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005dc2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005dca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e58:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d110      	bne.n	8005e82 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d102      	bne.n	8005e6c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e66:	7b7b      	ldrb	r3, [r7, #13]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d001      	beq.n	8005e70 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e069      	b.n	8005f44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e80:	e031      	b.n	8005ee6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d110      	bne.n	8005eaa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d102      	bne.n	8005e94 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e8e:	7b3b      	ldrb	r3, [r7, #12]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d001      	beq.n	8005e98 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e055      	b.n	8005f44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ea8:	e01d      	b.n	8005ee6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d108      	bne.n	8005ec2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eb0:	7bbb      	ldrb	r3, [r7, #14]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d105      	bne.n	8005ec2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eb6:	7b7b      	ldrb	r3, [r7, #13]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d102      	bne.n	8005ec2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ebc:	7b3b      	ldrb	r3, [r7, #12]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d001      	beq.n	8005ec6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e03e      	b.n	8005f44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <HAL_TIM_Encoder_Start+0xc4>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d008      	beq.n	8005f04 <HAL_TIM_Encoder_Start+0xd4>
 8005ef2:	e00f      	b.n	8005f14 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	2100      	movs	r1, #0
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 fc71 	bl	80067e4 <TIM_CCxChannelCmd>
      break;
 8005f02:	e016      	b.n	8005f32 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	2104      	movs	r1, #4
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fc69 	bl	80067e4 <TIM_CCxChannelCmd>
      break;
 8005f12:	e00e      	b.n	8005f32 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fc61 	bl	80067e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2201      	movs	r2, #1
 8005f28:	2104      	movs	r1, #4
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fc5a 	bl	80067e4 <TIM_CCxChannelCmd>
      break;
 8005f30:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0201 	orr.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d122      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d11b      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0202 	mvn.w	r2, #2
 8005f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f9ba 	bl	8006308 <HAL_TIM_IC_CaptureCallback>
 8005f94:	e005      	b.n	8005fa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f9ac 	bl	80062f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f9bd 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d122      	bne.n	8005ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d11b      	bne.n	8005ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0204 	mvn.w	r2, #4
 8005fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f990 	bl	8006308 <HAL_TIM_IC_CaptureCallback>
 8005fe8:	e005      	b.n	8005ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f982 	bl	80062f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f993 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b08      	cmp	r3, #8
 8006008:	d122      	bne.n	8006050 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	2b08      	cmp	r3, #8
 8006016:	d11b      	bne.n	8006050 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0208 	mvn.w	r2, #8
 8006020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2204      	movs	r2, #4
 8006026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f966 	bl	8006308 <HAL_TIM_IC_CaptureCallback>
 800603c:	e005      	b.n	800604a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f958 	bl	80062f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f969 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0310 	and.w	r3, r3, #16
 800605a:	2b10      	cmp	r3, #16
 800605c:	d122      	bne.n	80060a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2b10      	cmp	r3, #16
 800606a:	d11b      	bne.n	80060a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0210 	mvn.w	r2, #16
 8006074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2208      	movs	r2, #8
 800607a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f93c 	bl	8006308 <HAL_TIM_IC_CaptureCallback>
 8006090:	e005      	b.n	800609e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f92e 	bl	80062f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f93f 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d10e      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d107      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0201 	mvn.w	r2, #1
 80060c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f908 	bl	80062e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060da:	2b80      	cmp	r3, #128	; 0x80
 80060dc:	d10e      	bne.n	80060fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e8:	2b80      	cmp	r3, #128	; 0x80
 80060ea:	d107      	bne.n	80060fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fc20 	bl	800693c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006106:	2b40      	cmp	r3, #64	; 0x40
 8006108:	d10e      	bne.n	8006128 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d107      	bne.n	8006128 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f904 	bl	8006330 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b20      	cmp	r3, #32
 8006134:	d10e      	bne.n	8006154 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f003 0320 	and.w	r3, r3, #32
 8006140:	2b20      	cmp	r3, #32
 8006142:	d107      	bne.n	8006154 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f06f 0220 	mvn.w	r2, #32
 800614c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fbea 	bl	8006928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006176:	2302      	movs	r3, #2
 8006178:	e0ae      	b.n	80062d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b0c      	cmp	r3, #12
 8006186:	f200 809f 	bhi.w	80062c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800618a:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	080061c5 	.word	0x080061c5
 8006194:	080062c9 	.word	0x080062c9
 8006198:	080062c9 	.word	0x080062c9
 800619c:	080062c9 	.word	0x080062c9
 80061a0:	08006205 	.word	0x08006205
 80061a4:	080062c9 	.word	0x080062c9
 80061a8:	080062c9 	.word	0x080062c9
 80061ac:	080062c9 	.word	0x080062c9
 80061b0:	08006247 	.word	0x08006247
 80061b4:	080062c9 	.word	0x080062c9
 80061b8:	080062c9 	.word	0x080062c9
 80061bc:	080062c9 	.word	0x080062c9
 80061c0:	08006287 	.word	0x08006287
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 f95a 	bl	8006484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0208 	orr.w	r2, r2, #8
 80061de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0204 	bic.w	r2, r2, #4
 80061ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6999      	ldr	r1, [r3, #24]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	619a      	str	r2, [r3, #24]
      break;
 8006202:	e064      	b.n	80062ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	4618      	mov	r0, r3
 800620c:	f000 f9aa 	bl	8006564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800621e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800622e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6999      	ldr	r1, [r3, #24]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	021a      	lsls	r2, r3, #8
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	619a      	str	r2, [r3, #24]
      break;
 8006244:	e043      	b.n	80062ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68b9      	ldr	r1, [r7, #8]
 800624c:	4618      	mov	r0, r3
 800624e:	f000 f9ff 	bl	8006650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0208 	orr.w	r2, r2, #8
 8006260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0204 	bic.w	r2, r2, #4
 8006270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69d9      	ldr	r1, [r3, #28]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	691a      	ldr	r2, [r3, #16]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	61da      	str	r2, [r3, #28]
      break;
 8006284:	e023      	b.n	80062ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fa53 	bl	8006738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69da      	ldr	r2, [r3, #28]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69da      	ldr	r2, [r3, #28]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69d9      	ldr	r1, [r3, #28]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	021a      	lsls	r2, r3, #8
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	61da      	str	r2, [r3, #28]
      break;
 80062c6:	e002      	b.n	80062ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	75fb      	strb	r3, [r7, #23]
      break;
 80062cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a40      	ldr	r2, [pc, #256]	; (8006458 <TIM_Base_SetConfig+0x114>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d013      	beq.n	8006384 <TIM_Base_SetConfig+0x40>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006362:	d00f      	beq.n	8006384 <TIM_Base_SetConfig+0x40>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a3d      	ldr	r2, [pc, #244]	; (800645c <TIM_Base_SetConfig+0x118>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00b      	beq.n	8006384 <TIM_Base_SetConfig+0x40>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a3c      	ldr	r2, [pc, #240]	; (8006460 <TIM_Base_SetConfig+0x11c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d007      	beq.n	8006384 <TIM_Base_SetConfig+0x40>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a3b      	ldr	r2, [pc, #236]	; (8006464 <TIM_Base_SetConfig+0x120>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d003      	beq.n	8006384 <TIM_Base_SetConfig+0x40>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a3a      	ldr	r2, [pc, #232]	; (8006468 <TIM_Base_SetConfig+0x124>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d108      	bne.n	8006396 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a2f      	ldr	r2, [pc, #188]	; (8006458 <TIM_Base_SetConfig+0x114>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d02b      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a4:	d027      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a2c      	ldr	r2, [pc, #176]	; (800645c <TIM_Base_SetConfig+0x118>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d023      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a2b      	ldr	r2, [pc, #172]	; (8006460 <TIM_Base_SetConfig+0x11c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d01f      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a2a      	ldr	r2, [pc, #168]	; (8006464 <TIM_Base_SetConfig+0x120>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01b      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a29      	ldr	r2, [pc, #164]	; (8006468 <TIM_Base_SetConfig+0x124>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d017      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a28      	ldr	r2, [pc, #160]	; (800646c <TIM_Base_SetConfig+0x128>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d013      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a27      	ldr	r2, [pc, #156]	; (8006470 <TIM_Base_SetConfig+0x12c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00f      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a26      	ldr	r2, [pc, #152]	; (8006474 <TIM_Base_SetConfig+0x130>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00b      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a25      	ldr	r2, [pc, #148]	; (8006478 <TIM_Base_SetConfig+0x134>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d007      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a24      	ldr	r2, [pc, #144]	; (800647c <TIM_Base_SetConfig+0x138>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d003      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a23      	ldr	r2, [pc, #140]	; (8006480 <TIM_Base_SetConfig+0x13c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d108      	bne.n	8006408 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a0a      	ldr	r2, [pc, #40]	; (8006458 <TIM_Base_SetConfig+0x114>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d003      	beq.n	800643c <TIM_Base_SetConfig+0xf8>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a0c      	ldr	r2, [pc, #48]	; (8006468 <TIM_Base_SetConfig+0x124>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d103      	bne.n	8006444 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	691a      	ldr	r2, [r3, #16]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	615a      	str	r2, [r3, #20]
}
 800644a:	bf00      	nop
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40010000 	.word	0x40010000
 800645c:	40000400 	.word	0x40000400
 8006460:	40000800 	.word	0x40000800
 8006464:	40000c00 	.word	0x40000c00
 8006468:	40010400 	.word	0x40010400
 800646c:	40014000 	.word	0x40014000
 8006470:	40014400 	.word	0x40014400
 8006474:	40014800 	.word	0x40014800
 8006478:	40001800 	.word	0x40001800
 800647c:	40001c00 	.word	0x40001c00
 8006480:	40002000 	.word	0x40002000

08006484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	f023 0201 	bic.w	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0303 	bic.w	r3, r3, #3
 80064ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f023 0302 	bic.w	r3, r3, #2
 80064cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a20      	ldr	r2, [pc, #128]	; (800655c <TIM_OC1_SetConfig+0xd8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d003      	beq.n	80064e8 <TIM_OC1_SetConfig+0x64>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a1f      	ldr	r2, [pc, #124]	; (8006560 <TIM_OC1_SetConfig+0xdc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d10c      	bne.n	8006502 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f023 0308 	bic.w	r3, r3, #8
 80064ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f023 0304 	bic.w	r3, r3, #4
 8006500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a15      	ldr	r2, [pc, #84]	; (800655c <TIM_OC1_SetConfig+0xd8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d003      	beq.n	8006512 <TIM_OC1_SetConfig+0x8e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a14      	ldr	r2, [pc, #80]	; (8006560 <TIM_OC1_SetConfig+0xdc>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d111      	bne.n	8006536 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	621a      	str	r2, [r3, #32]
}
 8006550:	bf00      	nop
 8006552:	371c      	adds	r7, #28
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	40010000 	.word	0x40010000
 8006560:	40010400 	.word	0x40010400

08006564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	f023 0210 	bic.w	r2, r3, #16
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	021b      	lsls	r3, r3, #8
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f023 0320 	bic.w	r3, r3, #32
 80065ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a22      	ldr	r2, [pc, #136]	; (8006648 <TIM_OC2_SetConfig+0xe4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d003      	beq.n	80065cc <TIM_OC2_SetConfig+0x68>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a21      	ldr	r2, [pc, #132]	; (800664c <TIM_OC2_SetConfig+0xe8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d10d      	bne.n	80065e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a17      	ldr	r2, [pc, #92]	; (8006648 <TIM_OC2_SetConfig+0xe4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d003      	beq.n	80065f8 <TIM_OC2_SetConfig+0x94>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a16      	ldr	r2, [pc, #88]	; (800664c <TIM_OC2_SetConfig+0xe8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d113      	bne.n	8006620 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	4313      	orrs	r3, r2
 800661e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	621a      	str	r2, [r3, #32]
}
 800663a:	bf00      	nop
 800663c:	371c      	adds	r7, #28
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	40010000 	.word	0x40010000
 800664c:	40010400 	.word	0x40010400

08006650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0303 	bic.w	r3, r3, #3
 8006686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	4313      	orrs	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	021b      	lsls	r3, r3, #8
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a21      	ldr	r2, [pc, #132]	; (8006730 <TIM_OC3_SetConfig+0xe0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d003      	beq.n	80066b6 <TIM_OC3_SetConfig+0x66>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a20      	ldr	r2, [pc, #128]	; (8006734 <TIM_OC3_SetConfig+0xe4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d10d      	bne.n	80066d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a16      	ldr	r2, [pc, #88]	; (8006730 <TIM_OC3_SetConfig+0xe0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d003      	beq.n	80066e2 <TIM_OC3_SetConfig+0x92>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a15      	ldr	r2, [pc, #84]	; (8006734 <TIM_OC3_SetConfig+0xe4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d113      	bne.n	800670a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	621a      	str	r2, [r3, #32]
}
 8006724:	bf00      	nop
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	40010000 	.word	0x40010000
 8006734:	40010400 	.word	0x40010400

08006738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800676e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	031b      	lsls	r3, r3, #12
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a12      	ldr	r2, [pc, #72]	; (80067dc <TIM_OC4_SetConfig+0xa4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d003      	beq.n	80067a0 <TIM_OC4_SetConfig+0x68>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a11      	ldr	r2, [pc, #68]	; (80067e0 <TIM_OC4_SetConfig+0xa8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d109      	bne.n	80067b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	019b      	lsls	r3, r3, #6
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40010000 	.word	0x40010000
 80067e0:	40010400 	.word	0x40010400

080067e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f003 031f 	and.w	r3, r3, #31
 80067f6:	2201      	movs	r2, #1
 80067f8:	fa02 f303 	lsl.w	r3, r2, r3
 80067fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a1a      	ldr	r2, [r3, #32]
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	43db      	mvns	r3, r3
 8006806:	401a      	ands	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a1a      	ldr	r2, [r3, #32]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f003 031f 	and.w	r3, r3, #31
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	fa01 f303 	lsl.w	r3, r1, r3
 800681c:	431a      	orrs	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	621a      	str	r2, [r3, #32]
}
 8006822:	bf00      	nop
 8006824:	371c      	adds	r7, #28
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
	...

08006830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006844:	2302      	movs	r3, #2
 8006846:	e05a      	b.n	80068fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a21      	ldr	r2, [pc, #132]	; (800690c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d022      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006894:	d01d      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a1d      	ldr	r2, [pc, #116]	; (8006910 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d018      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a1b      	ldr	r2, [pc, #108]	; (8006914 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a1a      	ldr	r2, [pc, #104]	; (8006918 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00e      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a18      	ldr	r2, [pc, #96]	; (800691c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d009      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a17      	ldr	r2, [pc, #92]	; (8006920 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a15      	ldr	r2, [pc, #84]	; (8006924 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d10c      	bne.n	80068ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	40010000 	.word	0x40010000
 8006910:	40000400 	.word	0x40000400
 8006914:	40000800 	.word	0x40000800
 8006918:	40000c00 	.word	0x40000c00
 800691c:	40010400 	.word	0x40010400
 8006920:	40014000 	.word	0x40014000
 8006924:	40001800 	.word	0x40001800

08006928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e03f      	b.n	80069e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d106      	bne.n	800697c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fd fb44 	bl	8004004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2224      	movs	r2, #36	; 0x24
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fe69 	bl	800766c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695a      	ldr	r2, [r3, #20]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	4613      	mov	r3, r2
 80069f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d11d      	bne.n	8006a40 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <HAL_UART_Receive_DMA+0x26>
 8006a0a:	88fb      	ldrh	r3, [r7, #6]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e016      	b.n	8006a42 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d101      	bne.n	8006a22 <HAL_UART_Receive_DMA+0x38>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e00f      	b.n	8006a42 <HAL_UART_Receive_DMA+0x58>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a30:	88fb      	ldrh	r3, [r7, #6]
 8006a32:	461a      	mov	r2, r3
 8006a34:	68b9      	ldr	r1, [r7, #8]
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 fbb8 	bl	80071ac <UART_Start_Receive_DMA>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	e000      	b.n	8006a42 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006a40:	2302      	movs	r3, #2
  }
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b0ba      	sub	sp, #232	; 0xe8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10f      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d009      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x66>
 8006a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fd23 	bl	80074f6 <UART_Receive_IT>
      return;
 8006ab0:	e256      	b.n	8006f60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 80de 	beq.w	8006c78 <HAL_UART_IRQHandler+0x22c>
 8006abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d106      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006acc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 80d1 	beq.w	8006c78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00b      	beq.n	8006afa <HAL_UART_IRQHandler+0xae>
 8006ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	f043 0201 	orr.w	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00b      	beq.n	8006b1e <HAL_UART_IRQHandler+0xd2>
 8006b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	f043 0202 	orr.w	r2, r3, #2
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00b      	beq.n	8006b42 <HAL_UART_IRQHandler+0xf6>
 8006b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f043 0204 	orr.w	r2, r3, #4
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b46:	f003 0308 	and.w	r3, r3, #8
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d011      	beq.n	8006b72 <HAL_UART_IRQHandler+0x126>
 8006b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d105      	bne.n	8006b66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d005      	beq.n	8006b72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	f043 0208 	orr.w	r2, r3, #8
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 81ed 	beq.w	8006f56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d008      	beq.n	8006b9a <HAL_UART_IRQHandler+0x14e>
 8006b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8c:	f003 0320 	and.w	r3, r3, #32
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fcae 	bl	80074f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba4:	2b40      	cmp	r3, #64	; 0x40
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2301      	moveq	r3, #1
 8006baa:	2300      	movne	r3, #0
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d103      	bne.n	8006bc6 <HAL_UART_IRQHandler+0x17a>
 8006bbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d04f      	beq.n	8006c66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fbb6 	bl	8007338 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd6:	2b40      	cmp	r3, #64	; 0x40
 8006bd8:	d141      	bne.n	8006c5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3314      	adds	r3, #20
 8006be0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3314      	adds	r3, #20
 8006c02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1d9      	bne.n	8006bda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d013      	beq.n	8006c56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	4a7d      	ldr	r2, [pc, #500]	; (8006e28 <HAL_UART_IRQHandler+0x3dc>)
 8006c34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fd fd88 	bl	8004750 <HAL_DMA_Abort_IT>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d016      	beq.n	8006c74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c50:	4610      	mov	r0, r2
 8006c52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c54:	e00e      	b.n	8006c74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f99a 	bl	8006f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c5c:	e00a      	b.n	8006c74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f996 	bl	8006f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c64:	e006      	b.n	8006c74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f992 	bl	8006f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006c72:	e170      	b.n	8006f56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c74:	bf00      	nop
    return;
 8006c76:	e16e      	b.n	8006f56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	f040 814a 	bne.w	8006f16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c86:	f003 0310 	and.w	r3, r3, #16
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 8143 	beq.w	8006f16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c94:	f003 0310 	and.w	r3, r3, #16
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 813c 	beq.w	8006f16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60bb      	str	r3, [r7, #8]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60bb      	str	r3, [r7, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbe:	2b40      	cmp	r3, #64	; 0x40
 8006cc0:	f040 80b4 	bne.w	8006e2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 8140 	beq.w	8006f5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	f080 8139 	bcs.w	8006f5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cfa:	f000 8088 	beq.w	8006e0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	330c      	adds	r3, #12
 8006d04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	330c      	adds	r3, #12
 8006d26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006d2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d3a:	e841 2300 	strex	r3, r2, [r1]
 8006d3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1d9      	bne.n	8006cfe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3314      	adds	r3, #20
 8006d50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d5c:	f023 0301 	bic.w	r3, r3, #1
 8006d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3314      	adds	r3, #20
 8006d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e1      	bne.n	8006d4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3314      	adds	r3, #20
 8006d8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3314      	adds	r3, #20
 8006da6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006daa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006dac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006db0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e3      	bne.n	8006d86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	330c      	adds	r3, #12
 8006dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dde:	f023 0310 	bic.w	r3, r3, #16
 8006de2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	330c      	adds	r3, #12
 8006dec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006df0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006df2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006df6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e3      	bne.n	8006dcc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fd fc31 	bl	8004670 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f8c0 	bl	8006fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e24:	e099      	b.n	8006f5a <HAL_UART_IRQHandler+0x50e>
 8006e26:	bf00      	nop
 8006e28:	080073ff 	.word	0x080073ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 808b 	beq.w	8006f5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006e48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 8086 	beq.w	8006f5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	330c      	adds	r3, #12
 8006e58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	330c      	adds	r3, #12
 8006e72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e76:	647a      	str	r2, [r7, #68]	; 0x44
 8006e78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e3      	bne.n	8006e52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3314      	adds	r3, #20
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	623b      	str	r3, [r7, #32]
   return(result);
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	f023 0301 	bic.w	r3, r3, #1
 8006ea0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3314      	adds	r3, #20
 8006eaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006eae:	633a      	str	r2, [r7, #48]	; 0x30
 8006eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e3      	bne.n	8006e8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0310 	bic.w	r3, r3, #16
 8006ee6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	330c      	adds	r3, #12
 8006ef0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ef4:	61fa      	str	r2, [r7, #28]
 8006ef6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	69b9      	ldr	r1, [r7, #24]
 8006efa:	69fa      	ldr	r2, [r7, #28]
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	617b      	str	r3, [r7, #20]
   return(result);
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e3      	bne.n	8006ed0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f848 	bl	8006fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f14:	e023      	b.n	8006f5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d009      	beq.n	8006f36 <HAL_UART_IRQHandler+0x4ea>
 8006f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa79 	bl	8007426 <UART_Transmit_IT>
    return;
 8006f34:	e014      	b.n	8006f60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00e      	beq.n	8006f60 <HAL_UART_IRQHandler+0x514>
 8006f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d008      	beq.n	8006f60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fab9 	bl	80074c6 <UART_EndTransmit_IT>
    return;
 8006f54:	e004      	b.n	8006f60 <HAL_UART_IRQHandler+0x514>
    return;
 8006f56:	bf00      	nop
 8006f58:	e002      	b.n	8006f60 <HAL_UART_IRQHandler+0x514>
      return;
 8006f5a:	bf00      	nop
 8006f5c:	e000      	b.n	8006f60 <HAL_UART_IRQHandler+0x514>
      return;
 8006f5e:	bf00      	nop
  }
}
 8006f60:	37e8      	adds	r7, #232	; 0xe8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop

08006f68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b09c      	sub	sp, #112	; 0x70
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d172      	bne.n	80070be <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fda:	2200      	movs	r2, #0
 8006fdc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	330c      	adds	r3, #12
 8006fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ff4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	330c      	adds	r3, #12
 8006ffc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ffe:	65ba      	str	r2, [r7, #88]	; 0x58
 8007000:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800700c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e5      	bne.n	8006fde <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3314      	adds	r3, #20
 8007018:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007024:	f023 0301 	bic.w	r3, r3, #1
 8007028:	667b      	str	r3, [r7, #100]	; 0x64
 800702a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3314      	adds	r3, #20
 8007030:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007032:	647a      	str	r2, [r7, #68]	; 0x44
 8007034:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007036:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e5      	bne.n	8007012 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3314      	adds	r3, #20
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	623b      	str	r3, [r7, #32]
   return(result);
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800705c:	663b      	str	r3, [r7, #96]	; 0x60
 800705e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3314      	adds	r3, #20
 8007064:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007066:	633a      	str	r2, [r7, #48]	; 0x30
 8007068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800706c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e5      	bne.n	8007046 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800707a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707c:	2220      	movs	r2, #32
 800707e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	2b01      	cmp	r3, #1
 8007088:	d119      	bne.n	80070be <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800708a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	330c      	adds	r3, #12
 8007090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	60fb      	str	r3, [r7, #12]
   return(result);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f023 0310 	bic.w	r3, r3, #16
 80070a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	330c      	adds	r3, #12
 80070a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070aa:	61fa      	str	r2, [r7, #28]
 80070ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	69b9      	ldr	r1, [r7, #24]
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	617b      	str	r3, [r7, #20]
   return(result);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e5      	bne.n	800708a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d106      	bne.n	80070d4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070ca:	4619      	mov	r1, r3
 80070cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070ce:	f7ff ff69 	bl	8006fa4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070d2:	e002      	b.n	80070da <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80070d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070d6:	f7fa fceb 	bl	8001ab0 <HAL_UART_RxCpltCallback>
}
 80070da:	bf00      	nop
 80070dc:	3770      	adds	r7, #112	; 0x70
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d108      	bne.n	800710a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070fc:	085b      	lsrs	r3, r3, #1
 80070fe:	b29b      	uxth	r3, r3
 8007100:	4619      	mov	r1, r3
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff ff4e 	bl	8006fa4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007108:	e002      	b.n	8007110 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f7ff ff36 	bl	8006f7c <HAL_UART_RxHalfCpltCallback>
}
 8007110:	bf00      	nop
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007120:	2300      	movs	r3, #0
 8007122:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007128:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007134:	2b80      	cmp	r3, #128	; 0x80
 8007136:	bf0c      	ite	eq
 8007138:	2301      	moveq	r3, #1
 800713a:	2300      	movne	r3, #0
 800713c:	b2db      	uxtb	r3, r3
 800713e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b21      	cmp	r3, #33	; 0x21
 800714a:	d108      	bne.n	800715e <UART_DMAError+0x46>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2200      	movs	r2, #0
 8007156:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007158:	68b8      	ldr	r0, [r7, #8]
 800715a:	f000 f8c5 	bl	80072e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007168:	2b40      	cmp	r3, #64	; 0x40
 800716a:	bf0c      	ite	eq
 800716c:	2301      	moveq	r3, #1
 800716e:	2300      	movne	r3, #0
 8007170:	b2db      	uxtb	r3, r3
 8007172:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b22      	cmp	r3, #34	; 0x22
 800717e:	d108      	bne.n	8007192 <UART_DMAError+0x7a>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d005      	beq.n	8007192 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2200      	movs	r2, #0
 800718a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800718c:	68b8      	ldr	r0, [r7, #8]
 800718e:	f000 f8d3 	bl	8007338 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	f043 0210 	orr.w	r2, r3, #16
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800719e:	68b8      	ldr	r0, [r7, #8]
 80071a0:	f7ff fef6 	bl	8006f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071a4:	bf00      	nop
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b098      	sub	sp, #96	; 0x60
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	4613      	mov	r3, r2
 80071b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	88fa      	ldrh	r2, [r7, #6]
 80071c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2222      	movs	r2, #34	; 0x22
 80071d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	4a40      	ldr	r2, [pc, #256]	; (80072dc <UART_Start_Receive_DMA+0x130>)
 80071da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e0:	4a3f      	ldr	r2, [pc, #252]	; (80072e0 <UART_Start_Receive_DMA+0x134>)
 80071e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	4a3e      	ldr	r2, [pc, #248]	; (80072e4 <UART_Start_Receive_DMA+0x138>)
 80071ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	2200      	movs	r2, #0
 80071f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80071f4:	f107 0308 	add.w	r3, r7, #8
 80071f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3304      	adds	r3, #4
 8007204:	4619      	mov	r1, r3
 8007206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	f7fd f9d8 	bl	80045c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007210:	2300      	movs	r3, #0
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	613b      	str	r3, [r7, #16]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d019      	beq.n	800726a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	330c      	adds	r3, #12
 800723c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007240:	e853 3f00 	ldrex	r3, [r3]
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800724c:	65bb      	str	r3, [r7, #88]	; 0x58
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	330c      	adds	r3, #12
 8007254:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007256:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007258:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800725c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e5      	bne.n	8007236 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3314      	adds	r3, #20
 8007270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	f043 0301 	orr.w	r3, r3, #1
 8007280:	657b      	str	r3, [r7, #84]	; 0x54
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3314      	adds	r3, #20
 8007288:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800728a:	63ba      	str	r2, [r7, #56]	; 0x38
 800728c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1e5      	bne.n	800726a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3314      	adds	r3, #20
 80072a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	e853 3f00 	ldrex	r3, [r3]
 80072ac:	617b      	str	r3, [r7, #20]
   return(result);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b4:	653b      	str	r3, [r7, #80]	; 0x50
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3314      	adds	r3, #20
 80072bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072be:	627a      	str	r2, [r7, #36]	; 0x24
 80072c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	6a39      	ldr	r1, [r7, #32]
 80072c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e5      	bne.n	800729e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3760      	adds	r7, #96	; 0x60
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	08006fbd 	.word	0x08006fbd
 80072e0:	080070e3 	.word	0x080070e3
 80072e4:	08007119 	.word	0x08007119

080072e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b089      	sub	sp, #36	; 0x24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	330c      	adds	r3, #12
 80072f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	e853 3f00 	ldrex	r3, [r3]
 80072fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007306:	61fb      	str	r3, [r7, #28]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	330c      	adds	r3, #12
 800730e:	69fa      	ldr	r2, [r7, #28]
 8007310:	61ba      	str	r2, [r7, #24]
 8007312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007314:	6979      	ldr	r1, [r7, #20]
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	e841 2300 	strex	r3, r2, [r1]
 800731c:	613b      	str	r3, [r7, #16]
   return(result);
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e5      	bne.n	80072f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2220      	movs	r2, #32
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800732c:	bf00      	nop
 800732e:	3724      	adds	r7, #36	; 0x24
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b095      	sub	sp, #84	; 0x54
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	330c      	adds	r3, #12
 8007346:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	330c      	adds	r3, #12
 800735e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007360:	643a      	str	r2, [r7, #64]	; 0x40
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007366:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e5      	bne.n	8007340 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3314      	adds	r3, #20
 800737a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	61fb      	str	r3, [r7, #28]
   return(result);
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	f023 0301 	bic.w	r3, r3, #1
 800738a:	64bb      	str	r3, [r7, #72]	; 0x48
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3314      	adds	r3, #20
 8007392:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007394:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800739a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e5      	bne.n	8007374 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d119      	bne.n	80073e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	330c      	adds	r3, #12
 80073b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	60bb      	str	r3, [r7, #8]
   return(result);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f023 0310 	bic.w	r3, r3, #16
 80073c6:	647b      	str	r3, [r7, #68]	; 0x44
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073d0:	61ba      	str	r2, [r7, #24]
 80073d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	6979      	ldr	r1, [r7, #20]
 80073d6:	69ba      	ldr	r2, [r7, #24]
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	613b      	str	r3, [r7, #16]
   return(result);
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e5      	bne.n	80073b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80073f2:	bf00      	nop
 80073f4:	3754      	adds	r7, #84	; 0x54
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f7ff fdb9 	bl	8006f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b21      	cmp	r3, #33	; 0x21
 8007438:	d13e      	bne.n	80074b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007442:	d114      	bne.n	800746e <UART_Transmit_IT+0x48>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d110      	bne.n	800746e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007460:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	1c9a      	adds	r2, r3, #2
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	621a      	str	r2, [r3, #32]
 800746c:	e008      	b.n	8007480 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	1c59      	adds	r1, r3, #1
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6211      	str	r1, [r2, #32]
 8007478:	781a      	ldrb	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007484:	b29b      	uxth	r3, r3
 8007486:	3b01      	subs	r3, #1
 8007488:	b29b      	uxth	r3, r3
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	4619      	mov	r1, r3
 800748e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10f      	bne.n	80074b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	e000      	b.n	80074ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80074b8:	2302      	movs	r3, #2
  }
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b082      	sub	sp, #8
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7ff fd3e 	bl	8006f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b08c      	sub	sp, #48	; 0x30
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b22      	cmp	r3, #34	; 0x22
 8007508:	f040 80ab 	bne.w	8007662 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007514:	d117      	bne.n	8007546 <UART_Receive_IT+0x50>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d113      	bne.n	8007546 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800751e:	2300      	movs	r3, #0
 8007520:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007526:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	b29b      	uxth	r3, r3
 8007530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007534:	b29a      	uxth	r2, r3
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753e:	1c9a      	adds	r2, r3, #2
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	629a      	str	r2, [r3, #40]	; 0x28
 8007544:	e026      	b.n	8007594 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800754c:	2300      	movs	r3, #0
 800754e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007558:	d007      	beq.n	800756a <UART_Receive_IT+0x74>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <UART_Receive_IT+0x82>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d106      	bne.n	8007578 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	b2da      	uxtb	r2, r3
 8007572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007574:	701a      	strb	r2, [r3, #0]
 8007576:	e008      	b.n	800758a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	b2db      	uxtb	r3, r3
 8007580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007584:	b2da      	uxtb	r2, r3
 8007586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007588:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007598:	b29b      	uxth	r3, r3
 800759a:	3b01      	subs	r3, #1
 800759c:	b29b      	uxth	r3, r3
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	4619      	mov	r1, r3
 80075a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d15a      	bne.n	800765e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68da      	ldr	r2, [r3, #12]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0220 	bic.w	r2, r2, #32
 80075b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68da      	ldr	r2, [r3, #12]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	695a      	ldr	r2, [r3, #20]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0201 	bic.w	r2, r2, #1
 80075d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d135      	bne.n	8007654 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	330c      	adds	r3, #12
 80075f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	613b      	str	r3, [r7, #16]
   return(result);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f023 0310 	bic.w	r3, r3, #16
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	330c      	adds	r3, #12
 800760c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800760e:	623a      	str	r2, [r7, #32]
 8007610:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	69f9      	ldr	r1, [r7, #28]
 8007614:	6a3a      	ldr	r2, [r7, #32]
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	61bb      	str	r3, [r7, #24]
   return(result);
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e5      	bne.n	80075ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0310 	and.w	r3, r3, #16
 800762c:	2b10      	cmp	r3, #16
 800762e:	d10a      	bne.n	8007646 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007630:	2300      	movs	r3, #0
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7ff fca9 	bl	8006fa4 <HAL_UARTEx_RxEventCallback>
 8007652:	e002      	b.n	800765a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7fa fa2b 	bl	8001ab0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	e002      	b.n	8007664 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	e000      	b.n	8007664 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007662:	2302      	movs	r3, #2
  }
}
 8007664:	4618      	mov	r0, r3
 8007666:	3730      	adds	r7, #48	; 0x30
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800766c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007670:	b0c0      	sub	sp, #256	; 0x100
 8007672:	af00      	add	r7, sp, #0
 8007674:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007688:	68d9      	ldr	r1, [r3, #12]
 800768a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	ea40 0301 	orr.w	r3, r0, r1
 8007694:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	431a      	orrs	r2, r3
 80076a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	431a      	orrs	r2, r3
 80076ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80076b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80076c4:	f021 010c 	bic.w	r1, r1, #12
 80076c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076d2:	430b      	orrs	r3, r1
 80076d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80076e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e6:	6999      	ldr	r1, [r3, #24]
 80076e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	ea40 0301 	orr.w	r3, r0, r1
 80076f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	4b8f      	ldr	r3, [pc, #572]	; (8007938 <UART_SetConfig+0x2cc>)
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d005      	beq.n	800770c <UART_SetConfig+0xa0>
 8007700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	4b8d      	ldr	r3, [pc, #564]	; (800793c <UART_SetConfig+0x2d0>)
 8007708:	429a      	cmp	r2, r3
 800770a:	d104      	bne.n	8007716 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800770c:	f7fe f8fe 	bl	800590c <HAL_RCC_GetPCLK2Freq>
 8007710:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007714:	e003      	b.n	800771e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007716:	f7fe f8e5 	bl	80058e4 <HAL_RCC_GetPCLK1Freq>
 800771a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800771e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007728:	f040 810c 	bne.w	8007944 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800772c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007730:	2200      	movs	r2, #0
 8007732:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007736:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800773a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800773e:	4622      	mov	r2, r4
 8007740:	462b      	mov	r3, r5
 8007742:	1891      	adds	r1, r2, r2
 8007744:	65b9      	str	r1, [r7, #88]	; 0x58
 8007746:	415b      	adcs	r3, r3
 8007748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800774a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800774e:	4621      	mov	r1, r4
 8007750:	eb12 0801 	adds.w	r8, r2, r1
 8007754:	4629      	mov	r1, r5
 8007756:	eb43 0901 	adc.w	r9, r3, r1
 800775a:	f04f 0200 	mov.w	r2, #0
 800775e:	f04f 0300 	mov.w	r3, #0
 8007762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800776a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800776e:	4690      	mov	r8, r2
 8007770:	4699      	mov	r9, r3
 8007772:	4623      	mov	r3, r4
 8007774:	eb18 0303 	adds.w	r3, r8, r3
 8007778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800777c:	462b      	mov	r3, r5
 800777e:	eb49 0303 	adc.w	r3, r9, r3
 8007782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007792:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007796:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800779a:	460b      	mov	r3, r1
 800779c:	18db      	adds	r3, r3, r3
 800779e:	653b      	str	r3, [r7, #80]	; 0x50
 80077a0:	4613      	mov	r3, r2
 80077a2:	eb42 0303 	adc.w	r3, r2, r3
 80077a6:	657b      	str	r3, [r7, #84]	; 0x54
 80077a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80077ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80077b0:	f7f9 f9d8 	bl	8000b64 <__aeabi_uldivmod>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4b61      	ldr	r3, [pc, #388]	; (8007940 <UART_SetConfig+0x2d4>)
 80077ba:	fba3 2302 	umull	r2, r3, r3, r2
 80077be:	095b      	lsrs	r3, r3, #5
 80077c0:	011c      	lsls	r4, r3, #4
 80077c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80077d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80077d4:	4642      	mov	r2, r8
 80077d6:	464b      	mov	r3, r9
 80077d8:	1891      	adds	r1, r2, r2
 80077da:	64b9      	str	r1, [r7, #72]	; 0x48
 80077dc:	415b      	adcs	r3, r3
 80077de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80077e4:	4641      	mov	r1, r8
 80077e6:	eb12 0a01 	adds.w	sl, r2, r1
 80077ea:	4649      	mov	r1, r9
 80077ec:	eb43 0b01 	adc.w	fp, r3, r1
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80077fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007804:	4692      	mov	sl, r2
 8007806:	469b      	mov	fp, r3
 8007808:	4643      	mov	r3, r8
 800780a:	eb1a 0303 	adds.w	r3, sl, r3
 800780e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007812:	464b      	mov	r3, r9
 8007814:	eb4b 0303 	adc.w	r3, fp, r3
 8007818:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800781c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007828:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800782c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007830:	460b      	mov	r3, r1
 8007832:	18db      	adds	r3, r3, r3
 8007834:	643b      	str	r3, [r7, #64]	; 0x40
 8007836:	4613      	mov	r3, r2
 8007838:	eb42 0303 	adc.w	r3, r2, r3
 800783c:	647b      	str	r3, [r7, #68]	; 0x44
 800783e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007842:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007846:	f7f9 f98d 	bl	8000b64 <__aeabi_uldivmod>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4611      	mov	r1, r2
 8007850:	4b3b      	ldr	r3, [pc, #236]	; (8007940 <UART_SetConfig+0x2d4>)
 8007852:	fba3 2301 	umull	r2, r3, r3, r1
 8007856:	095b      	lsrs	r3, r3, #5
 8007858:	2264      	movs	r2, #100	; 0x64
 800785a:	fb02 f303 	mul.w	r3, r2, r3
 800785e:	1acb      	subs	r3, r1, r3
 8007860:	00db      	lsls	r3, r3, #3
 8007862:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007866:	4b36      	ldr	r3, [pc, #216]	; (8007940 <UART_SetConfig+0x2d4>)
 8007868:	fba3 2302 	umull	r2, r3, r3, r2
 800786c:	095b      	lsrs	r3, r3, #5
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007874:	441c      	add	r4, r3
 8007876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800787a:	2200      	movs	r2, #0
 800787c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007880:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007884:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007888:	4642      	mov	r2, r8
 800788a:	464b      	mov	r3, r9
 800788c:	1891      	adds	r1, r2, r2
 800788e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007890:	415b      	adcs	r3, r3
 8007892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007894:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007898:	4641      	mov	r1, r8
 800789a:	1851      	adds	r1, r2, r1
 800789c:	6339      	str	r1, [r7, #48]	; 0x30
 800789e:	4649      	mov	r1, r9
 80078a0:	414b      	adcs	r3, r1
 80078a2:	637b      	str	r3, [r7, #52]	; 0x34
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	f04f 0300 	mov.w	r3, #0
 80078ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80078b0:	4659      	mov	r1, fp
 80078b2:	00cb      	lsls	r3, r1, #3
 80078b4:	4651      	mov	r1, sl
 80078b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078ba:	4651      	mov	r1, sl
 80078bc:	00ca      	lsls	r2, r1, #3
 80078be:	4610      	mov	r0, r2
 80078c0:	4619      	mov	r1, r3
 80078c2:	4603      	mov	r3, r0
 80078c4:	4642      	mov	r2, r8
 80078c6:	189b      	adds	r3, r3, r2
 80078c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078cc:	464b      	mov	r3, r9
 80078ce:	460a      	mov	r2, r1
 80078d0:	eb42 0303 	adc.w	r3, r2, r3
 80078d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80078e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80078e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80078ec:	460b      	mov	r3, r1
 80078ee:	18db      	adds	r3, r3, r3
 80078f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80078f2:	4613      	mov	r3, r2
 80078f4:	eb42 0303 	adc.w	r3, r2, r3
 80078f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007902:	f7f9 f92f 	bl	8000b64 <__aeabi_uldivmod>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	4b0d      	ldr	r3, [pc, #52]	; (8007940 <UART_SetConfig+0x2d4>)
 800790c:	fba3 1302 	umull	r1, r3, r3, r2
 8007910:	095b      	lsrs	r3, r3, #5
 8007912:	2164      	movs	r1, #100	; 0x64
 8007914:	fb01 f303 	mul.w	r3, r1, r3
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	3332      	adds	r3, #50	; 0x32
 800791e:	4a08      	ldr	r2, [pc, #32]	; (8007940 <UART_SetConfig+0x2d4>)
 8007920:	fba2 2303 	umull	r2, r3, r2, r3
 8007924:	095b      	lsrs	r3, r3, #5
 8007926:	f003 0207 	and.w	r2, r3, #7
 800792a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4422      	add	r2, r4
 8007932:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007934:	e106      	b.n	8007b44 <UART_SetConfig+0x4d8>
 8007936:	bf00      	nop
 8007938:	40011000 	.word	0x40011000
 800793c:	40011400 	.word	0x40011400
 8007940:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007948:	2200      	movs	r2, #0
 800794a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800794e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007952:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007956:	4642      	mov	r2, r8
 8007958:	464b      	mov	r3, r9
 800795a:	1891      	adds	r1, r2, r2
 800795c:	6239      	str	r1, [r7, #32]
 800795e:	415b      	adcs	r3, r3
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
 8007962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007966:	4641      	mov	r1, r8
 8007968:	1854      	adds	r4, r2, r1
 800796a:	4649      	mov	r1, r9
 800796c:	eb43 0501 	adc.w	r5, r3, r1
 8007970:	f04f 0200 	mov.w	r2, #0
 8007974:	f04f 0300 	mov.w	r3, #0
 8007978:	00eb      	lsls	r3, r5, #3
 800797a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800797e:	00e2      	lsls	r2, r4, #3
 8007980:	4614      	mov	r4, r2
 8007982:	461d      	mov	r5, r3
 8007984:	4643      	mov	r3, r8
 8007986:	18e3      	adds	r3, r4, r3
 8007988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800798c:	464b      	mov	r3, r9
 800798e:	eb45 0303 	adc.w	r3, r5, r3
 8007992:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079a6:	f04f 0200 	mov.w	r2, #0
 80079aa:	f04f 0300 	mov.w	r3, #0
 80079ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80079b2:	4629      	mov	r1, r5
 80079b4:	008b      	lsls	r3, r1, #2
 80079b6:	4621      	mov	r1, r4
 80079b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079bc:	4621      	mov	r1, r4
 80079be:	008a      	lsls	r2, r1, #2
 80079c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80079c4:	f7f9 f8ce 	bl	8000b64 <__aeabi_uldivmod>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4b60      	ldr	r3, [pc, #384]	; (8007b50 <UART_SetConfig+0x4e4>)
 80079ce:	fba3 2302 	umull	r2, r3, r3, r2
 80079d2:	095b      	lsrs	r3, r3, #5
 80079d4:	011c      	lsls	r4, r3, #4
 80079d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80079e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80079e8:	4642      	mov	r2, r8
 80079ea:	464b      	mov	r3, r9
 80079ec:	1891      	adds	r1, r2, r2
 80079ee:	61b9      	str	r1, [r7, #24]
 80079f0:	415b      	adcs	r3, r3
 80079f2:	61fb      	str	r3, [r7, #28]
 80079f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079f8:	4641      	mov	r1, r8
 80079fa:	1851      	adds	r1, r2, r1
 80079fc:	6139      	str	r1, [r7, #16]
 80079fe:	4649      	mov	r1, r9
 8007a00:	414b      	adcs	r3, r1
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	f04f 0200 	mov.w	r2, #0
 8007a08:	f04f 0300 	mov.w	r3, #0
 8007a0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a10:	4659      	mov	r1, fp
 8007a12:	00cb      	lsls	r3, r1, #3
 8007a14:	4651      	mov	r1, sl
 8007a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a1a:	4651      	mov	r1, sl
 8007a1c:	00ca      	lsls	r2, r1, #3
 8007a1e:	4610      	mov	r0, r2
 8007a20:	4619      	mov	r1, r3
 8007a22:	4603      	mov	r3, r0
 8007a24:	4642      	mov	r2, r8
 8007a26:	189b      	adds	r3, r3, r2
 8007a28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a2c:	464b      	mov	r3, r9
 8007a2e:	460a      	mov	r2, r1
 8007a30:	eb42 0303 	adc.w	r3, r2, r3
 8007a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007a44:	f04f 0200 	mov.w	r2, #0
 8007a48:	f04f 0300 	mov.w	r3, #0
 8007a4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007a50:	4649      	mov	r1, r9
 8007a52:	008b      	lsls	r3, r1, #2
 8007a54:	4641      	mov	r1, r8
 8007a56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a5a:	4641      	mov	r1, r8
 8007a5c:	008a      	lsls	r2, r1, #2
 8007a5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007a62:	f7f9 f87f 	bl	8000b64 <__aeabi_uldivmod>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	4b38      	ldr	r3, [pc, #224]	; (8007b50 <UART_SetConfig+0x4e4>)
 8007a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8007a72:	095b      	lsrs	r3, r3, #5
 8007a74:	2264      	movs	r2, #100	; 0x64
 8007a76:	fb02 f303 	mul.w	r3, r2, r3
 8007a7a:	1acb      	subs	r3, r1, r3
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	3332      	adds	r3, #50	; 0x32
 8007a80:	4a33      	ldr	r2, [pc, #204]	; (8007b50 <UART_SetConfig+0x4e4>)
 8007a82:	fba2 2303 	umull	r2, r3, r2, r3
 8007a86:	095b      	lsrs	r3, r3, #5
 8007a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a8c:	441c      	add	r4, r3
 8007a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a92:	2200      	movs	r2, #0
 8007a94:	673b      	str	r3, [r7, #112]	; 0x70
 8007a96:	677a      	str	r2, [r7, #116]	; 0x74
 8007a98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a9c:	4642      	mov	r2, r8
 8007a9e:	464b      	mov	r3, r9
 8007aa0:	1891      	adds	r1, r2, r2
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	415b      	adcs	r3, r3
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007aac:	4641      	mov	r1, r8
 8007aae:	1851      	adds	r1, r2, r1
 8007ab0:	6039      	str	r1, [r7, #0]
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	414b      	adcs	r3, r1
 8007ab6:	607b      	str	r3, [r7, #4]
 8007ab8:	f04f 0200 	mov.w	r2, #0
 8007abc:	f04f 0300 	mov.w	r3, #0
 8007ac0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ac4:	4659      	mov	r1, fp
 8007ac6:	00cb      	lsls	r3, r1, #3
 8007ac8:	4651      	mov	r1, sl
 8007aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ace:	4651      	mov	r1, sl
 8007ad0:	00ca      	lsls	r2, r1, #3
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	4642      	mov	r2, r8
 8007ada:	189b      	adds	r3, r3, r2
 8007adc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ade:	464b      	mov	r3, r9
 8007ae0:	460a      	mov	r2, r1
 8007ae2:	eb42 0303 	adc.w	r3, r2, r3
 8007ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	663b      	str	r3, [r7, #96]	; 0x60
 8007af2:	667a      	str	r2, [r7, #100]	; 0x64
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007b00:	4649      	mov	r1, r9
 8007b02:	008b      	lsls	r3, r1, #2
 8007b04:	4641      	mov	r1, r8
 8007b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b0a:	4641      	mov	r1, r8
 8007b0c:	008a      	lsls	r2, r1, #2
 8007b0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007b12:	f7f9 f827 	bl	8000b64 <__aeabi_uldivmod>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4b0d      	ldr	r3, [pc, #52]	; (8007b50 <UART_SetConfig+0x4e4>)
 8007b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b20:	095b      	lsrs	r3, r3, #5
 8007b22:	2164      	movs	r1, #100	; 0x64
 8007b24:	fb01 f303 	mul.w	r3, r1, r3
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	011b      	lsls	r3, r3, #4
 8007b2c:	3332      	adds	r3, #50	; 0x32
 8007b2e:	4a08      	ldr	r2, [pc, #32]	; (8007b50 <UART_SetConfig+0x4e4>)
 8007b30:	fba2 2303 	umull	r2, r3, r2, r3
 8007b34:	095b      	lsrs	r3, r3, #5
 8007b36:	f003 020f 	and.w	r2, r3, #15
 8007b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4422      	add	r2, r4
 8007b42:	609a      	str	r2, [r3, #8]
}
 8007b44:	bf00      	nop
 8007b46:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b50:	51eb851f 	.word	0x51eb851f

08007b54 <memset>:
 8007b54:	4402      	add	r2, r0
 8007b56:	4603      	mov	r3, r0
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d100      	bne.n	8007b5e <memset+0xa>
 8007b5c:	4770      	bx	lr
 8007b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b62:	e7f9      	b.n	8007b58 <memset+0x4>

08007b64 <__errno>:
 8007b64:	4b01      	ldr	r3, [pc, #4]	; (8007b6c <__errno+0x8>)
 8007b66:	6818      	ldr	r0, [r3, #0]
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	200000c8 	.word	0x200000c8

08007b70 <__libc_init_array>:
 8007b70:	b570      	push	{r4, r5, r6, lr}
 8007b72:	4d0d      	ldr	r5, [pc, #52]	; (8007ba8 <__libc_init_array+0x38>)
 8007b74:	4c0d      	ldr	r4, [pc, #52]	; (8007bac <__libc_init_array+0x3c>)
 8007b76:	1b64      	subs	r4, r4, r5
 8007b78:	10a4      	asrs	r4, r4, #2
 8007b7a:	2600      	movs	r6, #0
 8007b7c:	42a6      	cmp	r6, r4
 8007b7e:	d109      	bne.n	8007b94 <__libc_init_array+0x24>
 8007b80:	4d0b      	ldr	r5, [pc, #44]	; (8007bb0 <__libc_init_array+0x40>)
 8007b82:	4c0c      	ldr	r4, [pc, #48]	; (8007bb4 <__libc_init_array+0x44>)
 8007b84:	f001 f8e0 	bl	8008d48 <_init>
 8007b88:	1b64      	subs	r4, r4, r5
 8007b8a:	10a4      	asrs	r4, r4, #2
 8007b8c:	2600      	movs	r6, #0
 8007b8e:	42a6      	cmp	r6, r4
 8007b90:	d105      	bne.n	8007b9e <__libc_init_array+0x2e>
 8007b92:	bd70      	pop	{r4, r5, r6, pc}
 8007b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b98:	4798      	blx	r3
 8007b9a:	3601      	adds	r6, #1
 8007b9c:	e7ee      	b.n	8007b7c <__libc_init_array+0xc>
 8007b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ba2:	4798      	blx	r3
 8007ba4:	3601      	adds	r6, #1
 8007ba6:	e7f2      	b.n	8007b8e <__libc_init_array+0x1e>
 8007ba8:	08008f60 	.word	0x08008f60
 8007bac:	08008f60 	.word	0x08008f60
 8007bb0:	08008f60 	.word	0x08008f60
 8007bb4:	08008f64 	.word	0x08008f64

08007bb8 <memcpy>:
 8007bb8:	440a      	add	r2, r1
 8007bba:	4291      	cmp	r1, r2
 8007bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bc0:	d100      	bne.n	8007bc4 <memcpy+0xc>
 8007bc2:	4770      	bx	lr
 8007bc4:	b510      	push	{r4, lr}
 8007bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bce:	4291      	cmp	r1, r2
 8007bd0:	d1f9      	bne.n	8007bc6 <memcpy+0xe>
 8007bd2:	bd10      	pop	{r4, pc}
 8007bd4:	0000      	movs	r0, r0
	...

08007bd8 <cos>:
 8007bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bda:	ec53 2b10 	vmov	r2, r3, d0
 8007bde:	4826      	ldr	r0, [pc, #152]	; (8007c78 <cos+0xa0>)
 8007be0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007be4:	4281      	cmp	r1, r0
 8007be6:	dc06      	bgt.n	8007bf6 <cos+0x1e>
 8007be8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007c70 <cos+0x98>
 8007bec:	b005      	add	sp, #20
 8007bee:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bf2:	f000 b8c1 	b.w	8007d78 <__kernel_cos>
 8007bf6:	4821      	ldr	r0, [pc, #132]	; (8007c7c <cos+0xa4>)
 8007bf8:	4281      	cmp	r1, r0
 8007bfa:	dd09      	ble.n	8007c10 <cos+0x38>
 8007bfc:	ee10 0a10 	vmov	r0, s0
 8007c00:	4619      	mov	r1, r3
 8007c02:	f7f8 fae5 	bl	80001d0 <__aeabi_dsub>
 8007c06:	ec41 0b10 	vmov	d0, r0, r1
 8007c0a:	b005      	add	sp, #20
 8007c0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c10:	4668      	mov	r0, sp
 8007c12:	f000 fa39 	bl	8008088 <__ieee754_rem_pio2>
 8007c16:	f000 0003 	and.w	r0, r0, #3
 8007c1a:	2801      	cmp	r0, #1
 8007c1c:	d00b      	beq.n	8007c36 <cos+0x5e>
 8007c1e:	2802      	cmp	r0, #2
 8007c20:	d016      	beq.n	8007c50 <cos+0x78>
 8007c22:	b9e0      	cbnz	r0, 8007c5e <cos+0x86>
 8007c24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c28:	ed9d 0b00 	vldr	d0, [sp]
 8007c2c:	f000 f8a4 	bl	8007d78 <__kernel_cos>
 8007c30:	ec51 0b10 	vmov	r0, r1, d0
 8007c34:	e7e7      	b.n	8007c06 <cos+0x2e>
 8007c36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c3a:	ed9d 0b00 	vldr	d0, [sp]
 8007c3e:	f000 f963 	bl	8007f08 <__kernel_sin>
 8007c42:	ec53 2b10 	vmov	r2, r3, d0
 8007c46:	ee10 0a10 	vmov	r0, s0
 8007c4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007c4e:	e7da      	b.n	8007c06 <cos+0x2e>
 8007c50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c54:	ed9d 0b00 	vldr	d0, [sp]
 8007c58:	f000 f88e 	bl	8007d78 <__kernel_cos>
 8007c5c:	e7f1      	b.n	8007c42 <cos+0x6a>
 8007c5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c62:	ed9d 0b00 	vldr	d0, [sp]
 8007c66:	2001      	movs	r0, #1
 8007c68:	f000 f94e 	bl	8007f08 <__kernel_sin>
 8007c6c:	e7e0      	b.n	8007c30 <cos+0x58>
 8007c6e:	bf00      	nop
	...
 8007c78:	3fe921fb 	.word	0x3fe921fb
 8007c7c:	7fefffff 	.word	0x7fefffff

08007c80 <sin>:
 8007c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c82:	ec53 2b10 	vmov	r2, r3, d0
 8007c86:	4828      	ldr	r0, [pc, #160]	; (8007d28 <sin+0xa8>)
 8007c88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c8c:	4281      	cmp	r1, r0
 8007c8e:	dc07      	bgt.n	8007ca0 <sin+0x20>
 8007c90:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007d20 <sin+0xa0>
 8007c94:	2000      	movs	r0, #0
 8007c96:	b005      	add	sp, #20
 8007c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c9c:	f000 b934 	b.w	8007f08 <__kernel_sin>
 8007ca0:	4822      	ldr	r0, [pc, #136]	; (8007d2c <sin+0xac>)
 8007ca2:	4281      	cmp	r1, r0
 8007ca4:	dd09      	ble.n	8007cba <sin+0x3a>
 8007ca6:	ee10 0a10 	vmov	r0, s0
 8007caa:	4619      	mov	r1, r3
 8007cac:	f7f8 fa90 	bl	80001d0 <__aeabi_dsub>
 8007cb0:	ec41 0b10 	vmov	d0, r0, r1
 8007cb4:	b005      	add	sp, #20
 8007cb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cba:	4668      	mov	r0, sp
 8007cbc:	f000 f9e4 	bl	8008088 <__ieee754_rem_pio2>
 8007cc0:	f000 0003 	and.w	r0, r0, #3
 8007cc4:	2801      	cmp	r0, #1
 8007cc6:	d00c      	beq.n	8007ce2 <sin+0x62>
 8007cc8:	2802      	cmp	r0, #2
 8007cca:	d011      	beq.n	8007cf0 <sin+0x70>
 8007ccc:	b9f0      	cbnz	r0, 8007d0c <sin+0x8c>
 8007cce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cd2:	ed9d 0b00 	vldr	d0, [sp]
 8007cd6:	2001      	movs	r0, #1
 8007cd8:	f000 f916 	bl	8007f08 <__kernel_sin>
 8007cdc:	ec51 0b10 	vmov	r0, r1, d0
 8007ce0:	e7e6      	b.n	8007cb0 <sin+0x30>
 8007ce2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ce6:	ed9d 0b00 	vldr	d0, [sp]
 8007cea:	f000 f845 	bl	8007d78 <__kernel_cos>
 8007cee:	e7f5      	b.n	8007cdc <sin+0x5c>
 8007cf0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cf4:	ed9d 0b00 	vldr	d0, [sp]
 8007cf8:	2001      	movs	r0, #1
 8007cfa:	f000 f905 	bl	8007f08 <__kernel_sin>
 8007cfe:	ec53 2b10 	vmov	r2, r3, d0
 8007d02:	ee10 0a10 	vmov	r0, s0
 8007d06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007d0a:	e7d1      	b.n	8007cb0 <sin+0x30>
 8007d0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d10:	ed9d 0b00 	vldr	d0, [sp]
 8007d14:	f000 f830 	bl	8007d78 <__kernel_cos>
 8007d18:	e7f1      	b.n	8007cfe <sin+0x7e>
 8007d1a:	bf00      	nop
 8007d1c:	f3af 8000 	nop.w
	...
 8007d28:	3fe921fb 	.word	0x3fe921fb
 8007d2c:	7fefffff 	.word	0x7fefffff

08007d30 <sqrtf>:
 8007d30:	b508      	push	{r3, lr}
 8007d32:	ed2d 8b02 	vpush	{d8}
 8007d36:	eeb0 8a40 	vmov.f32	s16, s0
 8007d3a:	f000 f817 	bl	8007d6c <__ieee754_sqrtf>
 8007d3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d46:	d60c      	bvs.n	8007d62 <sqrtf+0x32>
 8007d48:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007d68 <sqrtf+0x38>
 8007d4c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d54:	d505      	bpl.n	8007d62 <sqrtf+0x32>
 8007d56:	f7ff ff05 	bl	8007b64 <__errno>
 8007d5a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007d5e:	2321      	movs	r3, #33	; 0x21
 8007d60:	6003      	str	r3, [r0, #0]
 8007d62:	ecbd 8b02 	vpop	{d8}
 8007d66:	bd08      	pop	{r3, pc}
 8007d68:	00000000 	.word	0x00000000

08007d6c <__ieee754_sqrtf>:
 8007d6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007d70:	4770      	bx	lr
 8007d72:	0000      	movs	r0, r0
 8007d74:	0000      	movs	r0, r0
	...

08007d78 <__kernel_cos>:
 8007d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	ec57 6b10 	vmov	r6, r7, d0
 8007d80:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007d84:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007d88:	ed8d 1b00 	vstr	d1, [sp]
 8007d8c:	da07      	bge.n	8007d9e <__kernel_cos+0x26>
 8007d8e:	ee10 0a10 	vmov	r0, s0
 8007d92:	4639      	mov	r1, r7
 8007d94:	f7f8 fe6e 	bl	8000a74 <__aeabi_d2iz>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	f000 8088 	beq.w	8007eae <__kernel_cos+0x136>
 8007d9e:	4632      	mov	r2, r6
 8007da0:	463b      	mov	r3, r7
 8007da2:	4630      	mov	r0, r6
 8007da4:	4639      	mov	r1, r7
 8007da6:	f7f8 fbcb 	bl	8000540 <__aeabi_dmul>
 8007daa:	4b51      	ldr	r3, [pc, #324]	; (8007ef0 <__kernel_cos+0x178>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	4604      	mov	r4, r0
 8007db0:	460d      	mov	r5, r1
 8007db2:	f7f8 fbc5 	bl	8000540 <__aeabi_dmul>
 8007db6:	a340      	add	r3, pc, #256	; (adr r3, 8007eb8 <__kernel_cos+0x140>)
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	4682      	mov	sl, r0
 8007dbe:	468b      	mov	fp, r1
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	f7f8 fbbc 	bl	8000540 <__aeabi_dmul>
 8007dc8:	a33d      	add	r3, pc, #244	; (adr r3, 8007ec0 <__kernel_cos+0x148>)
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f7f8 fa01 	bl	80001d4 <__adddf3>
 8007dd2:	4622      	mov	r2, r4
 8007dd4:	462b      	mov	r3, r5
 8007dd6:	f7f8 fbb3 	bl	8000540 <__aeabi_dmul>
 8007dda:	a33b      	add	r3, pc, #236	; (adr r3, 8007ec8 <__kernel_cos+0x150>)
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	f7f8 f9f6 	bl	80001d0 <__aeabi_dsub>
 8007de4:	4622      	mov	r2, r4
 8007de6:	462b      	mov	r3, r5
 8007de8:	f7f8 fbaa 	bl	8000540 <__aeabi_dmul>
 8007dec:	a338      	add	r3, pc, #224	; (adr r3, 8007ed0 <__kernel_cos+0x158>)
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	f7f8 f9ef 	bl	80001d4 <__adddf3>
 8007df6:	4622      	mov	r2, r4
 8007df8:	462b      	mov	r3, r5
 8007dfa:	f7f8 fba1 	bl	8000540 <__aeabi_dmul>
 8007dfe:	a336      	add	r3, pc, #216	; (adr r3, 8007ed8 <__kernel_cos+0x160>)
 8007e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e04:	f7f8 f9e4 	bl	80001d0 <__aeabi_dsub>
 8007e08:	4622      	mov	r2, r4
 8007e0a:	462b      	mov	r3, r5
 8007e0c:	f7f8 fb98 	bl	8000540 <__aeabi_dmul>
 8007e10:	a333      	add	r3, pc, #204	; (adr r3, 8007ee0 <__kernel_cos+0x168>)
 8007e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e16:	f7f8 f9dd 	bl	80001d4 <__adddf3>
 8007e1a:	4622      	mov	r2, r4
 8007e1c:	462b      	mov	r3, r5
 8007e1e:	f7f8 fb8f 	bl	8000540 <__aeabi_dmul>
 8007e22:	4622      	mov	r2, r4
 8007e24:	462b      	mov	r3, r5
 8007e26:	f7f8 fb8b 	bl	8000540 <__aeabi_dmul>
 8007e2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e2e:	4604      	mov	r4, r0
 8007e30:	460d      	mov	r5, r1
 8007e32:	4630      	mov	r0, r6
 8007e34:	4639      	mov	r1, r7
 8007e36:	f7f8 fb83 	bl	8000540 <__aeabi_dmul>
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	4629      	mov	r1, r5
 8007e40:	4620      	mov	r0, r4
 8007e42:	f7f8 f9c5 	bl	80001d0 <__aeabi_dsub>
 8007e46:	4b2b      	ldr	r3, [pc, #172]	; (8007ef4 <__kernel_cos+0x17c>)
 8007e48:	4598      	cmp	r8, r3
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	460f      	mov	r7, r1
 8007e4e:	dc10      	bgt.n	8007e72 <__kernel_cos+0xfa>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4650      	mov	r0, sl
 8007e56:	4659      	mov	r1, fp
 8007e58:	f7f8 f9ba 	bl	80001d0 <__aeabi_dsub>
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4926      	ldr	r1, [pc, #152]	; (8007ef8 <__kernel_cos+0x180>)
 8007e60:	4602      	mov	r2, r0
 8007e62:	2000      	movs	r0, #0
 8007e64:	f7f8 f9b4 	bl	80001d0 <__aeabi_dsub>
 8007e68:	ec41 0b10 	vmov	d0, r0, r1
 8007e6c:	b003      	add	sp, #12
 8007e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e72:	4b22      	ldr	r3, [pc, #136]	; (8007efc <__kernel_cos+0x184>)
 8007e74:	4920      	ldr	r1, [pc, #128]	; (8007ef8 <__kernel_cos+0x180>)
 8007e76:	4598      	cmp	r8, r3
 8007e78:	bfcc      	ite	gt
 8007e7a:	4d21      	ldrgt	r5, [pc, #132]	; (8007f00 <__kernel_cos+0x188>)
 8007e7c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007e80:	2400      	movs	r4, #0
 8007e82:	4622      	mov	r2, r4
 8007e84:	462b      	mov	r3, r5
 8007e86:	2000      	movs	r0, #0
 8007e88:	f7f8 f9a2 	bl	80001d0 <__aeabi_dsub>
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	4680      	mov	r8, r0
 8007e90:	4689      	mov	r9, r1
 8007e92:	462b      	mov	r3, r5
 8007e94:	4650      	mov	r0, sl
 8007e96:	4659      	mov	r1, fp
 8007e98:	f7f8 f99a 	bl	80001d0 <__aeabi_dsub>
 8007e9c:	4632      	mov	r2, r6
 8007e9e:	463b      	mov	r3, r7
 8007ea0:	f7f8 f996 	bl	80001d0 <__aeabi_dsub>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4640      	mov	r0, r8
 8007eaa:	4649      	mov	r1, r9
 8007eac:	e7da      	b.n	8007e64 <__kernel_cos+0xec>
 8007eae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007ee8 <__kernel_cos+0x170>
 8007eb2:	e7db      	b.n	8007e6c <__kernel_cos+0xf4>
 8007eb4:	f3af 8000 	nop.w
 8007eb8:	be8838d4 	.word	0xbe8838d4
 8007ebc:	bda8fae9 	.word	0xbda8fae9
 8007ec0:	bdb4b1c4 	.word	0xbdb4b1c4
 8007ec4:	3e21ee9e 	.word	0x3e21ee9e
 8007ec8:	809c52ad 	.word	0x809c52ad
 8007ecc:	3e927e4f 	.word	0x3e927e4f
 8007ed0:	19cb1590 	.word	0x19cb1590
 8007ed4:	3efa01a0 	.word	0x3efa01a0
 8007ed8:	16c15177 	.word	0x16c15177
 8007edc:	3f56c16c 	.word	0x3f56c16c
 8007ee0:	5555554c 	.word	0x5555554c
 8007ee4:	3fa55555 	.word	0x3fa55555
 8007ee8:	00000000 	.word	0x00000000
 8007eec:	3ff00000 	.word	0x3ff00000
 8007ef0:	3fe00000 	.word	0x3fe00000
 8007ef4:	3fd33332 	.word	0x3fd33332
 8007ef8:	3ff00000 	.word	0x3ff00000
 8007efc:	3fe90000 	.word	0x3fe90000
 8007f00:	3fd20000 	.word	0x3fd20000
 8007f04:	00000000 	.word	0x00000000

08007f08 <__kernel_sin>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	ed2d 8b04 	vpush	{d8-d9}
 8007f10:	eeb0 8a41 	vmov.f32	s16, s2
 8007f14:	eef0 8a61 	vmov.f32	s17, s3
 8007f18:	ec55 4b10 	vmov	r4, r5, d0
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007f22:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007f26:	9001      	str	r0, [sp, #4]
 8007f28:	da06      	bge.n	8007f38 <__kernel_sin+0x30>
 8007f2a:	ee10 0a10 	vmov	r0, s0
 8007f2e:	4629      	mov	r1, r5
 8007f30:	f7f8 fda0 	bl	8000a74 <__aeabi_d2iz>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	d051      	beq.n	8007fdc <__kernel_sin+0xd4>
 8007f38:	4622      	mov	r2, r4
 8007f3a:	462b      	mov	r3, r5
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	4629      	mov	r1, r5
 8007f40:	f7f8 fafe 	bl	8000540 <__aeabi_dmul>
 8007f44:	4682      	mov	sl, r0
 8007f46:	468b      	mov	fp, r1
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	4629      	mov	r1, r5
 8007f50:	f7f8 faf6 	bl	8000540 <__aeabi_dmul>
 8007f54:	a341      	add	r3, pc, #260	; (adr r3, 800805c <__kernel_sin+0x154>)
 8007f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5a:	4680      	mov	r8, r0
 8007f5c:	4689      	mov	r9, r1
 8007f5e:	4650      	mov	r0, sl
 8007f60:	4659      	mov	r1, fp
 8007f62:	f7f8 faed 	bl	8000540 <__aeabi_dmul>
 8007f66:	a33f      	add	r3, pc, #252	; (adr r3, 8008064 <__kernel_sin+0x15c>)
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	f7f8 f930 	bl	80001d0 <__aeabi_dsub>
 8007f70:	4652      	mov	r2, sl
 8007f72:	465b      	mov	r3, fp
 8007f74:	f7f8 fae4 	bl	8000540 <__aeabi_dmul>
 8007f78:	a33c      	add	r3, pc, #240	; (adr r3, 800806c <__kernel_sin+0x164>)
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	f7f8 f929 	bl	80001d4 <__adddf3>
 8007f82:	4652      	mov	r2, sl
 8007f84:	465b      	mov	r3, fp
 8007f86:	f7f8 fadb 	bl	8000540 <__aeabi_dmul>
 8007f8a:	a33a      	add	r3, pc, #232	; (adr r3, 8008074 <__kernel_sin+0x16c>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	f7f8 f91e 	bl	80001d0 <__aeabi_dsub>
 8007f94:	4652      	mov	r2, sl
 8007f96:	465b      	mov	r3, fp
 8007f98:	f7f8 fad2 	bl	8000540 <__aeabi_dmul>
 8007f9c:	a337      	add	r3, pc, #220	; (adr r3, 800807c <__kernel_sin+0x174>)
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	f7f8 f917 	bl	80001d4 <__adddf3>
 8007fa6:	9b01      	ldr	r3, [sp, #4]
 8007fa8:	4606      	mov	r6, r0
 8007faa:	460f      	mov	r7, r1
 8007fac:	b9eb      	cbnz	r3, 8007fea <__kernel_sin+0xe2>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4650      	mov	r0, sl
 8007fb4:	4659      	mov	r1, fp
 8007fb6:	f7f8 fac3 	bl	8000540 <__aeabi_dmul>
 8007fba:	a325      	add	r3, pc, #148	; (adr r3, 8008050 <__kernel_sin+0x148>)
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f7f8 f906 	bl	80001d0 <__aeabi_dsub>
 8007fc4:	4642      	mov	r2, r8
 8007fc6:	464b      	mov	r3, r9
 8007fc8:	f7f8 faba 	bl	8000540 <__aeabi_dmul>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	f7f8 f8fe 	bl	80001d4 <__adddf3>
 8007fd8:	4604      	mov	r4, r0
 8007fda:	460d      	mov	r5, r1
 8007fdc:	ec45 4b10 	vmov	d0, r4, r5
 8007fe0:	b003      	add	sp, #12
 8007fe2:	ecbd 8b04 	vpop	{d8-d9}
 8007fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fea:	4b1b      	ldr	r3, [pc, #108]	; (8008058 <__kernel_sin+0x150>)
 8007fec:	ec51 0b18 	vmov	r0, r1, d8
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f7f8 faa5 	bl	8000540 <__aeabi_dmul>
 8007ff6:	4632      	mov	r2, r6
 8007ff8:	ec41 0b19 	vmov	d9, r0, r1
 8007ffc:	463b      	mov	r3, r7
 8007ffe:	4640      	mov	r0, r8
 8008000:	4649      	mov	r1, r9
 8008002:	f7f8 fa9d 	bl	8000540 <__aeabi_dmul>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	ec51 0b19 	vmov	r0, r1, d9
 800800e:	f7f8 f8df 	bl	80001d0 <__aeabi_dsub>
 8008012:	4652      	mov	r2, sl
 8008014:	465b      	mov	r3, fp
 8008016:	f7f8 fa93 	bl	8000540 <__aeabi_dmul>
 800801a:	ec53 2b18 	vmov	r2, r3, d8
 800801e:	f7f8 f8d7 	bl	80001d0 <__aeabi_dsub>
 8008022:	a30b      	add	r3, pc, #44	; (adr r3, 8008050 <__kernel_sin+0x148>)
 8008024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008028:	4606      	mov	r6, r0
 800802a:	460f      	mov	r7, r1
 800802c:	4640      	mov	r0, r8
 800802e:	4649      	mov	r1, r9
 8008030:	f7f8 fa86 	bl	8000540 <__aeabi_dmul>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	4630      	mov	r0, r6
 800803a:	4639      	mov	r1, r7
 800803c:	f7f8 f8ca 	bl	80001d4 <__adddf3>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	4620      	mov	r0, r4
 8008046:	4629      	mov	r1, r5
 8008048:	f7f8 f8c2 	bl	80001d0 <__aeabi_dsub>
 800804c:	e7c4      	b.n	8007fd8 <__kernel_sin+0xd0>
 800804e:	bf00      	nop
 8008050:	55555549 	.word	0x55555549
 8008054:	3fc55555 	.word	0x3fc55555
 8008058:	3fe00000 	.word	0x3fe00000
 800805c:	5acfd57c 	.word	0x5acfd57c
 8008060:	3de5d93a 	.word	0x3de5d93a
 8008064:	8a2b9ceb 	.word	0x8a2b9ceb
 8008068:	3e5ae5e6 	.word	0x3e5ae5e6
 800806c:	57b1fe7d 	.word	0x57b1fe7d
 8008070:	3ec71de3 	.word	0x3ec71de3
 8008074:	19c161d5 	.word	0x19c161d5
 8008078:	3f2a01a0 	.word	0x3f2a01a0
 800807c:	1110f8a6 	.word	0x1110f8a6
 8008080:	3f811111 	.word	0x3f811111
 8008084:	00000000 	.word	0x00000000

08008088 <__ieee754_rem_pio2>:
 8008088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	ed2d 8b02 	vpush	{d8}
 8008090:	ec55 4b10 	vmov	r4, r5, d0
 8008094:	4bca      	ldr	r3, [pc, #808]	; (80083c0 <__ieee754_rem_pio2+0x338>)
 8008096:	b08b      	sub	sp, #44	; 0x2c
 8008098:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800809c:	4598      	cmp	r8, r3
 800809e:	4682      	mov	sl, r0
 80080a0:	9502      	str	r5, [sp, #8]
 80080a2:	dc08      	bgt.n	80080b6 <__ieee754_rem_pio2+0x2e>
 80080a4:	2200      	movs	r2, #0
 80080a6:	2300      	movs	r3, #0
 80080a8:	ed80 0b00 	vstr	d0, [r0]
 80080ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80080b0:	f04f 0b00 	mov.w	fp, #0
 80080b4:	e028      	b.n	8008108 <__ieee754_rem_pio2+0x80>
 80080b6:	4bc3      	ldr	r3, [pc, #780]	; (80083c4 <__ieee754_rem_pio2+0x33c>)
 80080b8:	4598      	cmp	r8, r3
 80080ba:	dc78      	bgt.n	80081ae <__ieee754_rem_pio2+0x126>
 80080bc:	9b02      	ldr	r3, [sp, #8]
 80080be:	4ec2      	ldr	r6, [pc, #776]	; (80083c8 <__ieee754_rem_pio2+0x340>)
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	ee10 0a10 	vmov	r0, s0
 80080c6:	a3b0      	add	r3, pc, #704	; (adr r3, 8008388 <__ieee754_rem_pio2+0x300>)
 80080c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080cc:	4629      	mov	r1, r5
 80080ce:	dd39      	ble.n	8008144 <__ieee754_rem_pio2+0xbc>
 80080d0:	f7f8 f87e 	bl	80001d0 <__aeabi_dsub>
 80080d4:	45b0      	cmp	r8, r6
 80080d6:	4604      	mov	r4, r0
 80080d8:	460d      	mov	r5, r1
 80080da:	d01b      	beq.n	8008114 <__ieee754_rem_pio2+0x8c>
 80080dc:	a3ac      	add	r3, pc, #688	; (adr r3, 8008390 <__ieee754_rem_pio2+0x308>)
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	f7f8 f875 	bl	80001d0 <__aeabi_dsub>
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	e9ca 2300 	strd	r2, r3, [sl]
 80080ee:	4620      	mov	r0, r4
 80080f0:	4629      	mov	r1, r5
 80080f2:	f7f8 f86d 	bl	80001d0 <__aeabi_dsub>
 80080f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008390 <__ieee754_rem_pio2+0x308>)
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	f7f8 f868 	bl	80001d0 <__aeabi_dsub>
 8008100:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008104:	f04f 0b01 	mov.w	fp, #1
 8008108:	4658      	mov	r0, fp
 800810a:	b00b      	add	sp, #44	; 0x2c
 800810c:	ecbd 8b02 	vpop	{d8}
 8008110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008114:	a3a0      	add	r3, pc, #640	; (adr r3, 8008398 <__ieee754_rem_pio2+0x310>)
 8008116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811a:	f7f8 f859 	bl	80001d0 <__aeabi_dsub>
 800811e:	a3a0      	add	r3, pc, #640	; (adr r3, 80083a0 <__ieee754_rem_pio2+0x318>)
 8008120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008124:	4604      	mov	r4, r0
 8008126:	460d      	mov	r5, r1
 8008128:	f7f8 f852 	bl	80001d0 <__aeabi_dsub>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	e9ca 2300 	strd	r2, r3, [sl]
 8008134:	4620      	mov	r0, r4
 8008136:	4629      	mov	r1, r5
 8008138:	f7f8 f84a 	bl	80001d0 <__aeabi_dsub>
 800813c:	a398      	add	r3, pc, #608	; (adr r3, 80083a0 <__ieee754_rem_pio2+0x318>)
 800813e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008142:	e7db      	b.n	80080fc <__ieee754_rem_pio2+0x74>
 8008144:	f7f8 f846 	bl	80001d4 <__adddf3>
 8008148:	45b0      	cmp	r8, r6
 800814a:	4604      	mov	r4, r0
 800814c:	460d      	mov	r5, r1
 800814e:	d016      	beq.n	800817e <__ieee754_rem_pio2+0xf6>
 8008150:	a38f      	add	r3, pc, #572	; (adr r3, 8008390 <__ieee754_rem_pio2+0x308>)
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	f7f8 f83d 	bl	80001d4 <__adddf3>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	e9ca 2300 	strd	r2, r3, [sl]
 8008162:	4620      	mov	r0, r4
 8008164:	4629      	mov	r1, r5
 8008166:	f7f8 f833 	bl	80001d0 <__aeabi_dsub>
 800816a:	a389      	add	r3, pc, #548	; (adr r3, 8008390 <__ieee754_rem_pio2+0x308>)
 800816c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008170:	f7f8 f830 	bl	80001d4 <__adddf3>
 8008174:	f04f 3bff 	mov.w	fp, #4294967295
 8008178:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800817c:	e7c4      	b.n	8008108 <__ieee754_rem_pio2+0x80>
 800817e:	a386      	add	r3, pc, #536	; (adr r3, 8008398 <__ieee754_rem_pio2+0x310>)
 8008180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008184:	f7f8 f826 	bl	80001d4 <__adddf3>
 8008188:	a385      	add	r3, pc, #532	; (adr r3, 80083a0 <__ieee754_rem_pio2+0x318>)
 800818a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818e:	4604      	mov	r4, r0
 8008190:	460d      	mov	r5, r1
 8008192:	f7f8 f81f 	bl	80001d4 <__adddf3>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	e9ca 2300 	strd	r2, r3, [sl]
 800819e:	4620      	mov	r0, r4
 80081a0:	4629      	mov	r1, r5
 80081a2:	f7f8 f815 	bl	80001d0 <__aeabi_dsub>
 80081a6:	a37e      	add	r3, pc, #504	; (adr r3, 80083a0 <__ieee754_rem_pio2+0x318>)
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	e7e0      	b.n	8008170 <__ieee754_rem_pio2+0xe8>
 80081ae:	4b87      	ldr	r3, [pc, #540]	; (80083cc <__ieee754_rem_pio2+0x344>)
 80081b0:	4598      	cmp	r8, r3
 80081b2:	f300 80d8 	bgt.w	8008366 <__ieee754_rem_pio2+0x2de>
 80081b6:	f000 f96d 	bl	8008494 <fabs>
 80081ba:	ec55 4b10 	vmov	r4, r5, d0
 80081be:	ee10 0a10 	vmov	r0, s0
 80081c2:	a379      	add	r3, pc, #484	; (adr r3, 80083a8 <__ieee754_rem_pio2+0x320>)
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	4629      	mov	r1, r5
 80081ca:	f7f8 f9b9 	bl	8000540 <__aeabi_dmul>
 80081ce:	4b80      	ldr	r3, [pc, #512]	; (80083d0 <__ieee754_rem_pio2+0x348>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	f7f7 ffff 	bl	80001d4 <__adddf3>
 80081d6:	f7f8 fc4d 	bl	8000a74 <__aeabi_d2iz>
 80081da:	4683      	mov	fp, r0
 80081dc:	f7f8 f946 	bl	800046c <__aeabi_i2d>
 80081e0:	4602      	mov	r2, r0
 80081e2:	460b      	mov	r3, r1
 80081e4:	ec43 2b18 	vmov	d8, r2, r3
 80081e8:	a367      	add	r3, pc, #412	; (adr r3, 8008388 <__ieee754_rem_pio2+0x300>)
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	f7f8 f9a7 	bl	8000540 <__aeabi_dmul>
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	4620      	mov	r0, r4
 80081f8:	4629      	mov	r1, r5
 80081fa:	f7f7 ffe9 	bl	80001d0 <__aeabi_dsub>
 80081fe:	a364      	add	r3, pc, #400	; (adr r3, 8008390 <__ieee754_rem_pio2+0x308>)
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	4606      	mov	r6, r0
 8008206:	460f      	mov	r7, r1
 8008208:	ec51 0b18 	vmov	r0, r1, d8
 800820c:	f7f8 f998 	bl	8000540 <__aeabi_dmul>
 8008210:	f1bb 0f1f 	cmp.w	fp, #31
 8008214:	4604      	mov	r4, r0
 8008216:	460d      	mov	r5, r1
 8008218:	dc0d      	bgt.n	8008236 <__ieee754_rem_pio2+0x1ae>
 800821a:	4b6e      	ldr	r3, [pc, #440]	; (80083d4 <__ieee754_rem_pio2+0x34c>)
 800821c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008224:	4543      	cmp	r3, r8
 8008226:	d006      	beq.n	8008236 <__ieee754_rem_pio2+0x1ae>
 8008228:	4622      	mov	r2, r4
 800822a:	462b      	mov	r3, r5
 800822c:	4630      	mov	r0, r6
 800822e:	4639      	mov	r1, r7
 8008230:	f7f7 ffce 	bl	80001d0 <__aeabi_dsub>
 8008234:	e00e      	b.n	8008254 <__ieee754_rem_pio2+0x1cc>
 8008236:	462b      	mov	r3, r5
 8008238:	4622      	mov	r2, r4
 800823a:	4630      	mov	r0, r6
 800823c:	4639      	mov	r1, r7
 800823e:	f7f7 ffc7 	bl	80001d0 <__aeabi_dsub>
 8008242:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008246:	9303      	str	r3, [sp, #12]
 8008248:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800824c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008250:	2b10      	cmp	r3, #16
 8008252:	dc02      	bgt.n	800825a <__ieee754_rem_pio2+0x1d2>
 8008254:	e9ca 0100 	strd	r0, r1, [sl]
 8008258:	e039      	b.n	80082ce <__ieee754_rem_pio2+0x246>
 800825a:	a34f      	add	r3, pc, #316	; (adr r3, 8008398 <__ieee754_rem_pio2+0x310>)
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	ec51 0b18 	vmov	r0, r1, d8
 8008264:	f7f8 f96c 	bl	8000540 <__aeabi_dmul>
 8008268:	4604      	mov	r4, r0
 800826a:	460d      	mov	r5, r1
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4630      	mov	r0, r6
 8008272:	4639      	mov	r1, r7
 8008274:	f7f7 ffac 	bl	80001d0 <__aeabi_dsub>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	4680      	mov	r8, r0
 800827e:	4689      	mov	r9, r1
 8008280:	4630      	mov	r0, r6
 8008282:	4639      	mov	r1, r7
 8008284:	f7f7 ffa4 	bl	80001d0 <__aeabi_dsub>
 8008288:	4622      	mov	r2, r4
 800828a:	462b      	mov	r3, r5
 800828c:	f7f7 ffa0 	bl	80001d0 <__aeabi_dsub>
 8008290:	a343      	add	r3, pc, #268	; (adr r3, 80083a0 <__ieee754_rem_pio2+0x318>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	4604      	mov	r4, r0
 8008298:	460d      	mov	r5, r1
 800829a:	ec51 0b18 	vmov	r0, r1, d8
 800829e:	f7f8 f94f 	bl	8000540 <__aeabi_dmul>
 80082a2:	4622      	mov	r2, r4
 80082a4:	462b      	mov	r3, r5
 80082a6:	f7f7 ff93 	bl	80001d0 <__aeabi_dsub>
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	4604      	mov	r4, r0
 80082b0:	460d      	mov	r5, r1
 80082b2:	4640      	mov	r0, r8
 80082b4:	4649      	mov	r1, r9
 80082b6:	f7f7 ff8b 	bl	80001d0 <__aeabi_dsub>
 80082ba:	9a03      	ldr	r2, [sp, #12]
 80082bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	2b31      	cmp	r3, #49	; 0x31
 80082c4:	dc24      	bgt.n	8008310 <__ieee754_rem_pio2+0x288>
 80082c6:	e9ca 0100 	strd	r0, r1, [sl]
 80082ca:	4646      	mov	r6, r8
 80082cc:	464f      	mov	r7, r9
 80082ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80082d2:	4630      	mov	r0, r6
 80082d4:	4642      	mov	r2, r8
 80082d6:	464b      	mov	r3, r9
 80082d8:	4639      	mov	r1, r7
 80082da:	f7f7 ff79 	bl	80001d0 <__aeabi_dsub>
 80082de:	462b      	mov	r3, r5
 80082e0:	4622      	mov	r2, r4
 80082e2:	f7f7 ff75 	bl	80001d0 <__aeabi_dsub>
 80082e6:	9b02      	ldr	r3, [sp, #8]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80082ee:	f6bf af0b 	bge.w	8008108 <__ieee754_rem_pio2+0x80>
 80082f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80082f6:	f8ca 3004 	str.w	r3, [sl, #4]
 80082fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082fe:	f8ca 8000 	str.w	r8, [sl]
 8008302:	f8ca 0008 	str.w	r0, [sl, #8]
 8008306:	f8ca 300c 	str.w	r3, [sl, #12]
 800830a:	f1cb 0b00 	rsb	fp, fp, #0
 800830e:	e6fb      	b.n	8008108 <__ieee754_rem_pio2+0x80>
 8008310:	a327      	add	r3, pc, #156	; (adr r3, 80083b0 <__ieee754_rem_pio2+0x328>)
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	ec51 0b18 	vmov	r0, r1, d8
 800831a:	f7f8 f911 	bl	8000540 <__aeabi_dmul>
 800831e:	4604      	mov	r4, r0
 8008320:	460d      	mov	r5, r1
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	4640      	mov	r0, r8
 8008328:	4649      	mov	r1, r9
 800832a:	f7f7 ff51 	bl	80001d0 <__aeabi_dsub>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4606      	mov	r6, r0
 8008334:	460f      	mov	r7, r1
 8008336:	4640      	mov	r0, r8
 8008338:	4649      	mov	r1, r9
 800833a:	f7f7 ff49 	bl	80001d0 <__aeabi_dsub>
 800833e:	4622      	mov	r2, r4
 8008340:	462b      	mov	r3, r5
 8008342:	f7f7 ff45 	bl	80001d0 <__aeabi_dsub>
 8008346:	a31c      	add	r3, pc, #112	; (adr r3, 80083b8 <__ieee754_rem_pio2+0x330>)
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	4604      	mov	r4, r0
 800834e:	460d      	mov	r5, r1
 8008350:	ec51 0b18 	vmov	r0, r1, d8
 8008354:	f7f8 f8f4 	bl	8000540 <__aeabi_dmul>
 8008358:	4622      	mov	r2, r4
 800835a:	462b      	mov	r3, r5
 800835c:	f7f7 ff38 	bl	80001d0 <__aeabi_dsub>
 8008360:	4604      	mov	r4, r0
 8008362:	460d      	mov	r5, r1
 8008364:	e760      	b.n	8008228 <__ieee754_rem_pio2+0x1a0>
 8008366:	4b1c      	ldr	r3, [pc, #112]	; (80083d8 <__ieee754_rem_pio2+0x350>)
 8008368:	4598      	cmp	r8, r3
 800836a:	dd37      	ble.n	80083dc <__ieee754_rem_pio2+0x354>
 800836c:	ee10 2a10 	vmov	r2, s0
 8008370:	462b      	mov	r3, r5
 8008372:	4620      	mov	r0, r4
 8008374:	4629      	mov	r1, r5
 8008376:	f7f7 ff2b 	bl	80001d0 <__aeabi_dsub>
 800837a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800837e:	e9ca 0100 	strd	r0, r1, [sl]
 8008382:	e695      	b.n	80080b0 <__ieee754_rem_pio2+0x28>
 8008384:	f3af 8000 	nop.w
 8008388:	54400000 	.word	0x54400000
 800838c:	3ff921fb 	.word	0x3ff921fb
 8008390:	1a626331 	.word	0x1a626331
 8008394:	3dd0b461 	.word	0x3dd0b461
 8008398:	1a600000 	.word	0x1a600000
 800839c:	3dd0b461 	.word	0x3dd0b461
 80083a0:	2e037073 	.word	0x2e037073
 80083a4:	3ba3198a 	.word	0x3ba3198a
 80083a8:	6dc9c883 	.word	0x6dc9c883
 80083ac:	3fe45f30 	.word	0x3fe45f30
 80083b0:	2e000000 	.word	0x2e000000
 80083b4:	3ba3198a 	.word	0x3ba3198a
 80083b8:	252049c1 	.word	0x252049c1
 80083bc:	397b839a 	.word	0x397b839a
 80083c0:	3fe921fb 	.word	0x3fe921fb
 80083c4:	4002d97b 	.word	0x4002d97b
 80083c8:	3ff921fb 	.word	0x3ff921fb
 80083cc:	413921fb 	.word	0x413921fb
 80083d0:	3fe00000 	.word	0x3fe00000
 80083d4:	08008d80 	.word	0x08008d80
 80083d8:	7fefffff 	.word	0x7fefffff
 80083dc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80083e0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80083e4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80083e8:	4620      	mov	r0, r4
 80083ea:	460d      	mov	r5, r1
 80083ec:	f7f8 fb42 	bl	8000a74 <__aeabi_d2iz>
 80083f0:	f7f8 f83c 	bl	800046c <__aeabi_i2d>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4620      	mov	r0, r4
 80083fa:	4629      	mov	r1, r5
 80083fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008400:	f7f7 fee6 	bl	80001d0 <__aeabi_dsub>
 8008404:	4b21      	ldr	r3, [pc, #132]	; (800848c <__ieee754_rem_pio2+0x404>)
 8008406:	2200      	movs	r2, #0
 8008408:	f7f8 f89a 	bl	8000540 <__aeabi_dmul>
 800840c:	460d      	mov	r5, r1
 800840e:	4604      	mov	r4, r0
 8008410:	f7f8 fb30 	bl	8000a74 <__aeabi_d2iz>
 8008414:	f7f8 f82a 	bl	800046c <__aeabi_i2d>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4620      	mov	r0, r4
 800841e:	4629      	mov	r1, r5
 8008420:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008424:	f7f7 fed4 	bl	80001d0 <__aeabi_dsub>
 8008428:	4b18      	ldr	r3, [pc, #96]	; (800848c <__ieee754_rem_pio2+0x404>)
 800842a:	2200      	movs	r2, #0
 800842c:	f7f8 f888 	bl	8000540 <__aeabi_dmul>
 8008430:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008434:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008438:	2703      	movs	r7, #3
 800843a:	2400      	movs	r4, #0
 800843c:	2500      	movs	r5, #0
 800843e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8008442:	4622      	mov	r2, r4
 8008444:	462b      	mov	r3, r5
 8008446:	46b9      	mov	r9, r7
 8008448:	3f01      	subs	r7, #1
 800844a:	f7f8 fae1 	bl	8000a10 <__aeabi_dcmpeq>
 800844e:	2800      	cmp	r0, #0
 8008450:	d1f5      	bne.n	800843e <__ieee754_rem_pio2+0x3b6>
 8008452:	4b0f      	ldr	r3, [pc, #60]	; (8008490 <__ieee754_rem_pio2+0x408>)
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	2302      	movs	r3, #2
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	4632      	mov	r2, r6
 800845c:	464b      	mov	r3, r9
 800845e:	4651      	mov	r1, sl
 8008460:	a804      	add	r0, sp, #16
 8008462:	f000 f821 	bl	80084a8 <__kernel_rem_pio2>
 8008466:	9b02      	ldr	r3, [sp, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	4683      	mov	fp, r0
 800846c:	f6bf ae4c 	bge.w	8008108 <__ieee754_rem_pio2+0x80>
 8008470:	e9da 2100 	ldrd	r2, r1, [sl]
 8008474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008478:	e9ca 2300 	strd	r2, r3, [sl]
 800847c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008480:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008484:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008488:	e73f      	b.n	800830a <__ieee754_rem_pio2+0x282>
 800848a:	bf00      	nop
 800848c:	41700000 	.word	0x41700000
 8008490:	08008e00 	.word	0x08008e00

08008494 <fabs>:
 8008494:	ec51 0b10 	vmov	r0, r1, d0
 8008498:	ee10 2a10 	vmov	r2, s0
 800849c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80084a0:	ec43 2b10 	vmov	d0, r2, r3
 80084a4:	4770      	bx	lr
	...

080084a8 <__kernel_rem_pio2>:
 80084a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	ed2d 8b02 	vpush	{d8}
 80084b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80084b4:	f112 0f14 	cmn.w	r2, #20
 80084b8:	9306      	str	r3, [sp, #24]
 80084ba:	9104      	str	r1, [sp, #16]
 80084bc:	4bc2      	ldr	r3, [pc, #776]	; (80087c8 <__kernel_rem_pio2+0x320>)
 80084be:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80084c0:	9009      	str	r0, [sp, #36]	; 0x24
 80084c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	9b06      	ldr	r3, [sp, #24]
 80084ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80084ce:	bfa8      	it	ge
 80084d0:	1ed4      	subge	r4, r2, #3
 80084d2:	9305      	str	r3, [sp, #20]
 80084d4:	bfb2      	itee	lt
 80084d6:	2400      	movlt	r4, #0
 80084d8:	2318      	movge	r3, #24
 80084da:	fb94 f4f3 	sdivge	r4, r4, r3
 80084de:	f06f 0317 	mvn.w	r3, #23
 80084e2:	fb04 3303 	mla	r3, r4, r3, r3
 80084e6:	eb03 0a02 	add.w	sl, r3, r2
 80084ea:	9b00      	ldr	r3, [sp, #0]
 80084ec:	9a05      	ldr	r2, [sp, #20]
 80084ee:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80087b8 <__kernel_rem_pio2+0x310>
 80084f2:	eb03 0802 	add.w	r8, r3, r2
 80084f6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80084f8:	1aa7      	subs	r7, r4, r2
 80084fa:	ae20      	add	r6, sp, #128	; 0x80
 80084fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008500:	2500      	movs	r5, #0
 8008502:	4545      	cmp	r5, r8
 8008504:	dd13      	ble.n	800852e <__kernel_rem_pio2+0x86>
 8008506:	9b06      	ldr	r3, [sp, #24]
 8008508:	aa20      	add	r2, sp, #128	; 0x80
 800850a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800850e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008512:	f04f 0800 	mov.w	r8, #0
 8008516:	9b00      	ldr	r3, [sp, #0]
 8008518:	4598      	cmp	r8, r3
 800851a:	dc31      	bgt.n	8008580 <__kernel_rem_pio2+0xd8>
 800851c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80087b8 <__kernel_rem_pio2+0x310>
 8008520:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008524:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008528:	462f      	mov	r7, r5
 800852a:	2600      	movs	r6, #0
 800852c:	e01b      	b.n	8008566 <__kernel_rem_pio2+0xbe>
 800852e:	42ef      	cmn	r7, r5
 8008530:	d407      	bmi.n	8008542 <__kernel_rem_pio2+0x9a>
 8008532:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008536:	f7f7 ff99 	bl	800046c <__aeabi_i2d>
 800853a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800853e:	3501      	adds	r5, #1
 8008540:	e7df      	b.n	8008502 <__kernel_rem_pio2+0x5a>
 8008542:	ec51 0b18 	vmov	r0, r1, d8
 8008546:	e7f8      	b.n	800853a <__kernel_rem_pio2+0x92>
 8008548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800854c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008550:	f7f7 fff6 	bl	8000540 <__aeabi_dmul>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800855c:	f7f7 fe3a 	bl	80001d4 <__adddf3>
 8008560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008564:	3601      	adds	r6, #1
 8008566:	9b05      	ldr	r3, [sp, #20]
 8008568:	429e      	cmp	r6, r3
 800856a:	f1a7 0708 	sub.w	r7, r7, #8
 800856e:	ddeb      	ble.n	8008548 <__kernel_rem_pio2+0xa0>
 8008570:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008574:	f108 0801 	add.w	r8, r8, #1
 8008578:	ecab 7b02 	vstmia	fp!, {d7}
 800857c:	3508      	adds	r5, #8
 800857e:	e7ca      	b.n	8008516 <__kernel_rem_pio2+0x6e>
 8008580:	9b00      	ldr	r3, [sp, #0]
 8008582:	aa0c      	add	r2, sp, #48	; 0x30
 8008584:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008588:	930b      	str	r3, [sp, #44]	; 0x2c
 800858a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800858c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008590:	9c00      	ldr	r4, [sp, #0]
 8008592:	930a      	str	r3, [sp, #40]	; 0x28
 8008594:	00e3      	lsls	r3, r4, #3
 8008596:	9308      	str	r3, [sp, #32]
 8008598:	ab98      	add	r3, sp, #608	; 0x260
 800859a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800859e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80085a2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80085a6:	ab70      	add	r3, sp, #448	; 0x1c0
 80085a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80085ac:	46c3      	mov	fp, r8
 80085ae:	46a1      	mov	r9, r4
 80085b0:	f1b9 0f00 	cmp.w	r9, #0
 80085b4:	f1a5 0508 	sub.w	r5, r5, #8
 80085b8:	dc77      	bgt.n	80086aa <__kernel_rem_pio2+0x202>
 80085ba:	ec47 6b10 	vmov	d0, r6, r7
 80085be:	4650      	mov	r0, sl
 80085c0:	f000 fac2 	bl	8008b48 <scalbn>
 80085c4:	ec57 6b10 	vmov	r6, r7, d0
 80085c8:	2200      	movs	r2, #0
 80085ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80085ce:	ee10 0a10 	vmov	r0, s0
 80085d2:	4639      	mov	r1, r7
 80085d4:	f7f7 ffb4 	bl	8000540 <__aeabi_dmul>
 80085d8:	ec41 0b10 	vmov	d0, r0, r1
 80085dc:	f000 fb34 	bl	8008c48 <floor>
 80085e0:	4b7a      	ldr	r3, [pc, #488]	; (80087cc <__kernel_rem_pio2+0x324>)
 80085e2:	ec51 0b10 	vmov	r0, r1, d0
 80085e6:	2200      	movs	r2, #0
 80085e8:	f7f7 ffaa 	bl	8000540 <__aeabi_dmul>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4630      	mov	r0, r6
 80085f2:	4639      	mov	r1, r7
 80085f4:	f7f7 fdec 	bl	80001d0 <__aeabi_dsub>
 80085f8:	460f      	mov	r7, r1
 80085fa:	4606      	mov	r6, r0
 80085fc:	f7f8 fa3a 	bl	8000a74 <__aeabi_d2iz>
 8008600:	9002      	str	r0, [sp, #8]
 8008602:	f7f7 ff33 	bl	800046c <__aeabi_i2d>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	4630      	mov	r0, r6
 800860c:	4639      	mov	r1, r7
 800860e:	f7f7 fddf 	bl	80001d0 <__aeabi_dsub>
 8008612:	f1ba 0f00 	cmp.w	sl, #0
 8008616:	4606      	mov	r6, r0
 8008618:	460f      	mov	r7, r1
 800861a:	dd6d      	ble.n	80086f8 <__kernel_rem_pio2+0x250>
 800861c:	1e61      	subs	r1, r4, #1
 800861e:	ab0c      	add	r3, sp, #48	; 0x30
 8008620:	9d02      	ldr	r5, [sp, #8]
 8008622:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008626:	f1ca 0018 	rsb	r0, sl, #24
 800862a:	fa43 f200 	asr.w	r2, r3, r0
 800862e:	4415      	add	r5, r2
 8008630:	4082      	lsls	r2, r0
 8008632:	1a9b      	subs	r3, r3, r2
 8008634:	aa0c      	add	r2, sp, #48	; 0x30
 8008636:	9502      	str	r5, [sp, #8]
 8008638:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800863c:	f1ca 0217 	rsb	r2, sl, #23
 8008640:	fa43 fb02 	asr.w	fp, r3, r2
 8008644:	f1bb 0f00 	cmp.w	fp, #0
 8008648:	dd65      	ble.n	8008716 <__kernel_rem_pio2+0x26e>
 800864a:	9b02      	ldr	r3, [sp, #8]
 800864c:	2200      	movs	r2, #0
 800864e:	3301      	adds	r3, #1
 8008650:	9302      	str	r3, [sp, #8]
 8008652:	4615      	mov	r5, r2
 8008654:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008658:	4294      	cmp	r4, r2
 800865a:	f300 809f 	bgt.w	800879c <__kernel_rem_pio2+0x2f4>
 800865e:	f1ba 0f00 	cmp.w	sl, #0
 8008662:	dd07      	ble.n	8008674 <__kernel_rem_pio2+0x1cc>
 8008664:	f1ba 0f01 	cmp.w	sl, #1
 8008668:	f000 80c1 	beq.w	80087ee <__kernel_rem_pio2+0x346>
 800866c:	f1ba 0f02 	cmp.w	sl, #2
 8008670:	f000 80c7 	beq.w	8008802 <__kernel_rem_pio2+0x35a>
 8008674:	f1bb 0f02 	cmp.w	fp, #2
 8008678:	d14d      	bne.n	8008716 <__kernel_rem_pio2+0x26e>
 800867a:	4632      	mov	r2, r6
 800867c:	463b      	mov	r3, r7
 800867e:	4954      	ldr	r1, [pc, #336]	; (80087d0 <__kernel_rem_pio2+0x328>)
 8008680:	2000      	movs	r0, #0
 8008682:	f7f7 fda5 	bl	80001d0 <__aeabi_dsub>
 8008686:	4606      	mov	r6, r0
 8008688:	460f      	mov	r7, r1
 800868a:	2d00      	cmp	r5, #0
 800868c:	d043      	beq.n	8008716 <__kernel_rem_pio2+0x26e>
 800868e:	4650      	mov	r0, sl
 8008690:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80087c0 <__kernel_rem_pio2+0x318>
 8008694:	f000 fa58 	bl	8008b48 <scalbn>
 8008698:	4630      	mov	r0, r6
 800869a:	4639      	mov	r1, r7
 800869c:	ec53 2b10 	vmov	r2, r3, d0
 80086a0:	f7f7 fd96 	bl	80001d0 <__aeabi_dsub>
 80086a4:	4606      	mov	r6, r0
 80086a6:	460f      	mov	r7, r1
 80086a8:	e035      	b.n	8008716 <__kernel_rem_pio2+0x26e>
 80086aa:	4b4a      	ldr	r3, [pc, #296]	; (80087d4 <__kernel_rem_pio2+0x32c>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	4630      	mov	r0, r6
 80086b0:	4639      	mov	r1, r7
 80086b2:	f7f7 ff45 	bl	8000540 <__aeabi_dmul>
 80086b6:	f7f8 f9dd 	bl	8000a74 <__aeabi_d2iz>
 80086ba:	f7f7 fed7 	bl	800046c <__aeabi_i2d>
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	ec43 2b18 	vmov	d8, r2, r3
 80086c6:	4b44      	ldr	r3, [pc, #272]	; (80087d8 <__kernel_rem_pio2+0x330>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	f7f7 ff39 	bl	8000540 <__aeabi_dmul>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	4630      	mov	r0, r6
 80086d4:	4639      	mov	r1, r7
 80086d6:	f7f7 fd7b 	bl	80001d0 <__aeabi_dsub>
 80086da:	f7f8 f9cb 	bl	8000a74 <__aeabi_d2iz>
 80086de:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086e2:	f84b 0b04 	str.w	r0, [fp], #4
 80086e6:	ec51 0b18 	vmov	r0, r1, d8
 80086ea:	f7f7 fd73 	bl	80001d4 <__adddf3>
 80086ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80086f2:	4606      	mov	r6, r0
 80086f4:	460f      	mov	r7, r1
 80086f6:	e75b      	b.n	80085b0 <__kernel_rem_pio2+0x108>
 80086f8:	d106      	bne.n	8008708 <__kernel_rem_pio2+0x260>
 80086fa:	1e63      	subs	r3, r4, #1
 80086fc:	aa0c      	add	r2, sp, #48	; 0x30
 80086fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008702:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8008706:	e79d      	b.n	8008644 <__kernel_rem_pio2+0x19c>
 8008708:	4b34      	ldr	r3, [pc, #208]	; (80087dc <__kernel_rem_pio2+0x334>)
 800870a:	2200      	movs	r2, #0
 800870c:	f7f8 f99e 	bl	8000a4c <__aeabi_dcmpge>
 8008710:	2800      	cmp	r0, #0
 8008712:	d140      	bne.n	8008796 <__kernel_rem_pio2+0x2ee>
 8008714:	4683      	mov	fp, r0
 8008716:	2200      	movs	r2, #0
 8008718:	2300      	movs	r3, #0
 800871a:	4630      	mov	r0, r6
 800871c:	4639      	mov	r1, r7
 800871e:	f7f8 f977 	bl	8000a10 <__aeabi_dcmpeq>
 8008722:	2800      	cmp	r0, #0
 8008724:	f000 80c1 	beq.w	80088aa <__kernel_rem_pio2+0x402>
 8008728:	1e65      	subs	r5, r4, #1
 800872a:	462b      	mov	r3, r5
 800872c:	2200      	movs	r2, #0
 800872e:	9900      	ldr	r1, [sp, #0]
 8008730:	428b      	cmp	r3, r1
 8008732:	da6d      	bge.n	8008810 <__kernel_rem_pio2+0x368>
 8008734:	2a00      	cmp	r2, #0
 8008736:	f000 808a 	beq.w	800884e <__kernel_rem_pio2+0x3a6>
 800873a:	ab0c      	add	r3, sp, #48	; 0x30
 800873c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008740:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 80ae 	beq.w	80088a6 <__kernel_rem_pio2+0x3fe>
 800874a:	4650      	mov	r0, sl
 800874c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80087c0 <__kernel_rem_pio2+0x318>
 8008750:	f000 f9fa 	bl	8008b48 <scalbn>
 8008754:	1c6b      	adds	r3, r5, #1
 8008756:	00da      	lsls	r2, r3, #3
 8008758:	9205      	str	r2, [sp, #20]
 800875a:	ec57 6b10 	vmov	r6, r7, d0
 800875e:	aa70      	add	r2, sp, #448	; 0x1c0
 8008760:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80087d4 <__kernel_rem_pio2+0x32c>
 8008764:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008768:	462c      	mov	r4, r5
 800876a:	f04f 0800 	mov.w	r8, #0
 800876e:	2c00      	cmp	r4, #0
 8008770:	f280 80d4 	bge.w	800891c <__kernel_rem_pio2+0x474>
 8008774:	462c      	mov	r4, r5
 8008776:	2c00      	cmp	r4, #0
 8008778:	f2c0 8102 	blt.w	8008980 <__kernel_rem_pio2+0x4d8>
 800877c:	4b18      	ldr	r3, [pc, #96]	; (80087e0 <__kernel_rem_pio2+0x338>)
 800877e:	461e      	mov	r6, r3
 8008780:	ab70      	add	r3, sp, #448	; 0x1c0
 8008782:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8008786:	1b2b      	subs	r3, r5, r4
 8008788:	f04f 0900 	mov.w	r9, #0
 800878c:	f04f 0a00 	mov.w	sl, #0
 8008790:	2700      	movs	r7, #0
 8008792:	9306      	str	r3, [sp, #24]
 8008794:	e0e6      	b.n	8008964 <__kernel_rem_pio2+0x4bc>
 8008796:	f04f 0b02 	mov.w	fp, #2
 800879a:	e756      	b.n	800864a <__kernel_rem_pio2+0x1a2>
 800879c:	f8d8 3000 	ldr.w	r3, [r8]
 80087a0:	bb05      	cbnz	r5, 80087e4 <__kernel_rem_pio2+0x33c>
 80087a2:	b123      	cbz	r3, 80087ae <__kernel_rem_pio2+0x306>
 80087a4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80087a8:	f8c8 3000 	str.w	r3, [r8]
 80087ac:	2301      	movs	r3, #1
 80087ae:	3201      	adds	r2, #1
 80087b0:	f108 0804 	add.w	r8, r8, #4
 80087b4:	461d      	mov	r5, r3
 80087b6:	e74f      	b.n	8008658 <__kernel_rem_pio2+0x1b0>
	...
 80087c4:	3ff00000 	.word	0x3ff00000
 80087c8:	08008f48 	.word	0x08008f48
 80087cc:	40200000 	.word	0x40200000
 80087d0:	3ff00000 	.word	0x3ff00000
 80087d4:	3e700000 	.word	0x3e700000
 80087d8:	41700000 	.word	0x41700000
 80087dc:	3fe00000 	.word	0x3fe00000
 80087e0:	08008f08 	.word	0x08008f08
 80087e4:	1acb      	subs	r3, r1, r3
 80087e6:	f8c8 3000 	str.w	r3, [r8]
 80087ea:	462b      	mov	r3, r5
 80087ec:	e7df      	b.n	80087ae <__kernel_rem_pio2+0x306>
 80087ee:	1e62      	subs	r2, r4, #1
 80087f0:	ab0c      	add	r3, sp, #48	; 0x30
 80087f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80087fa:	a90c      	add	r1, sp, #48	; 0x30
 80087fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008800:	e738      	b.n	8008674 <__kernel_rem_pio2+0x1cc>
 8008802:	1e62      	subs	r2, r4, #1
 8008804:	ab0c      	add	r3, sp, #48	; 0x30
 8008806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800880e:	e7f4      	b.n	80087fa <__kernel_rem_pio2+0x352>
 8008810:	a90c      	add	r1, sp, #48	; 0x30
 8008812:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008816:	3b01      	subs	r3, #1
 8008818:	430a      	orrs	r2, r1
 800881a:	e788      	b.n	800872e <__kernel_rem_pio2+0x286>
 800881c:	3301      	adds	r3, #1
 800881e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008822:	2900      	cmp	r1, #0
 8008824:	d0fa      	beq.n	800881c <__kernel_rem_pio2+0x374>
 8008826:	9a08      	ldr	r2, [sp, #32]
 8008828:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800882c:	446a      	add	r2, sp
 800882e:	3a98      	subs	r2, #152	; 0x98
 8008830:	9208      	str	r2, [sp, #32]
 8008832:	9a06      	ldr	r2, [sp, #24]
 8008834:	a920      	add	r1, sp, #128	; 0x80
 8008836:	18a2      	adds	r2, r4, r2
 8008838:	18e3      	adds	r3, r4, r3
 800883a:	f104 0801 	add.w	r8, r4, #1
 800883e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008842:	9302      	str	r3, [sp, #8]
 8008844:	9b02      	ldr	r3, [sp, #8]
 8008846:	4543      	cmp	r3, r8
 8008848:	da04      	bge.n	8008854 <__kernel_rem_pio2+0x3ac>
 800884a:	461c      	mov	r4, r3
 800884c:	e6a2      	b.n	8008594 <__kernel_rem_pio2+0xec>
 800884e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008850:	2301      	movs	r3, #1
 8008852:	e7e4      	b.n	800881e <__kernel_rem_pio2+0x376>
 8008854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008856:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800885a:	f7f7 fe07 	bl	800046c <__aeabi_i2d>
 800885e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008864:	46ab      	mov	fp, r5
 8008866:	461c      	mov	r4, r3
 8008868:	f04f 0900 	mov.w	r9, #0
 800886c:	2600      	movs	r6, #0
 800886e:	2700      	movs	r7, #0
 8008870:	9b05      	ldr	r3, [sp, #20]
 8008872:	4599      	cmp	r9, r3
 8008874:	dd06      	ble.n	8008884 <__kernel_rem_pio2+0x3dc>
 8008876:	9b08      	ldr	r3, [sp, #32]
 8008878:	e8e3 6702 	strd	r6, r7, [r3], #8
 800887c:	f108 0801 	add.w	r8, r8, #1
 8008880:	9308      	str	r3, [sp, #32]
 8008882:	e7df      	b.n	8008844 <__kernel_rem_pio2+0x39c>
 8008884:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008888:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800888c:	f7f7 fe58 	bl	8000540 <__aeabi_dmul>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4630      	mov	r0, r6
 8008896:	4639      	mov	r1, r7
 8008898:	f7f7 fc9c 	bl	80001d4 <__adddf3>
 800889c:	f109 0901 	add.w	r9, r9, #1
 80088a0:	4606      	mov	r6, r0
 80088a2:	460f      	mov	r7, r1
 80088a4:	e7e4      	b.n	8008870 <__kernel_rem_pio2+0x3c8>
 80088a6:	3d01      	subs	r5, #1
 80088a8:	e747      	b.n	800873a <__kernel_rem_pio2+0x292>
 80088aa:	ec47 6b10 	vmov	d0, r6, r7
 80088ae:	f1ca 0000 	rsb	r0, sl, #0
 80088b2:	f000 f949 	bl	8008b48 <scalbn>
 80088b6:	ec57 6b10 	vmov	r6, r7, d0
 80088ba:	4ba0      	ldr	r3, [pc, #640]	; (8008b3c <__kernel_rem_pio2+0x694>)
 80088bc:	ee10 0a10 	vmov	r0, s0
 80088c0:	2200      	movs	r2, #0
 80088c2:	4639      	mov	r1, r7
 80088c4:	f7f8 f8c2 	bl	8000a4c <__aeabi_dcmpge>
 80088c8:	b1f8      	cbz	r0, 800890a <__kernel_rem_pio2+0x462>
 80088ca:	4b9d      	ldr	r3, [pc, #628]	; (8008b40 <__kernel_rem_pio2+0x698>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	4630      	mov	r0, r6
 80088d0:	4639      	mov	r1, r7
 80088d2:	f7f7 fe35 	bl	8000540 <__aeabi_dmul>
 80088d6:	f7f8 f8cd 	bl	8000a74 <__aeabi_d2iz>
 80088da:	4680      	mov	r8, r0
 80088dc:	f7f7 fdc6 	bl	800046c <__aeabi_i2d>
 80088e0:	4b96      	ldr	r3, [pc, #600]	; (8008b3c <__kernel_rem_pio2+0x694>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	f7f7 fe2c 	bl	8000540 <__aeabi_dmul>
 80088e8:	460b      	mov	r3, r1
 80088ea:	4602      	mov	r2, r0
 80088ec:	4639      	mov	r1, r7
 80088ee:	4630      	mov	r0, r6
 80088f0:	f7f7 fc6e 	bl	80001d0 <__aeabi_dsub>
 80088f4:	f7f8 f8be 	bl	8000a74 <__aeabi_d2iz>
 80088f8:	1c65      	adds	r5, r4, #1
 80088fa:	ab0c      	add	r3, sp, #48	; 0x30
 80088fc:	f10a 0a18 	add.w	sl, sl, #24
 8008900:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008904:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008908:	e71f      	b.n	800874a <__kernel_rem_pio2+0x2a2>
 800890a:	4630      	mov	r0, r6
 800890c:	4639      	mov	r1, r7
 800890e:	f7f8 f8b1 	bl	8000a74 <__aeabi_d2iz>
 8008912:	ab0c      	add	r3, sp, #48	; 0x30
 8008914:	4625      	mov	r5, r4
 8008916:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800891a:	e716      	b.n	800874a <__kernel_rem_pio2+0x2a2>
 800891c:	ab0c      	add	r3, sp, #48	; 0x30
 800891e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008922:	f7f7 fda3 	bl	800046c <__aeabi_i2d>
 8008926:	4632      	mov	r2, r6
 8008928:	463b      	mov	r3, r7
 800892a:	f7f7 fe09 	bl	8000540 <__aeabi_dmul>
 800892e:	4642      	mov	r2, r8
 8008930:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008934:	464b      	mov	r3, r9
 8008936:	4630      	mov	r0, r6
 8008938:	4639      	mov	r1, r7
 800893a:	f7f7 fe01 	bl	8000540 <__aeabi_dmul>
 800893e:	3c01      	subs	r4, #1
 8008940:	4606      	mov	r6, r0
 8008942:	460f      	mov	r7, r1
 8008944:	e713      	b.n	800876e <__kernel_rem_pio2+0x2c6>
 8008946:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800894a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800894e:	f7f7 fdf7 	bl	8000540 <__aeabi_dmul>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	4648      	mov	r0, r9
 8008958:	4651      	mov	r1, sl
 800895a:	f7f7 fc3b 	bl	80001d4 <__adddf3>
 800895e:	3701      	adds	r7, #1
 8008960:	4681      	mov	r9, r0
 8008962:	468a      	mov	sl, r1
 8008964:	9b00      	ldr	r3, [sp, #0]
 8008966:	429f      	cmp	r7, r3
 8008968:	dc02      	bgt.n	8008970 <__kernel_rem_pio2+0x4c8>
 800896a:	9b06      	ldr	r3, [sp, #24]
 800896c:	429f      	cmp	r7, r3
 800896e:	ddea      	ble.n	8008946 <__kernel_rem_pio2+0x49e>
 8008970:	9a06      	ldr	r2, [sp, #24]
 8008972:	ab48      	add	r3, sp, #288	; 0x120
 8008974:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008978:	e9c6 9a00 	strd	r9, sl, [r6]
 800897c:	3c01      	subs	r4, #1
 800897e:	e6fa      	b.n	8008776 <__kernel_rem_pio2+0x2ce>
 8008980:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008982:	2b02      	cmp	r3, #2
 8008984:	dc0b      	bgt.n	800899e <__kernel_rem_pio2+0x4f6>
 8008986:	2b00      	cmp	r3, #0
 8008988:	dc39      	bgt.n	80089fe <__kernel_rem_pio2+0x556>
 800898a:	d05d      	beq.n	8008a48 <__kernel_rem_pio2+0x5a0>
 800898c:	9b02      	ldr	r3, [sp, #8]
 800898e:	f003 0007 	and.w	r0, r3, #7
 8008992:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008996:	ecbd 8b02 	vpop	{d8}
 800899a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d1f3      	bne.n	800898c <__kernel_rem_pio2+0x4e4>
 80089a4:	9b05      	ldr	r3, [sp, #20]
 80089a6:	9500      	str	r5, [sp, #0]
 80089a8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80089ac:	eb0d 0403 	add.w	r4, sp, r3
 80089b0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80089b4:	46a2      	mov	sl, r4
 80089b6:	9b00      	ldr	r3, [sp, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f1aa 0a08 	sub.w	sl, sl, #8
 80089be:	dc69      	bgt.n	8008a94 <__kernel_rem_pio2+0x5ec>
 80089c0:	46aa      	mov	sl, r5
 80089c2:	f1ba 0f01 	cmp.w	sl, #1
 80089c6:	f1a4 0408 	sub.w	r4, r4, #8
 80089ca:	f300 8083 	bgt.w	8008ad4 <__kernel_rem_pio2+0x62c>
 80089ce:	9c05      	ldr	r4, [sp, #20]
 80089d0:	ab48      	add	r3, sp, #288	; 0x120
 80089d2:	441c      	add	r4, r3
 80089d4:	2000      	movs	r0, #0
 80089d6:	2100      	movs	r1, #0
 80089d8:	2d01      	cmp	r5, #1
 80089da:	f300 809a 	bgt.w	8008b12 <__kernel_rem_pio2+0x66a>
 80089de:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80089e2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80089e6:	f1bb 0f00 	cmp.w	fp, #0
 80089ea:	f040 8098 	bne.w	8008b1e <__kernel_rem_pio2+0x676>
 80089ee:	9b04      	ldr	r3, [sp, #16]
 80089f0:	e9c3 7800 	strd	r7, r8, [r3]
 80089f4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80089f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80089fc:	e7c6      	b.n	800898c <__kernel_rem_pio2+0x4e4>
 80089fe:	9e05      	ldr	r6, [sp, #20]
 8008a00:	ab48      	add	r3, sp, #288	; 0x120
 8008a02:	441e      	add	r6, r3
 8008a04:	462c      	mov	r4, r5
 8008a06:	2000      	movs	r0, #0
 8008a08:	2100      	movs	r1, #0
 8008a0a:	2c00      	cmp	r4, #0
 8008a0c:	da33      	bge.n	8008a76 <__kernel_rem_pio2+0x5ce>
 8008a0e:	f1bb 0f00 	cmp.w	fp, #0
 8008a12:	d036      	beq.n	8008a82 <__kernel_rem_pio2+0x5da>
 8008a14:	4602      	mov	r2, r0
 8008a16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a1a:	9c04      	ldr	r4, [sp, #16]
 8008a1c:	e9c4 2300 	strd	r2, r3, [r4]
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008a28:	f7f7 fbd2 	bl	80001d0 <__aeabi_dsub>
 8008a2c:	ae4a      	add	r6, sp, #296	; 0x128
 8008a2e:	2401      	movs	r4, #1
 8008a30:	42a5      	cmp	r5, r4
 8008a32:	da29      	bge.n	8008a88 <__kernel_rem_pio2+0x5e0>
 8008a34:	f1bb 0f00 	cmp.w	fp, #0
 8008a38:	d002      	beq.n	8008a40 <__kernel_rem_pio2+0x598>
 8008a3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a3e:	4619      	mov	r1, r3
 8008a40:	9b04      	ldr	r3, [sp, #16]
 8008a42:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008a46:	e7a1      	b.n	800898c <__kernel_rem_pio2+0x4e4>
 8008a48:	9c05      	ldr	r4, [sp, #20]
 8008a4a:	ab48      	add	r3, sp, #288	; 0x120
 8008a4c:	441c      	add	r4, r3
 8008a4e:	2000      	movs	r0, #0
 8008a50:	2100      	movs	r1, #0
 8008a52:	2d00      	cmp	r5, #0
 8008a54:	da09      	bge.n	8008a6a <__kernel_rem_pio2+0x5c2>
 8008a56:	f1bb 0f00 	cmp.w	fp, #0
 8008a5a:	d002      	beq.n	8008a62 <__kernel_rem_pio2+0x5ba>
 8008a5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a60:	4619      	mov	r1, r3
 8008a62:	9b04      	ldr	r3, [sp, #16]
 8008a64:	e9c3 0100 	strd	r0, r1, [r3]
 8008a68:	e790      	b.n	800898c <__kernel_rem_pio2+0x4e4>
 8008a6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008a6e:	f7f7 fbb1 	bl	80001d4 <__adddf3>
 8008a72:	3d01      	subs	r5, #1
 8008a74:	e7ed      	b.n	8008a52 <__kernel_rem_pio2+0x5aa>
 8008a76:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008a7a:	f7f7 fbab 	bl	80001d4 <__adddf3>
 8008a7e:	3c01      	subs	r4, #1
 8008a80:	e7c3      	b.n	8008a0a <__kernel_rem_pio2+0x562>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	e7c8      	b.n	8008a1a <__kernel_rem_pio2+0x572>
 8008a88:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008a8c:	f7f7 fba2 	bl	80001d4 <__adddf3>
 8008a90:	3401      	adds	r4, #1
 8008a92:	e7cd      	b.n	8008a30 <__kernel_rem_pio2+0x588>
 8008a94:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a98:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008a9c:	9b00      	ldr	r3, [sp, #0]
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	4632      	mov	r2, r6
 8008aa4:	463b      	mov	r3, r7
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	f7f7 fb93 	bl	80001d4 <__adddf3>
 8008aae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4640      	mov	r0, r8
 8008ab8:	4649      	mov	r1, r9
 8008aba:	f7f7 fb89 	bl	80001d0 <__aeabi_dsub>
 8008abe:	4632      	mov	r2, r6
 8008ac0:	463b      	mov	r3, r7
 8008ac2:	f7f7 fb87 	bl	80001d4 <__adddf3>
 8008ac6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008aca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ace:	ed8a 7b00 	vstr	d7, [sl]
 8008ad2:	e770      	b.n	80089b6 <__kernel_rem_pio2+0x50e>
 8008ad4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008ad8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008adc:	4640      	mov	r0, r8
 8008ade:	4632      	mov	r2, r6
 8008ae0:	463b      	mov	r3, r7
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	f7f7 fb76 	bl	80001d4 <__adddf3>
 8008ae8:	e9cd 0100 	strd	r0, r1, [sp]
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4640      	mov	r0, r8
 8008af2:	4649      	mov	r1, r9
 8008af4:	f7f7 fb6c 	bl	80001d0 <__aeabi_dsub>
 8008af8:	4632      	mov	r2, r6
 8008afa:	463b      	mov	r3, r7
 8008afc:	f7f7 fb6a 	bl	80001d4 <__adddf3>
 8008b00:	ed9d 7b00 	vldr	d7, [sp]
 8008b04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b08:	ed84 7b00 	vstr	d7, [r4]
 8008b0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b10:	e757      	b.n	80089c2 <__kernel_rem_pio2+0x51a>
 8008b12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008b16:	f7f7 fb5d 	bl	80001d4 <__adddf3>
 8008b1a:	3d01      	subs	r5, #1
 8008b1c:	e75c      	b.n	80089d8 <__kernel_rem_pio2+0x530>
 8008b1e:	9b04      	ldr	r3, [sp, #16]
 8008b20:	9a04      	ldr	r2, [sp, #16]
 8008b22:	601f      	str	r7, [r3, #0]
 8008b24:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008b28:	605c      	str	r4, [r3, #4]
 8008b2a:	609d      	str	r5, [r3, #8]
 8008b2c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008b30:	60d3      	str	r3, [r2, #12]
 8008b32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b36:	6110      	str	r0, [r2, #16]
 8008b38:	6153      	str	r3, [r2, #20]
 8008b3a:	e727      	b.n	800898c <__kernel_rem_pio2+0x4e4>
 8008b3c:	41700000 	.word	0x41700000
 8008b40:	3e700000 	.word	0x3e700000
 8008b44:	00000000 	.word	0x00000000

08008b48 <scalbn>:
 8008b48:	b570      	push	{r4, r5, r6, lr}
 8008b4a:	ec55 4b10 	vmov	r4, r5, d0
 8008b4e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008b52:	4606      	mov	r6, r0
 8008b54:	462b      	mov	r3, r5
 8008b56:	b999      	cbnz	r1, 8008b80 <scalbn+0x38>
 8008b58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008b5c:	4323      	orrs	r3, r4
 8008b5e:	d03f      	beq.n	8008be0 <scalbn+0x98>
 8008b60:	4b35      	ldr	r3, [pc, #212]	; (8008c38 <scalbn+0xf0>)
 8008b62:	4629      	mov	r1, r5
 8008b64:	ee10 0a10 	vmov	r0, s0
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f7f7 fce9 	bl	8000540 <__aeabi_dmul>
 8008b6e:	4b33      	ldr	r3, [pc, #204]	; (8008c3c <scalbn+0xf4>)
 8008b70:	429e      	cmp	r6, r3
 8008b72:	4604      	mov	r4, r0
 8008b74:	460d      	mov	r5, r1
 8008b76:	da10      	bge.n	8008b9a <scalbn+0x52>
 8008b78:	a327      	add	r3, pc, #156	; (adr r3, 8008c18 <scalbn+0xd0>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	e01f      	b.n	8008bc0 <scalbn+0x78>
 8008b80:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008b84:	4291      	cmp	r1, r2
 8008b86:	d10c      	bne.n	8008ba2 <scalbn+0x5a>
 8008b88:	ee10 2a10 	vmov	r2, s0
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	4629      	mov	r1, r5
 8008b90:	f7f7 fb20 	bl	80001d4 <__adddf3>
 8008b94:	4604      	mov	r4, r0
 8008b96:	460d      	mov	r5, r1
 8008b98:	e022      	b.n	8008be0 <scalbn+0x98>
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008ba0:	3936      	subs	r1, #54	; 0x36
 8008ba2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008ba6:	4296      	cmp	r6, r2
 8008ba8:	dd0d      	ble.n	8008bc6 <scalbn+0x7e>
 8008baa:	2d00      	cmp	r5, #0
 8008bac:	a11c      	add	r1, pc, #112	; (adr r1, 8008c20 <scalbn+0xd8>)
 8008bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bb2:	da02      	bge.n	8008bba <scalbn+0x72>
 8008bb4:	a11c      	add	r1, pc, #112	; (adr r1, 8008c28 <scalbn+0xe0>)
 8008bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bba:	a319      	add	r3, pc, #100	; (adr r3, 8008c20 <scalbn+0xd8>)
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	f7f7 fcbe 	bl	8000540 <__aeabi_dmul>
 8008bc4:	e7e6      	b.n	8008b94 <scalbn+0x4c>
 8008bc6:	1872      	adds	r2, r6, r1
 8008bc8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008bcc:	428a      	cmp	r2, r1
 8008bce:	dcec      	bgt.n	8008baa <scalbn+0x62>
 8008bd0:	2a00      	cmp	r2, #0
 8008bd2:	dd08      	ble.n	8008be6 <scalbn+0x9e>
 8008bd4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008bd8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008bdc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008be0:	ec45 4b10 	vmov	d0, r4, r5
 8008be4:	bd70      	pop	{r4, r5, r6, pc}
 8008be6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008bea:	da08      	bge.n	8008bfe <scalbn+0xb6>
 8008bec:	2d00      	cmp	r5, #0
 8008bee:	a10a      	add	r1, pc, #40	; (adr r1, 8008c18 <scalbn+0xd0>)
 8008bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bf4:	dac0      	bge.n	8008b78 <scalbn+0x30>
 8008bf6:	a10e      	add	r1, pc, #56	; (adr r1, 8008c30 <scalbn+0xe8>)
 8008bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bfc:	e7bc      	b.n	8008b78 <scalbn+0x30>
 8008bfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008c02:	3236      	adds	r2, #54	; 0x36
 8008c04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008c08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	4b0c      	ldr	r3, [pc, #48]	; (8008c40 <scalbn+0xf8>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	e7d5      	b.n	8008bc0 <scalbn+0x78>
 8008c14:	f3af 8000 	nop.w
 8008c18:	c2f8f359 	.word	0xc2f8f359
 8008c1c:	01a56e1f 	.word	0x01a56e1f
 8008c20:	8800759c 	.word	0x8800759c
 8008c24:	7e37e43c 	.word	0x7e37e43c
 8008c28:	8800759c 	.word	0x8800759c
 8008c2c:	fe37e43c 	.word	0xfe37e43c
 8008c30:	c2f8f359 	.word	0xc2f8f359
 8008c34:	81a56e1f 	.word	0x81a56e1f
 8008c38:	43500000 	.word	0x43500000
 8008c3c:	ffff3cb0 	.word	0xffff3cb0
 8008c40:	3c900000 	.word	0x3c900000
 8008c44:	00000000 	.word	0x00000000

08008c48 <floor>:
 8008c48:	ec51 0b10 	vmov	r0, r1, d0
 8008c4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c54:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008c58:	2e13      	cmp	r6, #19
 8008c5a:	ee10 5a10 	vmov	r5, s0
 8008c5e:	ee10 8a10 	vmov	r8, s0
 8008c62:	460c      	mov	r4, r1
 8008c64:	dc31      	bgt.n	8008cca <floor+0x82>
 8008c66:	2e00      	cmp	r6, #0
 8008c68:	da14      	bge.n	8008c94 <floor+0x4c>
 8008c6a:	a333      	add	r3, pc, #204	; (adr r3, 8008d38 <floor+0xf0>)
 8008c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c70:	f7f7 fab0 	bl	80001d4 <__adddf3>
 8008c74:	2200      	movs	r2, #0
 8008c76:	2300      	movs	r3, #0
 8008c78:	f7f7 fef2 	bl	8000a60 <__aeabi_dcmpgt>
 8008c7c:	b138      	cbz	r0, 8008c8e <floor+0x46>
 8008c7e:	2c00      	cmp	r4, #0
 8008c80:	da53      	bge.n	8008d2a <floor+0xe2>
 8008c82:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008c86:	4325      	orrs	r5, r4
 8008c88:	d052      	beq.n	8008d30 <floor+0xe8>
 8008c8a:	4c2d      	ldr	r4, [pc, #180]	; (8008d40 <floor+0xf8>)
 8008c8c:	2500      	movs	r5, #0
 8008c8e:	4621      	mov	r1, r4
 8008c90:	4628      	mov	r0, r5
 8008c92:	e024      	b.n	8008cde <floor+0x96>
 8008c94:	4f2b      	ldr	r7, [pc, #172]	; (8008d44 <floor+0xfc>)
 8008c96:	4137      	asrs	r7, r6
 8008c98:	ea01 0307 	and.w	r3, r1, r7
 8008c9c:	4303      	orrs	r3, r0
 8008c9e:	d01e      	beq.n	8008cde <floor+0x96>
 8008ca0:	a325      	add	r3, pc, #148	; (adr r3, 8008d38 <floor+0xf0>)
 8008ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca6:	f7f7 fa95 	bl	80001d4 <__adddf3>
 8008caa:	2200      	movs	r2, #0
 8008cac:	2300      	movs	r3, #0
 8008cae:	f7f7 fed7 	bl	8000a60 <__aeabi_dcmpgt>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d0eb      	beq.n	8008c8e <floor+0x46>
 8008cb6:	2c00      	cmp	r4, #0
 8008cb8:	bfbe      	ittt	lt
 8008cba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008cbe:	4133      	asrlt	r3, r6
 8008cc0:	18e4      	addlt	r4, r4, r3
 8008cc2:	ea24 0407 	bic.w	r4, r4, r7
 8008cc6:	2500      	movs	r5, #0
 8008cc8:	e7e1      	b.n	8008c8e <floor+0x46>
 8008cca:	2e33      	cmp	r6, #51	; 0x33
 8008ccc:	dd0b      	ble.n	8008ce6 <floor+0x9e>
 8008cce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008cd2:	d104      	bne.n	8008cde <floor+0x96>
 8008cd4:	ee10 2a10 	vmov	r2, s0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	f7f7 fa7b 	bl	80001d4 <__adddf3>
 8008cde:	ec41 0b10 	vmov	d0, r0, r1
 8008ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ce6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8008cea:	f04f 37ff 	mov.w	r7, #4294967295
 8008cee:	40df      	lsrs	r7, r3
 8008cf0:	4238      	tst	r0, r7
 8008cf2:	d0f4      	beq.n	8008cde <floor+0x96>
 8008cf4:	a310      	add	r3, pc, #64	; (adr r3, 8008d38 <floor+0xf0>)
 8008cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfa:	f7f7 fa6b 	bl	80001d4 <__adddf3>
 8008cfe:	2200      	movs	r2, #0
 8008d00:	2300      	movs	r3, #0
 8008d02:	f7f7 fead 	bl	8000a60 <__aeabi_dcmpgt>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d0c1      	beq.n	8008c8e <floor+0x46>
 8008d0a:	2c00      	cmp	r4, #0
 8008d0c:	da0a      	bge.n	8008d24 <floor+0xdc>
 8008d0e:	2e14      	cmp	r6, #20
 8008d10:	d101      	bne.n	8008d16 <floor+0xce>
 8008d12:	3401      	adds	r4, #1
 8008d14:	e006      	b.n	8008d24 <floor+0xdc>
 8008d16:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	40b3      	lsls	r3, r6
 8008d1e:	441d      	add	r5, r3
 8008d20:	45a8      	cmp	r8, r5
 8008d22:	d8f6      	bhi.n	8008d12 <floor+0xca>
 8008d24:	ea25 0507 	bic.w	r5, r5, r7
 8008d28:	e7b1      	b.n	8008c8e <floor+0x46>
 8008d2a:	2500      	movs	r5, #0
 8008d2c:	462c      	mov	r4, r5
 8008d2e:	e7ae      	b.n	8008c8e <floor+0x46>
 8008d30:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008d34:	e7ab      	b.n	8008c8e <floor+0x46>
 8008d36:	bf00      	nop
 8008d38:	8800759c 	.word	0x8800759c
 8008d3c:	7e37e43c 	.word	0x7e37e43c
 8008d40:	bff00000 	.word	0xbff00000
 8008d44:	000fffff 	.word	0x000fffff

08008d48 <_init>:
 8008d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4a:	bf00      	nop
 8008d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d4e:	bc08      	pop	{r3}
 8008d50:	469e      	mov	lr, r3
 8008d52:	4770      	bx	lr

08008d54 <_fini>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	bf00      	nop
 8008d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5a:	bc08      	pop	{r3}
 8008d5c:	469e      	mov	lr, r3
 8008d5e:	4770      	bx	lr
