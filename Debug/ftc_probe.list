
ftc_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08009780  08009780  00019780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099c8  080099c8  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099d0  080099d0  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099d0  080099d0  000199d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099d4  080099d4  000199d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080099d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
 10 .bss          000008a0  200000d0  200000d0  000200d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000970  20000970  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f9ee  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002397  00000000  00000000  0002fb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000db8  00000000  00000000  00031ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ad7  00000000  00000000  00032c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021729  00000000  00000000  00033757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000115b1  00000000  00000000  00054e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cbb33  00000000  00000000  00066431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f54  00000000  00000000  00131f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00135eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d0 	.word	0x200000d0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009768 	.word	0x08009768

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d4 	.word	0x200000d4
 80001c4:	08009768 	.word	0x08009768

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b970 	b.w	8000e5c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	460f      	mov	r7, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	d965      	bls.n	8000c76 <__udivmoddi4+0xe2>
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	b143      	cbz	r3, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	f1c3 0220 	rsb	r2, r3, #32
 8000bb8:	409f      	lsls	r7, r3
 8000bba:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	409c      	lsls	r4, r3
 8000bc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc6:	fa1f f58c 	uxth.w	r5, ip
 8000bca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bce:	0c22      	lsrs	r2, r4, #16
 8000bd0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd8:	fb01 f005 	mul.w	r0, r1, r5
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	d90a      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be0:	eb1c 0202 	adds.w	r2, ip, r2
 8000be4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be8:	f080 811c 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000bec:	4290      	cmp	r0, r2
 8000bee:	f240 8119 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	4462      	add	r2, ip
 8000bf6:	1a12      	subs	r2, r2, r0
 8000bf8:	b2a4      	uxth	r4, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c06:	fb00 f505 	mul.w	r5, r0, r5
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x90>
 8000c0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c16:	f080 8107 	bcs.w	8000e28 <__udivmoddi4+0x294>
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	f240 8104 	bls.w	8000e28 <__udivmoddi4+0x294>
 8000c20:	4464      	add	r4, ip
 8000c22:	3802      	subs	r0, #2
 8000c24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c28:	1b64      	subs	r4, r4, r5
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11e      	cbz	r6, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40dc      	lsrs	r4, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	e9c6 4300 	strd	r4, r3, [r6]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0xbc>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80ed 	beq.w	8000e1e <__udivmoddi4+0x28a>
 8000c44:	2100      	movs	r1, #0
 8000c46:	e9c6 0500 	strd	r0, r5, [r6]
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	fab3 f183 	clz	r1, r3
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d149      	bne.n	8000cec <__udivmoddi4+0x158>
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	d302      	bcc.n	8000c62 <__udivmoddi4+0xce>
 8000c5c:	4282      	cmp	r2, r0
 8000c5e:	f200 80f8 	bhi.w	8000e52 <__udivmoddi4+0x2be>
 8000c62:	1a84      	subs	r4, r0, r2
 8000c64:	eb65 0203 	sbc.w	r2, r5, r3
 8000c68:	2001      	movs	r0, #1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d0e2      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	e9c6 4700 	strd	r4, r7, [r6]
 8000c74:	e7df      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xe6>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f382 	clz	r3, r2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 8090 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c84:	1a8a      	subs	r2, r1, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f fe8c 	uxth.w	lr, ip
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c94:	fb07 2015 	mls	r0, r7, r5, r2
 8000c98:	0c22      	lsrs	r2, r4, #16
 8000c9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca6:	eb1c 0202 	adds.w	r2, ip, r2
 8000caa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f200 80cb 	bhi.w	8000e4c <__udivmoddi4+0x2b8>
 8000cb6:	4645      	mov	r5, r8
 8000cb8:	1a12      	subs	r2, r2, r0
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x14e>
 8000cd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x14c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f200 80bb 	bhi.w	8000e56 <__udivmoddi4+0x2c2>
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	eba4 040e 	sub.w	r4, r4, lr
 8000ce6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cea:	e79f      	b.n	8000c2c <__udivmoddi4+0x98>
 8000cec:	f1c1 0720 	rsb	r7, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfa:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000d02:	40fd      	lsrs	r5, r7
 8000d04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d08:	4323      	orrs	r3, r4
 8000d0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	fb09 5518 	mls	r5, r9, r8, r5
 8000d16:	0c1c      	lsrs	r4, r3, #16
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	fa00 f001 	lsl.w	r0, r0, r1
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d34:	f080 8088 	bcs.w	8000e48 <__udivmoddi4+0x2b4>
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	f240 8085 	bls.w	8000e48 <__udivmoddi4+0x2b4>
 8000d3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d42:	4464      	add	r4, ip
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	b29d      	uxth	r5, r3
 8000d48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d64:	d26c      	bcs.n	8000e40 <__udivmoddi4+0x2ac>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	d96a      	bls.n	8000e40 <__udivmoddi4+0x2ac>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	4464      	add	r4, ip
 8000d6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d72:	fba3 9502 	umull	r9, r5, r3, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	42ac      	cmp	r4, r5
 8000d7c:	46c8      	mov	r8, r9
 8000d7e:	46ae      	mov	lr, r5
 8000d80:	d356      	bcc.n	8000e30 <__udivmoddi4+0x29c>
 8000d82:	d053      	beq.n	8000e2c <__udivmoddi4+0x298>
 8000d84:	b156      	cbz	r6, 8000d9c <__udivmoddi4+0x208>
 8000d86:	ebb0 0208 	subs.w	r2, r0, r8
 8000d8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d92:	40ca      	lsrs	r2, r1
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	4317      	orrs	r7, r2
 8000d98:	e9c6 7400 	strd	r7, r4, [r6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	f1c3 0120 	rsb	r1, r3, #32
 8000da8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dac:	fa20 f201 	lsr.w	r2, r0, r1
 8000db0:	fa25 f101 	lsr.w	r1, r5, r1
 8000db4:	409d      	lsls	r5, r3
 8000db6:	432a      	orrs	r2, r5
 8000db8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc8:	0c11      	lsrs	r1, r2, #16
 8000dca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dce:	fb00 f50e 	mul.w	r5, r0, lr
 8000dd2:	428d      	cmp	r5, r1
 8000dd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x258>
 8000dda:	eb1c 0101 	adds.w	r1, ip, r1
 8000dde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de2:	d22f      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000de4:	428d      	cmp	r5, r1
 8000de6:	d92d      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	1b49      	subs	r1, r1, r5
 8000dee:	b292      	uxth	r2, r2
 8000df0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df4:	fb07 1115 	mls	r1, r7, r5, r1
 8000df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dfc:	fb05 f10e 	mul.w	r1, r5, lr
 8000e00:	4291      	cmp	r1, r2
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x282>
 8000e04:	eb1c 0202 	adds.w	r2, ip, r2
 8000e08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0c:	d216      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000e0e:	4291      	cmp	r1, r2
 8000e10:	d914      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000e12:	3d02      	subs	r5, #2
 8000e14:	4462      	add	r2, ip
 8000e16:	1a52      	subs	r2, r2, r1
 8000e18:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e1c:	e738      	b.n	8000c90 <__udivmoddi4+0xfc>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	4630      	mov	r0, r6
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000e24:	4639      	mov	r1, r7
 8000e26:	e6e6      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e6fb      	b.n	8000c24 <__udivmoddi4+0x90>
 8000e2c:	4548      	cmp	r0, r9
 8000e2e:	d2a9      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e30:	ebb9 0802 	subs.w	r8, r9, r2
 8000e34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	e7a3      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3c:	4645      	mov	r5, r8
 8000e3e:	e7ea      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e40:	462b      	mov	r3, r5
 8000e42:	e794      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7d1      	b.n	8000dec <__udivmoddi4+0x258>
 8000e48:	46d0      	mov	r8, sl
 8000e4a:	e77b      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4c:	3d02      	subs	r5, #2
 8000e4e:	4462      	add	r2, ip
 8000e50:	e732      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e70a      	b.n	8000c6c <__udivmoddi4+0xd8>
 8000e56:	4464      	add	r4, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e742      	b.n	8000ce2 <__udivmoddi4+0x14e>

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_DMA_Init+0x3c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <MX_DMA_Init+0x3c>)
 8000e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_DMA_Init+0x3c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	203a      	movs	r0, #58	; 0x3a
 8000e88:	f003 ffc7 	bl	8004e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e8c:	203a      	movs	r0, #58	; 0x3a
 8000e8e:	f003 ffe0 	bl	8004e52 <HAL_NVIC_EnableIRQ>

}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <MX_GPIO_Init>:
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	4ba9      	ldr	r3, [pc, #676]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4aa8      	ldr	r2, [pc, #672]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4ba6      	ldr	r3, [pc, #664]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0310 	and.w	r3, r3, #16
 8000ece:	61bb      	str	r3, [r7, #24]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	4ba2      	ldr	r3, [pc, #648]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4aa1      	ldr	r2, [pc, #644]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b9f      	ldr	r3, [pc, #636]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b9b      	ldr	r3, [pc, #620]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a9a      	ldr	r2, [pc, #616]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b98      	ldr	r3, [pc, #608]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b94      	ldr	r3, [pc, #592]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a93      	ldr	r2, [pc, #588]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b91      	ldr	r3, [pc, #580]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b8d      	ldr	r3, [pc, #564]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a8c      	ldr	r2, [pc, #560]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b8a      	ldr	r3, [pc, #552]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	4b86      	ldr	r3, [pc, #536]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a85      	ldr	r2, [pc, #532]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b83      	ldr	r3, [pc, #524]	; (8001160 <MX_GPIO_Init+0x2c0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, dig_pin3_inverse_Pin|CS_I2C_SPI_Pin|dig_pin1_inverse_Pin|dig_pin3_Pin
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f245 418c 	movw	r1, #21644	; 0x548c
 8000f64:	487f      	ldr	r0, [pc, #508]	; (8001164 <MX_GPIO_Init+0x2c4>)
 8000f66:	f004 fd45 	bl	80059f4 <HAL_GPIO_WritePin>
                          |dig_pin5_Pin|dig_pin4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, dig_pin1_Pin|dig_pin2_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000f70:	487d      	ldr	r0, [pc, #500]	; (8001168 <MX_GPIO_Init+0x2c8>)
 8000f72:	f004 fd3f 	bl	80059f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2101      	movs	r1, #1
 8000f7a:	487b      	ldr	r0, [pc, #492]	; (8001168 <MX_GPIO_Init+0x2c8>)
 8000f7c:	f004 fd3a 	bl	80059f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, dig_pin4_inverse_Pin|dig_pin2_inverse_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f86:	4879      	ldr	r0, [pc, #484]	; (800116c <MX_GPIO_Init+0x2cc>)
 8000f88:	f004 fd34 	bl	80059f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = dig_pin3_inverse_Pin|dig_pin1_inverse_Pin|dig_pin3_Pin|dig_pin4_Pin;
 8000f8c:	f244 4384 	movw	r3, #17540	; 0x4484
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	486f      	ldr	r0, [pc, #444]	; (8001164 <MX_GPIO_Init+0x2c4>)
 8000fa6:	f004 fb71 	bl	800568c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|dig_pin5_Pin;
 8000faa:	f241 0308 	movw	r3, #4104	; 0x1008
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4868      	ldr	r0, [pc, #416]	; (8001164 <MX_GPIO_Init+0x2c4>)
 8000fc4:	f004 fb62 	bl	800568c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = omron_2_Pin;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(omron_2_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4862      	ldr	r0, [pc, #392]	; (8001164 <MX_GPIO_Init+0x2c4>)
 8000fdc:	f004 fb56 	bl	800568c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = dig_pin1_Pin|dig_pin2_Pin;
 8000fe0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	485b      	ldr	r0, [pc, #364]	; (8001168 <MX_GPIO_Init+0x2c8>)
 8000ffa:	f004 fb47 	bl	800568c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	4854      	ldr	r0, [pc, #336]	; (8001168 <MX_GPIO_Init+0x2c8>)
 8001016:	f004 fb39 	bl	800568c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800101a:	2308      	movs	r3, #8
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800102a:	2305      	movs	r3, #5
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	484c      	ldr	r0, [pc, #304]	; (8001168 <MX_GPIO_Init+0x2c8>)
 8001036:	f004 fb29 	bl	800568c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800103a:	2310      	movs	r3, #16
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800104a:	2306      	movs	r3, #6
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	4846      	ldr	r0, [pc, #280]	; (8001170 <MX_GPIO_Init+0x2d0>)
 8001056:	f004 fb19 	bl	800568c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 800105a:	2320      	movs	r3, #32
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800106a:	2305      	movs	r3, #5
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	483e      	ldr	r0, [pc, #248]	; (8001170 <MX_GPIO_Init+0x2d0>)
 8001076:	f004 fb09 	bl	800568c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800107a:	2304      	movs	r3, #4
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4837      	ldr	r0, [pc, #220]	; (800116c <MX_GPIO_Init+0x2cc>)
 800108e:	f004 fafd 	bl	800568c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	4832      	ldr	r0, [pc, #200]	; (8001170 <MX_GPIO_Init+0x2d0>)
 80010a8:	f004 faf0 	bl	800568c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80010ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010be:	230a      	movs	r3, #10
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	4829      	ldr	r0, [pc, #164]	; (8001170 <MX_GPIO_Init+0x2d0>)
 80010ca:	f004 fadf 	bl	800568c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_SD_Pin;
 80010ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010e0:	2306      	movs	r3, #6
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SD_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	481f      	ldr	r0, [pc, #124]	; (8001168 <MX_GPIO_Init+0x2c8>)
 80010ec:	f004 face 	bl	800568c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = limit_switch_1_Pin|limit_switch_2_Pin|limit_switch_3_Pin;
 80010f0:	2307      	movs	r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010f8:	2302      	movs	r3, #2
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	481c      	ldr	r0, [pc, #112]	; (8001174 <MX_GPIO_Init+0x2d4>)
 8001104:	f004 fac2 	bl	800568c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = omron_1_Pin;
 8001108:	2308      	movs	r3, #8
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001110:	2301      	movs	r3, #1
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(omron_1_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4816      	ldr	r0, [pc, #88]	; (8001174 <MX_GPIO_Init+0x2d4>)
 800111c:	f004 fab6 	bl	800568c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = dig_pin4_inverse_Pin|dig_pin2_inverse_Pin;
 8001120:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800112a:	2301      	movs	r3, #1
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <MX_GPIO_Init+0x2cc>)
 800113a:	f004 faa7 	bl	800568c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800113e:	2302      	movs	r3, #2
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001142:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4804      	ldr	r0, [pc, #16]	; (8001164 <MX_GPIO_Init+0x2c4>)
 8001154:	f004 fa9a 	bl	800568c <HAL_GPIO_Init>

}
 8001158:	bf00      	nop
 800115a:	3730      	adds	r7, #48	; 0x30
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40021000 	.word	0x40021000
 8001168:	40020800 	.word	0x40020800
 800116c:	40020400 	.word	0x40020400
 8001170:	40020000 	.word	0x40020000
 8001174:	40020c00 	.word	0x40020c00

08001178 <omron>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void omron(uint8_t robot_position){  /*robot_position = 0 left , robot_position = 1 right*/
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	if (robot_position == 0){ /*left robot position on place*/
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d119      	bne.n	80011bc <omron+0x44>
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_SET){ //left_omron
 8001188:	2108      	movs	r1, #8
 800118a:	481b      	ldr	r0, [pc, #108]	; (80011f8 <omron+0x80>)
 800118c:	f004 fc1a 	bl	80059c4 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	2b01      	cmp	r3, #1
 8001194:	d103      	bne.n	800119e <omron+0x26>
			znamya_position = 1;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <omron+0x84>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
			znamya_position = 3;
		}
		else znamya_position = 1;
	}

}
 800119c:	e027      	b.n	80011ee <omron+0x76>
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == GPIO_PIN_SET){ //right_omron
 800119e:	2110      	movs	r1, #16
 80011a0:	4817      	ldr	r0, [pc, #92]	; (8001200 <omron+0x88>)
 80011a2:	f004 fc0f 	bl	80059c4 <HAL_GPIO_ReadPin>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d103      	bne.n	80011b4 <omron+0x3c>
			znamya_position = 2;
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <omron+0x84>)
 80011ae:	2202      	movs	r2, #2
 80011b0:	701a      	strb	r2, [r3, #0]
}
 80011b2:	e01c      	b.n	80011ee <omron+0x76>
		else znamya_position =3;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <omron+0x84>)
 80011b6:	2203      	movs	r2, #3
 80011b8:	701a      	strb	r2, [r3, #0]
}
 80011ba:	e018      	b.n	80011ee <omron+0x76>
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_SET){ //left_omron
 80011bc:	2108      	movs	r1, #8
 80011be:	480e      	ldr	r0, [pc, #56]	; (80011f8 <omron+0x80>)
 80011c0:	f004 fc00 	bl	80059c4 <HAL_GPIO_ReadPin>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d103      	bne.n	80011d2 <omron+0x5a>
			znamya_position = 2;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <omron+0x84>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	701a      	strb	r2, [r3, #0]
}
 80011d0:	e00d      	b.n	80011ee <omron+0x76>
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == GPIO_PIN_SET){ //right_omron
 80011d2:	2110      	movs	r1, #16
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <omron+0x88>)
 80011d6:	f004 fbf5 	bl	80059c4 <HAL_GPIO_ReadPin>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d103      	bne.n	80011e8 <omron+0x70>
			znamya_position = 3;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <omron+0x84>)
 80011e2:	2203      	movs	r2, #3
 80011e4:	701a      	strb	r2, [r3, #0]
}
 80011e6:	e002      	b.n	80011ee <omron+0x76>
		else znamya_position = 1;
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <omron+0x84>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	200002ac 	.word	0x200002ac
 8001200:	40021000 	.word	0x40021000

08001204 <set_voltage_chain>:
	bool mid_switch;
	bool down_switch;
	bool up_switch;
} switches;
switches switch_c;
void set_voltage_chain(float duty) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	ed87 0a01 	vstr	s0, [r7, #4]
 if(duty > 1.0) duty = 1.0;
 800120e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121e:	dd02      	ble.n	8001226 <set_voltage_chain+0x22>
 8001220:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001224:	607b      	str	r3, [r7, #4]
 if(duty < -1.0) duty = -1.0;
 8001226:	edd7 7a01 	vldr	s15, [r7, #4]
 800122a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800122e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001236:	d501      	bpl.n	800123c <set_voltage_chain+0x38>
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <set_voltage_chain+0xb8>)
 800123a:	607b      	str	r3, [r7, #4]

	 if(duty >= 0.0)  {
 800123c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001248:	db16      	blt.n	8001278 <set_voltage_chain+0x74>
		 TIM12->CCR1 = ((int32_t)(TIM12->ARR * duty));   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <set_voltage_chain+0xbc>)
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001256:	edd7 7a01 	vldr	s15, [r7, #4]
 800125a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <set_voltage_chain+0xbc>)
 8001264:	ee17 2a90 	vmov	r2, s15
 8001268:	635a      	str	r2, [r3, #52]	; 0x34
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001270:	4814      	ldr	r0, [pc, #80]	; (80012c4 <set_voltage_chain+0xc0>)
 8001272:	f004 fbbf 	bl	80059f4 <HAL_GPIO_WritePin>
  }
	 else {   TIM12->CCR1 = ((int32_t)(TIM12->ARR + (TIM12->ARR * duty)));
	 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);  }
}
 8001276:	e01d      	b.n	80012b4 <set_voltage_chain+0xb0>
	 else {   TIM12->CCR1 = ((int32_t)(TIM12->ARR + (TIM12->ARR * duty)));
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <set_voltage_chain+0xbc>)
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <set_voltage_chain+0xbc>)
 8001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001290:	edd7 7a01 	vldr	s15, [r7, #4]
 8001294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <set_voltage_chain+0xbc>)
 80012a2:	ee17 2a90 	vmov	r2, s15
 80012a6:	635a      	str	r2, [r3, #52]	; 0x34
	 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);  }
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <set_voltage_chain+0xc0>)
 80012b0:	f004 fba0 	bl	80059f4 <HAL_GPIO_WritePin>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	bf800000 	.word	0xbf800000
 80012c0:	40001800 	.word	0x40001800
 80012c4:	40021000 	.word	0x40021000

080012c8 <check_switches>:
void check_switches(){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0

	switch_c.mid_switch = (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_SET) ? 1 : 0;
 80012cc:	2104      	movs	r1, #4
 80012ce:	4812      	ldr	r0, [pc, #72]	; (8001318 <check_switches+0x50>)
 80012d0:	f004 fb78 	bl	80059c4 <HAL_GPIO_ReadPin>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	bf0c      	ite	eq
 80012da:	2301      	moveq	r3, #1
 80012dc:	2300      	movne	r3, #0
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <check_switches+0x54>)
 80012e2:	701a      	strb	r2, [r3, #0]
	switch_c.down_switch = (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == GPIO_PIN_SET) ? 1 : 0;
 80012e4:	2102      	movs	r1, #2
 80012e6:	480c      	ldr	r0, [pc, #48]	; (8001318 <check_switches+0x50>)
 80012e8:	f004 fb6c 	bl	80059c4 <HAL_GPIO_ReadPin>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	bf0c      	ite	eq
 80012f2:	2301      	moveq	r3, #1
 80012f4:	2300      	movne	r3, #0
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <check_switches+0x54>)
 80012fa:	705a      	strb	r2, [r3, #1]
	switch_c.up_switch = (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0) == GPIO_PIN_SET) ? 1 : 0;
 80012fc:	2101      	movs	r1, #1
 80012fe:	4806      	ldr	r0, [pc, #24]	; (8001318 <check_switches+0x50>)
 8001300:	f004 fb60 	bl	80059c4 <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b01      	cmp	r3, #1
 8001308:	bf0c      	ite	eq
 800130a:	2301      	moveq	r3, #1
 800130c:	2300      	movne	r3, #0
 800130e:	b2da      	uxtb	r2, r3
 8001310:	4b02      	ldr	r3, [pc, #8]	; (800131c <check_switches+0x54>)
 8001312:	709a      	strb	r2, [r3, #2]
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40020c00 	.word	0x40020c00
 800131c:	200002b4 	.word	0x200002b4

08001320 <chain_control>:
void chain_control(int pos){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

	static int flag = -1;

	if (pos == flag){
 8001328:	4b4b      	ldr	r3, [pc, #300]	; (8001458 <chain_control+0x138>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	429a      	cmp	r2, r3
 8001330:	d104      	bne.n	800133c <chain_control+0x1c>
		set_voltage_chain(0);
 8001332:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800145c <chain_control+0x13c>
 8001336:	f7ff ff65 	bl	8001204 <set_voltage_chain>
		return;
 800133a:	e089      	b.n	8001450 <chain_control+0x130>
	}

	switch (pos){//0-down, 1-mid, 2-up
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d06c      	beq.n	800141c <chain_control+0xfc>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b02      	cmp	r3, #2
 8001346:	f300 8083 	bgt.w	8001450 <chain_control+0x130>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <chain_control+0x38>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d017      	beq.n	8001386 <chain_control+0x66>
 8001356:	e07b      	b.n	8001450 <chain_control+0x130>
	case(0):
		if (!switch_c.down_switch){
 8001358:	4b41      	ldr	r3, [pc, #260]	; (8001460 <chain_control+0x140>)
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	f083 0301 	eor.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d007      	beq.n	8001376 <chain_control+0x56>
			set_voltage_chain(mot_grab);
 8001366:	4b3f      	ldr	r3, [pc, #252]	; (8001464 <chain_control+0x144>)
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	f7ff ff48 	bl	8001204 <set_voltage_chain>
		}
		else{
			flag = 0;
			set_voltage_chain(0);
		}
		break;
 8001374:	e06c      	b.n	8001450 <chain_control+0x130>
			flag = 0;
 8001376:	4b38      	ldr	r3, [pc, #224]	; (8001458 <chain_control+0x138>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
			set_voltage_chain(0);
 800137c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800145c <chain_control+0x13c>
 8001380:	f7ff ff40 	bl	8001204 <set_voltage_chain>
		break;
 8001384:	e064      	b.n	8001450 <chain_control+0x130>
	case(1):
		if (!switch_c.mid_switch){
 8001386:	4b36      	ldr	r3, [pc, #216]	; (8001460 <chain_control+0x140>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	f083 0301 	eor.w	r3, r3, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d03b      	beq.n	800140c <chain_control+0xec>
			if(flag == 0){
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <chain_control+0x138>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d109      	bne.n	80013b0 <chain_control+0x90>
				set_voltage_chain(-mot_grab);
 800139c:	4b31      	ldr	r3, [pc, #196]	; (8001464 <chain_control+0x144>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	eef1 7a67 	vneg.f32	s15, s15
 80013a6:	eeb0 0a67 	vmov.f32	s0, s15
 80013aa:	f7ff ff2b 	bl	8001204 <set_voltage_chain>
 80013ae:	e006      	b.n	80013be <chain_control+0x9e>
			}
			else{
				set_voltage_chain(mot_grab);
 80013b0:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <chain_control+0x144>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ba:	f7ff ff23 	bl	8001204 <set_voltage_chain>
			}
			if (switch_c.up_switch && flag == 0){
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <chain_control+0x140>)
 80013c0:	789b      	ldrb	r3, [r3, #2]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00d      	beq.n	80013e2 <chain_control+0xc2>
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <chain_control+0x138>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <chain_control+0xc2>
				flag = 2;
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <chain_control+0x138>)
 80013d0:	2202      	movs	r2, #2
 80013d2:	601a      	str	r2, [r3, #0]
				set_voltage_chain(mot_grab);
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <chain_control+0x144>)
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	eeb0 0a67 	vmov.f32	s0, s15
 80013de:	f7ff ff11 	bl	8001204 <set_voltage_chain>
			}
			if (switch_c.down_switch && flag == 2){
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <chain_control+0x140>)
 80013e4:	785b      	ldrb	r3, [r3, #1]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d031      	beq.n	800144e <chain_control+0x12e>
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <chain_control+0x138>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d12d      	bne.n	800144e <chain_control+0x12e>
				flag = 0;
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <chain_control+0x138>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
				set_voltage_chain(-mot_grab);
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <chain_control+0x144>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	eef1 7a67 	vneg.f32	s15, s15
 8001402:	eeb0 0a67 	vmov.f32	s0, s15
 8001406:	f7ff fefd 	bl	8001204 <set_voltage_chain>
		}
		else{
			flag = 1;
			set_voltage_chain(0);
		}
		break;
 800140a:	e020      	b.n	800144e <chain_control+0x12e>
			flag = 1;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <chain_control+0x138>)
 800140e:	2201      	movs	r2, #1
 8001410:	601a      	str	r2, [r3, #0]
			set_voltage_chain(0);
 8001412:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800145c <chain_control+0x13c>
 8001416:	f7ff fef5 	bl	8001204 <set_voltage_chain>
		break;
 800141a:	e018      	b.n	800144e <chain_control+0x12e>
	case(2):
		if (!switch_c.up_switch){
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <chain_control+0x140>)
 800141e:	789b      	ldrb	r3, [r3, #2]
 8001420:	f083 0301 	eor.w	r3, r3, #1
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d009      	beq.n	800143e <chain_control+0x11e>
			set_voltage_chain(-mot_grab);
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <chain_control+0x144>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	eef1 7a67 	vneg.f32	s15, s15
 8001434:	eeb0 0a67 	vmov.f32	s0, s15
 8001438:	f7ff fee4 	bl	8001204 <set_voltage_chain>
 800143c:	e008      	b.n	8001450 <chain_control+0x130>
		}
		else{
			flag = 2;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <chain_control+0x138>)
 8001440:	2202      	movs	r2, #2
 8001442:	601a      	str	r2, [r3, #0]
			set_voltage_chain(0);
 8001444:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800145c <chain_control+0x13c>
 8001448:	f7ff fedc 	bl	8001204 <set_voltage_chain>
 800144c:	e000      	b.n	8001450 <chain_control+0x130>
		break;
 800144e:	bf00      	nop
//	if(switch_c.down_switch){
//		set_voltage_chain(mot_1);
//	}
//	set_voltage_chain(mot_1);

}
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000006c 	.word	0x2000006c
 800145c:	00000000 	.word	0x00000000
 8001460:	200002b4 	.word	0x200002b4
 8001464:	20000068 	.word	0x20000068

08001468 <servo_control>:
void servo_control(uint8_t servo ,uint8_t position ){ /*position = 0 open , position = 1 close*/
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	460a      	mov	r2, r1
 8001472:	71fb      	strb	r3, [r7, #7]
 8001474:	4613      	mov	r3, r2
 8001476:	71bb      	strb	r3, [r7, #6]
	 switch(servo){
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <servo_control+0x1c>
 800147e:	2b01      	cmp	r3, #1
 8001480:	d00b      	beq.n	800149a <servo_control+0x32>
		 else{
			 TIM9->CCR2 = 30 +0.5*30;
		 }
		 break;
	 }
}
 8001482:	e015      	b.n	80014b0 <servo_control+0x48>
		 if(position == 0){
 8001484:	79bb      	ldrb	r3, [r7, #6]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d103      	bne.n	8001492 <servo_control+0x2a>
			 TIM9->CCR1 = 30 +0.5*90;
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <servo_control+0x54>)
 800148c:	224b      	movs	r2, #75	; 0x4b
 800148e:	635a      	str	r2, [r3, #52]	; 0x34
		 break;
 8001490:	e00e      	b.n	80014b0 <servo_control+0x48>
			 TIM9->CCR1 = 30 +0.5*43;
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <servo_control+0x54>)
 8001494:	2233      	movs	r2, #51	; 0x33
 8001496:	635a      	str	r2, [r3, #52]	; 0x34
		 break;
 8001498:	e00a      	b.n	80014b0 <servo_control+0x48>
		 if(position == 0){
 800149a:	79bb      	ldrb	r3, [r7, #6]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d103      	bne.n	80014a8 <servo_control+0x40>
			 TIM9->CCR2 = 30 +0.5*120;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <servo_control+0x54>)
 80014a2:	225a      	movs	r2, #90	; 0x5a
 80014a4:	639a      	str	r2, [r3, #56]	; 0x38
		 break;
 80014a6:	e002      	b.n	80014ae <servo_control+0x46>
			 TIM9->CCR2 = 30 +0.5*30;
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <servo_control+0x54>)
 80014aa:	222d      	movs	r2, #45	; 0x2d
 80014ac:	639a      	str	r2, [r3, #56]	; 0x38
		 break;
 80014ae:	bf00      	nop
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40014000 	.word	0x40014000

080014c0 <switch_lim>:
		 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);

		 }

}
void switch_lim(uint8_t pos){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	switch(pos){
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d046      	beq.n	800155e <switch_lim+0x9e>
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	dc67      	bgt.n	80015a4 <switch_lim+0xe4>
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d01a      	beq.n	800150e <switch_lim+0x4e>
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d038      	beq.n	800154e <switch_lim+0x8e>
		}
		break;


	}
}
 80014dc:	e062      	b.n	80015a4 <switch_lim+0xe4>
				check_switches();
 80014de:	f7ff fef3 	bl	80012c8 <check_switches>
				position = 0;
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <switch_lim+0xec>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
				chain_control(0);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff ff19 	bl	8001320 <chain_control>
				Wheel_1.target = 0;
 80014ee:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <switch_lim+0xf0>)
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
				Wheel_2.target = 0;
 80014f6:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <switch_lim+0xf4>)
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
				Wheel_3.target = 0;
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <switch_lim+0xf8>)
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
				Wheel_4.target = 0;
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <switch_lim+0xfc>)
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
			while (switch_c.down_switch != 1){
 800150e:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <switch_lim+0x100>)
 8001510:	785b      	ldrb	r3, [r3, #1]
 8001512:	f083 0301 	eor.w	r3, r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1e0      	bne.n	80014de <switch_lim+0x1e>
		break;
 800151c:	e042      	b.n	80015a4 <switch_lim+0xe4>
				check_switches();
 800151e:	f7ff fed3 	bl	80012c8 <check_switches>
				position = 1;
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <switch_lim+0xec>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
				chain_control(1);
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff fef9 	bl	8001320 <chain_control>
				Wheel_1.target = 0;
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <switch_lim+0xf0>)
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
				Wheel_2.target = 0;
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <switch_lim+0xf4>)
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
				Wheel_3.target = 0;
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <switch_lim+0xf8>)
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
				Wheel_4.target = 0;
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <switch_lim+0xfc>)
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
			while (switch_c.mid_switch != 1){
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <switch_lim+0x100>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	f083 0301 	eor.w	r3, r3, #1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e0      	bne.n	800151e <switch_lim+0x5e>
		break;
 800155c:	e022      	b.n	80015a4 <switch_lim+0xe4>
				position = 2;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <switch_lim+0xec>)
 8001560:	2202      	movs	r2, #2
 8001562:	701a      	strb	r2, [r3, #0]
			while (switch_c.up_switch != 1){
 8001564:	e016      	b.n	8001594 <switch_lim+0xd4>
				check_switches();
 8001566:	f7ff feaf 	bl	80012c8 <check_switches>
				pos = 2;
 800156a:	2302      	movs	r3, #2
 800156c:	71fb      	strb	r3, [r7, #7]
				chain_control(2);
 800156e:	2002      	movs	r0, #2
 8001570:	f7ff fed6 	bl	8001320 <chain_control>
				Wheel_1.target = 0;
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <switch_lim+0xf0>)
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
				Wheel_2.target = 0;
 800157c:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <switch_lim+0xf4>)
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
				Wheel_3.target = 0;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <switch_lim+0xf8>)
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
				Wheel_4.target = 0;
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <switch_lim+0xfc>)
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
			while (switch_c.up_switch != 1){
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <switch_lim+0x100>)
 8001596:	789b      	ldrb	r3, [r3, #2]
 8001598:	f083 0301 	eor.w	r3, r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1e1      	bne.n	8001566 <switch_lim+0xa6>
		break;
 80015a2:	bf00      	nop
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200002ad 	.word	0x200002ad
 80015b0:	200000ec 	.word	0x200000ec
 80015b4:	2000012c 	.word	0x2000012c
 80015b8:	2000016c 	.word	0x2000016c
 80015bc:	200001ac 	.word	0x200001ac
 80015c0:	200002b4 	.word	0x200002b4
 80015c4:	00000000 	.word	0x00000000

080015c8 <Move_robot_coordinates_X_Y_W>:
void Move_robot_coordinates_X_Y_W(float speed_v,float speed_w,float x_target,float y_target,float fi_target){
 80015c8:	b5b0      	push	{r4, r5, r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af04      	add	r7, sp, #16
 80015ce:	ed87 0a05 	vstr	s0, [r7, #20]
 80015d2:	edc7 0a04 	vstr	s1, [r7, #16]
 80015d6:	ed87 1a03 	vstr	s2, [r7, #12]
 80015da:	edc7 1a02 	vstr	s3, [r7, #8]
 80015de:	ed87 2a01 	vstr	s4, [r7, #4]
	V = speed_v;
 80015e2:	4aa1      	ldr	r2, [pc, #644]	; (8001868 <Move_robot_coordinates_X_Y_W+0x2a0>)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	6013      	str	r3, [r2, #0]
	W = speed_w;
 80015e8:	4aa0      	ldr	r2, [pc, #640]	; (800186c <Move_robot_coordinates_X_Y_W+0x2a4>)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	6013      	str	r3, [r2, #0]
	quest_xy[0][0] = x_target;
 80015ee:	4aa0      	ldr	r2, [pc, #640]	; (8001870 <Move_robot_coordinates_X_Y_W+0x2a8>)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6013      	str	r3, [r2, #0]
	quest_xy[0][1] = y_target;
 80015f4:	4a9e      	ldr	r2, [pc, #632]	; (8001870 <Move_robot_coordinates_X_Y_W+0x2a8>)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	6053      	str	r3, [r2, #4]
	quest_FI = fi_target;
 80015fa:	4a9e      	ldr	r2, [pc, #632]	; (8001874 <Move_robot_coordinates_X_Y_W+0x2ac>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6013      	str	r3, [r2, #0]
	convert_xy_UV[0][0]=cos(fi);
 8001600:	4b9d      	ldr	r3, [pc, #628]	; (8001878 <Move_robot_coordinates_X_Y_W+0x2b0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff43 	bl	8000490 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	ec43 2b10 	vmov	d0, r2, r3
 8001612:	f006 ffb1 	bl	8008578 <cos>
 8001616:	ec53 2b10 	vmov	r2, r3, d0
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fa51 	bl	8000ac4 <__aeabi_d2f>
 8001622:	4603      	mov	r3, r0
 8001624:	4a95      	ldr	r2, [pc, #596]	; (800187c <Move_robot_coordinates_X_Y_W+0x2b4>)
 8001626:	6013      	str	r3, [r2, #0]
	convert_xy_UV[0][1]=sin(fi);
 8001628:	4b93      	ldr	r3, [pc, #588]	; (8001878 <Move_robot_coordinates_X_Y_W+0x2b0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff2f 	bl	8000490 <__aeabi_f2d>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	ec43 2b10 	vmov	d0, r2, r3
 800163a:	f006 fff1 	bl	8008620 <sin>
 800163e:	ec53 2b10 	vmov	r2, r3, d0
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff fa3d 	bl	8000ac4 <__aeabi_d2f>
 800164a:	4603      	mov	r3, r0
 800164c:	4a8b      	ldr	r2, [pc, #556]	; (800187c <Move_robot_coordinates_X_Y_W+0x2b4>)
 800164e:	6053      	str	r3, [r2, #4]
	convert_xy_UV[0][2]=0;
 8001650:	4b8a      	ldr	r3, [pc, #552]	; (800187c <Move_robot_coordinates_X_Y_W+0x2b4>)
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
	convert_xy_UV[1][0]=-sin(fi);
 8001658:	4b87      	ldr	r3, [pc, #540]	; (8001878 <Move_robot_coordinates_X_Y_W+0x2b0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff17 	bl	8000490 <__aeabi_f2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	ec43 2b10 	vmov	d0, r2, r3
 800166a:	f006 ffd9 	bl	8008620 <sin>
 800166e:	ec53 2b10 	vmov	r2, r3, d0
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fa25 	bl	8000ac4 <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eef1 7a67 	vneg.f32	s15, s15
 8001684:	4b7d      	ldr	r3, [pc, #500]	; (800187c <Move_robot_coordinates_X_Y_W+0x2b4>)
 8001686:	edc3 7a03 	vstr	s15, [r3, #12]
	convert_xy_UV[1][1]=cos(fi);
 800168a:	4b7b      	ldr	r3, [pc, #492]	; (8001878 <Move_robot_coordinates_X_Y_W+0x2b0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe fefe 	bl	8000490 <__aeabi_f2d>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	ec43 2b10 	vmov	d0, r2, r3
 800169c:	f006 ff6c 	bl	8008578 <cos>
 80016a0:	ec53 2b10 	vmov	r2, r3, d0
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f7ff fa0c 	bl	8000ac4 <__aeabi_d2f>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a73      	ldr	r2, [pc, #460]	; (800187c <Move_robot_coordinates_X_Y_W+0x2b4>)
 80016b0:	6113      	str	r3, [r2, #16]
	convert_xy_UV[1][2]=0;
 80016b2:	4b72      	ldr	r3, [pc, #456]	; (800187c <Move_robot_coordinates_X_Y_W+0x2b4>)
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
	convert_xy_UV[2][0]=position_x;
 80016ba:	4b71      	ldr	r3, [pc, #452]	; (8001880 <Move_robot_coordinates_X_Y_W+0x2b8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a6f      	ldr	r2, [pc, #444]	; (800187c <Move_robot_coordinates_X_Y_W+0x2b4>)
 80016c0:	6193      	str	r3, [r2, #24]
	convert_xy_UV[2][1]=position_y;
 80016c2:	4b70      	ldr	r3, [pc, #448]	; (8001884 <Move_robot_coordinates_X_Y_W+0x2bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a6d      	ldr	r2, [pc, #436]	; (800187c <Move_robot_coordinates_X_Y_W+0x2b4>)
 80016c8:	61d3      	str	r3, [r2, #28]
	convert_xy_UV[2][2]=1;
 80016ca:	4b6c      	ldr	r3, [pc, #432]	; (800187c <Move_robot_coordinates_X_Y_W+0x2b4>)
 80016cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80016d0:	621a      	str	r2, [r3, #32]
	matrixInverse(&convert_xy_UV[0][0],3,&inverse_converte_xy_UV[0][0]);
 80016d2:	4a6d      	ldr	r2, [pc, #436]	; (8001888 <Move_robot_coordinates_X_Y_W+0x2c0>)
 80016d4:	2103      	movs	r1, #3
 80016d6:	4869      	ldr	r0, [pc, #420]	; (800187c <Move_robot_coordinates_X_Y_W+0x2b4>)
 80016d8:	f001 fc6a 	bl	8002fb0 <matrixInverse>
	matrixMultiplyM2M(&quest_xy[0][0],1,3,&inverse_converte_xy_UV[0][0],3,3,&quest_UV[0][0]);
 80016dc:	4b6b      	ldr	r3, [pc, #428]	; (800188c <Move_robot_coordinates_X_Y_W+0x2c4>)
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	2303      	movs	r3, #3
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	2303      	movs	r3, #3
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4b67      	ldr	r3, [pc, #412]	; (8001888 <Move_robot_coordinates_X_Y_W+0x2c0>)
 80016ea:	2203      	movs	r2, #3
 80016ec:	2101      	movs	r1, #1
 80016ee:	4860      	ldr	r0, [pc, #384]	; (8001870 <Move_robot_coordinates_X_Y_W+0x2a8>)
 80016f0:	f001 fa90 	bl	8002c14 <matrixMultiplyM2M>
	gipotinus =  sqrtf((quest_UV[0][0]*quest_UV[0][0])+(quest_UV[0][1]*quest_UV[0][1]) );
 80016f4:	4b65      	ldr	r3, [pc, #404]	; (800188c <Move_robot_coordinates_X_Y_W+0x2c4>)
 80016f6:	ed93 7a00 	vldr	s14, [r3]
 80016fa:	4b64      	ldr	r3, [pc, #400]	; (800188c <Move_robot_coordinates_X_Y_W+0x2c4>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001704:	4b61      	ldr	r3, [pc, #388]	; (800188c <Move_robot_coordinates_X_Y_W+0x2c4>)
 8001706:	edd3 6a01 	vldr	s13, [r3, #4]
 800170a:	4b60      	ldr	r3, [pc, #384]	; (800188c <Move_robot_coordinates_X_Y_W+0x2c4>)
 800170c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	f006 ffd8 	bl	80086d0 <sqrtf>
 8001720:	eef0 7a40 	vmov.f32	s15, s0
 8001724:	4b5a      	ldr	r3, [pc, #360]	; (8001890 <Move_robot_coordinates_X_Y_W+0x2c8>)
 8001726:	edc3 7a00 	vstr	s15, [r3]
	distante = gipotinus;
 800172a:	4b59      	ldr	r3, [pc, #356]	; (8001890 <Move_robot_coordinates_X_Y_W+0x2c8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a59      	ldr	r2, [pc, #356]	; (8001894 <Move_robot_coordinates_X_Y_W+0x2cc>)
 8001730:	6013      	str	r3, [r2, #0]
	 if(fi>=(2*pi)) fi = fi-2*pi;
 8001732:	4b51      	ldr	r3, [pc, #324]	; (8001878 <Move_robot_coordinates_X_Y_W+0x2b0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe feaa 	bl	8000490 <__aeabi_f2d>
 800173c:	a346      	add	r3, pc, #280	; (adr r3, 8001858 <Move_robot_coordinates_X_Y_W+0x290>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7ff f983 	bl	8000a4c <__aeabi_dcmpge>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d012      	beq.n	8001772 <Move_robot_coordinates_X_Y_W+0x1aa>
 800174c:	4b4a      	ldr	r3, [pc, #296]	; (8001878 <Move_robot_coordinates_X_Y_W+0x2b0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fe9d 	bl	8000490 <__aeabi_f2d>
 8001756:	a340      	add	r3, pc, #256	; (adr r3, 8001858 <Move_robot_coordinates_X_Y_W+0x290>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe fd38 	bl	80001d0 <__aeabi_dsub>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff f9ac 	bl	8000ac4 <__aeabi_d2f>
 800176c:	4603      	mov	r3, r0
 800176e:	4a42      	ldr	r2, [pc, #264]	; (8001878 <Move_robot_coordinates_X_Y_W+0x2b0>)
 8001770:	6013      	str	r3, [r2, #0]
	 if(fi<0.0)	 fi = fi+2*pi;
 8001772:	4b41      	ldr	r3, [pc, #260]	; (8001878 <Move_robot_coordinates_X_Y_W+0x2b0>)
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001780:	d512      	bpl.n	80017a8 <Move_robot_coordinates_X_Y_W+0x1e0>
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <Move_robot_coordinates_X_Y_W+0x2b0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fe82 	bl	8000490 <__aeabi_f2d>
 800178c:	a332      	add	r3, pc, #200	; (adr r3, 8001858 <Move_robot_coordinates_X_Y_W+0x290>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	f7fe fd1f 	bl	80001d4 <__adddf3>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f7ff f991 	bl	8000ac4 <__aeabi_d2f>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a34      	ldr	r2, [pc, #208]	; (8001878 <Move_robot_coordinates_X_Y_W+0x2b0>)
 80017a6:	6013      	str	r3, [r2, #0]
	 if(quest_FI>fi){
 80017a8:	4b32      	ldr	r3, [pc, #200]	; (8001874 <Move_robot_coordinates_X_Y_W+0x2ac>)
 80017aa:	ed93 7a00 	vldr	s14, [r3]
 80017ae:	4b32      	ldr	r3, [pc, #200]	; (8001878 <Move_robot_coordinates_X_Y_W+0x2b0>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017bc:	dd70      	ble.n	80018a0 <Move_robot_coordinates_X_Y_W+0x2d8>
		 if((quest_FI-fi)>pi){
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <Move_robot_coordinates_X_Y_W+0x2ac>)
 80017c0:	ed93 7a00 	vldr	s14, [r3]
 80017c4:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <Move_robot_coordinates_X_Y_W+0x2b0>)
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ce:	ee17 0a90 	vmov	r0, s15
 80017d2:	f7fe fe5d 	bl	8000490 <__aeabi_f2d>
 80017d6:	a322      	add	r3, pc, #136	; (adr r3, 8001860 <Move_robot_coordinates_X_Y_W+0x298>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7ff f940 	bl	8000a60 <__aeabi_dcmpgt>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d027      	beq.n	8001836 <Move_robot_coordinates_X_Y_W+0x26e>
			delta_fi = (2*pi-quest_FI+fi);
 80017e6:	4b23      	ldr	r3, [pc, #140]	; (8001874 <Move_robot_coordinates_X_Y_W+0x2ac>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fe50 	bl	8000490 <__aeabi_f2d>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	a118      	add	r1, pc, #96	; (adr r1, 8001858 <Move_robot_coordinates_X_Y_W+0x290>)
 80017f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017fa:	f7fe fce9 	bl	80001d0 <__aeabi_dsub>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4614      	mov	r4, r2
 8001804:	461d      	mov	r5, r3
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <Move_robot_coordinates_X_Y_W+0x2b0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fe40 	bl	8000490 <__aeabi_f2d>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4620      	mov	r0, r4
 8001816:	4629      	mov	r1, r5
 8001818:	f7fe fcdc 	bl	80001d4 <__adddf3>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff f94e 	bl	8000ac4 <__aeabi_d2f>
 8001828:	4603      	mov	r3, r0
 800182a:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <Move_robot_coordinates_X_Y_W+0x2d0>)
 800182c:	6013      	str	r3, [r2, #0]
			flaging = 1;
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <Move_robot_coordinates_X_Y_W+0x2d4>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	e3a0      	b.n	8001f78 <Move_robot_coordinates_X_Y_W+0x9b0>
		 }
		 else {

			 delta_fi = (quest_FI - fi);
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <Move_robot_coordinates_X_Y_W+0x2ac>)
 8001838:	ed93 7a00 	vldr	s14, [r3]
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <Move_robot_coordinates_X_Y_W+0x2b0>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <Move_robot_coordinates_X_Y_W+0x2d0>)
 8001848:	edc3 7a00 	vstr	s15, [r3]
			 flaging = 2;
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <Move_robot_coordinates_X_Y_W+0x2d4>)
 800184e:	2202      	movs	r2, #2
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	e391      	b.n	8001f78 <Move_robot_coordinates_X_Y_W+0x9b0>
 8001854:	f3af 8000 	nop.w
 8001858:	54442d18 	.word	0x54442d18
 800185c:	401921fb 	.word	0x401921fb
 8001860:	54442d18 	.word	0x54442d18
 8001864:	400921fb 	.word	0x400921fb
 8001868:	20000060 	.word	0x20000060
 800186c:	20000064 	.word	0x20000064
 8001870:	20000240 	.word	0x20000240
 8001874:	200002a4 	.word	0x200002a4
 8001878:	20000070 	.word	0x20000070
 800187c:	20000258 	.word	0x20000258
 8001880:	20000428 	.word	0x20000428
 8001884:	2000042c 	.word	0x2000042c
 8001888:	2000027c 	.word	0x2000027c
 800188c:	2000024c 	.word	0x2000024c
 8001890:	200002a0 	.word	0x200002a0
 8001894:	200002a8 	.word	0x200002a8
 8001898:	20000230 	.word	0x20000230
 800189c:	200003f6 	.word	0x200003f6
		 }

	 }
	 else{
		 if((fi-quest_FI)>pi){
 80018a0:	4b29      	ldr	r3, [pc, #164]	; (8001948 <Move_robot_coordinates_X_Y_W+0x380>)
 80018a2:	ed93 7a00 	vldr	s14, [r3]
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <Move_robot_coordinates_X_Y_W+0x384>)
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b0:	ee17 0a90 	vmov	r0, s15
 80018b4:	f7fe fdec 	bl	8000490 <__aeabi_f2d>
 80018b8:	a31f      	add	r3, pc, #124	; (adr r3, 8001938 <Move_robot_coordinates_X_Y_W+0x370>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7ff f8cf 	bl	8000a60 <__aeabi_dcmpgt>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d027      	beq.n	8001918 <Move_robot_coordinates_X_Y_W+0x350>
			 flaging = 3;
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <Move_robot_coordinates_X_Y_W+0x388>)
 80018ca:	2203      	movs	r2, #3
 80018cc:	701a      	strb	r2, [r3, #0]
			delta_fi =  2*pi-fi+quest_FI;;
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <Move_robot_coordinates_X_Y_W+0x380>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fddc 	bl	8000490 <__aeabi_f2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	a118      	add	r1, pc, #96	; (adr r1, 8001940 <Move_robot_coordinates_X_Y_W+0x378>)
 80018de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018e2:	f7fe fc75 	bl	80001d0 <__aeabi_dsub>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4614      	mov	r4, r2
 80018ec:	461d      	mov	r5, r3
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <Move_robot_coordinates_X_Y_W+0x384>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fdcc 	bl	8000490 <__aeabi_f2d>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4620      	mov	r0, r4
 80018fe:	4629      	mov	r1, r5
 8001900:	f7fe fc68 	bl	80001d4 <__adddf3>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f8da 	bl	8000ac4 <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <Move_robot_coordinates_X_Y_W+0x38c>)
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e32f      	b.n	8001f78 <Move_robot_coordinates_X_Y_W+0x9b0>

		 }
		 else {
			 flaging = 4;
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <Move_robot_coordinates_X_Y_W+0x388>)
 800191a:	2204      	movs	r2, #4
 800191c:	701a      	strb	r2, [r3, #0]
			 delta_fi = fi-quest_FI;
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <Move_robot_coordinates_X_Y_W+0x380>)
 8001920:	ed93 7a00 	vldr	s14, [r3]
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <Move_robot_coordinates_X_Y_W+0x384>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <Move_robot_coordinates_X_Y_W+0x38c>)
 8001930:	edc3 7a00 	vstr	s15, [r3]
		 }
	 }
	while(((gipotinus>=0.005)||delta_fi>=0.02)){
 8001934:	e320      	b.n	8001f78 <Move_robot_coordinates_X_Y_W+0x9b0>
 8001936:	bf00      	nop
 8001938:	54442d18 	.word	0x54442d18
 800193c:	400921fb 	.word	0x400921fb
 8001940:	54442d18 	.word	0x54442d18
 8001944:	401921fb 	.word	0x401921fb
 8001948:	20000070 	.word	0x20000070
 800194c:	200002a4 	.word	0x200002a4
 8001950:	200003f6 	.word	0x200003f6
 8001954:	20000230 	.word	0x20000230
	convert_xy_UV[0][0]=cos(fi);
 8001958:	4b9f      	ldr	r3, [pc, #636]	; (8001bd8 <Move_robot_coordinates_X_Y_W+0x610>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fd97 	bl	8000490 <__aeabi_f2d>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	ec43 2b10 	vmov	d0, r2, r3
 800196a:	f006 fe05 	bl	8008578 <cos>
 800196e:	ec53 2b10 	vmov	r2, r3, d0
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f8a5 	bl	8000ac4 <__aeabi_d2f>
 800197a:	4603      	mov	r3, r0
 800197c:	4a97      	ldr	r2, [pc, #604]	; (8001bdc <Move_robot_coordinates_X_Y_W+0x614>)
 800197e:	6013      	str	r3, [r2, #0]
    convert_xy_UV[0][1]=sin(fi);
 8001980:	4b95      	ldr	r3, [pc, #596]	; (8001bd8 <Move_robot_coordinates_X_Y_W+0x610>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fd83 	bl	8000490 <__aeabi_f2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	ec43 2b10 	vmov	d0, r2, r3
 8001992:	f006 fe45 	bl	8008620 <sin>
 8001996:	ec53 2b10 	vmov	r2, r3, d0
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f7ff f891 	bl	8000ac4 <__aeabi_d2f>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a8d      	ldr	r2, [pc, #564]	; (8001bdc <Move_robot_coordinates_X_Y_W+0x614>)
 80019a6:	6053      	str	r3, [r2, #4]
	convert_xy_UV[0][2]=0;
 80019a8:	4b8c      	ldr	r3, [pc, #560]	; (8001bdc <Move_robot_coordinates_X_Y_W+0x614>)
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
	convert_xy_UV[1][0]=-sin(fi);
 80019b0:	4b89      	ldr	r3, [pc, #548]	; (8001bd8 <Move_robot_coordinates_X_Y_W+0x610>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fd6b 	bl	8000490 <__aeabi_f2d>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	ec43 2b10 	vmov	d0, r2, r3
 80019c2:	f006 fe2d 	bl	8008620 <sin>
 80019c6:	ec53 2b10 	vmov	r2, r3, d0
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff f879 	bl	8000ac4 <__aeabi_d2f>
 80019d2:	4603      	mov	r3, r0
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eef1 7a67 	vneg.f32	s15, s15
 80019dc:	4b7f      	ldr	r3, [pc, #508]	; (8001bdc <Move_robot_coordinates_X_Y_W+0x614>)
 80019de:	edc3 7a03 	vstr	s15, [r3, #12]
	convert_xy_UV[1][1]=cos(fi);
 80019e2:	4b7d      	ldr	r3, [pc, #500]	; (8001bd8 <Move_robot_coordinates_X_Y_W+0x610>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fd52 	bl	8000490 <__aeabi_f2d>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	ec43 2b10 	vmov	d0, r2, r3
 80019f4:	f006 fdc0 	bl	8008578 <cos>
 80019f8:	ec53 2b10 	vmov	r2, r3, d0
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f860 	bl	8000ac4 <__aeabi_d2f>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a75      	ldr	r2, [pc, #468]	; (8001bdc <Move_robot_coordinates_X_Y_W+0x614>)
 8001a08:	6113      	str	r3, [r2, #16]
	convert_xy_UV[1][2]=0;
 8001a0a:	4b74      	ldr	r3, [pc, #464]	; (8001bdc <Move_robot_coordinates_X_Y_W+0x614>)
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
	convert_xy_UV[2][0]=position_x;
 8001a12:	4b73      	ldr	r3, [pc, #460]	; (8001be0 <Move_robot_coordinates_X_Y_W+0x618>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a71      	ldr	r2, [pc, #452]	; (8001bdc <Move_robot_coordinates_X_Y_W+0x614>)
 8001a18:	6193      	str	r3, [r2, #24]
	convert_xy_UV[2][1]=position_y;
 8001a1a:	4b72      	ldr	r3, [pc, #456]	; (8001be4 <Move_robot_coordinates_X_Y_W+0x61c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a6f      	ldr	r2, [pc, #444]	; (8001bdc <Move_robot_coordinates_X_Y_W+0x614>)
 8001a20:	61d3      	str	r3, [r2, #28]
	convert_xy_UV[2][2]=1;
 8001a22:	4b6e      	ldr	r3, [pc, #440]	; (8001bdc <Move_robot_coordinates_X_Y_W+0x614>)
 8001a24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a28:	621a      	str	r2, [r3, #32]
	matrixInverse(&convert_xy_UV[0][0],3,&inverse_converte_xy_UV[0][0]);
 8001a2a:	4a6f      	ldr	r2, [pc, #444]	; (8001be8 <Move_robot_coordinates_X_Y_W+0x620>)
 8001a2c:	2103      	movs	r1, #3
 8001a2e:	486b      	ldr	r0, [pc, #428]	; (8001bdc <Move_robot_coordinates_X_Y_W+0x614>)
 8001a30:	f001 fabe 	bl	8002fb0 <matrixInverse>
	matrixMultiplyM2M(&quest_xy[0][0],1,3,&inverse_converte_xy_UV[0][0],3,3,&quest_UV[0][0]);
 8001a34:	4b6d      	ldr	r3, [pc, #436]	; (8001bec <Move_robot_coordinates_X_Y_W+0x624>)
 8001a36:	9302      	str	r3, [sp, #8]
 8001a38:	2303      	movs	r3, #3
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	4b69      	ldr	r3, [pc, #420]	; (8001be8 <Move_robot_coordinates_X_Y_W+0x620>)
 8001a42:	2203      	movs	r2, #3
 8001a44:	2101      	movs	r1, #1
 8001a46:	486a      	ldr	r0, [pc, #424]	; (8001bf0 <Move_robot_coordinates_X_Y_W+0x628>)
 8001a48:	f001 f8e4 	bl	8002c14 <matrixMultiplyM2M>
	gipotinus =  sqrtf((quest_UV[0][0]*quest_UV[0][0])+(quest_UV[0][1]*quest_UV[0][1]) );
 8001a4c:	4b67      	ldr	r3, [pc, #412]	; (8001bec <Move_robot_coordinates_X_Y_W+0x624>)
 8001a4e:	ed93 7a00 	vldr	s14, [r3]
 8001a52:	4b66      	ldr	r3, [pc, #408]	; (8001bec <Move_robot_coordinates_X_Y_W+0x624>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5c:	4b63      	ldr	r3, [pc, #396]	; (8001bec <Move_robot_coordinates_X_Y_W+0x624>)
 8001a5e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a62:	4b62      	ldr	r3, [pc, #392]	; (8001bec <Move_robot_coordinates_X_Y_W+0x624>)
 8001a64:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a70:	eeb0 0a67 	vmov.f32	s0, s15
 8001a74:	f006 fe2c 	bl	80086d0 <sqrtf>
 8001a78:	eef0 7a40 	vmov.f32	s15, s0
 8001a7c:	4b5d      	ldr	r3, [pc, #372]	; (8001bf4 <Move_robot_coordinates_X_Y_W+0x62c>)
 8001a7e:	edc3 7a00 	vstr	s15, [r3]
	if (gipotinus > 0.005){
 8001a82:	4b5c      	ldr	r3, [pc, #368]	; (8001bf4 <Move_robot_coordinates_X_Y_W+0x62c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd02 	bl	8000490 <__aeabi_f2d>
 8001a8c:	a34a      	add	r3, pc, #296	; (adr r3, 8001bb8 <Move_robot_coordinates_X_Y_W+0x5f0>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe ffe5 	bl	8000a60 <__aeabi_dcmpgt>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8174 	beq.w	8001d86 <Move_robot_coordinates_X_Y_W+0x7be>
		if (gipotinus < 0.15){
 8001a9e:	4b55      	ldr	r3, [pc, #340]	; (8001bf4 <Move_robot_coordinates_X_Y_W+0x62c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fcf4 	bl	8000490 <__aeabi_f2d>
 8001aa8:	a345      	add	r3, pc, #276	; (adr r3, 8001bc0 <Move_robot_coordinates_X_Y_W+0x5f8>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	f7fe ffb9 	bl	8000a24 <__aeabi_dcmplt>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80a5 	beq.w	8001c04 <Move_robot_coordinates_X_Y_W+0x63c>
			target_speed[0] = quest_UV[0][0]/gipotinus*V*(0.4+(0.6*gipotinus)/0.25);
 8001aba:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <Move_robot_coordinates_X_Y_W+0x624>)
 8001abc:	edd3 6a00 	vldr	s13, [r3]
 8001ac0:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <Move_robot_coordinates_X_Y_W+0x62c>)
 8001ac2:	edd3 7a00 	vldr	s15, [r3]
 8001ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aca:	4b4b      	ldr	r3, [pc, #300]	; (8001bf8 <Move_robot_coordinates_X_Y_W+0x630>)
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad4:	ee17 0a90 	vmov	r0, s15
 8001ad8:	f7fe fcda 	bl	8000490 <__aeabi_f2d>
 8001adc:	4604      	mov	r4, r0
 8001ade:	460d      	mov	r5, r1
 8001ae0:	4b44      	ldr	r3, [pc, #272]	; (8001bf4 <Move_robot_coordinates_X_Y_W+0x62c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fcd3 	bl	8000490 <__aeabi_f2d>
 8001aea:	a337      	add	r3, pc, #220	; (adr r3, 8001bc8 <Move_robot_coordinates_X_Y_W+0x600>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fd26 	bl	8000540 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	4b3e      	ldr	r3, [pc, #248]	; (8001bfc <Move_robot_coordinates_X_Y_W+0x634>)
 8001b02:	f7fe fe47 	bl	8000794 <__aeabi_ddiv>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	a330      	add	r3, pc, #192	; (adr r3, 8001bd0 <Move_robot_coordinates_X_Y_W+0x608>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fb5e 	bl	80001d4 <__adddf3>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	4629      	mov	r1, r5
 8001b20:	f7fe fd0e 	bl	8000540 <__aeabi_dmul>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f7fe ffca 	bl	8000ac4 <__aeabi_d2f>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4a33      	ldr	r2, [pc, #204]	; (8001c00 <Move_robot_coordinates_X_Y_W+0x638>)
 8001b34:	6013      	str	r3, [r2, #0]
			target_speed[1] = quest_UV[0][1]/gipotinus*V*(0.4+(0.6*gipotinus)/0.25);
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <Move_robot_coordinates_X_Y_W+0x624>)
 8001b38:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <Move_robot_coordinates_X_Y_W+0x62c>)
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b46:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <Move_robot_coordinates_X_Y_W+0x630>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b50:	ee17 0a90 	vmov	r0, s15
 8001b54:	f7fe fc9c 	bl	8000490 <__aeabi_f2d>
 8001b58:	4604      	mov	r4, r0
 8001b5a:	460d      	mov	r5, r1
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <Move_robot_coordinates_X_Y_W+0x62c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fc95 	bl	8000490 <__aeabi_f2d>
 8001b66:	a318      	add	r3, pc, #96	; (adr r3, 8001bc8 <Move_robot_coordinates_X_Y_W+0x600>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fce8 	bl	8000540 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <Move_robot_coordinates_X_Y_W+0x634>)
 8001b7e:	f7fe fe09 	bl	8000794 <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	a311      	add	r3, pc, #68	; (adr r3, 8001bd0 <Move_robot_coordinates_X_Y_W+0x608>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe fb20 	bl	80001d4 <__adddf3>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4620      	mov	r0, r4
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	f7fe fcd0 	bl	8000540 <__aeabi_dmul>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7fe ff8c 	bl	8000ac4 <__aeabi_d2f>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <Move_robot_coordinates_X_Y_W+0x638>)
 8001bb0:	6053      	str	r3, [r2, #4]
 8001bb2:	e0f0      	b.n	8001d96 <Move_robot_coordinates_X_Y_W+0x7ce>
 8001bb4:	f3af 8000 	nop.w
 8001bb8:	47ae147b 	.word	0x47ae147b
 8001bbc:	3f747ae1 	.word	0x3f747ae1
 8001bc0:	33333333 	.word	0x33333333
 8001bc4:	3fc33333 	.word	0x3fc33333
 8001bc8:	33333333 	.word	0x33333333
 8001bcc:	3fe33333 	.word	0x3fe33333
 8001bd0:	9999999a 	.word	0x9999999a
 8001bd4:	3fd99999 	.word	0x3fd99999
 8001bd8:	20000070 	.word	0x20000070
 8001bdc:	20000258 	.word	0x20000258
 8001be0:	20000428 	.word	0x20000428
 8001be4:	2000042c 	.word	0x2000042c
 8001be8:	2000027c 	.word	0x2000027c
 8001bec:	2000024c 	.word	0x2000024c
 8001bf0:	20000240 	.word	0x20000240
 8001bf4:	200002a0 	.word	0x200002a0
 8001bf8:	20000060 	.word	0x20000060
 8001bfc:	3fd00000 	.word	0x3fd00000
 8001c00:	200001ec 	.word	0x200001ec
		}
		else if(distante-gipotinus<0.15){
 8001c04:	4ba8      	ldr	r3, [pc, #672]	; (8001ea8 <Move_robot_coordinates_X_Y_W+0x8e0>)
 8001c06:	ed93 7a00 	vldr	s14, [r3]
 8001c0a:	4ba8      	ldr	r3, [pc, #672]	; (8001eac <Move_robot_coordinates_X_Y_W+0x8e4>)
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c14:	ee17 0a90 	vmov	r0, s15
 8001c18:	f7fe fc3a 	bl	8000490 <__aeabi_f2d>
 8001c1c:	a398      	add	r3, pc, #608	; (adr r3, 8001e80 <Move_robot_coordinates_X_Y_W+0x8b8>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe feff 	bl	8000a24 <__aeabi_dcmplt>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 808b 	beq.w	8001d44 <Move_robot_coordinates_X_Y_W+0x77c>

			target_speed[0] = quest_UV[0][0]/gipotinus*V*(0.4+(0.6*(distante-gipotinus))/0.25);
 8001c2e:	4ba0      	ldr	r3, [pc, #640]	; (8001eb0 <Move_robot_coordinates_X_Y_W+0x8e8>)
 8001c30:	edd3 6a00 	vldr	s13, [r3]
 8001c34:	4b9d      	ldr	r3, [pc, #628]	; (8001eac <Move_robot_coordinates_X_Y_W+0x8e4>)
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c3e:	4b9d      	ldr	r3, [pc, #628]	; (8001eb4 <Move_robot_coordinates_X_Y_W+0x8ec>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c48:	ee17 0a90 	vmov	r0, s15
 8001c4c:	f7fe fc20 	bl	8000490 <__aeabi_f2d>
 8001c50:	4604      	mov	r4, r0
 8001c52:	460d      	mov	r5, r1
 8001c54:	4b94      	ldr	r3, [pc, #592]	; (8001ea8 <Move_robot_coordinates_X_Y_W+0x8e0>)
 8001c56:	ed93 7a00 	vldr	s14, [r3]
 8001c5a:	4b94      	ldr	r3, [pc, #592]	; (8001eac <Move_robot_coordinates_X_Y_W+0x8e4>)
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c64:	ee17 0a90 	vmov	r0, s15
 8001c68:	f7fe fc12 	bl	8000490 <__aeabi_f2d>
 8001c6c:	a386      	add	r3, pc, #536	; (adr r3, 8001e88 <Move_robot_coordinates_X_Y_W+0x8c0>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fc65 	bl	8000540 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	4b8d      	ldr	r3, [pc, #564]	; (8001eb8 <Move_robot_coordinates_X_Y_W+0x8f0>)
 8001c84:	f7fe fd86 	bl	8000794 <__aeabi_ddiv>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	a37f      	add	r3, pc, #508	; (adr r3, 8001e90 <Move_robot_coordinates_X_Y_W+0x8c8>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fa9d 	bl	80001d4 <__adddf3>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	f7fe fc4d 	bl	8000540 <__aeabi_dmul>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f7fe ff09 	bl	8000ac4 <__aeabi_d2f>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4a81      	ldr	r2, [pc, #516]	; (8001ebc <Move_robot_coordinates_X_Y_W+0x8f4>)
 8001cb6:	6013      	str	r3, [r2, #0]
			target_speed[1] = quest_UV[0][1]/gipotinus*V*(0.4+(0.6*(distante-gipotinus))/0.25);
 8001cb8:	4b7d      	ldr	r3, [pc, #500]	; (8001eb0 <Move_robot_coordinates_X_Y_W+0x8e8>)
 8001cba:	edd3 6a01 	vldr	s13, [r3, #4]
 8001cbe:	4b7b      	ldr	r3, [pc, #492]	; (8001eac <Move_robot_coordinates_X_Y_W+0x8e4>)
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cc8:	4b7a      	ldr	r3, [pc, #488]	; (8001eb4 <Move_robot_coordinates_X_Y_W+0x8ec>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd2:	ee17 0a90 	vmov	r0, s15
 8001cd6:	f7fe fbdb 	bl	8000490 <__aeabi_f2d>
 8001cda:	4604      	mov	r4, r0
 8001cdc:	460d      	mov	r5, r1
 8001cde:	4b72      	ldr	r3, [pc, #456]	; (8001ea8 <Move_robot_coordinates_X_Y_W+0x8e0>)
 8001ce0:	ed93 7a00 	vldr	s14, [r3]
 8001ce4:	4b71      	ldr	r3, [pc, #452]	; (8001eac <Move_robot_coordinates_X_Y_W+0x8e4>)
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cee:	ee17 0a90 	vmov	r0, s15
 8001cf2:	f7fe fbcd 	bl	8000490 <__aeabi_f2d>
 8001cf6:	a364      	add	r3, pc, #400	; (adr r3, 8001e88 <Move_robot_coordinates_X_Y_W+0x8c0>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fc20 	bl	8000540 <__aeabi_dmul>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <Move_robot_coordinates_X_Y_W+0x8f0>)
 8001d0e:	f7fe fd41 	bl	8000794 <__aeabi_ddiv>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	a35d      	add	r3, pc, #372	; (adr r3, 8001e90 <Move_robot_coordinates_X_Y_W+0x8c8>)
 8001d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d20:	f7fe fa58 	bl	80001d4 <__adddf3>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4620      	mov	r0, r4
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	f7fe fc08 	bl	8000540 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f7fe fec4 	bl	8000ac4 <__aeabi_d2f>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4a5f      	ldr	r2, [pc, #380]	; (8001ebc <Move_robot_coordinates_X_Y_W+0x8f4>)
 8001d40:	6053      	str	r3, [r2, #4]
 8001d42:	e028      	b.n	8001d96 <Move_robot_coordinates_X_Y_W+0x7ce>

		}
		else{
			target_speed[0] = quest_UV[0][0]/gipotinus*V;
 8001d44:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <Move_robot_coordinates_X_Y_W+0x8e8>)
 8001d46:	edd3 6a00 	vldr	s13, [r3]
 8001d4a:	4b58      	ldr	r3, [pc, #352]	; (8001eac <Move_robot_coordinates_X_Y_W+0x8e4>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d54:	4b57      	ldr	r3, [pc, #348]	; (8001eb4 <Move_robot_coordinates_X_Y_W+0x8ec>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5e:	4b57      	ldr	r3, [pc, #348]	; (8001ebc <Move_robot_coordinates_X_Y_W+0x8f4>)
 8001d60:	edc3 7a00 	vstr	s15, [r3]
			target_speed[1] = quest_UV[0][1]/gipotinus*V;
 8001d64:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <Move_robot_coordinates_X_Y_W+0x8e8>)
 8001d66:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d6a:	4b50      	ldr	r3, [pc, #320]	; (8001eac <Move_robot_coordinates_X_Y_W+0x8e4>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d74:	4b4f      	ldr	r3, [pc, #316]	; (8001eb4 <Move_robot_coordinates_X_Y_W+0x8ec>)
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7e:	4b4f      	ldr	r3, [pc, #316]	; (8001ebc <Move_robot_coordinates_X_Y_W+0x8f4>)
 8001d80:	edc3 7a01 	vstr	s15, [r3, #4]
 8001d84:	e007      	b.n	8001d96 <Move_robot_coordinates_X_Y_W+0x7ce>
		}
	}
	else{
		target_speed[0] = 0.0;
 8001d86:	4b4d      	ldr	r3, [pc, #308]	; (8001ebc <Move_robot_coordinates_X_Y_W+0x8f4>)
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
		target_speed[1] = 0.0;
 8001d8e:	4b4b      	ldr	r3, [pc, #300]	; (8001ebc <Move_robot_coordinates_X_Y_W+0x8f4>)
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	605a      	str	r2, [r3, #4]
	}
	if(fi>=(2*pi))fi = fi-2*pi;
 8001d96:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <Move_robot_coordinates_X_Y_W+0x8f8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fb78 	bl	8000490 <__aeabi_f2d>
 8001da0:	a33d      	add	r3, pc, #244	; (adr r3, 8001e98 <Move_robot_coordinates_X_Y_W+0x8d0>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fe51 	bl	8000a4c <__aeabi_dcmpge>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d012      	beq.n	8001dd6 <Move_robot_coordinates_X_Y_W+0x80e>
 8001db0:	4b43      	ldr	r3, [pc, #268]	; (8001ec0 <Move_robot_coordinates_X_Y_W+0x8f8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fb6b 	bl	8000490 <__aeabi_f2d>
 8001dba:	a337      	add	r3, pc, #220	; (adr r3, 8001e98 <Move_robot_coordinates_X_Y_W+0x8d0>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fa06 	bl	80001d0 <__aeabi_dsub>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7fe fe7a 	bl	8000ac4 <__aeabi_d2f>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a3b      	ldr	r2, [pc, #236]	; (8001ec0 <Move_robot_coordinates_X_Y_W+0x8f8>)
 8001dd4:	6013      	str	r3, [r2, #0]

		  	  if(fi<0.0) fi = fi+2*pi;
 8001dd6:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <Move_robot_coordinates_X_Y_W+0x8f8>)
 8001dd8:	edd3 7a00 	vldr	s15, [r3]
 8001ddc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	d512      	bpl.n	8001e0c <Move_robot_coordinates_X_Y_W+0x844>
 8001de6:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <Move_robot_coordinates_X_Y_W+0x8f8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb50 	bl	8000490 <__aeabi_f2d>
 8001df0:	a329      	add	r3, pc, #164	; (adr r3, 8001e98 <Move_robot_coordinates_X_Y_W+0x8d0>)
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	f7fe f9ed 	bl	80001d4 <__adddf3>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	f7fe fe5f 	bl	8000ac4 <__aeabi_d2f>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4a2d      	ldr	r2, [pc, #180]	; (8001ec0 <Move_robot_coordinates_X_Y_W+0x8f8>)
 8001e0a:	6013      	str	r3, [r2, #0]

		  	if (delta_fi>0.02){
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <Move_robot_coordinates_X_Y_W+0x8fc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb3d 	bl	8000490 <__aeabi_f2d>
 8001e16:	a322      	add	r3, pc, #136	; (adr r3, 8001ea0 <Move_robot_coordinates_X_Y_W+0x8d8>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f7fe fe20 	bl	8000a60 <__aeabi_dcmpgt>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d054      	beq.n	8001ed0 <Move_robot_coordinates_X_Y_W+0x908>
		  		switch(flaging){
 8001e26:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <Move_robot_coordinates_X_Y_W+0x900>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d853      	bhi.n	8001ed8 <Move_robot_coordinates_X_Y_W+0x910>
 8001e30:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <Move_robot_coordinates_X_Y_W+0x870>)
 8001e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e36:	bf00      	nop
 8001e38:	08001e49 	.word	0x08001e49
 8001e3c:	08001e51 	.word	0x08001e51
 8001e40:	08001e61 	.word	0x08001e61
 8001e44:	08001e71 	.word	0x08001e71
		  			case(1):target_speed[2] = W;
 8001e48:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <Move_robot_coordinates_X_Y_W+0x904>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <Move_robot_coordinates_X_Y_W+0x8f4>)
 8001e4e:	6093      	str	r3, [r2, #8]
		  			case(2):target_speed[2] = -W;
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <Move_robot_coordinates_X_Y_W+0x904>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	eef1 7a67 	vneg.f32	s15, s15
 8001e5a:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <Move_robot_coordinates_X_Y_W+0x8f4>)
 8001e5c:	edc3 7a02 	vstr	s15, [r3, #8]
		  			case(3):target_speed[2] = -W;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <Move_robot_coordinates_X_Y_W+0x904>)
 8001e62:	edd3 7a00 	vldr	s15, [r3]
 8001e66:	eef1 7a67 	vneg.f32	s15, s15
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <Move_robot_coordinates_X_Y_W+0x8f4>)
 8001e6c:	edc3 7a02 	vstr	s15, [r3, #8]
		  			case(4):target_speed[2] = W;
 8001e70:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <Move_robot_coordinates_X_Y_W+0x904>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <Move_robot_coordinates_X_Y_W+0x8f4>)
 8001e76:	6093      	str	r3, [r2, #8]
 8001e78:	e02e      	b.n	8001ed8 <Move_robot_coordinates_X_Y_W+0x910>
 8001e7a:	bf00      	nop
 8001e7c:	f3af 8000 	nop.w
 8001e80:	33333333 	.word	0x33333333
 8001e84:	3fc33333 	.word	0x3fc33333
 8001e88:	33333333 	.word	0x33333333
 8001e8c:	3fe33333 	.word	0x3fe33333
 8001e90:	9999999a 	.word	0x9999999a
 8001e94:	3fd99999 	.word	0x3fd99999
 8001e98:	54442d18 	.word	0x54442d18
 8001e9c:	401921fb 	.word	0x401921fb
 8001ea0:	47ae147b 	.word	0x47ae147b
 8001ea4:	3f947ae1 	.word	0x3f947ae1
 8001ea8:	200002a8 	.word	0x200002a8
 8001eac:	200002a0 	.word	0x200002a0
 8001eb0:	2000024c 	.word	0x2000024c
 8001eb4:	20000060 	.word	0x20000060
 8001eb8:	3fd00000 	.word	0x3fd00000
 8001ebc:	200001ec 	.word	0x200001ec
 8001ec0:	20000070 	.word	0x20000070
 8001ec4:	20000230 	.word	0x20000230
 8001ec8:	200003f6 	.word	0x200003f6
 8001ecc:	20000064 	.word	0x20000064
		  		}

		  		  }
		  		else target_speed[2] = 0.0;
 8001ed0:	4b4b      	ldr	r3, [pc, #300]	; (8002000 <Move_robot_coordinates_X_Y_W+0xa38>)
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]


		  	matrixMultiplyM2M(&target_speed[0],1,3,&robot_matrix[0][0],3,4,&speed_wheels[0]);
 8001ed8:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <Move_robot_coordinates_X_Y_W+0xa3c>)
 8001eda:	9302      	str	r3, [sp, #8]
 8001edc:	2304      	movs	r3, #4
 8001ede:	9301      	str	r3, [sp, #4]
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	4b48      	ldr	r3, [pc, #288]	; (8002008 <Move_robot_coordinates_X_Y_W+0xa40>)
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	2101      	movs	r1, #1
 8001eea:	4845      	ldr	r0, [pc, #276]	; (8002000 <Move_robot_coordinates_X_Y_W+0xa38>)
 8001eec:	f000 fe92 	bl	8002c14 <matrixMultiplyM2M>
		  	now_speead[0] = result_speed_1;
 8001ef0:	4b46      	ldr	r3, [pc, #280]	; (800200c <Move_robot_coordinates_X_Y_W+0xa44>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a46      	ldr	r2, [pc, #280]	; (8002010 <Move_robot_coordinates_X_Y_W+0xa48>)
 8001ef6:	6013      	str	r3, [r2, #0]
		  	now_speead[1] = result_speed_2;
 8001ef8:	4b46      	ldr	r3, [pc, #280]	; (8002014 <Move_robot_coordinates_X_Y_W+0xa4c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a44      	ldr	r2, [pc, #272]	; (8002010 <Move_robot_coordinates_X_Y_W+0xa48>)
 8001efe:	6053      	str	r3, [r2, #4]
		  	now_speead[2] = result_speed_3;
 8001f00:	4b45      	ldr	r3, [pc, #276]	; (8002018 <Move_robot_coordinates_X_Y_W+0xa50>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a42      	ldr	r2, [pc, #264]	; (8002010 <Move_robot_coordinates_X_Y_W+0xa48>)
 8001f06:	6093      	str	r3, [r2, #8]
		  	read_speed[0] = result_speed_0;
 8001f08:	4b44      	ldr	r3, [pc, #272]	; (800201c <Move_robot_coordinates_X_Y_W+0xa54>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a44      	ldr	r2, [pc, #272]	; (8002020 <Move_robot_coordinates_X_Y_W+0xa58>)
 8001f0e:	6013      	str	r3, [r2, #0]
		  	read_speed[1] = result_speed_1;
 8001f10:	4b3e      	ldr	r3, [pc, #248]	; (800200c <Move_robot_coordinates_X_Y_W+0xa44>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a42      	ldr	r2, [pc, #264]	; (8002020 <Move_robot_coordinates_X_Y_W+0xa58>)
 8001f16:	6053      	str	r3, [r2, #4]
		  	read_speed[2] = result_speed_2;
 8001f18:	4b3e      	ldr	r3, [pc, #248]	; (8002014 <Move_robot_coordinates_X_Y_W+0xa4c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a40      	ldr	r2, [pc, #256]	; (8002020 <Move_robot_coordinates_X_Y_W+0xa58>)
 8001f1e:	6093      	str	r3, [r2, #8]
		  	read_speed[3] = result_speed_3;
 8001f20:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <Move_robot_coordinates_X_Y_W+0xa50>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a3e      	ldr	r2, [pc, #248]	; (8002020 <Move_robot_coordinates_X_Y_W+0xa58>)
 8001f26:	60d3      	str	r3, [r2, #12]
		  	matrixMultiplyM2M(&read_speed[0],1,4,&axes_robot_matrix_inverse[0][0],4,3,&robot_speed[0]);
 8001f28:	4b3e      	ldr	r3, [pc, #248]	; (8002024 <Move_robot_coordinates_X_Y_W+0xa5c>)
 8001f2a:	9302      	str	r3, [sp, #8]
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	2304      	movs	r3, #4
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <Move_robot_coordinates_X_Y_W+0xa60>)
 8001f36:	2204      	movs	r2, #4
 8001f38:	2101      	movs	r1, #1
 8001f3a:	4839      	ldr	r0, [pc, #228]	; (8002020 <Move_robot_coordinates_X_Y_W+0xa58>)
 8001f3c:	f000 fe6a 	bl	8002c14 <matrixMultiplyM2M>

		  	Wheel_1.target = speed_wheels[0];
 8001f40:	4b30      	ldr	r3, [pc, #192]	; (8002004 <Move_robot_coordinates_X_Y_W+0xa3c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a39      	ldr	r2, [pc, #228]	; (800202c <Move_robot_coordinates_X_Y_W+0xa64>)
 8001f46:	6113      	str	r3, [r2, #16]
		  	Wheel_2.target = speed_wheels[1];
 8001f48:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <Move_robot_coordinates_X_Y_W+0xa3c>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4a38      	ldr	r2, [pc, #224]	; (8002030 <Move_robot_coordinates_X_Y_W+0xa68>)
 8001f4e:	6113      	str	r3, [r2, #16]
		  	Wheel_3.target = speed_wheels[2];
 8001f50:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <Move_robot_coordinates_X_Y_W+0xa3c>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a37      	ldr	r2, [pc, #220]	; (8002034 <Move_robot_coordinates_X_Y_W+0xa6c>)
 8001f56:	6113      	str	r3, [r2, #16]
		  	Wheel_4.target = speed_wheels[3];
 8001f58:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <Move_robot_coordinates_X_Y_W+0xa3c>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	4a36      	ldr	r2, [pc, #216]	; (8002038 <Move_robot_coordinates_X_Y_W+0xa70>)
 8001f5e:	6113      	str	r3, [r2, #16]
	  		  speed_U = robot_speed[0];
 8001f60:	4b30      	ldr	r3, [pc, #192]	; (8002024 <Move_robot_coordinates_X_Y_W+0xa5c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a35      	ldr	r2, [pc, #212]	; (800203c <Move_robot_coordinates_X_Y_W+0xa74>)
 8001f66:	6013      	str	r3, [r2, #0]
		  		  speed_V = robot_speed[1];
 8001f68:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <Move_robot_coordinates_X_Y_W+0xa5c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a34      	ldr	r2, [pc, #208]	; (8002040 <Move_robot_coordinates_X_Y_W+0xa78>)
 8001f6e:	6013      	str	r3, [r2, #0]
		  		  speed_W = robot_speed[2];
 8001f70:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <Move_robot_coordinates_X_Y_W+0xa5c>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	4a33      	ldr	r2, [pc, #204]	; (8002044 <Move_robot_coordinates_X_Y_W+0xa7c>)
 8001f76:	6013      	str	r3, [r2, #0]
	while(((gipotinus>=0.005)||delta_fi>=0.02)){
 8001f78:	4b33      	ldr	r3, [pc, #204]	; (8002048 <Move_robot_coordinates_X_Y_W+0xa80>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fa87 	bl	8000490 <__aeabi_f2d>
 8001f82:	a31b      	add	r3, pc, #108	; (adr r3, 8001ff0 <Move_robot_coordinates_X_Y_W+0xa28>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fd60 	bl	8000a4c <__aeabi_dcmpge>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f47f ace2 	bne.w	8001958 <Move_robot_coordinates_X_Y_W+0x390>
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <Move_robot_coordinates_X_Y_W+0xa84>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fa79 	bl	8000490 <__aeabi_f2d>
 8001f9e:	a316      	add	r3, pc, #88	; (adr r3, 8001ff8 <Move_robot_coordinates_X_Y_W+0xa30>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe fd52 	bl	8000a4c <__aeabi_dcmpge>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f47f acd4 	bne.w	8001958 <Move_robot_coordinates_X_Y_W+0x390>

	}


	speed_U = 0;
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <Move_robot_coordinates_X_Y_W+0xa74>)
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
	speed_V = 0;
 8001fb8:	4b21      	ldr	r3, [pc, #132]	; (8002040 <Move_robot_coordinates_X_Y_W+0xa78>)
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
	speed_W = 0;
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <Move_robot_coordinates_X_Y_W+0xa7c>)
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
  	Wheel_1.target = 0;
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <Move_robot_coordinates_X_Y_W+0xa64>)
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  	Wheel_2.target = 0;
 8001fd0:	4b17      	ldr	r3, [pc, #92]	; (8002030 <Move_robot_coordinates_X_Y_W+0xa68>)
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  	Wheel_3.target = 0;
 8001fd8:	4b16      	ldr	r3, [pc, #88]	; (8002034 <Move_robot_coordinates_X_Y_W+0xa6c>)
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  	Wheel_4.target = 0;
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <Move_robot_coordinates_X_Y_W+0xa70>)
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]

}
 8001fe8:	bf00      	nop
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff0:	47ae147b 	.word	0x47ae147b
 8001ff4:	3f747ae1 	.word	0x3f747ae1
 8001ff8:	47ae147b 	.word	0x47ae147b
 8001ffc:	3f947ae1 	.word	0x3f947ae1
 8002000:	200001ec 	.word	0x200001ec
 8002004:	200001f8 	.word	0x200001f8
 8002008:	20000000 	.word	0x20000000
 800200c:	200003fc 	.word	0x200003fc
 8002010:	20000208 	.word	0x20000208
 8002014:	20000400 	.word	0x20000400
 8002018:	20000404 	.word	0x20000404
 800201c:	200003f8 	.word	0x200003f8
 8002020:	20000214 	.word	0x20000214
 8002024:	20000224 	.word	0x20000224
 8002028:	20000030 	.word	0x20000030
 800202c:	200000ec 	.word	0x200000ec
 8002030:	2000012c 	.word	0x2000012c
 8002034:	2000016c 	.word	0x2000016c
 8002038:	200001ac 	.word	0x200001ac
 800203c:	20000234 	.word	0x20000234
 8002040:	20000238 	.word	0x20000238
 8002044:	2000023c 	.word	0x2000023c
 8002048:	200002a0 	.word	0x200002a0
 800204c:	20000230 	.word	0x20000230

08002050 <convertData>:
uint8_t ind_data = 0;
bool write_data = 0;
uint8_t check_sum;
uint32_t timer = 0;
float move_axes[4];
void convertData(char *data) {
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	bool now; // 1 - axes, 0 - buttons
	uint8_t pad;
	if (!(data[1] == 'a' || data[1] == 'b' || data[size_data - 1] == '\r')) {
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3301      	adds	r3, #1
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b61      	cmp	r3, #97	; 0x61
 8002060:	d00d      	beq.n	800207e <convertData+0x2e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3301      	adds	r3, #1
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b62      	cmp	r3, #98	; 0x62
 800206a:	d008      	beq.n	800207e <convertData+0x2e>
 800206c:	4b54      	ldr	r3, [pc, #336]	; (80021c0 <convertData+0x170>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	3b01      	subs	r3, #1
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b0d      	cmp	r3, #13
 800207a:	f040 8099 	bne.w	80021b0 <convertData+0x160>
		return;
	}
	for (int i = 1; data[i] != '\r'; i++) {
 800207e:	2301      	movs	r3, #1
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	e08d      	b.n	80021a0 <convertData+0x150>
		if (data[i] == '\r')
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b0d      	cmp	r3, #13
 800208e:	f000 8091 	beq.w	80021b4 <convertData+0x164>
			break;
		if (data[i] == 'a' || data[i] == 'b') {
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b61      	cmp	r3, #97	; 0x61
 800209c:	d005      	beq.n	80020aa <convertData+0x5a>
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b62      	cmp	r3, #98	; 0x62
 80020a8:	d110      	bne.n	80020cc <convertData+0x7c>
			now = data[i] == 'a' ? 1 : 0;
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b61      	cmp	r3, #97	; 0x61
 80020b4:	bf0c      	ite	eq
 80020b6:	2301      	moveq	r3, #1
 80020b8:	2300      	movne	r3, #0
 80020ba:	75fb      	strb	r3, [r7, #23]
			pad = data[i - 1] - 48;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	3b01      	subs	r3, #1
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	3b30      	subs	r3, #48	; 0x30
 80020c8:	75bb      	strb	r3, [r7, #22]
			continue;
 80020ca:	e066      	b.n	800219a <convertData+0x14a>
		}
		for (int j = 0; data[i - 1] != '/';) {
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	e05c      	b.n	800218c <convertData+0x13c>
			if (data[i] == '/' || data[i - 1] == '/')
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	4413      	add	r3, r2
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b2f      	cmp	r3, #47	; 0x2f
 80020dc:	d05d      	beq.n	800219a <convertData+0x14a>
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b2f      	cmp	r3, #47	; 0x2f
 80020ea:	d056      	beq.n	800219a <convertData+0x14a>
				break;
			if (now) {
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d02a      	beq.n	8002148 <convertData+0xf8>
				pads[pad].axes[j] = (data[i] - 48) * 100 + (data[i + 1] - 48) * 10 + (data[i + 2] - 48);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	4413      	add	r3, r2
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	3b30      	subs	r3, #48	; 0x30
 80020fc:	2264      	movs	r2, #100	; 0x64
 80020fe:	fb02 f103 	mul.w	r1, r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	3301      	adds	r3, #1
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4419      	add	r1, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	3302      	adds	r3, #2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	3b30      	subs	r3, #48	; 0x30
 8002126:	7dba      	ldrb	r2, [r7, #22]
 8002128:	4419      	add	r1, r3
 800212a:	4826      	ldr	r0, [pc, #152]	; (80021c4 <convertData+0x174>)
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4413      	add	r3, r2
 8002136:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				j++;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3301      	adds	r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
				i += 3;
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	3303      	adds	r3, #3
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	e021      	b.n	800218c <convertData+0x13c>
			} else if (!now) {
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	f083 0301 	eor.w	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01b      	beq.n	800218c <convertData+0x13c>
				pads[pad].buttons[j] = data[i] - 48;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	3b30      	subs	r3, #48	; 0x30
 800215e:	7dba      	ldrb	r2, [r7, #22]
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf14      	ite	ne
 8002164:	2301      	movne	r3, #1
 8002166:	2300      	moveq	r3, #0
 8002168:	b2d8      	uxtb	r0, r3
 800216a:	4916      	ldr	r1, [pc, #88]	; (80021c4 <convertData+0x174>)
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	18ca      	adds	r2, r1, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4413      	add	r3, r2
 800217a:	3310      	adds	r3, #16
 800217c:	4602      	mov	r2, r0
 800217e:	701a      	strb	r2, [r3, #0]
				j++;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3301      	adds	r3, #1
 8002184:	60fb      	str	r3, [r7, #12]
				i++;
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	3301      	adds	r3, #1
 800218a:	613b      	str	r3, [r7, #16]
		for (int j = 0; data[i - 1] != '/';) {
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	3b01      	subs	r3, #1
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b2f      	cmp	r3, #47	; 0x2f
 8002198:	d19b      	bne.n	80020d2 <convertData+0x82>
	for (int i = 1; data[i] != '\r'; i++) {
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	3301      	adds	r3, #1
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b0d      	cmp	r3, #13
 80021aa:	f47f af6b 	bne.w	8002084 <convertData+0x34>
 80021ae:	e002      	b.n	80021b6 <convertData+0x166>
		return;
 80021b0:	bf00      	nop
 80021b2:	e000      	b.n	80021b6 <convertData+0x166>
			break;
 80021b4:	bf00      	nop
			}
		}
	}
}
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	200003cc 	.word	0x200003cc
 80021c4:	200002b8 	.word	0x200002b8

080021c8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

	if (rx_data[0] == '%') {
 80021d0:	4b5d      	ldr	r3, [pc, #372]	; (8002348 <HAL_UART_RxCpltCallback+0x180>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b25      	cmp	r3, #37	; 0x25
 80021d6:	d10b      	bne.n	80021f0 <HAL_UART_RxCpltCallback+0x28>
		check_sum = 0;
 80021d8:	4b5c      	ldr	r3, [pc, #368]	; (800234c <HAL_UART_RxCpltCallback+0x184>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
		write_data = 1;
 80021de:	4b5c      	ldr	r3, [pc, #368]	; (8002350 <HAL_UART_RxCpltCallback+0x188>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
		ind_data = 0;
 80021e4:	4b5b      	ldr	r3, [pc, #364]	; (8002354 <HAL_UART_RxCpltCallback+0x18c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
		size_data = 0;
 80021ea:	4b5b      	ldr	r3, [pc, #364]	; (8002358 <HAL_UART_RxCpltCallback+0x190>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
	}

	if (write_data) {
 80021f0:	4b57      	ldr	r3, [pc, #348]	; (8002350 <HAL_UART_RxCpltCallback+0x188>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d040      	beq.n	800227a <HAL_UART_RxCpltCallback+0xb2>


		temp_data[ind_data] = rx_data[0];
 80021f8:	4b56      	ldr	r3, [pc, #344]	; (8002354 <HAL_UART_RxCpltCallback+0x18c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b52      	ldr	r3, [pc, #328]	; (8002348 <HAL_UART_RxCpltCallback+0x180>)
 8002200:	7819      	ldrb	r1, [r3, #0]
 8002202:	4b56      	ldr	r3, [pc, #344]	; (800235c <HAL_UART_RxCpltCallback+0x194>)
 8002204:	5499      	strb	r1, [r3, r2]

		if (ind_data == 3){
 8002206:	4b53      	ldr	r3, [pc, #332]	; (8002354 <HAL_UART_RxCpltCallback+0x18c>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d11c      	bne.n	8002248 <HAL_UART_RxCpltCallback+0x80>
			size_data = (temp_data[1] - 48) * 100 + (temp_data[2] - 48) * 10 + (temp_data[3] - 48);
 800220e:	4b53      	ldr	r3, [pc, #332]	; (800235c <HAL_UART_RxCpltCallback+0x194>)
 8002210:	785b      	ldrb	r3, [r3, #1]
 8002212:	461a      	mov	r2, r3
 8002214:	0092      	lsls	r2, r2, #2
 8002216:	4413      	add	r3, r2
 8002218:	461a      	mov	r2, r3
 800221a:	0091      	lsls	r1, r2, #2
 800221c:	461a      	mov	r2, r3
 800221e:	460b      	mov	r3, r1
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4b4d      	ldr	r3, [pc, #308]	; (800235c <HAL_UART_RxCpltCallback+0x194>)
 8002228:	789b      	ldrb	r3, [r3, #2]
 800222a:	4619      	mov	r1, r3
 800222c:	0089      	lsls	r1, r1, #2
 800222e:	440b      	add	r3, r1
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	b2db      	uxtb	r3, r3
 8002234:	4413      	add	r3, r2
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b48      	ldr	r3, [pc, #288]	; (800235c <HAL_UART_RxCpltCallback+0x194>)
 800223a:	78db      	ldrb	r3, [r3, #3]
 800223c:	4413      	add	r3, r2
 800223e:	b2db      	uxtb	r3, r3
 8002240:	3330      	adds	r3, #48	; 0x30
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b44      	ldr	r3, [pc, #272]	; (8002358 <HAL_UART_RxCpltCallback+0x190>)
 8002246:	701a      	strb	r2, [r3, #0]
		}
		if (ind_data <= size_data - 4 || ind_data <= 3) {
 8002248:	4b43      	ldr	r3, [pc, #268]	; (8002358 <HAL_UART_RxCpltCallback+0x190>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	3b03      	subs	r3, #3
 800224e:	4a41      	ldr	r2, [pc, #260]	; (8002354 <HAL_UART_RxCpltCallback+0x18c>)
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	4293      	cmp	r3, r2
 8002254:	dc03      	bgt.n	800225e <HAL_UART_RxCpltCallback+0x96>
 8002256:	4b3f      	ldr	r3, [pc, #252]	; (8002354 <HAL_UART_RxCpltCallback+0x18c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d807      	bhi.n	800226e <HAL_UART_RxCpltCallback+0xa6>
			check_sum += rx_data[0];
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <HAL_UART_RxCpltCallback+0x180>)
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	4b3a      	ldr	r3, [pc, #232]	; (800234c <HAL_UART_RxCpltCallback+0x184>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	4413      	add	r3, r2
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b38      	ldr	r3, [pc, #224]	; (800234c <HAL_UART_RxCpltCallback+0x184>)
 800226c:	701a      	strb	r2, [r3, #0]
		}


		ind_data++;
 800226e:	4b39      	ldr	r3, [pc, #228]	; (8002354 <HAL_UART_RxCpltCallback+0x18c>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	3301      	adds	r3, #1
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4b37      	ldr	r3, [pc, #220]	; (8002354 <HAL_UART_RxCpltCallback+0x18c>)
 8002278:	701a      	strb	r2, [r3, #0]
	}
	if (ind_data >= 99) {
 800227a:	4b36      	ldr	r3, [pc, #216]	; (8002354 <HAL_UART_RxCpltCallback+0x18c>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b62      	cmp	r3, #98	; 0x62
 8002280:	d90b      	bls.n	800229a <HAL_UART_RxCpltCallback+0xd2>
		check_sum = 0;
 8002282:	4b32      	ldr	r3, [pc, #200]	; (800234c <HAL_UART_RxCpltCallback+0x184>)
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
		write_data = 0;
 8002288:	4b31      	ldr	r3, [pc, #196]	; (8002350 <HAL_UART_RxCpltCallback+0x188>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
		ind_data = 0;
 800228e:	4b31      	ldr	r3, [pc, #196]	; (8002354 <HAL_UART_RxCpltCallback+0x18c>)
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
		size_data = 0;
 8002294:	4b30      	ldr	r3, [pc, #192]	; (8002358 <HAL_UART_RxCpltCallback+0x190>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
	}
	if (ind_data == size_data) {
 800229a:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <HAL_UART_RxCpltCallback+0x18c>)
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <HAL_UART_RxCpltCallback+0x190>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d101      	bne.n	80022aa <HAL_UART_RxCpltCallback+0xe2>
		HAL_GetTick();
 80022a6:	f002 fcad 	bl	8004c04 <HAL_GetTick>
	}
	if (rx_data[0] == '\r') {
 80022aa:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_UART_RxCpltCallback+0x180>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b0d      	cmp	r3, #13
 80022b0:	d145      	bne.n	800233e <HAL_UART_RxCpltCallback+0x176>

		//size_data = (temp_data[1] - 48) * 100 + (temp_data[2] - 48) * 10 + (temp_data[3] - 48);
		uint8_t check_sum_data = (temp_data[size_data - 3] - 48) * 100 + (temp_data[size_data - 2] - 48) * 10 + (temp_data[size_data - 1] - 48);
 80022b2:	4b29      	ldr	r3, [pc, #164]	; (8002358 <HAL_UART_RxCpltCallback+0x190>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	3b03      	subs	r3, #3
 80022b8:	4a28      	ldr	r2, [pc, #160]	; (800235c <HAL_UART_RxCpltCallback+0x194>)
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	461a      	mov	r2, r3
 80022be:	0092      	lsls	r2, r2, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	461a      	mov	r2, r3
 80022c4:	0091      	lsls	r1, r2, #2
 80022c6:	461a      	mov	r2, r3
 80022c8:	460b      	mov	r3, r1
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	4b21      	ldr	r3, [pc, #132]	; (8002358 <HAL_UART_RxCpltCallback+0x190>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	3b02      	subs	r3, #2
 80022d6:	4921      	ldr	r1, [pc, #132]	; (800235c <HAL_UART_RxCpltCallback+0x194>)
 80022d8:	5ccb      	ldrb	r3, [r1, r3]
 80022da:	4619      	mov	r1, r3
 80022dc:	0089      	lsls	r1, r1, #2
 80022de:	440b      	add	r3, r1
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_UART_RxCpltCallback+0x190>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	491b      	ldr	r1, [pc, #108]	; (800235c <HAL_UART_RxCpltCallback+0x194>)
 80022f0:	5ccb      	ldrb	r3, [r1, r3]
 80022f2:	4413      	add	r3, r2
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	3330      	adds	r3, #48	; 0x30
 80022f8:	73fb      	strb	r3, [r7, #15]
		write_data = 0;
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_UART_RxCpltCallback+0x188>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
		if (check_sum == check_sum_data && ind_data == size_data + 1) {
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_UART_RxCpltCallback+0x184>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	429a      	cmp	r2, r3
 8002308:	d119      	bne.n	800233e <HAL_UART_RxCpltCallback+0x176>
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_UART_RxCpltCallback+0x18c>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_UART_RxCpltCallback+0x190>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	3301      	adds	r3, #1
 8002316:	429a      	cmp	r2, r3
 8002318:	d111      	bne.n	800233e <HAL_UART_RxCpltCallback+0x176>
			timer = HAL_GetTick();
 800231a:	f002 fc73 	bl	8004c04 <HAL_GetTick>
 800231e:	4603      	mov	r3, r0
 8002320:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <HAL_UART_RxCpltCallback+0x198>)
 8002322:	6013      	str	r3, [r2, #0]
			memcpy(data, &temp_data[5], size_data);
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_UART_RxCpltCallback+0x190>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	490e      	ldr	r1, [pc, #56]	; (8002364 <HAL_UART_RxCpltCallback+0x19c>)
 800232c:	480e      	ldr	r0, [pc, #56]	; (8002368 <HAL_UART_RxCpltCallback+0x1a0>)
 800232e:	f007 fa0d 	bl	800974c <memcpy>
			data[size_data - 8] = '\r';
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_UART_RxCpltCallback+0x190>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	3b08      	subs	r3, #8
 8002338:	4a0b      	ldr	r2, [pc, #44]	; (8002368 <HAL_UART_RxCpltCallback+0x1a0>)
 800233a:	210d      	movs	r1, #13
 800233c:	54d1      	strb	r1, [r2, r3]
		}
	}
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000300 	.word	0x20000300
 800234c:	200003cf 	.word	0x200003cf
 8002350:	200003ce 	.word	0x200003ce
 8002354:	200003cd 	.word	0x200003cd
 8002358:	200003cc 	.word	0x200003cc
 800235c:	20000304 	.word	0x20000304
 8002360:	200003d0 	.word	0x200003d0
 8002364:	20000309 	.word	0x20000309
 8002368:	20000368 	.word	0x20000368
 800236c:	00000000 	.word	0x00000000

08002370 <convert_chushpan>:
bool autonom_flag = false;
void convert_chushpan(void) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - timer >= UART_TIMEOUT) {
 8002376:	f002 fc45 	bl	8004c04 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	4b60      	ldr	r3, [pc, #384]	; (8002500 <convert_chushpan+0x190>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002386:	d304      	bcc.n	8002392 <convert_chushpan+0x22>
		memcpy(data, DEF_PAD_DATA, 74);
 8002388:	224a      	movs	r2, #74	; 0x4a
 800238a:	495e      	ldr	r1, [pc, #376]	; (8002504 <convert_chushpan+0x194>)
 800238c:	485e      	ldr	r0, [pc, #376]	; (8002508 <convert_chushpan+0x198>)
 800238e:	f007 f9dd 	bl	800974c <memcpy>
	}

	HAL_UART_Receive_DMA(&huart1, rx_data, 1);
 8002392:	2201      	movs	r2, #1
 8002394:	495d      	ldr	r1, [pc, #372]	; (800250c <convert_chushpan+0x19c>)
 8002396:	485e      	ldr	r0, [pc, #376]	; (8002510 <convert_chushpan+0x1a0>)
 8002398:	f005 f839 	bl	800740e <HAL_UART_Receive_DMA>

	convertData((char*) data);
 800239c:	485a      	ldr	r0, [pc, #360]	; (8002508 <convert_chushpan+0x198>)
 800239e:	f7ff fe57 	bl	8002050 <convertData>

	for (int i = 0; i < 4; i++) {
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	e06c      	b.n	8002482 <convert_chushpan+0x112>
		move_axes[i] = i % 2 == 0 ? (double)((pads[0].axes[i]) - 256.0f) / 256.0f : (double)((pads[0].axes[i]) - 256.0f) / -256.0f;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d110      	bne.n	80023d4 <convert_chushpan+0x64>
 80023b2:	4a58      	ldr	r2, [pc, #352]	; (8002514 <convert_chushpan+0x1a4>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023c2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002518 <convert_chushpan+0x1a8>
 80023c6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80023ca:	eddf 6a53 	vldr	s13, [pc, #332]	; 8002518 <convert_chushpan+0x1a8>
 80023ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023d2:	e00f      	b.n	80023f4 <convert_chushpan+0x84>
 80023d4:	4a4f      	ldr	r2, [pc, #316]	; (8002514 <convert_chushpan+0x1a4>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002518 <convert_chushpan+0x1a8>
 80023e8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80023ec:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800251c <convert_chushpan+0x1ac>
 80023f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023f4:	4a4a      	ldr	r2, [pc, #296]	; (8002520 <convert_chushpan+0x1b0>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	edc3 7a00 	vstr	s15, [r3]
		move_axes[i] /= pads[0].buttons[7] ? 2:1;
 8002400:	4a47      	ldr	r2, [pc, #284]	; (8002520 <convert_chushpan+0x1b0>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	edd3 6a00 	vldr	s13, [r3]
 800240c:	4b41      	ldr	r3, [pc, #260]	; (8002514 <convert_chushpan+0x1a4>)
 800240e:	7ddb      	ldrb	r3, [r3, #23]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <convert_chushpan+0xaa>
 8002414:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002418:	e001      	b.n	800241e <convert_chushpan+0xae>
 800241a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800241e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002422:	4a3f      	ldr	r2, [pc, #252]	; (8002520 <convert_chushpan+0x1b0>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	edc3 7a00 	vstr	s15, [r3]
		if (move_axes[i] >= -0.2 && move_axes[i] <= 0.2) move_axes[i] = 0.0f;
 800242e:	4a3c      	ldr	r2, [pc, #240]	; (8002520 <convert_chushpan+0x1b0>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe f829 	bl	8000490 <__aeabi_f2d>
 800243e:	a32c      	add	r3, pc, #176	; (adr r3, 80024f0 <convert_chushpan+0x180>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f7fe fb02 	bl	8000a4c <__aeabi_dcmpge>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d016      	beq.n	800247c <convert_chushpan+0x10c>
 800244e:	4a34      	ldr	r2, [pc, #208]	; (8002520 <convert_chushpan+0x1b0>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe f819 	bl	8000490 <__aeabi_f2d>
 800245e:	a326      	add	r3, pc, #152	; (adr r3, 80024f8 <convert_chushpan+0x188>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	f7fe fae8 	bl	8000a38 <__aeabi_dcmple>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d006      	beq.n	800247c <convert_chushpan+0x10c>
 800246e:	4a2c      	ldr	r2, [pc, #176]	; (8002520 <convert_chushpan+0x1b0>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3301      	adds	r3, #1
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b03      	cmp	r3, #3
 8002486:	dd8f      	ble.n	80023a8 <convert_chushpan+0x38>

	}
	move_axes[2] *= -1;
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <convert_chushpan+0x1b0>)
 800248a:	edd3 7a02 	vldr	s15, [r3, #8]
 800248e:	eef1 7a67 	vneg.f32	s15, s15
 8002492:	4b23      	ldr	r3, [pc, #140]	; (8002520 <convert_chushpan+0x1b0>)
 8002494:	edc3 7a02 	vstr	s15, [r3, #8]

	if (pads[0].buttons[8] && pads[0].buttons[9] &&
 8002498:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <convert_chushpan+0x1a4>)
 800249a:	7e1b      	ldrb	r3, [r3, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01d      	beq.n	80024dc <convert_chushpan+0x16c>
 80024a0:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <convert_chushpan+0x1a4>)
 80024a2:	7e5b      	ldrb	r3, [r3, #25]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d019      	beq.n	80024dc <convert_chushpan+0x16c>
		pads[1].buttons[8] && pads[1].buttons[9])
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <convert_chushpan+0x1a4>)
 80024aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
	if (pads[0].buttons[8] && pads[0].buttons[9] &&
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d014      	beq.n	80024dc <convert_chushpan+0x16c>
		pads[1].buttons[8] && pads[1].buttons[9])
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <convert_chushpan+0x1a4>)
 80024b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00f      	beq.n	80024dc <convert_chushpan+0x16c>
	{
		if(!autonom_flag){
 80024bc:	4b19      	ldr	r3, [pc, #100]	; (8002524 <convert_chushpan+0x1b4>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	f083 0301 	eor.w	r3, r3, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d004      	beq.n	80024d4 <convert_chushpan+0x164>
			autonom_timer = HAL_GetTick();
 80024ca:	f002 fb9b 	bl	8004c04 <HAL_GetTick>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4a15      	ldr	r2, [pc, #84]	; (8002528 <convert_chushpan+0x1b8>)
 80024d2:	6013      	str	r3, [r2, #0]
		}

		autonom_flag = true;
 80024d4:	4b13      	ldr	r3, [pc, #76]	; (8002524 <convert_chushpan+0x1b4>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	e003      	b.n	80024e4 <convert_chushpan+0x174>

	}
	else
	{
		autonom_flag = false;
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <convert_chushpan+0x1b4>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
	}
}
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	f3af 8000 	nop.w
 80024f0:	9999999a 	.word	0x9999999a
 80024f4:	bfc99999 	.word	0xbfc99999
 80024f8:	9999999a 	.word	0x9999999a
 80024fc:	3fc99999 	.word	0x3fc99999
 8002500:	200003d0 	.word	0x200003d0
 8002504:	08009780 	.word	0x08009780
 8002508:	20000368 	.word	0x20000368
 800250c:	20000300 	.word	0x20000300
 8002510:	20000790 	.word	0x20000790
 8002514:	200002b8 	.word	0x200002b8
 8002518:	43800000 	.word	0x43800000
 800251c:	c3800000 	.word	0xc3800000
 8002520:	200003d4 	.word	0x200003d4
 8002524:	200003e4 	.word	0x200003e4
 8002528:	200002b0 	.word	0x200002b0

0800252c <convert_typedef>:
void convert_typedef(void){
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0

	Wheel_1.motor = 0;
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <convert_typedef+0xe0>)
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_1.target = 0.0;
 8002538:	4b34      	ldr	r3, [pc, #208]	; (800260c <convert_typedef+0xe0>)
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
	Wheel_1.current = 0;
 8002540:	4b32      	ldr	r3, [pc, #200]	; (800260c <convert_typedef+0xe0>)
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	615a      	str	r2, [r3, #20]
	Wheel_1.Kp = 14;
 8002548:	4b30      	ldr	r3, [pc, #192]	; (800260c <convert_typedef+0xe0>)
 800254a:	4a31      	ldr	r2, [pc, #196]	; (8002610 <convert_typedef+0xe4>)
 800254c:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_1.Ki = 1;
 800254e:	4b2f      	ldr	r3, [pc, #188]	; (800260c <convert_typedef+0xe0>)
 8002550:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_1.Kd = 0.1;
 8002556:	4b2d      	ldr	r3, [pc, #180]	; (800260c <convert_typedef+0xe0>)
 8002558:	4a2e      	ldr	r2, [pc, #184]	; (8002614 <convert_typedef+0xe8>)
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_1.wh_L = 0.0;
 800255c:	4b2b      	ldr	r3, [pc, #172]	; (800260c <convert_typedef+0xe0>)
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	639a      	str	r2, [r3, #56]	; 0x38

	Wheel_2.motor = 1;
 8002564:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <convert_typedef+0xec>)
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_2.target = 0.0;
 800256c:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <convert_typedef+0xec>)
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
	Wheel_2.current = 0;
 8002574:	4b28      	ldr	r3, [pc, #160]	; (8002618 <convert_typedef+0xec>)
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	615a      	str	r2, [r3, #20]
	Wheel_2.Kp = 14;
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <convert_typedef+0xec>)
 800257e:	4a24      	ldr	r2, [pc, #144]	; (8002610 <convert_typedef+0xe4>)
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_2.Ki = 1;
 8002582:	4b25      	ldr	r3, [pc, #148]	; (8002618 <convert_typedef+0xec>)
 8002584:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002588:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_2.Kd = 0.1;
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <convert_typedef+0xec>)
 800258c:	4a21      	ldr	r2, [pc, #132]	; (8002614 <convert_typedef+0xe8>)
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_2.wh_L = 0.0;
 8002590:	4b21      	ldr	r3, [pc, #132]	; (8002618 <convert_typedef+0xec>)
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	639a      	str	r2, [r3, #56]	; 0x38

	Wheel_3.motor = 2;
 8002598:	4b20      	ldr	r3, [pc, #128]	; (800261c <convert_typedef+0xf0>)
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_3.target = 0.0;
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <convert_typedef+0xf0>)
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
	Wheel_3.current = 0;
 80025a8:	4b1c      	ldr	r3, [pc, #112]	; (800261c <convert_typedef+0xf0>)
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	615a      	str	r2, [r3, #20]
	Wheel_3.Kp = 14;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	; (800261c <convert_typedef+0xf0>)
 80025b2:	4a17      	ldr	r2, [pc, #92]	; (8002610 <convert_typedef+0xe4>)
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_3.Ki = 1;
 80025b6:	4b19      	ldr	r3, [pc, #100]	; (800261c <convert_typedef+0xf0>)
 80025b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025bc:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_3.Kd = 0.1;
 80025be:	4b17      	ldr	r3, [pc, #92]	; (800261c <convert_typedef+0xf0>)
 80025c0:	4a14      	ldr	r2, [pc, #80]	; (8002614 <convert_typedef+0xe8>)
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_3.wh_L = 0.0;
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <convert_typedef+0xf0>)
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38

	Wheel_4.motor = 3;
 80025cc:	4b14      	ldr	r3, [pc, #80]	; (8002620 <convert_typedef+0xf4>)
 80025ce:	2203      	movs	r2, #3
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_4.target = 0.0;
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <convert_typedef+0xf4>)
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
	Wheel_4.current = 0;
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <convert_typedef+0xf4>)
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	615a      	str	r2, [r3, #20]
	Wheel_4.Kp = 14;
 80025e4:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <convert_typedef+0xf4>)
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <convert_typedef+0xe4>)
 80025e8:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_4.Ki = 1;
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <convert_typedef+0xf4>)
 80025ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_4.Kd = 0.1;
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <convert_typedef+0xf4>)
 80025f4:	4a07      	ldr	r2, [pc, #28]	; (8002614 <convert_typedef+0xe8>)
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_4.wh_L = 0.0;
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <convert_typedef+0xf4>)
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	200000ec 	.word	0x200000ec
 8002610:	41600000 	.word	0x41600000
 8002614:	3dcccccd 	.word	0x3dcccccd
 8002618:	2000012c 	.word	0x2000012c
 800261c:	2000016c 	.word	0x2000016c
 8002620:	200001ac 	.word	0x200001ac

08002624 <control_mod>:
void control_mod (void){
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af04      	add	r7, sp, #16
	if(!autonom_flag){
 800262a:	4b5d      	ldr	r3, [pc, #372]	; (80027a0 <control_mod+0x17c>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	f083 0301 	eor.w	r3, r3, #1
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80af 	beq.w	8002798 <control_mod+0x174>
		check_switches();
 800263a:	f7fe fe45 	bl	80012c8 <check_switches>
	convert_chushpan();
 800263e:	f7ff fe97 	bl	8002370 <convert_chushpan>
		  LT_BUTTON, RT_BUTTON, BACK_BUTTON, START_BUTTON, L3_BUTTON,
		  R3_BUTTON, UP_BUTTON, DOWN_BUTTON, LEFT_BUTTON, RIGHT_BUTTON,
		  XBOX_BUTTON
	  };

	target_speed[0] = move_axes[0]/2;
 8002642:	4b58      	ldr	r3, [pc, #352]	; (80027a4 <control_mod+0x180>)
 8002644:	ed93 7a00 	vldr	s14, [r3]
 8002648:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800264c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002650:	4b55      	ldr	r3, [pc, #340]	; (80027a8 <control_mod+0x184>)
 8002652:	edc3 7a00 	vstr	s15, [r3]
	target_speed[1] = move_axes[1]/2;
 8002656:	4b53      	ldr	r3, [pc, #332]	; (80027a4 <control_mod+0x180>)
 8002658:	ed93 7a01 	vldr	s14, [r3, #4]
 800265c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002660:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002664:	4b50      	ldr	r3, [pc, #320]	; (80027a8 <control_mod+0x184>)
 8002666:	edc3 7a01 	vstr	s15, [r3, #4]
	target_speed[2] = move_axes[2]*1.5;
 800266a:	4b4e      	ldr	r3, [pc, #312]	; (80027a4 <control_mod+0x180>)
 800266c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002670:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002678:	4b4b      	ldr	r3, [pc, #300]	; (80027a8 <control_mod+0x184>)
 800267a:	edc3 7a02 	vstr	s15, [r3, #8]

	matrixMultiplyM2M(&target_speed[0],1,3,&robot_matrix[0][0],3,4,&speed_wheels[0]);
 800267e:	4b4b      	ldr	r3, [pc, #300]	; (80027ac <control_mod+0x188>)
 8002680:	9302      	str	r3, [sp, #8]
 8002682:	2304      	movs	r3, #4
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	2303      	movs	r3, #3
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	4b49      	ldr	r3, [pc, #292]	; (80027b0 <control_mod+0x18c>)
 800268c:	2203      	movs	r2, #3
 800268e:	2101      	movs	r1, #1
 8002690:	4845      	ldr	r0, [pc, #276]	; (80027a8 <control_mod+0x184>)
 8002692:	f000 fabf 	bl	8002c14 <matrixMultiplyM2M>

	Wheel_1.target = speed_wheels[0];
 8002696:	4b45      	ldr	r3, [pc, #276]	; (80027ac <control_mod+0x188>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a46      	ldr	r2, [pc, #280]	; (80027b4 <control_mod+0x190>)
 800269c:	6113      	str	r3, [r2, #16]
	Wheel_2.target = speed_wheels[1];
 800269e:	4b43      	ldr	r3, [pc, #268]	; (80027ac <control_mod+0x188>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4a45      	ldr	r2, [pc, #276]	; (80027b8 <control_mod+0x194>)
 80026a4:	6113      	str	r3, [r2, #16]
	Wheel_3.target = speed_wheels[2];
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <control_mod+0x188>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	4a44      	ldr	r2, [pc, #272]	; (80027bc <control_mod+0x198>)
 80026ac:	6113      	str	r3, [r2, #16]
	Wheel_4.target = speed_wheels[3];
 80026ae:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <control_mod+0x188>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	4a43      	ldr	r2, [pc, #268]	; (80027c0 <control_mod+0x19c>)
 80026b4:	6113      	str	r3, [r2, #16]

	now_speead[0] = result_speed_1;
 80026b6:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <control_mod+0x1a0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a43      	ldr	r2, [pc, #268]	; (80027c8 <control_mod+0x1a4>)
 80026bc:	6013      	str	r3, [r2, #0]
	now_speead[1] = result_speed_2;
 80026be:	4b43      	ldr	r3, [pc, #268]	; (80027cc <control_mod+0x1a8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a41      	ldr	r2, [pc, #260]	; (80027c8 <control_mod+0x1a4>)
 80026c4:	6053      	str	r3, [r2, #4]
	now_speead[2] = result_speed_3;
 80026c6:	4b42      	ldr	r3, [pc, #264]	; (80027d0 <control_mod+0x1ac>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a3f      	ldr	r2, [pc, #252]	; (80027c8 <control_mod+0x1a4>)
 80026cc:	6093      	str	r3, [r2, #8]

	read_speed[0] = result_speed_0;
 80026ce:	4b41      	ldr	r3, [pc, #260]	; (80027d4 <control_mod+0x1b0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a41      	ldr	r2, [pc, #260]	; (80027d8 <control_mod+0x1b4>)
 80026d4:	6013      	str	r3, [r2, #0]
	read_speed[1] = result_speed_1;
 80026d6:	4b3b      	ldr	r3, [pc, #236]	; (80027c4 <control_mod+0x1a0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a3f      	ldr	r2, [pc, #252]	; (80027d8 <control_mod+0x1b4>)
 80026dc:	6053      	str	r3, [r2, #4]
	read_speed[2] = result_speed_2;
 80026de:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <control_mod+0x1a8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a3d      	ldr	r2, [pc, #244]	; (80027d8 <control_mod+0x1b4>)
 80026e4:	6093      	str	r3, [r2, #8]
	read_speed[3] = result_speed_3;
 80026e6:	4b3a      	ldr	r3, [pc, #232]	; (80027d0 <control_mod+0x1ac>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a3b      	ldr	r2, [pc, #236]	; (80027d8 <control_mod+0x1b4>)
 80026ec:	60d3      	str	r3, [r2, #12]

	matrixMultiplyM2M(&read_speed[0],1,4,&axes_robot_matrix_inverse[0][0],4,3,&robot_speed[0]);
 80026ee:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <control_mod+0x1b8>)
 80026f0:	9302      	str	r3, [sp, #8]
 80026f2:	2303      	movs	r3, #3
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	2304      	movs	r3, #4
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <control_mod+0x1bc>)
 80026fc:	2204      	movs	r2, #4
 80026fe:	2101      	movs	r1, #1
 8002700:	4835      	ldr	r0, [pc, #212]	; (80027d8 <control_mod+0x1b4>)
 8002702:	f000 fa87 	bl	8002c14 <matrixMultiplyM2M>

	  if(pads[0].buttons[A_BUTTON]){
 8002706:	4b37      	ldr	r3, [pc, #220]	; (80027e4 <control_mod+0x1c0>)
 8002708:	7c1b      	ldrb	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <control_mod+0xf2>
		  servo_control(1,1);
 800270e:	2101      	movs	r1, #1
 8002710:	2001      	movs	r0, #1
 8002712:	f7fe fea9 	bl	8001468 <servo_control>

	  }
	  if(pads[0].buttons[B_BUTTON]){
 8002716:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <control_mod+0x1c0>)
 8002718:	7c5b      	ldrb	r3, [r3, #17]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <control_mod+0x102>
		  servo_control(1,0);
 800271e:	2100      	movs	r1, #0
 8002720:	2001      	movs	r0, #1
 8002722:	f7fe fea1 	bl	8001468 <servo_control>

	  }
	  if(pads[0].buttons[X_BUTTON]){
 8002726:	4b2f      	ldr	r3, [pc, #188]	; (80027e4 <control_mod+0x1c0>)
 8002728:	7c9b      	ldrb	r3, [r3, #18]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <control_mod+0x112>
		  servo_control(0,1);
 800272e:	2101      	movs	r1, #1
 8002730:	2000      	movs	r0, #0
 8002732:	f7fe fe99 	bl	8001468 <servo_control>

	  }
	  if(pads[0].buttons[Y_BUTTON]){
 8002736:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <control_mod+0x1c0>)
 8002738:	7cdb      	ldrb	r3, [r3, #19]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <control_mod+0x122>
		  servo_control(0,0);
 800273e:	2100      	movs	r1, #0
 8002740:	2000      	movs	r0, #0
 8002742:	f7fe fe91 	bl	8001468 <servo_control>

	  }
	  if(pads[0].buttons[LB_BUTTON]){
 8002746:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <control_mod+0x1c0>)
 8002748:	7d1b      	ldrb	r3, [r3, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <control_mod+0x13a>
		  position = 0;
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <control_mod+0x1c4>)
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
		  chain_control(position);
 8002754:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <control_mod+0x1c4>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe fde1 	bl	8001320 <chain_control>
	  }
	  if(pads[0].buttons[LT_BUTTON]){
 800275e:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <control_mod+0x1c0>)
 8002760:	7d9b      	ldrb	r3, [r3, #22]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <control_mod+0x152>
		  position = 1;
 8002766:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <control_mod+0x1c4>)
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
		  chain_control(position);
 800276c:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <control_mod+0x1c4>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe fdd5 	bl	8001320 <chain_control>
	  }
	  if(pads[0].buttons[RB_BUTTON]){
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <control_mod+0x1c0>)
 8002778:	7d5b      	ldrb	r3, [r3, #21]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <control_mod+0x16a>
		  position = 2;
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <control_mod+0x1c4>)
 8002780:	2202      	movs	r2, #2
 8002782:	701a      	strb	r2, [r3, #0]
		  chain_control(position);
 8002784:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <control_mod+0x1c4>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fdc9 	bl	8001320 <chain_control>
	  }
	  chain_control(position);
 800278e:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <control_mod+0x1c4>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fdc4 	bl	8001320 <chain_control>
	}
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200003e4 	.word	0x200003e4
 80027a4:	200003d4 	.word	0x200003d4
 80027a8:	200001ec 	.word	0x200001ec
 80027ac:	200001f8 	.word	0x200001f8
 80027b0:	20000000 	.word	0x20000000
 80027b4:	200000ec 	.word	0x200000ec
 80027b8:	2000012c 	.word	0x2000012c
 80027bc:	2000016c 	.word	0x2000016c
 80027c0:	200001ac 	.word	0x200001ac
 80027c4:	200003fc 	.word	0x200003fc
 80027c8:	20000208 	.word	0x20000208
 80027cc:	20000400 	.word	0x20000400
 80027d0:	20000404 	.word	0x20000404
 80027d4:	200003f8 	.word	0x200003f8
 80027d8:	20000214 	.word	0x20000214
 80027dc:	20000224 	.word	0x20000224
 80027e0:	20000030 	.word	0x20000030
 80027e4:	200002b8 	.word	0x200002b8
 80027e8:	200002ad 	.word	0x200002ad

080027ec <set_voltage>:
void set_voltage(uint8_t motor , float duty) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	ed87 0a00 	vstr	s0, [r7]
 80027f8:	71fb      	strb	r3, [r7, #7]
 if(duty > 1.0) duty = 1.0;
 80027fa:	edd7 7a00 	vldr	s15, [r7]
 80027fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280a:	dd02      	ble.n	8002812 <set_voltage+0x26>
 800280c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002810:	603b      	str	r3, [r7, #0]
 if(duty < -1.0) duty = -1.0;
 8002812:	edd7 7a00 	vldr	s15, [r7]
 8002816:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800281a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800281e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002822:	d501      	bpl.n	8002828 <set_voltage+0x3c>
 8002824:	4b8e      	ldr	r3, [pc, #568]	; (8002a60 <set_voltage+0x274>)
 8002826:	603b      	str	r3, [r7, #0]
 switch(motor) {
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	2b03      	cmp	r3, #3
 800282c:	f200 8114 	bhi.w	8002a58 <set_voltage+0x26c>
 8002830:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <set_voltage+0x4c>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	08002849 	.word	0x08002849
 800283c:	080028cb 	.word	0x080028cb
 8002840:	08002951 	.word	0x08002951
 8002844:	080029d3 	.word	0x080029d3
 case 0:
	 if(duty >= 0.0)  {
 8002848:	edd7 7a00 	vldr	s15, [r7]
 800284c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	db1b      	blt.n	800288e <set_voltage+0xa2>
		 TIM4->CCR1 = ((int32_t)(TIM4->ARR * duty));   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8002856:	4b83      	ldr	r3, [pc, #524]	; (8002a64 <set_voltage+0x278>)
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002862:	edd7 7a00 	vldr	s15, [r7]
 8002866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800286e:	4b7d      	ldr	r3, [pc, #500]	; (8002a64 <set_voltage+0x278>)
 8002870:	ee17 2a90 	vmov	r2, s15
 8002874:	635a      	str	r2, [r3, #52]	; 0x34
 8002876:	2200      	movs	r2, #0
 8002878:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800287c:	487a      	ldr	r0, [pc, #488]	; (8002a68 <set_voltage+0x27c>)
 800287e:	f003 f8b9 	bl	80059f4 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8002882:	2201      	movs	r2, #1
 8002884:	2180      	movs	r1, #128	; 0x80
 8002886:	4879      	ldr	r0, [pc, #484]	; (8002a6c <set_voltage+0x280>)
 8002888:	f003 f8b4 	bl	80059f4 <HAL_GPIO_WritePin>
  }
	 else {   TIM4->CCR1 = ((int32_t)(-(TIM4->ARR * duty)));
	 	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
	 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
	 }
  break;
 800288c:	e0e4      	b.n	8002a58 <set_voltage+0x26c>
	 else {   TIM4->CCR1 = ((int32_t)(-(TIM4->ARR * duty)));
 800288e:	4b75      	ldr	r3, [pc, #468]	; (8002a64 <set_voltage+0x278>)
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800289a:	edd7 7a00 	vldr	s15, [r7]
 800289e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a2:	eef1 7a67 	vneg.f32	s15, s15
 80028a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028aa:	4b6e      	ldr	r3, [pc, #440]	; (8002a64 <set_voltage+0x278>)
 80028ac:	ee17 2a90 	vmov	r2, s15
 80028b0:	635a      	str	r2, [r3, #52]	; 0x34
	 	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80028b2:	2201      	movs	r2, #1
 80028b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028b8:	486b      	ldr	r0, [pc, #428]	; (8002a68 <set_voltage+0x27c>)
 80028ba:	f003 f89b 	bl	80059f4 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80028be:	2200      	movs	r2, #0
 80028c0:	2180      	movs	r1, #128	; 0x80
 80028c2:	486a      	ldr	r0, [pc, #424]	; (8002a6c <set_voltage+0x280>)
 80028c4:	f003 f896 	bl	80059f4 <HAL_GPIO_WritePin>
  break;
 80028c8:	e0c6      	b.n	8002a58 <set_voltage+0x26c>
  case 1:
	  if(duty >= 0.0)  {
 80028ca:	edd7 7a00 	vldr	s15, [r7]
 80028ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d6:	db1c      	blt.n	8002912 <set_voltage+0x126>
		  TIM4->CCR2 = ((int32_t)(TIM4->ARR * duty));   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80028d8:	4b62      	ldr	r3, [pc, #392]	; (8002a64 <set_voltage+0x278>)
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028e4:	edd7 7a00 	vldr	s15, [r7]
 80028e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028f0:	4b5c      	ldr	r3, [pc, #368]	; (8002a64 <set_voltage+0x278>)
 80028f2:	ee17 2a90 	vmov	r2, s15
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38
 80028f8:	2200      	movs	r2, #0
 80028fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028fe:	485a      	ldr	r0, [pc, #360]	; (8002a68 <set_voltage+0x27c>)
 8002900:	f003 f878 	bl	80059f4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8002904:	2201      	movs	r2, #1
 8002906:	f44f 7100 	mov.w	r1, #512	; 0x200
 800290a:	4859      	ldr	r0, [pc, #356]	; (8002a70 <set_voltage+0x284>)
 800290c:	f003 f872 	bl	80059f4 <HAL_GPIO_WritePin>
  }
	  else {   TIM4->CCR2 = ((int32_t)(-(TIM4->ARR * duty)));
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	  }
  break;
 8002910:	e0a2      	b.n	8002a58 <set_voltage+0x26c>
	  else {   TIM4->CCR2 = ((int32_t)(-(TIM4->ARR * duty)));
 8002912:	4b54      	ldr	r3, [pc, #336]	; (8002a64 <set_voltage+0x278>)
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800291e:	edd7 7a00 	vldr	s15, [r7]
 8002922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002926:	eef1 7a67 	vneg.f32	s15, s15
 800292a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800292e:	4b4d      	ldr	r3, [pc, #308]	; (8002a64 <set_voltage+0x278>)
 8002930:	ee17 2a90 	vmov	r2, s15
 8002934:	639a      	str	r2, [r3, #56]	; 0x38
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8002936:	2201      	movs	r2, #1
 8002938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800293c:	484a      	ldr	r0, [pc, #296]	; (8002a68 <set_voltage+0x27c>)
 800293e:	f003 f859 	bl	80059f4 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002942:	2200      	movs	r2, #0
 8002944:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002948:	4849      	ldr	r0, [pc, #292]	; (8002a70 <set_voltage+0x284>)
 800294a:	f003 f853 	bl	80059f4 <HAL_GPIO_WritePin>
  break;
 800294e:	e083      	b.n	8002a58 <set_voltage+0x26c>
  case 2:
	  if(duty >= 0.0)  {
 8002950:	edd7 7a00 	vldr	s15, [r7]
 8002954:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295c:	db1b      	blt.n	8002996 <set_voltage+0x1aa>
		  TIM4->CCR3 = ((int32_t)(TIM4->ARR * duty));   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 800295e:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <set_voltage+0x278>)
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800296a:	edd7 7a00 	vldr	s15, [r7]
 800296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002976:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <set_voltage+0x278>)
 8002978:	ee17 2a90 	vmov	r2, s15
 800297c:	63da      	str	r2, [r3, #60]	; 0x3c
 800297e:	2200      	movs	r2, #0
 8002980:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002984:	4839      	ldr	r0, [pc, #228]	; (8002a6c <set_voltage+0x280>)
 8002986:	f003 f835 	bl	80059f4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2, GPIO_PIN_SET);
 800298a:	2201      	movs	r2, #1
 800298c:	2104      	movs	r1, #4
 800298e:	4837      	ldr	r0, [pc, #220]	; (8002a6c <set_voltage+0x280>)
 8002990:	f003 f830 	bl	80059f4 <HAL_GPIO_WritePin>
  }
	  else {   TIM4->CCR3 = ((int32_t)(-(TIM4->ARR * duty)));
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
	  }
  break;
 8002994:	e060      	b.n	8002a58 <set_voltage+0x26c>
	  else {   TIM4->CCR3 = ((int32_t)(-(TIM4->ARR * duty)));
 8002996:	4b33      	ldr	r3, [pc, #204]	; (8002a64 <set_voltage+0x278>)
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029a2:	edd7 7a00 	vldr	s15, [r7]
 80029a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029aa:	eef1 7a67 	vneg.f32	s15, s15
 80029ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029b2:	4b2c      	ldr	r3, [pc, #176]	; (8002a64 <set_voltage+0x278>)
 80029b4:	ee17 2a90 	vmov	r2, s15
 80029b8:	63da      	str	r2, [r3, #60]	; 0x3c
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80029ba:	2201      	movs	r2, #1
 80029bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029c0:	482a      	ldr	r0, [pc, #168]	; (8002a6c <set_voltage+0x280>)
 80029c2:	f003 f817 	bl	80059f4 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2104      	movs	r1, #4
 80029ca:	4828      	ldr	r0, [pc, #160]	; (8002a6c <set_voltage+0x280>)
 80029cc:	f003 f812 	bl	80059f4 <HAL_GPIO_WritePin>
  break;
 80029d0:	e042      	b.n	8002a58 <set_voltage+0x26c>
  case 3:
	  if(duty >= 0.0)  {
 80029d2:	edd7 7a00 	vldr	s15, [r7]
 80029d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029de:	db1c      	blt.n	8002a1a <set_voltage+0x22e>
		  TIM4->CCR4 = ((int32_t)(TIM4->ARR * duty));   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80029e0:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <set_voltage+0x278>)
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	ee07 3a90 	vmov	s15, r3
 80029e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029ec:	edd7 7a00 	vldr	s15, [r7]
 80029f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029f8:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <set_voltage+0x278>)
 80029fa:	ee17 2a90 	vmov	r2, s15
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002a00:	2200      	movs	r2, #0
 8002a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a06:	4819      	ldr	r0, [pc, #100]	; (8002a6c <set_voltage+0x280>)
 8002a08:	f002 fff4 	bl	80059f4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a12:	4817      	ldr	r0, [pc, #92]	; (8002a70 <set_voltage+0x284>)
 8002a14:	f002 ffee 	bl	80059f4 <HAL_GPIO_WritePin>
  }
	  else {   TIM4->CCR4 = ((int32_t)(-(TIM4->ARR * duty)));
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	  }
  break;
 8002a18:	e01d      	b.n	8002a56 <set_voltage+0x26a>
	  else {   TIM4->CCR4 = ((int32_t)(-(TIM4->ARR * duty)));
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <set_voltage+0x278>)
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a26:	edd7 7a00 	vldr	s15, [r7]
 8002a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2e:	eef1 7a67 	vneg.f32	s15, s15
 8002a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <set_voltage+0x278>)
 8002a38:	ee17 2a90 	vmov	r2, s15
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a44:	4809      	ldr	r0, [pc, #36]	; (8002a6c <set_voltage+0x280>)
 8002a46:	f002 ffd5 	bl	80059f4 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a50:	4807      	ldr	r0, [pc, #28]	; (8002a70 <set_voltage+0x284>)
 8002a52:	f002 ffcf 	bl	80059f4 <HAL_GPIO_WritePin>
  break;
 8002a56:	bf00      	nop
 }
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	bf800000 	.word	0xbf800000
 8002a64:	40000800 	.word	0x40000800
 8002a68:	40020800 	.word	0x40020800
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40020400 	.word	0x40020400

08002a74 <PID_Controller>:
void PID_Controller(PID *reg){
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

	reg->error = reg->target - reg->current;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	edc3 7a06 	vstr	s15, [r3, #24]

	reg->sum_error += reg->error;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	edc3 7a07 	vstr	s15, [r3, #28]
    if(reg->sum_error > 1) reg->sum_error = 1;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	edd3 7a07 	vldr	s15, [r3, #28]
 8002aae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aba:	dd03      	ble.n	8002ac4 <PID_Controller+0x50>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ac2:	61da      	str	r2, [r3, #28]
    if(reg->sum_error < -1) reg->sum_error = -1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	edd3 7a07 	vldr	s15, [r3, #28]
 8002aca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad6:	d502      	bpl.n	8002ade <PID_Controller+0x6a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a28      	ldr	r2, [pc, #160]	; (8002b7c <PID_Controller+0x108>)
 8002adc:	61da      	str	r2, [r3, #28]

    reg->P  = reg->Kp * reg->error;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	edd3 7a06 	vldr	s15, [r3, #24]
 8002aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	edc3 7a00 	vstr	s15, [r3]
    reg->I  = reg->Ki * reg->sum_error;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	edc3 7a01 	vstr	s15, [r3, #4]
    reg->dif_error = reg->error - reg->old_error;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	edc3 7a08 	vstr	s15, [r3, #32]
    reg->D  = reg->Kd * reg->dif_error;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	edc3 7a02 	vstr	s15, [r3, #8]
    reg->output  = reg->P  + reg->I  + reg->D ;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	ed93 7a00 	vldr	s14, [r3]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    set_voltage(  reg->motor , reg->output );
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002b62:	eeb0 0a67 	vmov.f32	s0, s15
 8002b66:	4610      	mov	r0, r2
 8002b68:	f7ff fe40 	bl	80027ec <set_voltage>
    reg->old_error = reg->error;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699a      	ldr	r2, [r3, #24]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	635a      	str	r2, [r3, #52]	; 0x34
 }
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	bf800000 	.word	0xbf800000

08002b80 <matrixSetCell>:
    for(i = 0; i < rows; i++)
        for(j = 0; j < columns; j++)
          *(new_m+columns*i+j) = *(m+columns*i+j);
}
void matrixSetCell(float *m, char rows, char columns, char row, char column, float val)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	4608      	mov	r0, r1
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b92:	4603      	mov	r3, r0
 8002b94:	72fb      	strb	r3, [r7, #11]
 8002b96:	460b      	mov	r3, r1
 8002b98:	72bb      	strb	r3, [r7, #10]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	727b      	strb	r3, [r7, #9]
  *(m+columns*(row-1)+column-1) = val;
 8002b9e:	7abb      	ldrb	r3, [r7, #10]
 8002ba0:	7a7a      	ldrb	r2, [r7, #9]
 8002ba2:	3a01      	subs	r2, #1
 8002ba4:	fb02 f303 	mul.w	r3, r2, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	7e3b      	ldrb	r3, [r7, #24]
 8002bac:	4413      	add	r3, r2
 8002bae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4413      	add	r3, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	601a      	str	r2, [r3, #0]
}
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <matrixGetCell>:
for(i = 0; i < rows; i++)
   for(j = 0; j < columns; j++)
      *(m+columns*i+j) = val;
}
float matrixGetCell(float *m, char rows, char columns, char row, char column)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	4608      	mov	r0, r1
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4603      	mov	r3, r0
 8002bda:	70fb      	strb	r3, [r7, #3]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	70bb      	strb	r3, [r7, #2]
 8002be0:	4613      	mov	r3, r2
 8002be2:	707b      	strb	r3, [r7, #1]
  return *(m+columns*(row-1)+column-1);
 8002be4:	78bb      	ldrb	r3, [r7, #2]
 8002be6:	787a      	ldrb	r2, [r7, #1]
 8002be8:	3a01      	subs	r2, #1
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	7c3b      	ldrb	r3, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	ee07 3a90 	vmov	s15, r3
}
 8002c06:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <matrixMultiplyM2M>:
void matrixMultiplyM2M(float *m1, char rows1, char columns1, float *m2, char rows2, char columns2, float *new_m)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	72fb      	strb	r3, [r7, #11]
 8002c22:	4613      	mov	r3, r2
 8002c24:	72bb      	strb	r3, [r7, #10]
float Sum;
char i,j,k;

  if (columns1 != rows2)
 8002c26:	7aba      	ldrb	r2, [r7, #10]
 8002c28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d004      	beq.n	8002c3a <matrixMultiplyM2M+0x26>
      *new_m = 0;
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
            for(k = 0; k < columns1; k++)
                Sum+= (*(m1+columns1*i+k)) * (*(m2+columns2*k+j));
            *(new_m+columns2*i+j) = Sum;
        }
    }
}
 8002c38:	e04f      	b.n	8002cda <matrixMultiplyM2M+0xc6>
      for(i = 0; i < rows1; i++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	74fb      	strb	r3, [r7, #19]
 8002c3e:	e048      	b.n	8002cd2 <matrixMultiplyM2M+0xbe>
        for (j = 0; j < columns2; j++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	74bb      	strb	r3, [r7, #18]
 8002c44:	e03d      	b.n	8002cc2 <matrixMultiplyM2M+0xae>
            Sum = 0;
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
            for(k = 0; k < columns1; k++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	747b      	strb	r3, [r7, #17]
 8002c50:	e023      	b.n	8002c9a <matrixMultiplyM2M+0x86>
                Sum+= (*(m1+columns1*i+k)) * (*(m2+columns2*k+j));
 8002c52:	7abb      	ldrb	r3, [r7, #10]
 8002c54:	7cfa      	ldrb	r2, [r7, #19]
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	7c7b      	ldrb	r3, [r7, #17]
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4413      	add	r3, r2
 8002c66:	ed93 7a00 	vldr	s14, [r3]
 8002c6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c6e:	7c7a      	ldrb	r2, [r7, #17]
 8002c70:	fb02 f303 	mul.w	r3, r2, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	7cbb      	ldrb	r3, [r7, #18]
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4413      	add	r3, r2
 8002c80:	edd3 7a00 	vldr	s15, [r3]
 8002c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c88:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c90:	edc7 7a05 	vstr	s15, [r7, #20]
            for(k = 0; k < columns1; k++)
 8002c94:	7c7b      	ldrb	r3, [r7, #17]
 8002c96:	3301      	adds	r3, #1
 8002c98:	747b      	strb	r3, [r7, #17]
 8002c9a:	7c7a      	ldrb	r2, [r7, #17]
 8002c9c:	7abb      	ldrb	r3, [r7, #10]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d3d7      	bcc.n	8002c52 <matrixMultiplyM2M+0x3e>
            *(new_m+columns2*i+j) = Sum;
 8002ca2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ca6:	7cfa      	ldrb	r2, [r7, #19]
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	7cbb      	ldrb	r3, [r7, #18]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb6:	4413      	add	r3, r2
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	601a      	str	r2, [r3, #0]
        for (j = 0; j < columns2; j++)
 8002cbc:	7cbb      	ldrb	r3, [r7, #18]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	74bb      	strb	r3, [r7, #18]
 8002cc2:	7cba      	ldrb	r2, [r7, #18]
 8002cc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d3bc      	bcc.n	8002c46 <matrixMultiplyM2M+0x32>
      for(i = 0; i < rows1; i++)
 8002ccc:	7cfb      	ldrb	r3, [r7, #19]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	74fb      	strb	r3, [r7, #19]
 8002cd2:	7cfa      	ldrb	r2, [r7, #19]
 8002cd4:	7afb      	ldrb	r3, [r7, #11]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d3b2      	bcc.n	8002c40 <matrixMultiplyM2M+0x2c>
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <matrixTranspose>:
      for (j = 0; j < columns; j++)
        *(new_m+i*columns+j) = (*(m1+i*columns+j)) - (*(m2+i*columns+j));
  }
}
void matrixTranspose(float *m, char rows, char columns, float *new_m)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b087      	sub	sp, #28
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	72fb      	strb	r3, [r7, #11]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	72bb      	strb	r3, [r7, #10]
char i,j;
for(i = 0; i < rows; i++)
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	75fb      	strb	r3, [r7, #23]
 8002cfc:	e022      	b.n	8002d44 <matrixTranspose+0x5e>
  for (j = 0; j < columns; j++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75bb      	strb	r3, [r7, #22]
 8002d02:	e018      	b.n	8002d36 <matrixTranspose+0x50>
    *(new_m+j*rows+i) = *(m+i*columns+j);
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	7aba      	ldrb	r2, [r7, #10]
 8002d08:	fb02 f303 	mul.w	r3, r2, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	7dbb      	ldrb	r3, [r7, #22]
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	441a      	add	r2, r3
 8002d18:	7dbb      	ldrb	r3, [r7, #22]
 8002d1a:	7af9      	ldrb	r1, [r7, #11]
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4619      	mov	r1, r3
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	440b      	add	r3, r1
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	440b      	add	r3, r1
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	601a      	str	r2, [r3, #0]
  for (j = 0; j < columns; j++)
 8002d30:	7dbb      	ldrb	r3, [r7, #22]
 8002d32:	3301      	adds	r3, #1
 8002d34:	75bb      	strb	r3, [r7, #22]
 8002d36:	7dba      	ldrb	r2, [r7, #22]
 8002d38:	7abb      	ldrb	r3, [r7, #10]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d3e2      	bcc.n	8002d04 <matrixTranspose+0x1e>
for(i = 0; i < rows; i++)
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	3301      	adds	r3, #1
 8002d42:	75fb      	strb	r3, [r7, #23]
 8002d44:	7dfa      	ldrb	r2, [r7, #23]
 8002d46:	7afb      	ldrb	r3, [r7, #11]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d3d8      	bcc.n	8002cfe <matrixTranspose+0x18>
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <matrixCofactor>:
void matrixCofactor(float *m, char size, float *new_m)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b0ec      	sub	sp, #432	; 0x1b0
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002d64:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002d68:	6018      	str	r0, [r3, #0]
 8002d6a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002d6e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002d78:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002d7c:	460a      	mov	r2, r1
 8002d7e:	701a      	strb	r2, [r3, #0]
//float *buf1 = malloc(sizeof(float) * (size-1) * (size-1));
  float bufxx[10][10];
  float *buf1=(float*)bufxx;
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
char i=0,j=0,k=0,l=0, c=0, d=0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8002d94:	2300      	movs	r3, #0
 8002d96:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
 8002da0:	2300      	movs	r3, #0
 8002da2:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 8002da6:	2300      	movs	r3, #0
 8002da8:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
signed char sign;

while (i<size)
 8002dac:	e0f0      	b.n	8002f90 <matrixCofactor+0x236>
  {
    j = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
    while (j<size)
 8002db4:	e0dd      	b.n	8002f72 <matrixCofactor+0x218>
      {
        k = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
        c = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
        if (((i+j)%2) == 0)
 8002dc2:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 8002dc6:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002dca:	4413      	add	r3, r2
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d103      	bne.n	8002dde <matrixCofactor+0x84>
          sign = 1;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9
 8002ddc:	e066      	b.n	8002eac <matrixCofactor+0x152>
        else
          sign = -1;
 8002dde:	23ff      	movs	r3, #255	; 0xff
 8002de0:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9


        while (k<(size-1))
 8002de4:	e062      	b.n	8002eac <matrixCofactor+0x152>
          {
            if (c == i)
 8002de6:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 8002dea:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d104      	bne.n	8002dfc <matrixCofactor+0xa2>
              c++;
 8002df2:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8002df6:	3301      	adds	r3, #1
 8002df8:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
            l = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
            d = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
            while(l<(size-1))
 8002e08:	e03c      	b.n	8002e84 <matrixCofactor+0x12a>
              {
                if (d == j)
 8002e0a:	f897 21aa 	ldrb.w	r2, [r7, #426]	; 0x1aa
 8002e0e:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d104      	bne.n	8002e20 <matrixCofactor+0xc6>
                  d++;
 8002e16:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
                *(buf1+(size-1)*k+l) = *(m+size*c+d);
 8002e20:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002e24:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
 8002e2e:	fb02 f303 	mul.w	r3, r2, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8002e40:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e44:	6812      	ldr	r2, [r2, #0]
 8002e46:	441a      	add	r2, r3
 8002e48:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002e4c:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	f897 11ad 	ldrb.w	r1, [r7, #429]	; 0x1ad
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 8002e62:	440b      	add	r3, r1
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8002e6a:	440b      	add	r3, r1
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	601a      	str	r2, [r3, #0]
                l++;
 8002e70:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 8002e74:	3301      	adds	r3, #1
 8002e76:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
                d++;
 8002e7a:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
            while(l<(size-1))
 8002e84:	f897 21ac 	ldrb.w	r2, [r7, #428]	; 0x1ac
 8002e88:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002e8c:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	429a      	cmp	r2, r3
 8002e96:	dbb8      	blt.n	8002e0a <matrixCofactor+0xb0>
              }
            k++;
 8002e98:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
            c++;
 8002ea2:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
        while (k<(size-1))
 8002eac:	f897 21ad 	ldrb.w	r2, [r7, #429]	; 0x1ad
 8002eb0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002eb4:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	db92      	blt.n	8002de6 <matrixCofactor+0x8c>
          }
          matrixDet_LU_Transform(buf1, size - 1,(new_m+size*i+j));
 8002ec0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002ec4:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b2d9      	uxtb	r1, r3
 8002ece:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002ed2:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 8002edc:	fb02 f303 	mul.w	r3, r2, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8002eee:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8002efc:	f000 f8be 	bl	800307c <matrixDet_LU_Transform>
        *(new_m+size*i+j)*=sign;
 8002f00:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002f04:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8002f20:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	ed93 7a00 	vldr	s14, [r3]
 8002f2c:	f997 31a9 	ldrsb.w	r3, [r7, #425]	; 0x1a9
 8002f30:	ee07 3a90 	vmov	s15, r3
 8002f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f38:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002f3c:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8002f58:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f64:	edc3 7a00 	vstr	s15, [r3]
        j++;
 8002f68:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
    while (j<size)
 8002f72:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002f76:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002f7a:	f897 21ae 	ldrb.w	r2, [r7, #430]	; 0x1ae
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	f4ff af18 	bcc.w	8002db6 <matrixCofactor+0x5c>
      }
    i++;
 8002f86:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
while (i<size)
 8002f90:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002f94:	f2a3 13a5 	subw	r3, r3, #421	; 0x1a5
 8002f98:	f897 21af 	ldrb.w	r2, [r7, #431]	; 0x1af
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	f4ff af05 	bcc.w	8002dae <matrixCofactor+0x54>
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <matrixInverse>:
void matrixInverse(float *m, char size, float *new_m)
{
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	b0b3      	sub	sp, #204	; 0xcc
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	72fb      	strb	r3, [r7, #11]
float buf1[4][4];// = malloc(sizeof(float) * size * size);
float buf2 [4][4];//= malloc(sizeof(float) * size * size);
float buf;
float buf3[3][3];
 float det ;
  matrixDet_LU_Transform(m, size,&det);
 8002fbe:	f107 0210 	add.w	r2, r7, #16
 8002fc2:	7afb      	ldrb	r3, [r7, #11]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f858 	bl	800307c <matrixDet_LU_Transform>
char i,j;

matrixCofactor(m, size, &buf1[0][0]);
 8002fcc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002fd0:	7afb      	ldrb	r3, [r7, #11]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff fec0 	bl	8002d5a <matrixCofactor>
matrixTranspose(&buf1[0][0], size, size, &buf2[0][0]);
 8002fda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fde:	7afa      	ldrb	r2, [r7, #11]
 8002fe0:	7af9      	ldrb	r1, [r7, #11]
 8002fe2:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002fe6:	f7ff fe7e 	bl	8002ce6 <matrixTranspose>

for (i = 1; i <= size; i++)
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8002ff0:	e034      	b.n	800305c <matrixInverse+0xac>
  for (j = 1; j <= size; j++)
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 8002ff8:	e026      	b.n	8003048 <matrixInverse+0x98>
    {
      buf = matrixGetCell(&buf1[0][0], size, size, i, j)/det;
 8002ffa:	f897 40bf 	ldrb.w	r4, [r7, #191]	; 0xbf
 8002ffe:	7afa      	ldrb	r2, [r7, #11]
 8003000:	7af9      	ldrb	r1, [r7, #11]
 8003002:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8003006:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	4623      	mov	r3, r4
 800300e:	f7ff fddc 	bl	8002bca <matrixGetCell>
 8003012:	eef0 6a40 	vmov.f32	s13, s0
 8003016:	ed97 7a04 	vldr	s14, [r7, #16]
 800301a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
      matrixSetCell((float*)buf3, size, size, i, j, buf);
 8003022:	f897 40bf 	ldrb.w	r4, [r7, #191]	; 0xbf
 8003026:	7afa      	ldrb	r2, [r7, #11]
 8003028:	7af9      	ldrb	r1, [r7, #11]
 800302a:	f107 0014 	add.w	r0, r7, #20
 800302e:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8003038:	4623      	mov	r3, r4
 800303a:	f7ff fda1 	bl	8002b80 <matrixSetCell>
  for (j = 1; j <= size; j++)
 800303e:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8003042:	3301      	adds	r3, #1
 8003044:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 8003048:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 800304c:	7afb      	ldrb	r3, [r7, #11]
 800304e:	429a      	cmp	r2, r3
 8003050:	d9d3      	bls.n	8002ffa <matrixInverse+0x4a>
for (i = 1; i <= size; i++)
 8003052:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8003056:	3301      	adds	r3, #1
 8003058:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800305c:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 8003060:	7afb      	ldrb	r3, [r7, #11]
 8003062:	429a      	cmp	r2, r3
 8003064:	d9c5      	bls.n	8002ff2 <matrixInverse+0x42>
    }
matrixTranspose(&buf3[0][0], size, size, new_m);
 8003066:	7afa      	ldrb	r2, [r7, #11]
 8003068:	7af9      	ldrb	r1, [r7, #11]
 800306a:	f107 0014 	add.w	r0, r7, #20
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f7ff fe39 	bl	8002ce6 <matrixTranspose>
}
 8003074:	bf00      	nop
 8003076:	37c4      	adds	r7, #196	; 0xc4
 8003078:	46bd      	mov	sp, r7
 800307a:	bd90      	pop	{r4, r7, pc}

0800307c <matrixDet_LU_Transform>:
void matrixDet_LU_Transform(float *A, char n,float *out) //необходимо задать и�?ходную матрицу и переменную дл�? LU-матрицы
{
 800307c:	b480      	push	{r7}
 800307e:	b091      	sub	sp, #68	; 0x44
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	460b      	mov	r3, r1
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	72fb      	strb	r3, [r7, #11]
float temp = 0;//, *LU = malloc(sizeof(float) * n * n);
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
float LU_ [3][3];
float * LU = (float*)LU_;
 8003090:	f107 0310 	add.w	r3, r7, #16
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
char i,j,k;
for (j = 0; j < n; j++)
 8003096:	2300      	movs	r3, #0
 8003098:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800309c:	e02d      	b.n	80030fa <matrixDet_LU_Transform+0x7e>
  {
    *(LU+j) = *(A+j);
 800309e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	441a      	add	r2, r3
 80030a8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80030b0:	440b      	add	r3, r1
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	601a      	str	r2, [r3, #0]
    if (j >= 1)
 80030b6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d018      	beq.n	80030f0 <matrixDet_LU_Transform+0x74>
      *(LU+j*n) = *(A+j*n)/(*LU);
 80030be:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80030c2:	7afa      	ldrb	r2, [r7, #11]
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	edd3 6a00 	vldr	s13, [r3]
 80030d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d4:	ed93 7a00 	vldr	s14, [r3]
 80030d8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80030dc:	7afa      	ldrb	r2, [r7, #11]
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030e6:	4413      	add	r3, r2
 80030e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030ec:	edc3 7a00 	vstr	s15, [r3]
for (j = 0; j < n; j++)
 80030f0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80030f4:	3301      	adds	r3, #1
 80030f6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80030fa:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80030fe:	7afb      	ldrb	r3, [r7, #11]
 8003100:	429a      	cmp	r2, r3
 8003102:	d3cc      	bcc.n	800309e <matrixDet_LU_Transform+0x22>
  }
for (i = 1; i < n; i++)
 8003104:	2301      	movs	r3, #1
 8003106:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800310a:	e0df      	b.n	80032cc <matrixDet_LU_Transform+0x250>
  {
    for (j = i; j < n; j++)
 800310c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003110:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8003114:	e05a      	b.n	80031cc <matrixDet_LU_Transform+0x150>
      {
        for (k = 0; k <= (i-1); k++)
 8003116:	2300      	movs	r3, #0
 8003118:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800311c:	e028      	b.n	8003170 <matrixDet_LU_Transform+0xf4>
          temp += (*(LU+n*i+k))*(*(LU+k*n+j));
 800311e:	7afb      	ldrb	r3, [r7, #11]
 8003120:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003124:	fb02 f303 	mul.w	r3, r2, r3
 8003128:	461a      	mov	r2, r3
 800312a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003134:	4413      	add	r3, r2
 8003136:	ed93 7a00 	vldr	s14, [r3]
 800313a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800313e:	7afa      	ldrb	r2, [r7, #11]
 8003140:	fb02 f303 	mul.w	r3, r2, r3
 8003144:	461a      	mov	r2, r3
 8003146:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003150:	4413      	add	r3, r2
 8003152:	edd3 7a00 	vldr	s15, [r3]
 8003156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800315e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003162:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        for (k = 0; k <= (i-1); k++)
 8003166:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800316a:	3301      	adds	r3, #1
 800316c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8003170:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003174:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003178:	429a      	cmp	r2, r3
 800317a:	d8d0      	bhi.n	800311e <matrixDet_LU_Transform+0xa2>
        *(LU+i*n+j) = *(A+i*n+j) - temp;
 800317c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003180:	7afa      	ldrb	r2, [r7, #11]
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	461a      	mov	r2, r3
 8003188:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	ed93 7a00 	vldr	s14, [r3]
 8003198:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800319c:	7afa      	ldrb	r2, [r7, #11]
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031ae:	4413      	add	r3, r2
 80031b0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80031b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b8:	edc3 7a00 	vstr	s15, [r3]
        temp = 0;
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (j = i; j < n; j++)
 80031c2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80031c6:	3301      	adds	r3, #1
 80031c8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80031cc:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80031d0:	7afb      	ldrb	r3, [r7, #11]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d39f      	bcc.n	8003116 <matrixDet_LU_Transform+0x9a>
      }
    for (j = i+1; j < n; j++)
 80031d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80031da:	3301      	adds	r3, #1
 80031dc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80031e0:	e06a      	b.n	80032b8 <matrixDet_LU_Transform+0x23c>
      {
        for (k = 0; k <= (i-1); k++)
 80031e2:	2300      	movs	r3, #0
 80031e4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80031e8:	e028      	b.n	800323c <matrixDet_LU_Transform+0x1c0>
          temp += (*(LU+j*n+k))*(*(LU+k*n+i));
 80031ea:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80031ee:	7afa      	ldrb	r2, [r7, #11]
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003200:	4413      	add	r3, r2
 8003202:	ed93 7a00 	vldr	s14, [r3]
 8003206:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800320a:	7afa      	ldrb	r2, [r7, #11]
 800320c:	fb02 f303 	mul.w	r3, r2, r3
 8003210:	461a      	mov	r2, r3
 8003212:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800321c:	4413      	add	r3, r2
 800321e:	edd3 7a00 	vldr	s15, [r3]
 8003222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003226:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800322a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        for (k = 0; k <= (i-1); k++)
 8003232:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003236:	3301      	adds	r3, #1
 8003238:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800323c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003240:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003244:	429a      	cmp	r2, r3
 8003246:	d8d0      	bhi.n	80031ea <matrixDet_LU_Transform+0x16e>
        *(LU+j*n+i) = ((*(A+j*n+i)) - temp)/(*(LU+i*n+i));
 8003248:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800324c:	7afa      	ldrb	r2, [r7, #11]
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	461a      	mov	r2, r3
 8003254:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	ed93 7a00 	vldr	s14, [r3]
 8003264:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003268:	ee77 6a67 	vsub.f32	s13, s14, s15
 800326c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003270:	7afa      	ldrb	r2, [r7, #11]
 8003272:	fb02 f303 	mul.w	r3, r2, r3
 8003276:	461a      	mov	r2, r3
 8003278:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003282:	4413      	add	r3, r2
 8003284:	ed93 7a00 	vldr	s14, [r3]
 8003288:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800328c:	7afa      	ldrb	r2, [r7, #11]
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	461a      	mov	r2, r3
 8003294:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800329e:	4413      	add	r3, r2
 80032a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032a4:	edc3 7a00 	vstr	s15, [r3]
        temp = 0;
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (j = i+1; j < n; j++)
 80032ae:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80032b2:	3301      	adds	r3, #1
 80032b4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80032b8:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80032bc:	7afb      	ldrb	r3, [r7, #11]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d38f      	bcc.n	80031e2 <matrixDet_LU_Transform+0x166>
for (i = 1; i < n; i++)
 80032c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80032c6:	3301      	adds	r3, #1
 80032c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80032cc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80032d0:	7afb      	ldrb	r3, [r7, #11]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	f4ff af1a 	bcc.w	800310c <matrixDet_LU_Transform+0x90>
      }
  }
temp = 1;
 80032d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80032dc:	63fb      	str	r3, [r7, #60]	; 0x3c
for (i = 0; i < n; i++)
 80032de:	2300      	movs	r3, #0
 80032e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80032e4:	e018      	b.n	8003318 <matrixDet_LU_Transform+0x29c>
  temp *= *(LU+i*n+i);
 80032e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80032ea:	7afa      	ldrb	r2, [r7, #11]
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032fc:	4413      	add	r3, r2
 80032fe:	edd3 7a00 	vldr	s15, [r3]
 8003302:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
for (i = 0; i < n; i++)
 800330e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003312:	3301      	adds	r3, #1
 8003314:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003318:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800331c:	7afb      	ldrb	r3, [r7, #11]
 800331e:	429a      	cmp	r2, r3
 8003320:	d3e1      	bcc.n	80032e6 <matrixDet_LU_Transform+0x26a>
*out=temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003326:	601a      	str	r2, [r3, #0]
}
 8003328:	bf00      	nop
 800332a:	3744      	adds	r7, #68	; 0x44
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
			convert_typedef();
 8003338:	f7ff f8f8 	bl	800252c <convert_typedef>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800333c:	f001 fbfc 	bl	8004b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003340:	f000 f96e 	bl	8003620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003344:	f7fd fdac 	bl	8000ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003348:	f7fd fd8a 	bl	8000e60 <MX_DMA_Init>
  MX_TIM4_Init();
 800334c:	f000 fe2c 	bl	8003fa8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8003350:	f000 fdd6 	bl	8003f00 <MX_TIM3_Init>
  MX_TIM1_Init();
 8003354:	f000 fd28 	bl	8003da8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003358:	f000 fd7e 	bl	8003e58 <MX_TIM2_Init>
  MX_TIM8_Init();
 800335c:	f000 ff5e 	bl	800421c <MX_TIM8_Init>
  MX_TIM7_Init();
 8003360:	f000 ff26 	bl	80041b0 <MX_TIM7_Init>
  MX_TIM6_Init();
 8003364:	f000 feee 	bl	8004144 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8003368:	f001 fb10 	bl	800498c <MX_USART1_UART_Init>
  MX_TIM10_Init();
 800336c:	f001 f800 	bl	8004370 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003370:	f001 f822 	bl	80043b8 <MX_TIM11_Init>
  MX_TIM9_Init();
 8003374:	f000 ffaa 	bl	80042cc <MX_TIM9_Init>
  MX_TIM12_Init();
 8003378:	f001 f842 	bl	8004400 <MX_TIM12_Init>
  MX_TIM5_Init();
 800337c:	f000 fe8e 	bl	800409c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003380:	2100      	movs	r1, #0
 8003382:	487e      	ldr	r0, [pc, #504]	; (800357c <main+0x248>)
 8003384:	f003 f8f8 	bl	8006578 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003388:	2104      	movs	r1, #4
 800338a:	487c      	ldr	r0, [pc, #496]	; (800357c <main+0x248>)
 800338c:	f003 f8f4 	bl	8006578 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003390:	2108      	movs	r1, #8
 8003392:	487a      	ldr	r0, [pc, #488]	; (800357c <main+0x248>)
 8003394:	f003 f8f0 	bl	8006578 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003398:	210c      	movs	r1, #12
 800339a:	4878      	ldr	r0, [pc, #480]	; (800357c <main+0x248>)
 800339c:	f003 f8ec 	bl	8006578 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80033a0:	2100      	movs	r1, #0
 80033a2:	4877      	ldr	r0, [pc, #476]	; (8003580 <main+0x24c>)
 80033a4:	f003 f8e8 	bl	8006578 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 80033a8:	2104      	movs	r1, #4
 80033aa:	4875      	ldr	r0, [pc, #468]	; (8003580 <main+0x24c>)
 80033ac:	f003 f8e4 	bl	8006578 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80033b0:	2100      	movs	r1, #0
 80033b2:	4874      	ldr	r0, [pc, #464]	; (8003584 <main+0x250>)
 80033b4:	f003 f8e0 	bl	8006578 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80033b8:	213c      	movs	r1, #60	; 0x3c
 80033ba:	4873      	ldr	r0, [pc, #460]	; (8003588 <main+0x254>)
 80033bc:	f003 fa4a 	bl	8006854 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80033c0:	213c      	movs	r1, #60	; 0x3c
 80033c2:	4872      	ldr	r0, [pc, #456]	; (800358c <main+0x258>)
 80033c4:	f003 fa46 	bl	8006854 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80033c8:	213c      	movs	r1, #60	; 0x3c
 80033ca:	4871      	ldr	r0, [pc, #452]	; (8003590 <main+0x25c>)
 80033cc:	f003 fa42 	bl	8006854 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80033d0:	213c      	movs	r1, #60	; 0x3c
 80033d2:	4870      	ldr	r0, [pc, #448]	; (8003594 <main+0x260>)
 80033d4:	f003 fa3e 	bl	8006854 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80033d8:	213c      	movs	r1, #60	; 0x3c
 80033da:	486f      	ldr	r0, [pc, #444]	; (8003598 <main+0x264>)
 80033dc:	f003 fa3a 	bl	8006854 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80033e0:	486e      	ldr	r0, [pc, #440]	; (800359c <main+0x268>)
 80033e2:	f003 f809 	bl	80063f8 <HAL_TIM_Base_Start_IT>



  HAL_UART_Receive_DMA (&huart1, rx_data, 1);
 80033e6:	2201      	movs	r2, #1
 80033e8:	496d      	ldr	r1, [pc, #436]	; (80035a0 <main+0x26c>)
 80033ea:	486e      	ldr	r0, [pc, #440]	; (80035a4 <main+0x270>)
 80033ec:	f004 f80f 	bl	800740e <HAL_UART_Receive_DMA>
  target_speed[0] = 0;
 80033f0:	4b6d      	ldr	r3, [pc, #436]	; (80035a8 <main+0x274>)
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
  target_speed[1] = 0;
 80033f8:	4b6b      	ldr	r3, [pc, #428]	; (80035a8 <main+0x274>)
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	605a      	str	r2, [r3, #4]
  target_speed[2] = 0;
 8003400:	4b69      	ldr	r3, [pc, #420]	; (80035a8 <main+0x274>)
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
  quest_xy[0][0] = 0;
 8003408:	4b68      	ldr	r3, [pc, #416]	; (80035ac <main+0x278>)
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
  quest_xy[0][1] = 0;
 8003410:	4b66      	ldr	r3, [pc, #408]	; (80035ac <main+0x278>)
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	605a      	str	r2, [r3, #4]
  quest_xy[0][2] = 1;
 8003418:	4b64      	ldr	r3, [pc, #400]	; (80035ac <main+0x278>)
 800341a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800341e:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(autonom_flag){
 8003420:	4b63      	ldr	r3, [pc, #396]	; (80035b0 <main+0x27c>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80a1 	beq.w	800356c <main+0x238>
	  convert_chushpan();
 800342a:	f7fe ffa1 	bl	8002370 <convert_chushpan>
	  omron(1);
 800342e:	2001      	movs	r0, #1
 8003430:	f7fd fea2 	bl	8001178 <omron>
	  	  position = 0;
 8003434:	4b5f      	ldr	r3, [pc, #380]	; (80035b4 <main+0x280>)
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
	  	  //switch_lim(1);
	  	  servo_control(0,0);
 800343a:	2100      	movs	r1, #0
 800343c:	2000      	movs	r0, #0
 800343e:	f7fe f813 	bl	8001468 <servo_control>
	  	  servo_control(1,0);
 8003442:	2100      	movs	r1, #0
 8003444:	2001      	movs	r0, #1
 8003446:	f7fe f80f 	bl	8001468 <servo_control>
	  	  HAL_Delay(500);
 800344a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800344e:	f001 fbe5 	bl	8004c1c <HAL_Delay>
	  	  servo_control(0 , 1);
 8003452:	2101      	movs	r1, #1
 8003454:	2000      	movs	r0, #0
 8003456:	f7fe f807 	bl	8001468 <servo_control>
	  	  HAL_Delay(300);
 800345a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800345e:	f001 fbdd 	bl	8004c1c <HAL_Delay>
	  	  switch_lim(2);
 8003462:	2002      	movs	r0, #2
 8003464:	f7fe f82c 	bl	80014c0 <switch_lim>
	  	  Move_robot_coordinates_X_Y_W(0.25,0.7,-0.06,0.9,0.0);
 8003468:	ed9f 2a53 	vldr	s4, [pc, #332]	; 80035b8 <main+0x284>
 800346c:	eddf 1a53 	vldr	s3, [pc, #332]	; 80035bc <main+0x288>
 8003470:	ed9f 1a53 	vldr	s2, [pc, #332]	; 80035c0 <main+0x28c>
 8003474:	eddf 0a53 	vldr	s1, [pc, #332]	; 80035c4 <main+0x290>
 8003478:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 800347c:	f7fe f8a4 	bl	80015c8 <Move_robot_coordinates_X_Y_W>
	  	  Move_robot_coordinates_X_Y_W(0.25,0.7,0.03,2.1,3.3);
 8003480:	ed9f 2a51 	vldr	s4, [pc, #324]	; 80035c8 <main+0x294>
 8003484:	eddf 1a51 	vldr	s3, [pc, #324]	; 80035cc <main+0x298>
 8003488:	ed9f 1a51 	vldr	s2, [pc, #324]	; 80035d0 <main+0x29c>
 800348c:	eddf 0a4d 	vldr	s1, [pc, #308]	; 80035c4 <main+0x290>
 8003490:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8003494:	f7fe f898 	bl	80015c8 <Move_robot_coordinates_X_Y_W>
	  	  HAL_Delay(300);
 8003498:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800349c:	f001 fbbe 	bl	8004c1c <HAL_Delay>
	  	  servo_control(1,1);
 80034a0:	2101      	movs	r1, #1
 80034a2:	2001      	movs	r0, #1
 80034a4:	f7fd ffe0 	bl	8001468 <servo_control>
	  	  fi = 3.14;
 80034a8:	4b4a      	ldr	r3, [pc, #296]	; (80035d4 <main+0x2a0>)
 80034aa:	4a4b      	ldr	r2, [pc, #300]	; (80035d8 <main+0x2a4>)
 80034ac:	601a      	str	r2, [r3, #0]
	  	  Move_robot_coordinates_X_Y_W(0.25,0.7,-0.22,2.03,3.93);
 80034ae:	ed9f 2a4b 	vldr	s4, [pc, #300]	; 80035dc <main+0x2a8>
 80034b2:	eddf 1a4b 	vldr	s3, [pc, #300]	; 80035e0 <main+0x2ac>
 80034b6:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 80035e4 <main+0x2b0>
 80034ba:	eddf 0a42 	vldr	s1, [pc, #264]	; 80035c4 <main+0x290>
 80034be:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80034c2:	f7fe f881 	bl	80015c8 <Move_robot_coordinates_X_Y_W>
	  	  Move_robot_coordinates_X_Y_W(0.25,0.7,-1.22,0.35,5.7);
 80034c6:	ed9f 2a48 	vldr	s4, [pc, #288]	; 80035e8 <main+0x2b4>
 80034ca:	eddf 1a48 	vldr	s3, [pc, #288]	; 80035ec <main+0x2b8>
 80034ce:	ed9f 1a48 	vldr	s2, [pc, #288]	; 80035f0 <main+0x2bc>
 80034d2:	eddf 0a3c 	vldr	s1, [pc, #240]	; 80035c4 <main+0x290>
 80034d6:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80034da:	f7fe f875 	bl	80015c8 <Move_robot_coordinates_X_Y_W>
	  	  servo_control(1,0);
 80034de:	2100      	movs	r1, #0
 80034e0:	2001      	movs	r0, #1
 80034e2:	f7fd ffc1 	bl	8001468 <servo_control>
	  	  switch_lim(3);
 80034e6:	2003      	movs	r0, #3
 80034e8:	f7fd ffea 	bl	80014c0 <switch_lim>
	  	  HAL_Delay(250);
 80034ec:	20fa      	movs	r0, #250	; 0xfa
 80034ee:	f001 fb95 	bl	8004c1c <HAL_Delay>
	  	  servo_control(0,0);
 80034f2:	2100      	movs	r1, #0
 80034f4:	2000      	movs	r0, #0
 80034f6:	f7fd ffb7 	bl	8001468 <servo_control>

	  	  switch(znamya_position){
 80034fa:	4b3e      	ldr	r3, [pc, #248]	; (80035f4 <main+0x2c0>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d020      	beq.n	8003544 <main+0x210>
 8003502:	2b03      	cmp	r3, #3
 8003504:	dc32      	bgt.n	800356c <main+0x238>
 8003506:	2b01      	cmp	r3, #1
 8003508:	d002      	beq.n	8003510 <main+0x1dc>
 800350a:	2b02      	cmp	r3, #2
 800350c:	d00d      	beq.n	800352a <main+0x1f6>
 800350e:	e01a      	b.n	8003546 <main+0x212>
	  	  case (1):
	  	   Move_robot_coordinates_X_Y_W(0.35,0.2,-1.4,1.66,6.28);
 8003510:	ed9f 2a39 	vldr	s4, [pc, #228]	; 80035f8 <main+0x2c4>
 8003514:	eddf 1a39 	vldr	s3, [pc, #228]	; 80035fc <main+0x2c8>
 8003518:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8003600 <main+0x2cc>
 800351c:	eddf 0a39 	vldr	s1, [pc, #228]	; 8003604 <main+0x2d0>
 8003520:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80035ec <main+0x2b8>
 8003524:	f7fe f850 	bl	80015c8 <Move_robot_coordinates_X_Y_W>

	  	        break;
 8003528:	e00d      	b.n	8003546 <main+0x212>

	  	  case(2):
	  		  Move_robot_coordinates_X_Y_W(0.35,0.3,-0.22,1.13,5.7);
 800352a:	ed9f 2a2f 	vldr	s4, [pc, #188]	; 80035e8 <main+0x2b4>
 800352e:	eddf 1a36 	vldr	s3, [pc, #216]	; 8003608 <main+0x2d4>
 8003532:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 80035e4 <main+0x2b0>
 8003536:	eddf 0a35 	vldr	s1, [pc, #212]	; 800360c <main+0x2d8>
 800353a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80035ec <main+0x2b8>
 800353e:	f7fe f843 	bl	80015c8 <Move_robot_coordinates_X_Y_W>


	  	  	  	break;
 8003542:	e000      	b.n	8003546 <main+0x212>
	  	  case(3):
	  	  	  	  break;
 8003544:	bf00      	nop
	  	  }

  	  }
  		  while(autonom_flag ){
 8003546:	e011      	b.n	800356c <main+0x238>
  			  convert_chushpan();
 8003548:	f7fe ff12 	bl	8002370 <convert_chushpan>
  			  Wheel_1.target = 0;
 800354c:	4b30      	ldr	r3, [pc, #192]	; (8003610 <main+0x2dc>)
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	611a      	str	r2, [r3, #16]
  			  Wheel_2.target = 0;
 8003554:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <main+0x2e0>)
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	611a      	str	r2, [r3, #16]
  			  Wheel_3.target = 0;
 800355c:	4b2e      	ldr	r3, [pc, #184]	; (8003618 <main+0x2e4>)
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	611a      	str	r2, [r3, #16]
  			  Wheel_4.target = 0;
 8003564:	4b2d      	ldr	r3, [pc, #180]	; (800361c <main+0x2e8>)
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	611a      	str	r2, [r3, #16]
  		  while(autonom_flag ){
 800356c:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <main+0x27c>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e9      	bne.n	8003548 <main+0x214>
  			  	  }

  		control_mod();
 8003574:	f7ff f856 	bl	8002624 <control_mod>
	  if(autonom_flag){
 8003578:	e752      	b.n	8003420 <main+0xec>
 800357a:	bf00      	nop
 800357c:	20000508 	.word	0x20000508
 8003580:	20000670 	.word	0x20000670
 8003584:	20000748 	.word	0x20000748
 8003588:	20000628 	.word	0x20000628
 800358c:	20000478 	.word	0x20000478
 8003590:	200004c0 	.word	0x200004c0
 8003594:	20000430 	.word	0x20000430
 8003598:	20000550 	.word	0x20000550
 800359c:	20000598 	.word	0x20000598
 80035a0:	20000300 	.word	0x20000300
 80035a4:	20000790 	.word	0x20000790
 80035a8:	200001ec 	.word	0x200001ec
 80035ac:	20000240 	.word	0x20000240
 80035b0:	200003e4 	.word	0x200003e4
 80035b4:	200002ad 	.word	0x200002ad
 80035b8:	00000000 	.word	0x00000000
 80035bc:	3f666666 	.word	0x3f666666
 80035c0:	bd75c28f 	.word	0xbd75c28f
 80035c4:	3f333333 	.word	0x3f333333
 80035c8:	40533333 	.word	0x40533333
 80035cc:	40066666 	.word	0x40066666
 80035d0:	3cf5c28f 	.word	0x3cf5c28f
 80035d4:	20000070 	.word	0x20000070
 80035d8:	4048f5c3 	.word	0x4048f5c3
 80035dc:	407b851f 	.word	0x407b851f
 80035e0:	4001eb85 	.word	0x4001eb85
 80035e4:	be6147ae 	.word	0xbe6147ae
 80035e8:	40b66666 	.word	0x40b66666
 80035ec:	3eb33333 	.word	0x3eb33333
 80035f0:	bf9c28f6 	.word	0xbf9c28f6
 80035f4:	200002ac 	.word	0x200002ac
 80035f8:	40c8f5c3 	.word	0x40c8f5c3
 80035fc:	3fd47ae1 	.word	0x3fd47ae1
 8003600:	bfb33333 	.word	0xbfb33333
 8003604:	3e4ccccd 	.word	0x3e4ccccd
 8003608:	3f90a3d7 	.word	0x3f90a3d7
 800360c:	3e99999a 	.word	0x3e99999a
 8003610:	200000ec 	.word	0x200000ec
 8003614:	2000012c 	.word	0x2000012c
 8003618:	2000016c 	.word	0x2000016c
 800361c:	200001ac 	.word	0x200001ac

08003620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b094      	sub	sp, #80	; 0x50
 8003624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003626:	f107 0320 	add.w	r3, r7, #32
 800362a:	2230      	movs	r2, #48	; 0x30
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f006 f85a 	bl	80096e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003634:	f107 030c 	add.w	r3, r7, #12
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003644:	2300      	movs	r3, #0
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	4b28      	ldr	r3, [pc, #160]	; (80036ec <SystemClock_Config+0xcc>)
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	4a27      	ldr	r2, [pc, #156]	; (80036ec <SystemClock_Config+0xcc>)
 800364e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003652:	6413      	str	r3, [r2, #64]	; 0x40
 8003654:	4b25      	ldr	r3, [pc, #148]	; (80036ec <SystemClock_Config+0xcc>)
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003660:	2300      	movs	r3, #0
 8003662:	607b      	str	r3, [r7, #4]
 8003664:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <SystemClock_Config+0xd0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a21      	ldr	r2, [pc, #132]	; (80036f0 <SystemClock_Config+0xd0>)
 800366a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <SystemClock_Config+0xd0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003678:	607b      	str	r3, [r7, #4]
 800367a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800367c:	2302      	movs	r3, #2
 800367e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003680:	2301      	movs	r3, #1
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003684:	2310      	movs	r3, #16
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003688:	2302      	movs	r3, #2
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800368c:	2300      	movs	r3, #0
 800368e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003690:	2308      	movs	r3, #8
 8003692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003694:	23a8      	movs	r3, #168	; 0xa8
 8003696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003698:	2302      	movs	r3, #2
 800369a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800369c:	2307      	movs	r3, #7
 800369e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036a0:	f107 0320 	add.w	r3, r7, #32
 80036a4:	4618      	mov	r0, r3
 80036a6:	f002 f9bf 	bl	8005a28 <HAL_RCC_OscConfig>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80036b0:	f000 f820 	bl	80036f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036b4:	230f      	movs	r3, #15
 80036b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036b8:	2302      	movs	r3, #2
 80036ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80036c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80036c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036cc:	f107 030c 	add.w	r3, r7, #12
 80036d0:	2105      	movs	r1, #5
 80036d2:	4618      	mov	r0, r3
 80036d4:	f002 fc20 	bl	8005f18 <HAL_RCC_ClockConfig>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80036de:	f000 f809 	bl	80036f4 <Error_Handler>
  }
}
 80036e2:	bf00      	nop
 80036e4:	3750      	adds	r7, #80	; 0x50
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40007000 	.word	0x40007000

080036f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036f8:	b672      	cpsid	i
}
 80036fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036fc:	e7fe      	b.n	80036fc <Error_Handler+0x8>
	...

08003700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <HAL_MspInit+0x4c>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	4a0f      	ldr	r2, [pc, #60]	; (800374c <HAL_MspInit+0x4c>)
 8003710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003714:	6453      	str	r3, [r2, #68]	; 0x44
 8003716:	4b0d      	ldr	r3, [pc, #52]	; (800374c <HAL_MspInit+0x4c>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371e:	607b      	str	r3, [r7, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	603b      	str	r3, [r7, #0]
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_MspInit+0x4c>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	4a08      	ldr	r2, [pc, #32]	; (800374c <HAL_MspInit+0x4c>)
 800372c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003730:	6413      	str	r3, [r2, #64]	; 0x40
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <HAL_MspInit+0x4c>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800373e:	2007      	movs	r0, #7
 8003740:	f001 fb60 	bl	8004e04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40023800 	.word	0x40023800

08003750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003754:	e7fe      	b.n	8003754 <NMI_Handler+0x4>

08003756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003756:	b480      	push	{r7}
 8003758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800375a:	e7fe      	b.n	800375a <HardFault_Handler+0x4>

0800375c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003760:	e7fe      	b.n	8003760 <MemManage_Handler+0x4>

08003762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003766:	e7fe      	b.n	8003766 <BusFault_Handler+0x4>

08003768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800376c:	e7fe      	b.n	800376c <UsageFault_Handler+0x4>

0800376e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800376e:	b480      	push	{r7}
 8003770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800378a:	b480      	push	{r7}
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800379c:	f001 fa1e 	bl	8004bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037a0:	bf00      	nop
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037a8:	4802      	ldr	r0, [pc, #8]	; (80037b4 <USART1_IRQHandler+0x10>)
 80037aa:	f003 fe61 	bl	8007470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000790 	.word	0x20000790

080037b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037b8:	b5b0      	push	{r4, r5, r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */


	Enc_Counter_0_now = TIM8->CNT;
 80037be:	4bb8      	ldr	r3, [pc, #736]	; (8003aa0 <TIM6_DAC_IRQHandler+0x2e8>)
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	b21a      	sxth	r2, r3
 80037c4:	4bb7      	ldr	r3, [pc, #732]	; (8003aa4 <TIM6_DAC_IRQHandler+0x2ec>)
 80037c6:	801a      	strh	r2, [r3, #0]
	Enc_Counter_1_now = TIM2->CNT;
 80037c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	b21a      	sxth	r2, r3
 80037d0:	4bb5      	ldr	r3, [pc, #724]	; (8003aa8 <TIM6_DAC_IRQHandler+0x2f0>)
 80037d2:	801a      	strh	r2, [r3, #0]
	Enc_Counter_2_now = TIM3->CNT;
 80037d4:	4bb5      	ldr	r3, [pc, #724]	; (8003aac <TIM6_DAC_IRQHandler+0x2f4>)
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	b21a      	sxth	r2, r3
 80037da:	4bb5      	ldr	r3, [pc, #724]	; (8003ab0 <TIM6_DAC_IRQHandler+0x2f8>)
 80037dc:	801a      	strh	r2, [r3, #0]
	Enc_Counter_3_now = TIM1->CNT;
 80037de:	4bb5      	ldr	r3, [pc, #724]	; (8003ab4 <TIM6_DAC_IRQHandler+0x2fc>)
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	b21a      	sxth	r2, r3
 80037e4:	4bb4      	ldr	r3, [pc, #720]	; (8003ab8 <TIM6_DAC_IRQHandler+0x300>)
 80037e6:	801a      	strh	r2, [r3, #0]

	 Enc_Counter_0 = TIM8->CNT;
 80037e8:	4bad      	ldr	r3, [pc, #692]	; (8003aa0 <TIM6_DAC_IRQHandler+0x2e8>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	b21a      	sxth	r2, r3
 80037ee:	4bb3      	ldr	r3, [pc, #716]	; (8003abc <TIM6_DAC_IRQHandler+0x304>)
 80037f0:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_1 = TIM2->CNT;
 80037f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	b21a      	sxth	r2, r3
 80037fa:	4bb1      	ldr	r3, [pc, #708]	; (8003ac0 <TIM6_DAC_IRQHandler+0x308>)
 80037fc:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_2 = TIM3->CNT;
 80037fe:	4bab      	ldr	r3, [pc, #684]	; (8003aac <TIM6_DAC_IRQHandler+0x2f4>)
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	b21a      	sxth	r2, r3
 8003804:	4baf      	ldr	r3, [pc, #700]	; (8003ac4 <TIM6_DAC_IRQHandler+0x30c>)
 8003806:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_3 = TIM1->CNT;
 8003808:	4baa      	ldr	r3, [pc, #680]	; (8003ab4 <TIM6_DAC_IRQHandler+0x2fc>)
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	b21a      	sxth	r2, r3
 800380e:	4bae      	ldr	r3, [pc, #696]	; (8003ac8 <TIM6_DAC_IRQHandler+0x310>)
 8003810:	801a      	strh	r2, [r3, #0]

	 result_speed_0 = ((float)Enc_Counter_0) *  pi_Radius_pulse_enc * 100.0;
 8003812:	4baa      	ldr	r3, [pc, #680]	; (8003abc <TIM6_DAC_IRQHandler+0x304>)
 8003814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003818:	ee07 3a90 	vmov	s15, r3
 800381c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003820:	ee17 0a90 	vmov	r0, s15
 8003824:	f7fc fe34 	bl	8000490 <__aeabi_f2d>
 8003828:	a397      	add	r3, pc, #604	; (adr r3, 8003a88 <TIM6_DAC_IRQHandler+0x2d0>)
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f7fc fe87 	bl	8000540 <__aeabi_dmul>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	4ba3      	ldr	r3, [pc, #652]	; (8003acc <TIM6_DAC_IRQHandler+0x314>)
 8003840:	f7fc fe7e 	bl	8000540 <__aeabi_dmul>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	f7fd f93a 	bl	8000ac4 <__aeabi_d2f>
 8003850:	4603      	mov	r3, r0
 8003852:	4a9f      	ldr	r2, [pc, #636]	; (8003ad0 <TIM6_DAC_IRQHandler+0x318>)
 8003854:	6013      	str	r3, [r2, #0]
	 result_speed_1 = ((float)Enc_Counter_1) *  pi_Radius_pulse_enc * 100.0;
 8003856:	4b9a      	ldr	r3, [pc, #616]	; (8003ac0 <TIM6_DAC_IRQHandler+0x308>)
 8003858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800385c:	ee07 3a90 	vmov	s15, r3
 8003860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003864:	ee17 0a90 	vmov	r0, s15
 8003868:	f7fc fe12 	bl	8000490 <__aeabi_f2d>
 800386c:	a386      	add	r3, pc, #536	; (adr r3, 8003a88 <TIM6_DAC_IRQHandler+0x2d0>)
 800386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003872:	f7fc fe65 	bl	8000540 <__aeabi_dmul>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	4b92      	ldr	r3, [pc, #584]	; (8003acc <TIM6_DAC_IRQHandler+0x314>)
 8003884:	f7fc fe5c 	bl	8000540 <__aeabi_dmul>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	f7fd f918 	bl	8000ac4 <__aeabi_d2f>
 8003894:	4603      	mov	r3, r0
 8003896:	4a8f      	ldr	r2, [pc, #572]	; (8003ad4 <TIM6_DAC_IRQHandler+0x31c>)
 8003898:	6013      	str	r3, [r2, #0]
	 result_speed_2 = ((float)Enc_Counter_2) *  pi_Radius_pulse_enc * 100.0;
 800389a:	4b8a      	ldr	r3, [pc, #552]	; (8003ac4 <TIM6_DAC_IRQHandler+0x30c>)
 800389c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038a0:	ee07 3a90 	vmov	s15, r3
 80038a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a8:	ee17 0a90 	vmov	r0, s15
 80038ac:	f7fc fdf0 	bl	8000490 <__aeabi_f2d>
 80038b0:	a375      	add	r3, pc, #468	; (adr r3, 8003a88 <TIM6_DAC_IRQHandler+0x2d0>)
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	f7fc fe43 	bl	8000540 <__aeabi_dmul>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4610      	mov	r0, r2
 80038c0:	4619      	mov	r1, r3
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	4b81      	ldr	r3, [pc, #516]	; (8003acc <TIM6_DAC_IRQHandler+0x314>)
 80038c8:	f7fc fe3a 	bl	8000540 <__aeabi_dmul>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	f7fd f8f6 	bl	8000ac4 <__aeabi_d2f>
 80038d8:	4603      	mov	r3, r0
 80038da:	4a7f      	ldr	r2, [pc, #508]	; (8003ad8 <TIM6_DAC_IRQHandler+0x320>)
 80038dc:	6013      	str	r3, [r2, #0]
	 result_speed_3 = ((float)Enc_Counter_3) *  pi_Radius_pulse_enc * 100.0;
 80038de:	4b7a      	ldr	r3, [pc, #488]	; (8003ac8 <TIM6_DAC_IRQHandler+0x310>)
 80038e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038e4:	ee07 3a90 	vmov	s15, r3
 80038e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ec:	ee17 0a90 	vmov	r0, s15
 80038f0:	f7fc fdce 	bl	8000490 <__aeabi_f2d>
 80038f4:	a364      	add	r3, pc, #400	; (adr r3, 8003a88 <TIM6_DAC_IRQHandler+0x2d0>)
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	f7fc fe21 	bl	8000540 <__aeabi_dmul>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4610      	mov	r0, r2
 8003904:	4619      	mov	r1, r3
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	4b70      	ldr	r3, [pc, #448]	; (8003acc <TIM6_DAC_IRQHandler+0x314>)
 800390c:	f7fc fe18 	bl	8000540 <__aeabi_dmul>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	f7fd f8d4 	bl	8000ac4 <__aeabi_d2f>
 800391c:	4603      	mov	r3, r0
 800391e:	4a6f      	ldr	r2, [pc, #444]	; (8003adc <TIM6_DAC_IRQHandler+0x324>)
 8003920:	6013      	str	r3, [r2, #0]

	 TIM8->CNT = 0;
 8003922:	4b5f      	ldr	r3, [pc, #380]	; (8003aa0 <TIM6_DAC_IRQHandler+0x2e8>)
 8003924:	2200      	movs	r2, #0
 8003926:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM2->CNT = 0;
 8003928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800392c:	2200      	movs	r2, #0
 800392e:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM3->CNT = 0;
 8003930:	4b5e      	ldr	r3, [pc, #376]	; (8003aac <TIM6_DAC_IRQHandler+0x2f4>)
 8003932:	2200      	movs	r2, #0
 8003934:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM1->CNT = 0;
 8003936:	4b5f      	ldr	r3, [pc, #380]	; (8003ab4 <TIM6_DAC_IRQHandler+0x2fc>)
 8003938:	2200      	movs	r2, #0
 800393a:	625a      	str	r2, [r3, #36]	; 0x24
	 Wheel_1.current = result_speed_0;
 800393c:	4b64      	ldr	r3, [pc, #400]	; (8003ad0 <TIM6_DAC_IRQHandler+0x318>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a67      	ldr	r2, [pc, #412]	; (8003ae0 <TIM6_DAC_IRQHandler+0x328>)
 8003942:	6153      	str	r3, [r2, #20]
		Wheel_2.current = result_speed_1;
 8003944:	4b63      	ldr	r3, [pc, #396]	; (8003ad4 <TIM6_DAC_IRQHandler+0x31c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a66      	ldr	r2, [pc, #408]	; (8003ae4 <TIM6_DAC_IRQHandler+0x32c>)
 800394a:	6153      	str	r3, [r2, #20]
		Wheel_3.current = result_speed_2;
 800394c:	4b62      	ldr	r3, [pc, #392]	; (8003ad8 <TIM6_DAC_IRQHandler+0x320>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a65      	ldr	r2, [pc, #404]	; (8003ae8 <TIM6_DAC_IRQHandler+0x330>)
 8003952:	6153      	str	r3, [r2, #20]
		Wheel_4.current = result_speed_3;
 8003954:	4b61      	ldr	r3, [pc, #388]	; (8003adc <TIM6_DAC_IRQHandler+0x324>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a64      	ldr	r2, [pc, #400]	; (8003aec <TIM6_DAC_IRQHandler+0x334>)
 800395a:	6153      	str	r3, [r2, #20]


	 PID_Controller(&Wheel_1);
 800395c:	4860      	ldr	r0, [pc, #384]	; (8003ae0 <TIM6_DAC_IRQHandler+0x328>)
 800395e:	f7ff f889 	bl	8002a74 <PID_Controller>
	 PID_Controller(&Wheel_2);
 8003962:	4860      	ldr	r0, [pc, #384]	; (8003ae4 <TIM6_DAC_IRQHandler+0x32c>)
 8003964:	f7ff f886 	bl	8002a74 <PID_Controller>
	 PID_Controller(&Wheel_3);
 8003968:	485f      	ldr	r0, [pc, #380]	; (8003ae8 <TIM6_DAC_IRQHandler+0x330>)
 800396a:	f7ff f883 	bl	8002a74 <PID_Controller>
	 PID_Controller(&Wheel_4);
 800396e:	485f      	ldr	r0, [pc, #380]	; (8003aec <TIM6_DAC_IRQHandler+0x334>)
 8003970:	f7ff f880 	bl	8002a74 <PID_Controller>

	 fi = fi + speed_W * 0.01;
 8003974:	4b5e      	ldr	r3, [pc, #376]	; (8003af0 <TIM6_DAC_IRQHandler+0x338>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f7fc fd89 	bl	8000490 <__aeabi_f2d>
 800397e:	4604      	mov	r4, r0
 8003980:	460d      	mov	r5, r1
 8003982:	4b5c      	ldr	r3, [pc, #368]	; (8003af4 <TIM6_DAC_IRQHandler+0x33c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fc fd82 	bl	8000490 <__aeabi_f2d>
 800398c:	a340      	add	r3, pc, #256	; (adr r3, 8003a90 <TIM6_DAC_IRQHandler+0x2d8>)
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	f7fc fdd5 	bl	8000540 <__aeabi_dmul>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4620      	mov	r0, r4
 800399c:	4629      	mov	r1, r5
 800399e:	f7fc fc19 	bl	80001d4 <__adddf3>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4610      	mov	r0, r2
 80039a8:	4619      	mov	r1, r3
 80039aa:	f7fd f88b 	bl	8000ac4 <__aeabi_d2f>
 80039ae:	4603      	mov	r3, r0
 80039b0:	4a4f      	ldr	r2, [pc, #316]	; (8003af0 <TIM6_DAC_IRQHandler+0x338>)
 80039b2:	6013      	str	r3, [r2, #0]
	 delta_UV[0][0] = speed_U *0.01;
 80039b4:	4b50      	ldr	r3, [pc, #320]	; (8003af8 <TIM6_DAC_IRQHandler+0x340>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fc fd69 	bl	8000490 <__aeabi_f2d>
 80039be:	a334      	add	r3, pc, #208	; (adr r3, 8003a90 <TIM6_DAC_IRQHandler+0x2d8>)
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f7fc fdbc 	bl	8000540 <__aeabi_dmul>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4610      	mov	r0, r2
 80039ce:	4619      	mov	r1, r3
 80039d0:	f7fd f878 	bl	8000ac4 <__aeabi_d2f>
 80039d4:	4603      	mov	r3, r0
 80039d6:	4a49      	ldr	r2, [pc, #292]	; (8003afc <TIM6_DAC_IRQHandler+0x344>)
 80039d8:	6013      	str	r3, [r2, #0]
	 delta_UV[0][1] = speed_V *0.01;
 80039da:	4b49      	ldr	r3, [pc, #292]	; (8003b00 <TIM6_DAC_IRQHandler+0x348>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fc fd56 	bl	8000490 <__aeabi_f2d>
 80039e4:	a32a      	add	r3, pc, #168	; (adr r3, 8003a90 <TIM6_DAC_IRQHandler+0x2d8>)
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	f7fc fda9 	bl	8000540 <__aeabi_dmul>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	f7fd f865 	bl	8000ac4 <__aeabi_d2f>
 80039fa:	4603      	mov	r3, r0
 80039fc:	4a3f      	ldr	r2, [pc, #252]	; (8003afc <TIM6_DAC_IRQHandler+0x344>)
 80039fe:	6053      	str	r3, [r2, #4]
	 if(fi>=(2*pi)) fi = fi-2*pi;
 8003a00:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <TIM6_DAC_IRQHandler+0x338>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fc fd43 	bl	8000490 <__aeabi_f2d>
 8003a0a:	a323      	add	r3, pc, #140	; (adr r3, 8003a98 <TIM6_DAC_IRQHandler+0x2e0>)
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f7fd f81c 	bl	8000a4c <__aeabi_dcmpge>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d012      	beq.n	8003a40 <TIM6_DAC_IRQHandler+0x288>
 8003a1a:	4b35      	ldr	r3, [pc, #212]	; (8003af0 <TIM6_DAC_IRQHandler+0x338>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fc fd36 	bl	8000490 <__aeabi_f2d>
 8003a24:	a31c      	add	r3, pc, #112	; (adr r3, 8003a98 <TIM6_DAC_IRQHandler+0x2e0>)
 8003a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2a:	f7fc fbd1 	bl	80001d0 <__aeabi_dsub>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	f7fd f845 	bl	8000ac4 <__aeabi_d2f>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4a2c      	ldr	r2, [pc, #176]	; (8003af0 <TIM6_DAC_IRQHandler+0x338>)
 8003a3e:	6013      	str	r3, [r2, #0]
	 if(fi<0.0)	 fi = fi+2*pi;
 8003a40:	4b2b      	ldr	r3, [pc, #172]	; (8003af0 <TIM6_DAC_IRQHandler+0x338>)
 8003a42:	edd3 7a00 	vldr	s15, [r3]
 8003a46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4e:	d512      	bpl.n	8003a76 <TIM6_DAC_IRQHandler+0x2be>
 8003a50:	4b27      	ldr	r3, [pc, #156]	; (8003af0 <TIM6_DAC_IRQHandler+0x338>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fc fd1b 	bl	8000490 <__aeabi_f2d>
 8003a5a:	a30f      	add	r3, pc, #60	; (adr r3, 8003a98 <TIM6_DAC_IRQHandler+0x2e0>)
 8003a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a60:	f7fc fbb8 	bl	80001d4 <__adddf3>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	f7fd f82a 	bl	8000ac4 <__aeabi_d2f>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4a1f      	ldr	r2, [pc, #124]	; (8003af0 <TIM6_DAC_IRQHandler+0x338>)
 8003a74:	6013      	str	r3, [r2, #0]
	 if(quest_FI>fi){
 8003a76:	4b23      	ldr	r3, [pc, #140]	; (8003b04 <TIM6_DAC_IRQHandler+0x34c>)
 8003a78:	ed93 7a00 	vldr	s14, [r3]
 8003a7c:	4b1c      	ldr	r3, [pc, #112]	; (8003af0 <TIM6_DAC_IRQHandler+0x338>)
 8003a7e:	edd3 7a00 	vldr	s15, [r3]
 8003a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a86:	e03f      	b.n	8003b08 <TIM6_DAC_IRQHandler+0x350>
 8003a88:	ce34e015 	.word	0xce34e015
 8003a8c:	3f16194c 	.word	0x3f16194c
 8003a90:	47ae147b 	.word	0x47ae147b
 8003a94:	3f847ae1 	.word	0x3f847ae1
 8003a98:	54442d18 	.word	0x54442d18
 8003a9c:	401921fb 	.word	0x401921fb
 8003aa0:	40010400 	.word	0x40010400
 8003aa4:	200003ee 	.word	0x200003ee
 8003aa8:	200003f0 	.word	0x200003f0
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	200003f2 	.word	0x200003f2
 8003ab4:	40010000 	.word	0x40010000
 8003ab8:	200003f4 	.word	0x200003f4
 8003abc:	200003e6 	.word	0x200003e6
 8003ac0:	200003e8 	.word	0x200003e8
 8003ac4:	200003ea 	.word	0x200003ea
 8003ac8:	200003ec 	.word	0x200003ec
 8003acc:	40590000 	.word	0x40590000
 8003ad0:	200003f8 	.word	0x200003f8
 8003ad4:	200003fc 	.word	0x200003fc
 8003ad8:	20000400 	.word	0x20000400
 8003adc:	20000404 	.word	0x20000404
 8003ae0:	200000ec 	.word	0x200000ec
 8003ae4:	2000012c 	.word	0x2000012c
 8003ae8:	2000016c 	.word	0x2000016c
 8003aec:	200001ac 	.word	0x200001ac
 8003af0:	20000070 	.word	0x20000070
 8003af4:	2000023c 	.word	0x2000023c
 8003af8:	20000234 	.word	0x20000234
 8003afc:	20000418 	.word	0x20000418
 8003b00:	20000238 	.word	0x20000238
 8003b04:	200002a4 	.word	0x200002a4
 8003b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0c:	dd4a      	ble.n	8003ba4 <TIM6_DAC_IRQHandler+0x3ec>
		 if((quest_FI-fi)>pi){
 8003b0e:	4b8e      	ldr	r3, [pc, #568]	; (8003d48 <TIM6_DAC_IRQHandler+0x590>)
 8003b10:	ed93 7a00 	vldr	s14, [r3]
 8003b14:	4b8d      	ldr	r3, [pc, #564]	; (8003d4c <TIM6_DAC_IRQHandler+0x594>)
 8003b16:	edd3 7a00 	vldr	s15, [r3]
 8003b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b1e:	ee17 0a90 	vmov	r0, s15
 8003b22:	f7fc fcb5 	bl	8000490 <__aeabi_f2d>
 8003b26:	a384      	add	r3, pc, #528	; (adr r3, 8003d38 <TIM6_DAC_IRQHandler+0x580>)
 8003b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2c:	f7fc ff98 	bl	8000a60 <__aeabi_dcmpgt>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d027      	beq.n	8003b86 <TIM6_DAC_IRQHandler+0x3ce>
			delta_fi = (2*pi-quest_FI+fi);
 8003b36:	4b84      	ldr	r3, [pc, #528]	; (8003d48 <TIM6_DAC_IRQHandler+0x590>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fc fca8 	bl	8000490 <__aeabi_f2d>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	a17e      	add	r1, pc, #504	; (adr r1, 8003d40 <TIM6_DAC_IRQHandler+0x588>)
 8003b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b4a:	f7fc fb41 	bl	80001d0 <__aeabi_dsub>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4614      	mov	r4, r2
 8003b54:	461d      	mov	r5, r3
 8003b56:	4b7d      	ldr	r3, [pc, #500]	; (8003d4c <TIM6_DAC_IRQHandler+0x594>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fc fc98 	bl	8000490 <__aeabi_f2d>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4620      	mov	r0, r4
 8003b66:	4629      	mov	r1, r5
 8003b68:	f7fc fb34 	bl	80001d4 <__adddf3>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	f7fc ffa6 	bl	8000ac4 <__aeabi_d2f>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4a75      	ldr	r2, [pc, #468]	; (8003d50 <TIM6_DAC_IRQHandler+0x598>)
 8003b7c:	6013      	str	r3, [r2, #0]
			flaging = 1;
 8003b7e:	4b75      	ldr	r3, [pc, #468]	; (8003d54 <TIM6_DAC_IRQHandler+0x59c>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	e058      	b.n	8003c38 <TIM6_DAC_IRQHandler+0x480>
		 }
		 else {

			 delta_fi = (quest_FI - fi);
 8003b86:	4b70      	ldr	r3, [pc, #448]	; (8003d48 <TIM6_DAC_IRQHandler+0x590>)
 8003b88:	ed93 7a00 	vldr	s14, [r3]
 8003b8c:	4b6f      	ldr	r3, [pc, #444]	; (8003d4c <TIM6_DAC_IRQHandler+0x594>)
 8003b8e:	edd3 7a00 	vldr	s15, [r3]
 8003b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b96:	4b6e      	ldr	r3, [pc, #440]	; (8003d50 <TIM6_DAC_IRQHandler+0x598>)
 8003b98:	edc3 7a00 	vstr	s15, [r3]
			 flaging = 2;
 8003b9c:	4b6d      	ldr	r3, [pc, #436]	; (8003d54 <TIM6_DAC_IRQHandler+0x59c>)
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	e049      	b.n	8003c38 <TIM6_DAC_IRQHandler+0x480>
		 }

	 }
	 else{
		 if((fi-quest_FI)>pi){
 8003ba4:	4b69      	ldr	r3, [pc, #420]	; (8003d4c <TIM6_DAC_IRQHandler+0x594>)
 8003ba6:	ed93 7a00 	vldr	s14, [r3]
 8003baa:	4b67      	ldr	r3, [pc, #412]	; (8003d48 <TIM6_DAC_IRQHandler+0x590>)
 8003bac:	edd3 7a00 	vldr	s15, [r3]
 8003bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bb4:	ee17 0a90 	vmov	r0, s15
 8003bb8:	f7fc fc6a 	bl	8000490 <__aeabi_f2d>
 8003bbc:	a35e      	add	r3, pc, #376	; (adr r3, 8003d38 <TIM6_DAC_IRQHandler+0x580>)
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f7fc ff4d 	bl	8000a60 <__aeabi_dcmpgt>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d027      	beq.n	8003c1c <TIM6_DAC_IRQHandler+0x464>
			 flaging = 3;
 8003bcc:	4b61      	ldr	r3, [pc, #388]	; (8003d54 <TIM6_DAC_IRQHandler+0x59c>)
 8003bce:	2203      	movs	r2, #3
 8003bd0:	701a      	strb	r2, [r3, #0]
			delta_fi =  2*pi-fi+quest_FI;;
 8003bd2:	4b5e      	ldr	r3, [pc, #376]	; (8003d4c <TIM6_DAC_IRQHandler+0x594>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fc fc5a 	bl	8000490 <__aeabi_f2d>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	a157      	add	r1, pc, #348	; (adr r1, 8003d40 <TIM6_DAC_IRQHandler+0x588>)
 8003be2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003be6:	f7fc faf3 	bl	80001d0 <__aeabi_dsub>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4614      	mov	r4, r2
 8003bf0:	461d      	mov	r5, r3
 8003bf2:	4b55      	ldr	r3, [pc, #340]	; (8003d48 <TIM6_DAC_IRQHandler+0x590>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fc fc4a 	bl	8000490 <__aeabi_f2d>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4620      	mov	r0, r4
 8003c02:	4629      	mov	r1, r5
 8003c04:	f7fc fae6 	bl	80001d4 <__adddf3>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f7fc ff58 	bl	8000ac4 <__aeabi_d2f>
 8003c14:	4603      	mov	r3, r0
 8003c16:	4a4e      	ldr	r2, [pc, #312]	; (8003d50 <TIM6_DAC_IRQHandler+0x598>)
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e00d      	b.n	8003c38 <TIM6_DAC_IRQHandler+0x480>

		 }
		 else {
			 flaging = 4;
 8003c1c:	4b4d      	ldr	r3, [pc, #308]	; (8003d54 <TIM6_DAC_IRQHandler+0x59c>)
 8003c1e:	2204      	movs	r2, #4
 8003c20:	701a      	strb	r2, [r3, #0]
			 delta_fi = fi-quest_FI;
 8003c22:	4b4a      	ldr	r3, [pc, #296]	; (8003d4c <TIM6_DAC_IRQHandler+0x594>)
 8003c24:	ed93 7a00 	vldr	s14, [r3]
 8003c28:	4b47      	ldr	r3, [pc, #284]	; (8003d48 <TIM6_DAC_IRQHandler+0x590>)
 8003c2a:	edd3 7a00 	vldr	s15, [r3]
 8003c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c32:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <TIM6_DAC_IRQHandler+0x598>)
 8003c34:	edc3 7a00 	vstr	s15, [r3]
		 }


	 }

	 UV_convert_xy[0][0] = cos(fi);
 8003c38:	4b44      	ldr	r3, [pc, #272]	; (8003d4c <TIM6_DAC_IRQHandler+0x594>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fc fc27 	bl	8000490 <__aeabi_f2d>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	ec43 2b10 	vmov	d0, r2, r3
 8003c4a:	f004 fc95 	bl	8008578 <cos>
 8003c4e:	ec53 2b10 	vmov	r2, r3, d0
 8003c52:	4610      	mov	r0, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	f7fc ff35 	bl	8000ac4 <__aeabi_d2f>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4a3e      	ldr	r2, [pc, #248]	; (8003d58 <TIM6_DAC_IRQHandler+0x5a0>)
 8003c5e:	6013      	str	r3, [r2, #0]
	 UV_convert_xy[0][1] = sin(fi);
 8003c60:	4b3a      	ldr	r3, [pc, #232]	; (8003d4c <TIM6_DAC_IRQHandler+0x594>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fc fc13 	bl	8000490 <__aeabi_f2d>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	ec43 2b10 	vmov	d0, r2, r3
 8003c72:	f004 fcd5 	bl	8008620 <sin>
 8003c76:	ec53 2b10 	vmov	r2, r3, d0
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f7fc ff21 	bl	8000ac4 <__aeabi_d2f>
 8003c82:	4603      	mov	r3, r0
 8003c84:	4a34      	ldr	r2, [pc, #208]	; (8003d58 <TIM6_DAC_IRQHandler+0x5a0>)
 8003c86:	6053      	str	r3, [r2, #4]
	 UV_convert_xy[1][1] = cos(fi);
 8003c88:	4b30      	ldr	r3, [pc, #192]	; (8003d4c <TIM6_DAC_IRQHandler+0x594>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fc fbff 	bl	8000490 <__aeabi_f2d>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	ec43 2b10 	vmov	d0, r2, r3
 8003c9a:	f004 fc6d 	bl	8008578 <cos>
 8003c9e:	ec53 2b10 	vmov	r2, r3, d0
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	f7fc ff0d 	bl	8000ac4 <__aeabi_d2f>
 8003caa:	4603      	mov	r3, r0
 8003cac:	4a2a      	ldr	r2, [pc, #168]	; (8003d58 <TIM6_DAC_IRQHandler+0x5a0>)
 8003cae:	60d3      	str	r3, [r2, #12]
	 UV_convert_xy[1][0] = -sin(fi);
 8003cb0:	4b26      	ldr	r3, [pc, #152]	; (8003d4c <TIM6_DAC_IRQHandler+0x594>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fc fbeb 	bl	8000490 <__aeabi_f2d>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	ec43 2b10 	vmov	d0, r2, r3
 8003cc2:	f004 fcad 	bl	8008620 <sin>
 8003cc6:	ec53 2b10 	vmov	r2, r3, d0
 8003cca:	4610      	mov	r0, r2
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f7fc fef9 	bl	8000ac4 <__aeabi_d2f>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	ee07 3a90 	vmov	s15, r3
 8003cd8:	eef1 7a67 	vneg.f32	s15, s15
 8003cdc:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <TIM6_DAC_IRQHandler+0x5a0>)
 8003cde:	edc3 7a02 	vstr	s15, [r3, #8]

	 matrixMultiplyM2M(&delta_UV[0][0],1,2,&UV_convert_xy[0][0],2,2,&delta_XY[0][0]);
 8003ce2:	4b1e      	ldr	r3, [pc, #120]	; (8003d5c <TIM6_DAC_IRQHandler+0x5a4>)
 8003ce4:	9302      	str	r3, [sp, #8]
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	2302      	movs	r3, #2
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <TIM6_DAC_IRQHandler+0x5a0>)
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	481a      	ldr	r0, [pc, #104]	; (8003d60 <TIM6_DAC_IRQHandler+0x5a8>)
 8003cf6:	f7fe ff8d 	bl	8002c14 <matrixMultiplyM2M>
	 position_x = position_x +  delta_XY[0][0];
 8003cfa:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <TIM6_DAC_IRQHandler+0x5a4>)
 8003cfc:	ed93 7a00 	vldr	s14, [r3]
 8003d00:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <TIM6_DAC_IRQHandler+0x5ac>)
 8003d02:	edd3 7a00 	vldr	s15, [r3]
 8003d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d0a:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <TIM6_DAC_IRQHandler+0x5ac>)
 8003d0c:	edc3 7a00 	vstr	s15, [r3]
	 position_y = position_y +  delta_XY[0][1];
 8003d10:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <TIM6_DAC_IRQHandler+0x5a4>)
 8003d12:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d16:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <TIM6_DAC_IRQHandler+0x5b0>)
 8003d18:	edd3 7a00 	vldr	s15, [r3]
 8003d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d20:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <TIM6_DAC_IRQHandler+0x5b0>)
 8003d22:	edc3 7a00 	vstr	s15, [r3]


  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003d26:	4811      	ldr	r0, [pc, #68]	; (8003d6c <TIM6_DAC_IRQHandler+0x5b4>)
 8003d28:	f002 fe22 	bl	8006970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bdb0      	pop	{r4, r5, r7, pc}
 8003d32:	bf00      	nop
 8003d34:	f3af 8000 	nop.w
 8003d38:	54442d18 	.word	0x54442d18
 8003d3c:	400921fb 	.word	0x400921fb
 8003d40:	54442d18 	.word	0x54442d18
 8003d44:	401921fb 	.word	0x401921fb
 8003d48:	200002a4 	.word	0x200002a4
 8003d4c:	20000070 	.word	0x20000070
 8003d50:	20000230 	.word	0x20000230
 8003d54:	200003f6 	.word	0x200003f6
 8003d58:	20000408 	.word	0x20000408
 8003d5c:	20000420 	.word	0x20000420
 8003d60:	20000418 	.word	0x20000418
 8003d64:	20000428 	.word	0x20000428
 8003d68:	2000042c 	.word	0x2000042c
 8003d6c:	20000598 	.word	0x20000598

08003d70 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d74:	4802      	ldr	r0, [pc, #8]	; (8003d80 <DMA2_Stream2_IRQHandler+0x10>)
 8003d76:	f001 fa1f 	bl	80051b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	200007d4 	.word	0x200007d4

08003d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <SystemInit+0x20>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8e:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <SystemInit+0x20>)
 8003d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08c      	sub	sp, #48	; 0x30
 8003dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003dae:	f107 030c 	add.w	r3, r7, #12
 8003db2:	2224      	movs	r2, #36	; 0x24
 8003db4:	2100      	movs	r1, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f005 fc96 	bl	80096e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dbc:	1d3b      	adds	r3, r7, #4
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003dc4:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <MX_TIM1_Init+0xa8>)
 8003dc6:	4a23      	ldr	r2, [pc, #140]	; (8003e54 <MX_TIM1_Init+0xac>)
 8003dc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003dca:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <MX_TIM1_Init+0xa8>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd0:	4b1f      	ldr	r3, [pc, #124]	; (8003e50 <MX_TIM1_Init+0xa8>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003dd6:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <MX_TIM1_Init+0xa8>)
 8003dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ddc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dde:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <MX_TIM1_Init+0xa8>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <MX_TIM1_Init+0xa8>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dea:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <MX_TIM1_Init+0xa8>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003df0:	2301      	movs	r3, #1
 8003df2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e04:	2300      	movs	r3, #0
 8003e06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003e14:	f107 030c 	add.w	r3, r7, #12
 8003e18:	4619      	mov	r1, r3
 8003e1a:	480d      	ldr	r0, [pc, #52]	; (8003e50 <MX_TIM1_Init+0xa8>)
 8003e1c:	f002 fc74 	bl	8006708 <HAL_TIM_Encoder_Init>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003e26:	f7ff fc65 	bl	80036f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	4806      	ldr	r0, [pc, #24]	; (8003e50 <MX_TIM1_Init+0xa8>)
 8003e38:	f003 fa0c 	bl	8007254 <HAL_TIMEx_MasterConfigSynchronization>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003e42:	f7ff fc57 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003e46:	bf00      	nop
 8003e48:	3730      	adds	r7, #48	; 0x30
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000430 	.word	0x20000430
 8003e54:	40010000 	.word	0x40010000

08003e58 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08c      	sub	sp, #48	; 0x30
 8003e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e5e:	f107 030c 	add.w	r3, r7, #12
 8003e62:	2224      	movs	r2, #36	; 0x24
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f005 fc3e 	bl	80096e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e6c:	1d3b      	adds	r3, r7, #4
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e74:	4b21      	ldr	r3, [pc, #132]	; (8003efc <MX_TIM2_Init+0xa4>)
 8003e76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003e7c:	4b1f      	ldr	r3, [pc, #124]	; (8003efc <MX_TIM2_Init+0xa4>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e82:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <MX_TIM2_Init+0xa4>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003e88:	4b1c      	ldr	r3, [pc, #112]	; (8003efc <MX_TIM2_Init+0xa4>)
 8003e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e90:	4b1a      	ldr	r3, [pc, #104]	; (8003efc <MX_TIM2_Init+0xa4>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e96:	4b19      	ldr	r3, [pc, #100]	; (8003efc <MX_TIM2_Init+0xa4>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003ec0:	f107 030c 	add.w	r3, r7, #12
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	480d      	ldr	r0, [pc, #52]	; (8003efc <MX_TIM2_Init+0xa4>)
 8003ec8:	f002 fc1e 	bl	8006708 <HAL_TIM_Encoder_Init>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003ed2:	f7ff fc0f 	bl	80036f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4806      	ldr	r0, [pc, #24]	; (8003efc <MX_TIM2_Init+0xa4>)
 8003ee4:	f003 f9b6 	bl	8007254 <HAL_TIMEx_MasterConfigSynchronization>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003eee:	f7ff fc01 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ef2:	bf00      	nop
 8003ef4:	3730      	adds	r7, #48	; 0x30
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000478 	.word	0x20000478

08003f00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08c      	sub	sp, #48	; 0x30
 8003f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f06:	f107 030c 	add.w	r3, r7, #12
 8003f0a:	2224      	movs	r2, #36	; 0x24
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f005 fbea 	bl	80096e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f14:	1d3b      	adds	r3, r7, #4
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f1c:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <MX_TIM3_Init+0xa0>)
 8003f1e:	4a21      	ldr	r2, [pc, #132]	; (8003fa4 <MX_TIM3_Init+0xa4>)
 8003f20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003f22:	4b1f      	ldr	r3, [pc, #124]	; (8003fa0 <MX_TIM3_Init+0xa0>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f28:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <MX_TIM3_Init+0xa0>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003f2e:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <MX_TIM3_Init+0xa0>)
 8003f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f36:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <MX_TIM3_Init+0xa0>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f3c:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <MX_TIM3_Init+0xa0>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f46:	2300      	movs	r3, #0
 8003f48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f56:	2300      	movs	r3, #0
 8003f58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003f66:	f107 030c 	add.w	r3, r7, #12
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	480c      	ldr	r0, [pc, #48]	; (8003fa0 <MX_TIM3_Init+0xa0>)
 8003f6e:	f002 fbcb 	bl	8006708 <HAL_TIM_Encoder_Init>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003f78:	f7ff fbbc 	bl	80036f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f84:	1d3b      	adds	r3, r7, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	4805      	ldr	r0, [pc, #20]	; (8003fa0 <MX_TIM3_Init+0xa0>)
 8003f8a:	f003 f963 	bl	8007254 <HAL_TIMEx_MasterConfigSynchronization>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003f94:	f7ff fbae 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f98:	bf00      	nop
 8003f9a:	3730      	adds	r7, #48	; 0x30
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	200004c0 	.word	0x200004c0
 8003fa4:	40000400 	.word	0x40000400

08003fa8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fae:	f107 0320 	add.w	r3, r7, #32
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	60da      	str	r2, [r3, #12]
 8003fc4:	611a      	str	r2, [r3, #16]
 8003fc6:	615a      	str	r2, [r3, #20]
 8003fc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003fca:	4b32      	ldr	r3, [pc, #200]	; (8004094 <MX_TIM4_Init+0xec>)
 8003fcc:	4a32      	ldr	r2, [pc, #200]	; (8004098 <MX_TIM4_Init+0xf0>)
 8003fce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003fd0:	4b30      	ldr	r3, [pc, #192]	; (8004094 <MX_TIM4_Init+0xec>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	; (8004094 <MX_TIM4_Init+0xec>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003fdc:	4b2d      	ldr	r3, [pc, #180]	; (8004094 <MX_TIM4_Init+0xec>)
 8003fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fe2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fe4:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <MX_TIM4_Init+0xec>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fea:	4b2a      	ldr	r3, [pc, #168]	; (8004094 <MX_TIM4_Init+0xec>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003ff0:	4828      	ldr	r0, [pc, #160]	; (8004094 <MX_TIM4_Init+0xec>)
 8003ff2:	f002 fa71 	bl	80064d8 <HAL_TIM_PWM_Init>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003ffc:	f7ff fb7a 	bl	80036f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004000:	2300      	movs	r3, #0
 8004002:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004004:	2300      	movs	r3, #0
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004008:	f107 0320 	add.w	r3, r7, #32
 800400c:	4619      	mov	r1, r3
 800400e:	4821      	ldr	r0, [pc, #132]	; (8004094 <MX_TIM4_Init+0xec>)
 8004010:	f003 f920 	bl	8007254 <HAL_TIMEx_MasterConfigSynchronization>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800401a:	f7ff fb6b 	bl	80036f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800401e:	2360      	movs	r3, #96	; 0x60
 8004020:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800402e:	1d3b      	adds	r3, r7, #4
 8004030:	2200      	movs	r2, #0
 8004032:	4619      	mov	r1, r3
 8004034:	4817      	ldr	r0, [pc, #92]	; (8004094 <MX_TIM4_Init+0xec>)
 8004036:	f002 fda3 	bl	8006b80 <HAL_TIM_PWM_ConfigChannel>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004040:	f7ff fb58 	bl	80036f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004044:	1d3b      	adds	r3, r7, #4
 8004046:	2204      	movs	r2, #4
 8004048:	4619      	mov	r1, r3
 800404a:	4812      	ldr	r0, [pc, #72]	; (8004094 <MX_TIM4_Init+0xec>)
 800404c:	f002 fd98 	bl	8006b80 <HAL_TIM_PWM_ConfigChannel>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004056:	f7ff fb4d 	bl	80036f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800405a:	1d3b      	adds	r3, r7, #4
 800405c:	2208      	movs	r2, #8
 800405e:	4619      	mov	r1, r3
 8004060:	480c      	ldr	r0, [pc, #48]	; (8004094 <MX_TIM4_Init+0xec>)
 8004062:	f002 fd8d 	bl	8006b80 <HAL_TIM_PWM_ConfigChannel>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 800406c:	f7ff fb42 	bl	80036f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004070:	1d3b      	adds	r3, r7, #4
 8004072:	220c      	movs	r2, #12
 8004074:	4619      	mov	r1, r3
 8004076:	4807      	ldr	r0, [pc, #28]	; (8004094 <MX_TIM4_Init+0xec>)
 8004078:	f002 fd82 	bl	8006b80 <HAL_TIM_PWM_ConfigChannel>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8004082:	f7ff fb37 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004086:	4803      	ldr	r0, [pc, #12]	; (8004094 <MX_TIM4_Init+0xec>)
 8004088:	f000 fbf4 	bl	8004874 <HAL_TIM_MspPostInit>

}
 800408c:	bf00      	nop
 800408e:	3728      	adds	r7, #40	; 0x28
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000508 	.word	0x20000508
 8004098:	40000800 	.word	0x40000800

0800409c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08c      	sub	sp, #48	; 0x30
 80040a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80040a2:	f107 030c 	add.w	r3, r7, #12
 80040a6:	2224      	movs	r2, #36	; 0x24
 80040a8:	2100      	movs	r1, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f005 fb1c 	bl	80096e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040b0:	1d3b      	adds	r3, r7, #4
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80040b8:	4b20      	ldr	r3, [pc, #128]	; (800413c <MX_TIM5_Init+0xa0>)
 80040ba:	4a21      	ldr	r2, [pc, #132]	; (8004140 <MX_TIM5_Init+0xa4>)
 80040bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80040be:	4b1f      	ldr	r3, [pc, #124]	; (800413c <MX_TIM5_Init+0xa0>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <MX_TIM5_Init+0xa0>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80040ca:	4b1c      	ldr	r3, [pc, #112]	; (800413c <MX_TIM5_Init+0xa0>)
 80040cc:	f04f 32ff 	mov.w	r2, #4294967295
 80040d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040d2:	4b1a      	ldr	r3, [pc, #104]	; (800413c <MX_TIM5_Init+0xa0>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040d8:	4b18      	ldr	r3, [pc, #96]	; (800413c <MX_TIM5_Init+0xa0>)
 80040da:	2200      	movs	r2, #0
 80040dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80040de:	2301      	movs	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80040e2:	2300      	movs	r3, #0
 80040e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80040e6:	2301      	movs	r3, #1
 80040e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80040f2:	2300      	movs	r3, #0
 80040f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80040f6:	2301      	movs	r3, #1
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80040fa:	2300      	movs	r3, #0
 80040fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004102:	f107 030c 	add.w	r3, r7, #12
 8004106:	4619      	mov	r1, r3
 8004108:	480c      	ldr	r0, [pc, #48]	; (800413c <MX_TIM5_Init+0xa0>)
 800410a:	f002 fafd 	bl	8006708 <HAL_TIM_Encoder_Init>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8004114:	f7ff faee 	bl	80036f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004118:	2300      	movs	r3, #0
 800411a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800411c:	2300      	movs	r3, #0
 800411e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	4619      	mov	r1, r3
 8004124:	4805      	ldr	r0, [pc, #20]	; (800413c <MX_TIM5_Init+0xa0>)
 8004126:	f003 f895 	bl	8007254 <HAL_TIMEx_MasterConfigSynchronization>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8004130:	f7ff fae0 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004134:	bf00      	nop
 8004136:	3730      	adds	r7, #48	; 0x30
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20000550 	.word	0x20000550
 8004140:	40000c00 	.word	0x40000c00

08004144 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800414a:	463b      	mov	r3, r7
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004152:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <MX_TIM6_Init+0x64>)
 8004154:	4a15      	ldr	r2, [pc, #84]	; (80041ac <MX_TIM6_Init+0x68>)
 8004156:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 21;
 8004158:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <MX_TIM6_Init+0x64>)
 800415a:	2215      	movs	r2, #21
 800415c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800415e:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <MX_TIM6_Init+0x64>)
 8004160:	2200      	movs	r2, #0
 8004162:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 39999;
 8004164:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <MX_TIM6_Init+0x64>)
 8004166:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800416a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800416c:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <MX_TIM6_Init+0x64>)
 800416e:	2200      	movs	r2, #0
 8004170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004172:	480d      	ldr	r0, [pc, #52]	; (80041a8 <MX_TIM6_Init+0x64>)
 8004174:	f002 f8f0 	bl	8006358 <HAL_TIM_Base_Init>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800417e:	f7ff fab9 	bl	80036f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004182:	2300      	movs	r3, #0
 8004184:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004186:	2300      	movs	r3, #0
 8004188:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800418a:	463b      	mov	r3, r7
 800418c:	4619      	mov	r1, r3
 800418e:	4806      	ldr	r0, [pc, #24]	; (80041a8 <MX_TIM6_Init+0x64>)
 8004190:	f003 f860 	bl	8007254 <HAL_TIMEx_MasterConfigSynchronization>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800419a:	f7ff faab 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000598 	.word	0x20000598
 80041ac:	40001000 	.word	0x40001000

080041b0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041b6:	463b      	mov	r3, r7
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80041be:	4b15      	ldr	r3, [pc, #84]	; (8004214 <MX_TIM7_Init+0x64>)
 80041c0:	4a15      	ldr	r2, [pc, #84]	; (8004218 <MX_TIM7_Init+0x68>)
 80041c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <MX_TIM7_Init+0x64>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <MX_TIM7_Init+0x64>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80041d0:	4b10      	ldr	r3, [pc, #64]	; (8004214 <MX_TIM7_Init+0x64>)
 80041d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041d6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <MX_TIM7_Init+0x64>)
 80041da:	2200      	movs	r2, #0
 80041dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80041de:	480d      	ldr	r0, [pc, #52]	; (8004214 <MX_TIM7_Init+0x64>)
 80041e0:	f002 f8ba 	bl	8006358 <HAL_TIM_Base_Init>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80041ea:	f7ff fa83 	bl	80036f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ee:	2300      	movs	r3, #0
 80041f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80041f6:	463b      	mov	r3, r7
 80041f8:	4619      	mov	r1, r3
 80041fa:	4806      	ldr	r0, [pc, #24]	; (8004214 <MX_TIM7_Init+0x64>)
 80041fc:	f003 f82a 	bl	8007254 <HAL_TIMEx_MasterConfigSynchronization>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8004206:	f7ff fa75 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	200005e0 	.word	0x200005e0
 8004218:	40001400 	.word	0x40001400

0800421c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08c      	sub	sp, #48	; 0x30
 8004220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004222:	f107 030c 	add.w	r3, r7, #12
 8004226:	2224      	movs	r2, #36	; 0x24
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f005 fa5c 	bl	80096e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004230:	1d3b      	adds	r3, r7, #4
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004238:	4b22      	ldr	r3, [pc, #136]	; (80042c4 <MX_TIM8_Init+0xa8>)
 800423a:	4a23      	ldr	r2, [pc, #140]	; (80042c8 <MX_TIM8_Init+0xac>)
 800423c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800423e:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <MX_TIM8_Init+0xa8>)
 8004240:	2200      	movs	r2, #0
 8004242:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004244:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <MX_TIM8_Init+0xa8>)
 8004246:	2200      	movs	r2, #0
 8004248:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800424a:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <MX_TIM8_Init+0xa8>)
 800424c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004250:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004252:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <MX_TIM8_Init+0xa8>)
 8004254:	2200      	movs	r2, #0
 8004256:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004258:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <MX_TIM8_Init+0xa8>)
 800425a:	2200      	movs	r2, #0
 800425c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800425e:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <MX_TIM8_Init+0xa8>)
 8004260:	2200      	movs	r2, #0
 8004262:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004264:	2301      	movs	r3, #1
 8004266:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800426c:	2301      	movs	r3, #1
 800426e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004270:	2300      	movs	r3, #0
 8004272:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004278:	2300      	movs	r3, #0
 800427a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800427c:	2301      	movs	r3, #1
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004280:	2300      	movs	r3, #0
 8004282:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004288:	f107 030c 	add.w	r3, r7, #12
 800428c:	4619      	mov	r1, r3
 800428e:	480d      	ldr	r0, [pc, #52]	; (80042c4 <MX_TIM8_Init+0xa8>)
 8004290:	f002 fa3a 	bl	8006708 <HAL_TIM_Encoder_Init>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800429a:	f7ff fa2b 	bl	80036f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800429e:	2300      	movs	r3, #0
 80042a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80042a6:	1d3b      	adds	r3, r7, #4
 80042a8:	4619      	mov	r1, r3
 80042aa:	4806      	ldr	r0, [pc, #24]	; (80042c4 <MX_TIM8_Init+0xa8>)
 80042ac:	f002 ffd2 	bl	8007254 <HAL_TIMEx_MasterConfigSynchronization>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80042b6:	f7ff fa1d 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80042ba:	bf00      	nop
 80042bc:	3730      	adds	r7, #48	; 0x30
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000628 	.word	0x20000628
 80042c8:	40010400 	.word	0x40010400

080042cc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	609a      	str	r2, [r3, #8]
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	611a      	str	r2, [r3, #16]
 80042e0:	615a      	str	r2, [r3, #20]
 80042e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80042e4:	4b20      	ldr	r3, [pc, #128]	; (8004368 <MX_TIM9_Init+0x9c>)
 80042e6:	4a21      	ldr	r2, [pc, #132]	; (800436c <MX_TIM9_Init+0xa0>)
 80042e8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 3359;
 80042ea:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <MX_TIM9_Init+0x9c>)
 80042ec:	f640 521f 	movw	r2, #3359	; 0xd1f
 80042f0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042f2:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <MX_TIM9_Init+0x9c>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80042f8:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <MX_TIM9_Init+0x9c>)
 80042fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042fe:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004300:	4b19      	ldr	r3, [pc, #100]	; (8004368 <MX_TIM9_Init+0x9c>)
 8004302:	2200      	movs	r2, #0
 8004304:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004306:	4b18      	ldr	r3, [pc, #96]	; (8004368 <MX_TIM9_Init+0x9c>)
 8004308:	2200      	movs	r2, #0
 800430a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800430c:	4816      	ldr	r0, [pc, #88]	; (8004368 <MX_TIM9_Init+0x9c>)
 800430e:	f002 f8e3 	bl	80064d8 <HAL_TIM_PWM_Init>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8004318:	f7ff f9ec 	bl	80036f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800431c:	2360      	movs	r3, #96	; 0x60
 800431e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800432c:	1d3b      	adds	r3, r7, #4
 800432e:	2200      	movs	r2, #0
 8004330:	4619      	mov	r1, r3
 8004332:	480d      	ldr	r0, [pc, #52]	; (8004368 <MX_TIM9_Init+0x9c>)
 8004334:	f002 fc24 	bl	8006b80 <HAL_TIM_PWM_ConfigChannel>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 800433e:	f7ff f9d9 	bl	80036f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	2204      	movs	r2, #4
 8004346:	4619      	mov	r1, r3
 8004348:	4807      	ldr	r0, [pc, #28]	; (8004368 <MX_TIM9_Init+0x9c>)
 800434a:	f002 fc19 	bl	8006b80 <HAL_TIM_PWM_ConfigChannel>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 8004354:	f7ff f9ce 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8004358:	4803      	ldr	r0, [pc, #12]	; (8004368 <MX_TIM9_Init+0x9c>)
 800435a:	f000 fa8b 	bl	8004874 <HAL_TIM_MspPostInit>

}
 800435e:	bf00      	nop
 8004360:	3720      	adds	r7, #32
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20000670 	.word	0x20000670
 800436c:	40014000 	.word	0x40014000

08004370 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004374:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <MX_TIM10_Init+0x40>)
 8004376:	4a0f      	ldr	r2, [pc, #60]	; (80043b4 <MX_TIM10_Init+0x44>)
 8004378:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 90;
 800437a:	4b0d      	ldr	r3, [pc, #52]	; (80043b0 <MX_TIM10_Init+0x40>)
 800437c:	225a      	movs	r2, #90	; 0x5a
 800437e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <MX_TIM10_Init+0x40>)
 8004382:	2200      	movs	r2, #0
 8004384:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 39999;
 8004386:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <MX_TIM10_Init+0x40>)
 8004388:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800438c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <MX_TIM10_Init+0x40>)
 8004390:	2200      	movs	r2, #0
 8004392:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <MX_TIM10_Init+0x40>)
 8004396:	2200      	movs	r2, #0
 8004398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800439a:	4805      	ldr	r0, [pc, #20]	; (80043b0 <MX_TIM10_Init+0x40>)
 800439c:	f001 ffdc 	bl	8006358 <HAL_TIM_Base_Init>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80043a6:	f7ff f9a5 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80043aa:	bf00      	nop
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	200006b8 	.word	0x200006b8
 80043b4:	40014400 	.word	0x40014400

080043b8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80043bc:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <MX_TIM11_Init+0x40>)
 80043be:	4a0f      	ldr	r2, [pc, #60]	; (80043fc <MX_TIM11_Init+0x44>)
 80043c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 90;
 80043c2:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <MX_TIM11_Init+0x40>)
 80043c4:	225a      	movs	r2, #90	; 0x5a
 80043c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <MX_TIM11_Init+0x40>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 39999;
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <MX_TIM11_Init+0x40>)
 80043d0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80043d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043d6:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <MX_TIM11_Init+0x40>)
 80043d8:	2200      	movs	r2, #0
 80043da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <MX_TIM11_Init+0x40>)
 80043de:	2200      	movs	r2, #0
 80043e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80043e2:	4805      	ldr	r0, [pc, #20]	; (80043f8 <MX_TIM11_Init+0x40>)
 80043e4:	f001 ffb8 	bl	8006358 <HAL_TIM_Base_Init>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80043ee:	f7ff f981 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80043f2:	bf00      	nop
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000700 	.word	0x20000700
 80043fc:	40014800 	.word	0x40014800

08004400 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004406:	1d3b      	adds	r3, r7, #4
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	609a      	str	r2, [r3, #8]
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	611a      	str	r2, [r3, #16]
 8004414:	615a      	str	r2, [r3, #20]
 8004416:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004418:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <MX_TIM12_Init+0x84>)
 800441a:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <MX_TIM12_Init+0x88>)
 800441c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800441e:	4b19      	ldr	r3, [pc, #100]	; (8004484 <MX_TIM12_Init+0x84>)
 8004420:	2200      	movs	r2, #0
 8004422:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004424:	4b17      	ldr	r3, [pc, #92]	; (8004484 <MX_TIM12_Init+0x84>)
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800442a:	4b16      	ldr	r3, [pc, #88]	; (8004484 <MX_TIM12_Init+0x84>)
 800442c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004430:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004432:	4b14      	ldr	r3, [pc, #80]	; (8004484 <MX_TIM12_Init+0x84>)
 8004434:	2200      	movs	r2, #0
 8004436:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004438:	4b12      	ldr	r3, [pc, #72]	; (8004484 <MX_TIM12_Init+0x84>)
 800443a:	2200      	movs	r2, #0
 800443c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800443e:	4811      	ldr	r0, [pc, #68]	; (8004484 <MX_TIM12_Init+0x84>)
 8004440:	f002 f84a 	bl	80064d8 <HAL_TIM_PWM_Init>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800444a:	f7ff f953 	bl	80036f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800444e:	2360      	movs	r3, #96	; 0x60
 8004450:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800445e:	1d3b      	adds	r3, r7, #4
 8004460:	2200      	movs	r2, #0
 8004462:	4619      	mov	r1, r3
 8004464:	4807      	ldr	r0, [pc, #28]	; (8004484 <MX_TIM12_Init+0x84>)
 8004466:	f002 fb8b 	bl	8006b80 <HAL_TIM_PWM_ConfigChannel>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8004470:	f7ff f940 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004474:	4803      	ldr	r0, [pc, #12]	; (8004484 <MX_TIM12_Init+0x84>)
 8004476:	f000 f9fd 	bl	8004874 <HAL_TIM_MspPostInit>

}
 800447a:	bf00      	nop
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000748 	.word	0x20000748
 8004488:	40001800 	.word	0x40001800

0800448c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b092      	sub	sp, #72	; 0x48
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004494:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	60da      	str	r2, [r3, #12]
 80044a2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a8d      	ldr	r2, [pc, #564]	; (80046e0 <HAL_TIM_Encoder_MspInit+0x254>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d12d      	bne.n	800450a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	633b      	str	r3, [r7, #48]	; 0x30
 80044b2:	4b8c      	ldr	r3, [pc, #560]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	4a8b      	ldr	r2, [pc, #556]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	6453      	str	r3, [r2, #68]	; 0x44
 80044be:	4b89      	ldr	r3, [pc, #548]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	633b      	str	r3, [r7, #48]	; 0x30
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ce:	4b85      	ldr	r3, [pc, #532]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	4a84      	ldr	r2, [pc, #528]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 80044d4:	f043 0310 	orr.w	r3, r3, #16
 80044d8:	6313      	str	r3, [r2, #48]	; 0x30
 80044da:	4b82      	ldr	r3, [pc, #520]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_4_A_Pin|ENC_4_B_Pin;
 80044e6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80044ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ec:	2302      	movs	r3, #2
 80044ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044f0:	2301      	movs	r3, #1
 80044f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f4:	2300      	movs	r3, #0
 80044f6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80044f8:	2301      	movs	r3, #1
 80044fa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004500:	4619      	mov	r1, r3
 8004502:	4879      	ldr	r0, [pc, #484]	; (80046e8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8004504:	f001 f8c2 	bl	800568c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004508:	e0e5      	b.n	80046d6 <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM2)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004512:	d14b      	bne.n	80045ac <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004514:	2300      	movs	r3, #0
 8004516:	62bb      	str	r3, [r7, #40]	; 0x28
 8004518:	4b72      	ldr	r3, [pc, #456]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	4a71      	ldr	r2, [pc, #452]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	6413      	str	r3, [r2, #64]	; 0x40
 8004524:	4b6f      	ldr	r3, [pc, #444]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	62bb      	str	r3, [r7, #40]	; 0x28
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004530:	2300      	movs	r3, #0
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
 8004534:	4b6b      	ldr	r3, [pc, #428]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	4a6a      	ldr	r2, [pc, #424]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	6313      	str	r3, [r2, #48]	; 0x30
 8004540:	4b68      	ldr	r3, [pc, #416]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 8004542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800454c:	2300      	movs	r3, #0
 800454e:	623b      	str	r3, [r7, #32]
 8004550:	4b64      	ldr	r3, [pc, #400]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	4a63      	ldr	r2, [pc, #396]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 8004556:	f043 0302 	orr.w	r3, r3, #2
 800455a:	6313      	str	r3, [r2, #48]	; 0x30
 800455c:	4b61      	ldr	r3, [pc, #388]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	623b      	str	r3, [r7, #32]
 8004566:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = ENC_2_A_Pin;
 8004568:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456e:	2302      	movs	r3, #2
 8004570:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004572:	2301      	movs	r3, #1
 8004574:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004576:	2300      	movs	r3, #0
 8004578:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800457a:	2301      	movs	r3, #1
 800457c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ENC_2_A_GPIO_Port, &GPIO_InitStruct);
 800457e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004582:	4619      	mov	r1, r3
 8004584:	4859      	ldr	r0, [pc, #356]	; (80046ec <HAL_TIM_Encoder_MspInit+0x260>)
 8004586:	f001 f881 	bl	800568c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_2_B_Pin;
 800458a:	2308      	movs	r3, #8
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458e:	2302      	movs	r3, #2
 8004590:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004592:	2301      	movs	r3, #1
 8004594:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004596:	2300      	movs	r3, #0
 8004598:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800459a:	2301      	movs	r3, #1
 800459c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ENC_2_B_GPIO_Port, &GPIO_InitStruct);
 800459e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80045a2:	4619      	mov	r1, r3
 80045a4:	4852      	ldr	r0, [pc, #328]	; (80046f0 <HAL_TIM_Encoder_MspInit+0x264>)
 80045a6:	f001 f871 	bl	800568c <HAL_GPIO_Init>
}
 80045aa:	e094      	b.n	80046d6 <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM3)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a50      	ldr	r2, [pc, #320]	; (80046f4 <HAL_TIM_Encoder_MspInit+0x268>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d12c      	bne.n	8004610 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	4b4a      	ldr	r3, [pc, #296]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	4a49      	ldr	r2, [pc, #292]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 80045c0:	f043 0302 	orr.w	r3, r3, #2
 80045c4:	6413      	str	r3, [r2, #64]	; 0x40
 80045c6:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	61fb      	str	r3, [r7, #28]
 80045d0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	4b43      	ldr	r3, [pc, #268]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	4a42      	ldr	r2, [pc, #264]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	6313      	str	r3, [r2, #48]	; 0x30
 80045e2:	4b40      	ldr	r3, [pc, #256]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_3_A_Pin|ENC_3_B_Pin;
 80045ee:	23c0      	movs	r3, #192	; 0xc0
 80045f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f2:	2302      	movs	r3, #2
 80045f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045f6:	2301      	movs	r3, #1
 80045f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fa:	2300      	movs	r3, #0
 80045fc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80045fe:	2302      	movs	r3, #2
 8004600:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004602:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004606:	4619      	mov	r1, r3
 8004608:	4838      	ldr	r0, [pc, #224]	; (80046ec <HAL_TIM_Encoder_MspInit+0x260>)
 800460a:	f001 f83f 	bl	800568c <HAL_GPIO_Init>
}
 800460e:	e062      	b.n	80046d6 <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM5)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a38      	ldr	r2, [pc, #224]	; (80046f8 <HAL_TIM_Encoder_MspInit+0x26c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d12c      	bne.n	8004674 <HAL_TIM_Encoder_MspInit+0x1e8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	4a30      	ldr	r2, [pc, #192]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 8004624:	f043 0308 	orr.w	r3, r3, #8
 8004628:	6413      	str	r3, [r2, #64]	; 0x40
 800462a:	4b2e      	ldr	r3, [pc, #184]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	4b2a      	ldr	r3, [pc, #168]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	4a29      	ldr	r2, [pc, #164]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6313      	str	r3, [r2, #48]	; 0x30
 8004646:	4b27      	ldr	r3, [pc, #156]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_5_A_Pin|ENC_5_B_Pin;
 8004652:	2303      	movs	r3, #3
 8004654:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004656:	2302      	movs	r3, #2
 8004658:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465a:	2300      	movs	r3, #0
 800465c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800465e:	2300      	movs	r3, #0
 8004660:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004662:	2302      	movs	r3, #2
 8004664:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004666:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800466a:	4619      	mov	r1, r3
 800466c:	481f      	ldr	r0, [pc, #124]	; (80046ec <HAL_TIM_Encoder_MspInit+0x260>)
 800466e:	f001 f80d 	bl	800568c <HAL_GPIO_Init>
}
 8004672:	e030      	b.n	80046d6 <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM8)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a20      	ldr	r2, [pc, #128]	; (80046fc <HAL_TIM_Encoder_MspInit+0x270>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d12b      	bne.n	80046d6 <HAL_TIM_Encoder_MspInit+0x24a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 8004688:	f043 0302 	orr.w	r3, r3, #2
 800468c:	6453      	str	r3, [r2, #68]	; 0x44
 800468e:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	4a10      	ldr	r2, [pc, #64]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 80046a4:	f043 0304 	orr.w	r3, r3, #4
 80046a8:	6313      	str	r3, [r2, #48]	; 0x30
 80046aa:	4b0e      	ldr	r3, [pc, #56]	; (80046e4 <HAL_TIM_Encoder_MspInit+0x258>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_1_A_Pin|ENC_1_B_Pin;
 80046b6:	23c0      	movs	r3, #192	; 0xc0
 80046b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ba:	2302      	movs	r3, #2
 80046bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046be:	2301      	movs	r3, #1
 80046c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c2:	2300      	movs	r3, #0
 80046c4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80046c6:	2303      	movs	r3, #3
 80046c8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046ce:	4619      	mov	r1, r3
 80046d0:	480b      	ldr	r0, [pc, #44]	; (8004700 <HAL_TIM_Encoder_MspInit+0x274>)
 80046d2:	f000 ffdb 	bl	800568c <HAL_GPIO_Init>
}
 80046d6:	bf00      	nop
 80046d8:	3748      	adds	r7, #72	; 0x48
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40010000 	.word	0x40010000
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40021000 	.word	0x40021000
 80046ec:	40020000 	.word	0x40020000
 80046f0:	40020400 	.word	0x40020400
 80046f4:	40000400 	.word	0x40000400
 80046f8:	40000c00 	.word	0x40000c00
 80046fc:	40010400 	.word	0x40010400
 8004700:	40020800 	.word	0x40020800

08004704 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1f      	ldr	r2, [pc, #124]	; (8004790 <HAL_TIM_PWM_MspInit+0x8c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d10e      	bne.n	8004734 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	4b1e      	ldr	r3, [pc, #120]	; (8004794 <HAL_TIM_PWM_MspInit+0x90>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	4a1d      	ldr	r2, [pc, #116]	; (8004794 <HAL_TIM_PWM_MspInit+0x90>)
 8004720:	f043 0304 	orr.w	r3, r3, #4
 8004724:	6413      	str	r3, [r2, #64]	; 0x40
 8004726:	4b1b      	ldr	r3, [pc, #108]	; (8004794 <HAL_TIM_PWM_MspInit+0x90>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8004732:	e026      	b.n	8004782 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM9)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a17      	ldr	r2, [pc, #92]	; (8004798 <HAL_TIM_PWM_MspInit+0x94>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d10e      	bne.n	800475c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	4b14      	ldr	r3, [pc, #80]	; (8004794 <HAL_TIM_PWM_MspInit+0x90>)
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	4a13      	ldr	r2, [pc, #76]	; (8004794 <HAL_TIM_PWM_MspInit+0x90>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474c:	6453      	str	r3, [r2, #68]	; 0x44
 800474e:	4b11      	ldr	r3, [pc, #68]	; (8004794 <HAL_TIM_PWM_MspInit+0x90>)
 8004750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	693b      	ldr	r3, [r7, #16]
}
 800475a:	e012      	b.n	8004782 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a0e      	ldr	r2, [pc, #56]	; (800479c <HAL_TIM_PWM_MspInit+0x98>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d10d      	bne.n	8004782 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <HAL_TIM_PWM_MspInit+0x90>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	4a09      	ldr	r2, [pc, #36]	; (8004794 <HAL_TIM_PWM_MspInit+0x90>)
 8004770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004774:	6413      	str	r3, [r2, #64]	; 0x40
 8004776:	4b07      	ldr	r3, [pc, #28]	; (8004794 <HAL_TIM_PWM_MspInit+0x90>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
}
 8004782:	bf00      	nop
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40000800 	.word	0x40000800
 8004794:	40023800 	.word	0x40023800
 8004798:	40014000 	.word	0x40014000
 800479c:	40001800 	.word	0x40001800

080047a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a2c      	ldr	r2, [pc, #176]	; (8004860 <HAL_TIM_Base_MspInit+0xc0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d116      	bne.n	80047e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	4b2b      	ldr	r3, [pc, #172]	; (8004864 <HAL_TIM_Base_MspInit+0xc4>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	4a2a      	ldr	r2, [pc, #168]	; (8004864 <HAL_TIM_Base_MspInit+0xc4>)
 80047bc:	f043 0310 	orr.w	r3, r3, #16
 80047c0:	6413      	str	r3, [r2, #64]	; 0x40
 80047c2:	4b28      	ldr	r3, [pc, #160]	; (8004864 <HAL_TIM_Base_MspInit+0xc4>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80047ce:	2200      	movs	r2, #0
 80047d0:	2100      	movs	r1, #0
 80047d2:	2036      	movs	r0, #54	; 0x36
 80047d4:	f000 fb21 	bl	8004e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80047d8:	2036      	movs	r0, #54	; 0x36
 80047da:	f000 fb3a 	bl	8004e52 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80047de:	e03a      	b.n	8004856 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a20      	ldr	r2, [pc, #128]	; (8004868 <HAL_TIM_Base_MspInit+0xc8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d10e      	bne.n	8004808 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	4b1d      	ldr	r3, [pc, #116]	; (8004864 <HAL_TIM_Base_MspInit+0xc4>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	4a1c      	ldr	r2, [pc, #112]	; (8004864 <HAL_TIM_Base_MspInit+0xc4>)
 80047f4:	f043 0320 	orr.w	r3, r3, #32
 80047f8:	6413      	str	r3, [r2, #64]	; 0x40
 80047fa:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <HAL_TIM_Base_MspInit+0xc4>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	693b      	ldr	r3, [r7, #16]
}
 8004806:	e026      	b.n	8004856 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a17      	ldr	r2, [pc, #92]	; (800486c <HAL_TIM_Base_MspInit+0xcc>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d10e      	bne.n	8004830 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	4b13      	ldr	r3, [pc, #76]	; (8004864 <HAL_TIM_Base_MspInit+0xc4>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	4a12      	ldr	r2, [pc, #72]	; (8004864 <HAL_TIM_Base_MspInit+0xc4>)
 800481c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004820:	6453      	str	r3, [r2, #68]	; 0x44
 8004822:	4b10      	ldr	r3, [pc, #64]	; (8004864 <HAL_TIM_Base_MspInit+0xc4>)
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
}
 800482e:	e012      	b.n	8004856 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a0e      	ldr	r2, [pc, #56]	; (8004870 <HAL_TIM_Base_MspInit+0xd0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d10d      	bne.n	8004856 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	4b09      	ldr	r3, [pc, #36]	; (8004864 <HAL_TIM_Base_MspInit+0xc4>)
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	4a08      	ldr	r2, [pc, #32]	; (8004864 <HAL_TIM_Base_MspInit+0xc4>)
 8004844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004848:	6453      	str	r3, [r2, #68]	; 0x44
 800484a:	4b06      	ldr	r3, [pc, #24]	; (8004864 <HAL_TIM_Base_MspInit+0xc4>)
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004852:	60bb      	str	r3, [r7, #8]
 8004854:	68bb      	ldr	r3, [r7, #8]
}
 8004856:	bf00      	nop
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40001000 	.word	0x40001000
 8004864:	40023800 	.word	0x40023800
 8004868:	40001400 	.word	0x40001400
 800486c:	40014400 	.word	0x40014400
 8004870:	40014800 	.word	0x40014800

08004874 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08a      	sub	sp, #40	; 0x28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800487c:	f107 0314 	add.w	r3, r7, #20
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	605a      	str	r2, [r3, #4]
 8004886:	609a      	str	r2, [r3, #8]
 8004888:	60da      	str	r2, [r3, #12]
 800488a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a37      	ldr	r2, [pc, #220]	; (8004970 <HAL_TIM_MspPostInit+0xfc>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d11f      	bne.n	80048d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	4b36      	ldr	r3, [pc, #216]	; (8004974 <HAL_TIM_MspPostInit+0x100>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	4a35      	ldr	r2, [pc, #212]	; (8004974 <HAL_TIM_MspPostInit+0x100>)
 80048a0:	f043 0308 	orr.w	r3, r3, #8
 80048a4:	6313      	str	r3, [r2, #48]	; 0x30
 80048a6:	4b33      	ldr	r3, [pc, #204]	; (8004974 <HAL_TIM_MspPostInit+0x100>)
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = pwm1_MT_Pin|pwm2_MT_Pin|pwm3_MT_Pin|pwm4_MT_Pin;
 80048b2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80048b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b8:	2302      	movs	r3, #2
 80048ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048bc:	2301      	movs	r3, #1
 80048be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048c0:	2300      	movs	r3, #0
 80048c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80048c4:	2302      	movs	r3, #2
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	4619      	mov	r1, r3
 80048ce:	482a      	ldr	r0, [pc, #168]	; (8004978 <HAL_TIM_MspPostInit+0x104>)
 80048d0:	f000 fedc 	bl	800568c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80048d4:	e047      	b.n	8004966 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM9)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a28      	ldr	r2, [pc, #160]	; (800497c <HAL_TIM_MspPostInit+0x108>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d11e      	bne.n	800491e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	4b23      	ldr	r3, [pc, #140]	; (8004974 <HAL_TIM_MspPostInit+0x100>)
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	4a22      	ldr	r2, [pc, #136]	; (8004974 <HAL_TIM_MspPostInit+0x100>)
 80048ea:	f043 0310 	orr.w	r3, r3, #16
 80048ee:	6313      	str	r3, [r2, #48]	; 0x30
 80048f0:	4b20      	ldr	r3, [pc, #128]	; (8004974 <HAL_TIM_MspPostInit+0x100>)
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = servo_2_Pin|servo_1_Pin;
 80048fc:	2360      	movs	r3, #96	; 0x60
 80048fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004900:	2302      	movs	r3, #2
 8004902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004904:	2301      	movs	r3, #1
 8004906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004908:	2300      	movs	r3, #0
 800490a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800490c:	2303      	movs	r3, #3
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004910:	f107 0314 	add.w	r3, r7, #20
 8004914:	4619      	mov	r1, r3
 8004916:	481a      	ldr	r0, [pc, #104]	; (8004980 <HAL_TIM_MspPostInit+0x10c>)
 8004918:	f000 feb8 	bl	800568c <HAL_GPIO_Init>
}
 800491c:	e023      	b.n	8004966 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM12)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a18      	ldr	r2, [pc, #96]	; (8004984 <HAL_TIM_MspPostInit+0x110>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d11e      	bne.n	8004966 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004928:	2300      	movs	r3, #0
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	4b11      	ldr	r3, [pc, #68]	; (8004974 <HAL_TIM_MspPostInit+0x100>)
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	4a10      	ldr	r2, [pc, #64]	; (8004974 <HAL_TIM_MspPostInit+0x100>)
 8004932:	f043 0302 	orr.w	r3, r3, #2
 8004936:	6313      	str	r3, [r2, #48]	; 0x30
 8004938:	4b0e      	ldr	r3, [pc, #56]	; (8004974 <HAL_TIM_MspPostInit+0x100>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = pwm5_MT_Pin;
 8004944:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800494a:	2302      	movs	r3, #2
 800494c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004952:	2300      	movs	r3, #0
 8004954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004956:	2309      	movs	r3, #9
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(pwm5_MT_GPIO_Port, &GPIO_InitStruct);
 800495a:	f107 0314 	add.w	r3, r7, #20
 800495e:	4619      	mov	r1, r3
 8004960:	4809      	ldr	r0, [pc, #36]	; (8004988 <HAL_TIM_MspPostInit+0x114>)
 8004962:	f000 fe93 	bl	800568c <HAL_GPIO_Init>
}
 8004966:	bf00      	nop
 8004968:	3728      	adds	r7, #40	; 0x28
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40000800 	.word	0x40000800
 8004974:	40023800 	.word	0x40023800
 8004978:	40020c00 	.word	0x40020c00
 800497c:	40014000 	.word	0x40014000
 8004980:	40021000 	.word	0x40021000
 8004984:	40001800 	.word	0x40001800
 8004988:	40020400 	.word	0x40020400

0800498c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004990:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 8004992:	4a12      	ldr	r2, [pc, #72]	; (80049dc <MX_USART1_UART_Init+0x50>)
 8004994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 8004998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800499c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800499e:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049a4:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 80049b2:	220c      	movs	r2, #12
 80049b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049b6:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 80049be:	2200      	movs	r2, #0
 80049c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80049c2:	4805      	ldr	r0, [pc, #20]	; (80049d8 <MX_USART1_UART_Init+0x4c>)
 80049c4:	f002 fcd6 	bl	8007374 <HAL_UART_Init>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80049ce:	f7fe fe91 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80049d2:	bf00      	nop
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000790 	.word	0x20000790
 80049dc:	40011000 	.word	0x40011000

080049e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08a      	sub	sp, #40	; 0x28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e8:	f107 0314 	add.w	r3, r7, #20
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	605a      	str	r2, [r3, #4]
 80049f2:	609a      	str	r2, [r3, #8]
 80049f4:	60da      	str	r2, [r3, #12]
 80049f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a34      	ldr	r2, [pc, #208]	; (8004ad0 <HAL_UART_MspInit+0xf0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d162      	bne.n	8004ac8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	4b33      	ldr	r3, [pc, #204]	; (8004ad4 <HAL_UART_MspInit+0xf4>)
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0a:	4a32      	ldr	r2, [pc, #200]	; (8004ad4 <HAL_UART_MspInit+0xf4>)
 8004a0c:	f043 0310 	orr.w	r3, r3, #16
 8004a10:	6453      	str	r3, [r2, #68]	; 0x44
 8004a12:	4b30      	ldr	r3, [pc, #192]	; (8004ad4 <HAL_UART_MspInit+0xf4>)
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	f003 0310 	and.w	r3, r3, #16
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	4b2c      	ldr	r3, [pc, #176]	; (8004ad4 <HAL_UART_MspInit+0xf4>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	4a2b      	ldr	r2, [pc, #172]	; (8004ad4 <HAL_UART_MspInit+0xf4>)
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a2e:	4b29      	ldr	r3, [pc, #164]	; (8004ad4 <HAL_UART_MspInit+0xf4>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a3a:	23c0      	movs	r3, #192	; 0xc0
 8004a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a3e:	2302      	movs	r3, #2
 8004a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a46:	2303      	movs	r3, #3
 8004a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a4a:	2307      	movs	r3, #7
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a4e:	f107 0314 	add.w	r3, r7, #20
 8004a52:	4619      	mov	r1, r3
 8004a54:	4820      	ldr	r0, [pc, #128]	; (8004ad8 <HAL_UART_MspInit+0xf8>)
 8004a56:	f000 fe19 	bl	800568c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004a5a:	4b20      	ldr	r3, [pc, #128]	; (8004adc <HAL_UART_MspInit+0xfc>)
 8004a5c:	4a20      	ldr	r2, [pc, #128]	; (8004ae0 <HAL_UART_MspInit+0x100>)
 8004a5e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004a60:	4b1e      	ldr	r3, [pc, #120]	; (8004adc <HAL_UART_MspInit+0xfc>)
 8004a62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a66:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a68:	4b1c      	ldr	r3, [pc, #112]	; (8004adc <HAL_UART_MspInit+0xfc>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a6e:	4b1b      	ldr	r3, [pc, #108]	; (8004adc <HAL_UART_MspInit+0xfc>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a74:	4b19      	ldr	r3, [pc, #100]	; (8004adc <HAL_UART_MspInit+0xfc>)
 8004a76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a7c:	4b17      	ldr	r3, [pc, #92]	; (8004adc <HAL_UART_MspInit+0xfc>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a82:	4b16      	ldr	r3, [pc, #88]	; (8004adc <HAL_UART_MspInit+0xfc>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004a88:	4b14      	ldr	r3, [pc, #80]	; (8004adc <HAL_UART_MspInit+0xfc>)
 8004a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a8e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a90:	4b12      	ldr	r3, [pc, #72]	; (8004adc <HAL_UART_MspInit+0xfc>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a96:	4b11      	ldr	r3, [pc, #68]	; (8004adc <HAL_UART_MspInit+0xfc>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004a9c:	480f      	ldr	r0, [pc, #60]	; (8004adc <HAL_UART_MspInit+0xfc>)
 8004a9e:	f000 f9f3 	bl	8004e88 <HAL_DMA_Init>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004aa8:	f7fe fe24 	bl	80036f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a0b      	ldr	r2, [pc, #44]	; (8004adc <HAL_UART_MspInit+0xfc>)
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ab2:	4a0a      	ldr	r2, [pc, #40]	; (8004adc <HAL_UART_MspInit+0xfc>)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2100      	movs	r1, #0
 8004abc:	2025      	movs	r0, #37	; 0x25
 8004abe:	f000 f9ac 	bl	8004e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ac2:	2025      	movs	r0, #37	; 0x25
 8004ac4:	f000 f9c5 	bl	8004e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3728      	adds	r7, #40	; 0x28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40011000 	.word	0x40011000
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	40020400 	.word	0x40020400
 8004adc:	200007d4 	.word	0x200007d4
 8004ae0:	40026440 	.word	0x40026440

08004ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ae8:	480d      	ldr	r0, [pc, #52]	; (8004b20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004aea:	490e      	ldr	r1, [pc, #56]	; (8004b24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004aec:	4a0e      	ldr	r2, [pc, #56]	; (8004b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004af0:	e002      	b.n	8004af8 <LoopCopyDataInit>

08004af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004af6:	3304      	adds	r3, #4

08004af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004afc:	d3f9      	bcc.n	8004af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004afe:	4a0b      	ldr	r2, [pc, #44]	; (8004b2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b00:	4c0b      	ldr	r4, [pc, #44]	; (8004b30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b04:	e001      	b.n	8004b0a <LoopFillZerobss>

08004b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b08:	3204      	adds	r2, #4

08004b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b0c:	d3fb      	bcc.n	8004b06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b0e:	f7ff f939 	bl	8003d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b12:	f004 fdf7 	bl	8009704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b16:	f7fe fc0d 	bl	8003334 <main>
  bx  lr    
 8004b1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b24:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8004b28:	080099d8 	.word	0x080099d8
  ldr r2, =_sbss
 8004b2c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8004b30:	20000970 	.word	0x20000970

08004b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b34:	e7fe      	b.n	8004b34 <ADC_IRQHandler>
	...

08004b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b3c:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <HAL_Init+0x40>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a0d      	ldr	r2, [pc, #52]	; (8004b78 <HAL_Init+0x40>)
 8004b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_Init+0x40>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a0a      	ldr	r2, [pc, #40]	; (8004b78 <HAL_Init+0x40>)
 8004b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b54:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <HAL_Init+0x40>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a07      	ldr	r2, [pc, #28]	; (8004b78 <HAL_Init+0x40>)
 8004b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b60:	2003      	movs	r0, #3
 8004b62:	f000 f94f 	bl	8004e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b66:	2000      	movs	r0, #0
 8004b68:	f000 f808 	bl	8004b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b6c:	f7fe fdc8 	bl	8003700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40023c00 	.word	0x40023c00

08004b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b84:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <HAL_InitTick+0x54>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <HAL_InitTick+0x58>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 f967 	bl	8004e6e <HAL_SYSTICK_Config>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e00e      	b.n	8004bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b0f      	cmp	r3, #15
 8004bae:	d80a      	bhi.n	8004bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb8:	f000 f92f 	bl	8004e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bbc:	4a06      	ldr	r2, [pc, #24]	; (8004bd8 <HAL_InitTick+0x5c>)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e000      	b.n	8004bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20000074 	.word	0x20000074
 8004bd4:	2000007c 	.word	0x2000007c
 8004bd8:	20000078 	.word	0x20000078

08004bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004be0:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <HAL_IncTick+0x20>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <HAL_IncTick+0x24>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4413      	add	r3, r2
 8004bec:	4a04      	ldr	r2, [pc, #16]	; (8004c00 <HAL_IncTick+0x24>)
 8004bee:	6013      	str	r3, [r2, #0]
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	2000007c 	.word	0x2000007c
 8004c00:	20000834 	.word	0x20000834

08004c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return uwTick;
 8004c08:	4b03      	ldr	r3, [pc, #12]	; (8004c18 <HAL_GetTick+0x14>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000834 	.word	0x20000834

08004c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c24:	f7ff ffee 	bl	8004c04 <HAL_GetTick>
 8004c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d005      	beq.n	8004c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c36:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <HAL_Delay+0x44>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c42:	bf00      	nop
 8004c44:	f7ff ffde 	bl	8004c04 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d8f7      	bhi.n	8004c44 <HAL_Delay+0x28>
  {
  }
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	2000007c 	.word	0x2000007c

08004c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c74:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c80:	4013      	ands	r3, r2
 8004c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c96:	4a04      	ldr	r2, [pc, #16]	; (8004ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	60d3      	str	r3, [r2, #12]
}
 8004c9c:	bf00      	nop
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	e000ed00 	.word	0xe000ed00

08004cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cb0:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	0a1b      	lsrs	r3, r3, #8
 8004cb6:	f003 0307 	and.w	r3, r3, #7
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	e000ed00 	.word	0xe000ed00

08004cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	db0b      	blt.n	8004cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	f003 021f 	and.w	r2, r3, #31
 8004ce0:	4907      	ldr	r1, [pc, #28]	; (8004d00 <__NVIC_EnableIRQ+0x38>)
 8004ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	2001      	movs	r0, #1
 8004cea:	fa00 f202 	lsl.w	r2, r0, r2
 8004cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	e000e100 	.word	0xe000e100

08004d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	6039      	str	r1, [r7, #0]
 8004d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	db0a      	blt.n	8004d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	490c      	ldr	r1, [pc, #48]	; (8004d50 <__NVIC_SetPriority+0x4c>)
 8004d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d22:	0112      	lsls	r2, r2, #4
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	440b      	add	r3, r1
 8004d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d2c:	e00a      	b.n	8004d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	4908      	ldr	r1, [pc, #32]	; (8004d54 <__NVIC_SetPriority+0x50>)
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	3b04      	subs	r3, #4
 8004d3c:	0112      	lsls	r2, r2, #4
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	440b      	add	r3, r1
 8004d42:	761a      	strb	r2, [r3, #24]
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	e000e100 	.word	0xe000e100
 8004d54:	e000ed00 	.word	0xe000ed00

08004d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b089      	sub	sp, #36	; 0x24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f1c3 0307 	rsb	r3, r3, #7
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	bf28      	it	cs
 8004d76:	2304      	movcs	r3, #4
 8004d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	2b06      	cmp	r3, #6
 8004d80:	d902      	bls.n	8004d88 <NVIC_EncodePriority+0x30>
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3b03      	subs	r3, #3
 8004d86:	e000      	b.n	8004d8a <NVIC_EncodePriority+0x32>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43da      	mvns	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004da0:	f04f 31ff 	mov.w	r1, #4294967295
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	fa01 f303 	lsl.w	r3, r1, r3
 8004daa:	43d9      	mvns	r1, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db0:	4313      	orrs	r3, r2
         );
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3724      	adds	r7, #36	; 0x24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dd0:	d301      	bcc.n	8004dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e00f      	b.n	8004df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dd6:	4a0a      	ldr	r2, [pc, #40]	; (8004e00 <SysTick_Config+0x40>)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dde:	210f      	movs	r1, #15
 8004de0:	f04f 30ff 	mov.w	r0, #4294967295
 8004de4:	f7ff ff8e 	bl	8004d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <SysTick_Config+0x40>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dee:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <SysTick_Config+0x40>)
 8004df0:	2207      	movs	r2, #7
 8004df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	e000e010 	.word	0xe000e010

08004e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff ff29 	bl	8004c64 <__NVIC_SetPriorityGrouping>
}
 8004e12:	bf00      	nop
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b086      	sub	sp, #24
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	4603      	mov	r3, r0
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	607a      	str	r2, [r7, #4]
 8004e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e2c:	f7ff ff3e 	bl	8004cac <__NVIC_GetPriorityGrouping>
 8004e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	6978      	ldr	r0, [r7, #20]
 8004e38:	f7ff ff8e 	bl	8004d58 <NVIC_EncodePriority>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e42:	4611      	mov	r1, r2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff ff5d 	bl	8004d04 <__NVIC_SetPriority>
}
 8004e4a:	bf00      	nop
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	4603      	mov	r3, r0
 8004e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff ff31 	bl	8004cc8 <__NVIC_EnableIRQ>
}
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff ffa2 	bl	8004dc0 <SysTick_Config>
 8004e7c:	4603      	mov	r3, r0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e94:	f7ff feb6 	bl	8004c04 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e099      	b.n	8004fd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0201 	bic.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ec4:	e00f      	b.n	8004ee6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ec6:	f7ff fe9d 	bl	8004c04 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b05      	cmp	r3, #5
 8004ed2:	d908      	bls.n	8004ee6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2203      	movs	r2, #3
 8004ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e078      	b.n	8004fd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e8      	bne.n	8004ec6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	4b38      	ldr	r3, [pc, #224]	; (8004fe0 <HAL_DMA_Init+0x158>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d107      	bne.n	8004f50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f023 0307 	bic.w	r3, r3, #7
 8004f66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d117      	bne.n	8004faa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00e      	beq.n	8004faa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fb01 	bl	8005594 <DMA_CheckFifoParam>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2240      	movs	r2, #64	; 0x40
 8004f9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e016      	b.n	8004fd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fab8 	bl	8005528 <DMA_CalcBaseAndBitshift>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc0:	223f      	movs	r2, #63	; 0x3f
 8004fc2:	409a      	lsls	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	f010803f 	.word	0xf010803f

08004fe4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_DMA_Start_IT+0x26>
 8005006:	2302      	movs	r3, #2
 8005008:	e040      	b.n	800508c <HAL_DMA_Start_IT+0xa8>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b01      	cmp	r3, #1
 800501c:	d12f      	bne.n	800507e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2202      	movs	r2, #2
 8005022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fa4a 	bl	80054cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503c:	223f      	movs	r2, #63	; 0x3f
 800503e:	409a      	lsls	r2, r3
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0216 	orr.w	r2, r2, #22
 8005052:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0208 	orr.w	r2, r2, #8
 800506a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	e005      	b.n	800508a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005086:	2302      	movs	r3, #2
 8005088:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800508a:	7dfb      	ldrb	r3, [r7, #23]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80050a2:	f7ff fdaf 	bl	8004c04 <HAL_GetTick>
 80050a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d008      	beq.n	80050c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2280      	movs	r2, #128	; 0x80
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e052      	b.n	800516c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0216 	bic.w	r2, r2, #22
 80050d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <HAL_DMA_Abort+0x62>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0208 	bic.w	r2, r2, #8
 8005104:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0201 	bic.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005116:	e013      	b.n	8005140 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005118:	f7ff fd74 	bl	8004c04 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b05      	cmp	r3, #5
 8005124:	d90c      	bls.n	8005140 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2203      	movs	r2, #3
 8005130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e015      	b.n	800516c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e4      	bne.n	8005118 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005152:	223f      	movs	r2, #63	; 0x3f
 8005154:	409a      	lsls	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d004      	beq.n	8005192 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2280      	movs	r2, #128	; 0x80
 800518c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e00c      	b.n	80051ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2205      	movs	r2, #5
 8005196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0201 	bic.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80051c4:	4b8e      	ldr	r3, [pc, #568]	; (8005400 <HAL_DMA_IRQHandler+0x248>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a8e      	ldr	r2, [pc, #568]	; (8005404 <HAL_DMA_IRQHandler+0x24c>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	0a9b      	lsrs	r3, r3, #10
 80051d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e2:	2208      	movs	r2, #8
 80051e4:	409a      	lsls	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4013      	ands	r3, r2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d01a      	beq.n	8005224 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d013      	beq.n	8005224 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0204 	bic.w	r2, r2, #4
 800520a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005210:	2208      	movs	r2, #8
 8005212:	409a      	lsls	r2, r3
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521c:	f043 0201 	orr.w	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005228:	2201      	movs	r2, #1
 800522a:	409a      	lsls	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4013      	ands	r3, r2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d012      	beq.n	800525a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00b      	beq.n	800525a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005246:	2201      	movs	r2, #1
 8005248:	409a      	lsls	r2, r3
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005252:	f043 0202 	orr.w	r2, r3, #2
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525e:	2204      	movs	r2, #4
 8005260:	409a      	lsls	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4013      	ands	r3, r2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d012      	beq.n	8005290 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00b      	beq.n	8005290 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527c:	2204      	movs	r2, #4
 800527e:	409a      	lsls	r2, r3
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005288:	f043 0204 	orr.w	r2, r3, #4
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005294:	2210      	movs	r2, #16
 8005296:	409a      	lsls	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4013      	ands	r3, r2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d043      	beq.n	8005328 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d03c      	beq.n	8005328 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b2:	2210      	movs	r2, #16
 80052b4:	409a      	lsls	r2, r3
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d018      	beq.n	80052fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d108      	bne.n	80052e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d024      	beq.n	8005328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	4798      	blx	r3
 80052e6:	e01f      	b.n	8005328 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01b      	beq.n	8005328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	4798      	blx	r3
 80052f8:	e016      	b.n	8005328 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005304:	2b00      	cmp	r3, #0
 8005306:	d107      	bne.n	8005318 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0208 	bic.w	r2, r2, #8
 8005316:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532c:	2220      	movs	r2, #32
 800532e:	409a      	lsls	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4013      	ands	r3, r2
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 808f 	beq.w	8005458 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8087 	beq.w	8005458 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534e:	2220      	movs	r2, #32
 8005350:	409a      	lsls	r2, r3
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b05      	cmp	r3, #5
 8005360:	d136      	bne.n	80053d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0216 	bic.w	r2, r2, #22
 8005370:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695a      	ldr	r2, [r3, #20]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005380:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d103      	bne.n	8005392 <HAL_DMA_IRQHandler+0x1da>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0208 	bic.w	r2, r2, #8
 80053a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a6:	223f      	movs	r2, #63	; 0x3f
 80053a8:	409a      	lsls	r2, r3
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d07e      	beq.n	80054c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	4798      	blx	r3
        }
        return;
 80053ce:	e079      	b.n	80054c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01d      	beq.n	800541a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10d      	bne.n	8005408 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d031      	beq.n	8005458 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	4798      	blx	r3
 80053fc:	e02c      	b.n	8005458 <HAL_DMA_IRQHandler+0x2a0>
 80053fe:	bf00      	nop
 8005400:	20000074 	.word	0x20000074
 8005404:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d023      	beq.n	8005458 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4798      	blx	r3
 8005418:	e01e      	b.n	8005458 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10f      	bne.n	8005448 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0210 	bic.w	r2, r2, #16
 8005436:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545c:	2b00      	cmp	r3, #0
 800545e:	d032      	beq.n	80054c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d022      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2205      	movs	r2, #5
 8005470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0201 	bic.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	3301      	adds	r3, #1
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	429a      	cmp	r2, r3
 800548e:	d307      	bcc.n	80054a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f2      	bne.n	8005484 <HAL_DMA_IRQHandler+0x2cc>
 800549e:	e000      	b.n	80054a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80054a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d005      	beq.n	80054c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	4798      	blx	r3
 80054c2:	e000      	b.n	80054c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80054c4:	bf00      	nop
    }
  }
}
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	2b40      	cmp	r3, #64	; 0x40
 80054f8:	d108      	bne.n	800550c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800550a:	e007      	b.n	800551c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	60da      	str	r2, [r3, #12]
}
 800551c:	bf00      	nop
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	3b10      	subs	r3, #16
 8005538:	4a14      	ldr	r2, [pc, #80]	; (800558c <DMA_CalcBaseAndBitshift+0x64>)
 800553a:	fba2 2303 	umull	r2, r3, r2, r3
 800553e:	091b      	lsrs	r3, r3, #4
 8005540:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005542:	4a13      	ldr	r2, [pc, #76]	; (8005590 <DMA_CalcBaseAndBitshift+0x68>)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b03      	cmp	r3, #3
 8005554:	d909      	bls.n	800556a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800555e:	f023 0303 	bic.w	r3, r3, #3
 8005562:	1d1a      	adds	r2, r3, #4
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	659a      	str	r2, [r3, #88]	; 0x58
 8005568:	e007      	b.n	800557a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005572:	f023 0303 	bic.w	r3, r3, #3
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	aaaaaaab 	.word	0xaaaaaaab
 8005590:	080097e4 	.word	0x080097e4

08005594 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d11f      	bne.n	80055ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b03      	cmp	r3, #3
 80055b2:	d856      	bhi.n	8005662 <DMA_CheckFifoParam+0xce>
 80055b4:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <DMA_CheckFifoParam+0x28>)
 80055b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ba:	bf00      	nop
 80055bc:	080055cd 	.word	0x080055cd
 80055c0:	080055df 	.word	0x080055df
 80055c4:	080055cd 	.word	0x080055cd
 80055c8:	08005663 	.word	0x08005663
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d046      	beq.n	8005666 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055dc:	e043      	b.n	8005666 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055e6:	d140      	bne.n	800566a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055ec:	e03d      	b.n	800566a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f6:	d121      	bne.n	800563c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d837      	bhi.n	800566e <DMA_CheckFifoParam+0xda>
 80055fe:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <DMA_CheckFifoParam+0x70>)
 8005600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005604:	08005615 	.word	0x08005615
 8005608:	0800561b 	.word	0x0800561b
 800560c:	08005615 	.word	0x08005615
 8005610:	0800562d 	.word	0x0800562d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
      break;
 8005618:	e030      	b.n	800567c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d025      	beq.n	8005672 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800562a:	e022      	b.n	8005672 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005634:	d11f      	bne.n	8005676 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800563a:	e01c      	b.n	8005676 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b02      	cmp	r3, #2
 8005640:	d903      	bls.n	800564a <DMA_CheckFifoParam+0xb6>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b03      	cmp	r3, #3
 8005646:	d003      	beq.n	8005650 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005648:	e018      	b.n	800567c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
      break;
 800564e:	e015      	b.n	800567c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00e      	beq.n	800567a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	73fb      	strb	r3, [r7, #15]
      break;
 8005660:	e00b      	b.n	800567a <DMA_CheckFifoParam+0xe6>
      break;
 8005662:	bf00      	nop
 8005664:	e00a      	b.n	800567c <DMA_CheckFifoParam+0xe8>
      break;
 8005666:	bf00      	nop
 8005668:	e008      	b.n	800567c <DMA_CheckFifoParam+0xe8>
      break;
 800566a:	bf00      	nop
 800566c:	e006      	b.n	800567c <DMA_CheckFifoParam+0xe8>
      break;
 800566e:	bf00      	nop
 8005670:	e004      	b.n	800567c <DMA_CheckFifoParam+0xe8>
      break;
 8005672:	bf00      	nop
 8005674:	e002      	b.n	800567c <DMA_CheckFifoParam+0xe8>
      break;   
 8005676:	bf00      	nop
 8005678:	e000      	b.n	800567c <DMA_CheckFifoParam+0xe8>
      break;
 800567a:	bf00      	nop
    }
  } 
  
  return status; 
 800567c:	7bfb      	ldrb	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop

0800568c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800568c:	b480      	push	{r7}
 800568e:	b089      	sub	sp, #36	; 0x24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005696:	2300      	movs	r3, #0
 8005698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800569e:	2300      	movs	r3, #0
 80056a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
 80056a6:	e16b      	b.n	8005980 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056a8:	2201      	movs	r2, #1
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	fa02 f303 	lsl.w	r3, r2, r3
 80056b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4013      	ands	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	f040 815a 	bne.w	800597a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d005      	beq.n	80056de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d130      	bne.n	8005740 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	2203      	movs	r2, #3
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	43db      	mvns	r3, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4013      	ands	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	4313      	orrs	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005714:	2201      	movs	r2, #1
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	43db      	mvns	r3, r3
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	4013      	ands	r3, r2
 8005722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	091b      	lsrs	r3, r3, #4
 800572a:	f003 0201 	and.w	r2, r3, #1
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	4313      	orrs	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f003 0303 	and.w	r3, r3, #3
 8005748:	2b03      	cmp	r3, #3
 800574a:	d017      	beq.n	800577c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	2203      	movs	r2, #3
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	43db      	mvns	r3, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4013      	ands	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	4313      	orrs	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d123      	bne.n	80057d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	08da      	lsrs	r2, r3, #3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3208      	adds	r2, #8
 8005790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005794:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	220f      	movs	r2, #15
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	43db      	mvns	r3, r3
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	4013      	ands	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	4313      	orrs	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	08da      	lsrs	r2, r3, #3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3208      	adds	r2, #8
 80057ca:	69b9      	ldr	r1, [r7, #24]
 80057cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	2203      	movs	r2, #3
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	43db      	mvns	r3, r3
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	4013      	ands	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f003 0203 	and.w	r2, r3, #3
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	fa02 f303 	lsl.w	r3, r2, r3
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 80b4 	beq.w	800597a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	4b60      	ldr	r3, [pc, #384]	; (8005998 <HAL_GPIO_Init+0x30c>)
 8005818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581a:	4a5f      	ldr	r2, [pc, #380]	; (8005998 <HAL_GPIO_Init+0x30c>)
 800581c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005820:	6453      	str	r3, [r2, #68]	; 0x44
 8005822:	4b5d      	ldr	r3, [pc, #372]	; (8005998 <HAL_GPIO_Init+0x30c>)
 8005824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800582e:	4a5b      	ldr	r2, [pc, #364]	; (800599c <HAL_GPIO_Init+0x310>)
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	089b      	lsrs	r3, r3, #2
 8005834:	3302      	adds	r3, #2
 8005836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800583a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	220f      	movs	r2, #15
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	43db      	mvns	r3, r3
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	4013      	ands	r3, r2
 8005850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a52      	ldr	r2, [pc, #328]	; (80059a0 <HAL_GPIO_Init+0x314>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d02b      	beq.n	80058b2 <HAL_GPIO_Init+0x226>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a51      	ldr	r2, [pc, #324]	; (80059a4 <HAL_GPIO_Init+0x318>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d025      	beq.n	80058ae <HAL_GPIO_Init+0x222>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a50      	ldr	r2, [pc, #320]	; (80059a8 <HAL_GPIO_Init+0x31c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d01f      	beq.n	80058aa <HAL_GPIO_Init+0x21e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a4f      	ldr	r2, [pc, #316]	; (80059ac <HAL_GPIO_Init+0x320>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d019      	beq.n	80058a6 <HAL_GPIO_Init+0x21a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a4e      	ldr	r2, [pc, #312]	; (80059b0 <HAL_GPIO_Init+0x324>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d013      	beq.n	80058a2 <HAL_GPIO_Init+0x216>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a4d      	ldr	r2, [pc, #308]	; (80059b4 <HAL_GPIO_Init+0x328>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00d      	beq.n	800589e <HAL_GPIO_Init+0x212>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a4c      	ldr	r2, [pc, #304]	; (80059b8 <HAL_GPIO_Init+0x32c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d007      	beq.n	800589a <HAL_GPIO_Init+0x20e>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a4b      	ldr	r2, [pc, #300]	; (80059bc <HAL_GPIO_Init+0x330>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d101      	bne.n	8005896 <HAL_GPIO_Init+0x20a>
 8005892:	2307      	movs	r3, #7
 8005894:	e00e      	b.n	80058b4 <HAL_GPIO_Init+0x228>
 8005896:	2308      	movs	r3, #8
 8005898:	e00c      	b.n	80058b4 <HAL_GPIO_Init+0x228>
 800589a:	2306      	movs	r3, #6
 800589c:	e00a      	b.n	80058b4 <HAL_GPIO_Init+0x228>
 800589e:	2305      	movs	r3, #5
 80058a0:	e008      	b.n	80058b4 <HAL_GPIO_Init+0x228>
 80058a2:	2304      	movs	r3, #4
 80058a4:	e006      	b.n	80058b4 <HAL_GPIO_Init+0x228>
 80058a6:	2303      	movs	r3, #3
 80058a8:	e004      	b.n	80058b4 <HAL_GPIO_Init+0x228>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e002      	b.n	80058b4 <HAL_GPIO_Init+0x228>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e000      	b.n	80058b4 <HAL_GPIO_Init+0x228>
 80058b2:	2300      	movs	r3, #0
 80058b4:	69fa      	ldr	r2, [r7, #28]
 80058b6:	f002 0203 	and.w	r2, r2, #3
 80058ba:	0092      	lsls	r2, r2, #2
 80058bc:	4093      	lsls	r3, r2
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058c4:	4935      	ldr	r1, [pc, #212]	; (800599c <HAL_GPIO_Init+0x310>)
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	089b      	lsrs	r3, r3, #2
 80058ca:	3302      	adds	r3, #2
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058d2:	4b3b      	ldr	r3, [pc, #236]	; (80059c0 <HAL_GPIO_Init+0x334>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	43db      	mvns	r3, r3
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	4013      	ands	r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058f6:	4a32      	ldr	r2, [pc, #200]	; (80059c0 <HAL_GPIO_Init+0x334>)
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058fc:	4b30      	ldr	r3, [pc, #192]	; (80059c0 <HAL_GPIO_Init+0x334>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	43db      	mvns	r3, r3
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4013      	ands	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005920:	4a27      	ldr	r2, [pc, #156]	; (80059c0 <HAL_GPIO_Init+0x334>)
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005926:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <HAL_GPIO_Init+0x334>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	43db      	mvns	r3, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4013      	ands	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800594a:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <HAL_GPIO_Init+0x334>)
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005950:	4b1b      	ldr	r3, [pc, #108]	; (80059c0 <HAL_GPIO_Init+0x334>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	43db      	mvns	r3, r3
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	4013      	ands	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005974:	4a12      	ldr	r2, [pc, #72]	; (80059c0 <HAL_GPIO_Init+0x334>)
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	3301      	adds	r3, #1
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	2b0f      	cmp	r3, #15
 8005984:	f67f ae90 	bls.w	80056a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005988:	bf00      	nop
 800598a:	bf00      	nop
 800598c:	3724      	adds	r7, #36	; 0x24
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40023800 	.word	0x40023800
 800599c:	40013800 	.word	0x40013800
 80059a0:	40020000 	.word	0x40020000
 80059a4:	40020400 	.word	0x40020400
 80059a8:	40020800 	.word	0x40020800
 80059ac:	40020c00 	.word	0x40020c00
 80059b0:	40021000 	.word	0x40021000
 80059b4:	40021400 	.word	0x40021400
 80059b8:	40021800 	.word	0x40021800
 80059bc:	40021c00 	.word	0x40021c00
 80059c0:	40013c00 	.word	0x40013c00

080059c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	887b      	ldrh	r3, [r7, #2]
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059dc:	2301      	movs	r3, #1
 80059de:	73fb      	strb	r3, [r7, #15]
 80059e0:	e001      	b.n	80059e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	807b      	strh	r3, [r7, #2]
 8005a00:	4613      	mov	r3, r2
 8005a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a04:	787b      	ldrb	r3, [r7, #1]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a0a:	887a      	ldrh	r2, [r7, #2]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a10:	e003      	b.n	8005a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a12:	887b      	ldrh	r3, [r7, #2]
 8005a14:	041a      	lsls	r2, r3, #16
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	619a      	str	r2, [r3, #24]
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
	...

08005a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e267      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d075      	beq.n	8005b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a46:	4b88      	ldr	r3, [pc, #544]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d00c      	beq.n	8005a6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a52:	4b85      	ldr	r3, [pc, #532]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d112      	bne.n	8005a84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a5e:	4b82      	ldr	r3, [pc, #520]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a6a:	d10b      	bne.n	8005a84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a6c:	4b7e      	ldr	r3, [pc, #504]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d05b      	beq.n	8005b30 <HAL_RCC_OscConfig+0x108>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d157      	bne.n	8005b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e242      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a8c:	d106      	bne.n	8005a9c <HAL_RCC_OscConfig+0x74>
 8005a8e:	4b76      	ldr	r3, [pc, #472]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a75      	ldr	r2, [pc, #468]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	e01d      	b.n	8005ad8 <HAL_RCC_OscConfig+0xb0>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x98>
 8005aa6:	4b70      	ldr	r3, [pc, #448]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a6f      	ldr	r2, [pc, #444]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	4b6d      	ldr	r3, [pc, #436]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a6c      	ldr	r2, [pc, #432]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	e00b      	b.n	8005ad8 <HAL_RCC_OscConfig+0xb0>
 8005ac0:	4b69      	ldr	r3, [pc, #420]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a68      	ldr	r2, [pc, #416]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	4b66      	ldr	r3, [pc, #408]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a65      	ldr	r2, [pc, #404]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d013      	beq.n	8005b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae0:	f7ff f890 	bl	8004c04 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ae8:	f7ff f88c 	bl	8004c04 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b64      	cmp	r3, #100	; 0x64
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e207      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afa:	4b5b      	ldr	r3, [pc, #364]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCC_OscConfig+0xc0>
 8005b06:	e014      	b.n	8005b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b08:	f7ff f87c 	bl	8004c04 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b10:	f7ff f878 	bl	8004c04 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b64      	cmp	r3, #100	; 0x64
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e1f3      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b22:	4b51      	ldr	r3, [pc, #324]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0xe8>
 8005b2e:	e000      	b.n	8005b32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d063      	beq.n	8005c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b3e:	4b4a      	ldr	r3, [pc, #296]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 030c 	and.w	r3, r3, #12
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00b      	beq.n	8005b62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b4a:	4b47      	ldr	r3, [pc, #284]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d11c      	bne.n	8005b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b56:	4b44      	ldr	r3, [pc, #272]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d116      	bne.n	8005b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b62:	4b41      	ldr	r3, [pc, #260]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <HAL_RCC_OscConfig+0x152>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d001      	beq.n	8005b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e1c7      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b7a:	4b3b      	ldr	r3, [pc, #236]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4937      	ldr	r1, [pc, #220]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b8e:	e03a      	b.n	8005c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d020      	beq.n	8005bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b98:	4b34      	ldr	r3, [pc, #208]	; (8005c6c <HAL_RCC_OscConfig+0x244>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9e:	f7ff f831 	bl	8004c04 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ba6:	f7ff f82d 	bl	8004c04 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e1a8      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb8:	4b2b      	ldr	r3, [pc, #172]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0f0      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc4:	4b28      	ldr	r3, [pc, #160]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	4925      	ldr	r1, [pc, #148]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	600b      	str	r3, [r1, #0]
 8005bd8:	e015      	b.n	8005c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bda:	4b24      	ldr	r3, [pc, #144]	; (8005c6c <HAL_RCC_OscConfig+0x244>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be0:	f7ff f810 	bl	8004c04 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005be8:	f7ff f80c 	bl	8004c04 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e187      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bfa:	4b1b      	ldr	r3, [pc, #108]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f0      	bne.n	8005be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d036      	beq.n	8005c80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d016      	beq.n	8005c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c1a:	4b15      	ldr	r3, [pc, #84]	; (8005c70 <HAL_RCC_OscConfig+0x248>)
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c20:	f7fe fff0 	bl	8004c04 <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c28:	f7fe ffec 	bl	8004c04 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e167      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3a:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0f0      	beq.n	8005c28 <HAL_RCC_OscConfig+0x200>
 8005c46:	e01b      	b.n	8005c80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c48:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <HAL_RCC_OscConfig+0x248>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c4e:	f7fe ffd9 	bl	8004c04 <HAL_GetTick>
 8005c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c54:	e00e      	b.n	8005c74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c56:	f7fe ffd5 	bl	8004c04 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d907      	bls.n	8005c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e150      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	42470000 	.word	0x42470000
 8005c70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c74:	4b88      	ldr	r3, [pc, #544]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1ea      	bne.n	8005c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 8097 	beq.w	8005dbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c92:	4b81      	ldr	r3, [pc, #516]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10f      	bne.n	8005cbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60bb      	str	r3, [r7, #8]
 8005ca2:	4b7d      	ldr	r3, [pc, #500]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	4a7c      	ldr	r2, [pc, #496]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cac:	6413      	str	r3, [r2, #64]	; 0x40
 8005cae:	4b7a      	ldr	r3, [pc, #488]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb6:	60bb      	str	r3, [r7, #8]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cbe:	4b77      	ldr	r3, [pc, #476]	; (8005e9c <HAL_RCC_OscConfig+0x474>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d118      	bne.n	8005cfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cca:	4b74      	ldr	r3, [pc, #464]	; (8005e9c <HAL_RCC_OscConfig+0x474>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a73      	ldr	r2, [pc, #460]	; (8005e9c <HAL_RCC_OscConfig+0x474>)
 8005cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cd6:	f7fe ff95 	bl	8004c04 <HAL_GetTick>
 8005cda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cdc:	e008      	b.n	8005cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cde:	f7fe ff91 	bl	8004c04 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e10c      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf0:	4b6a      	ldr	r3, [pc, #424]	; (8005e9c <HAL_RCC_OscConfig+0x474>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0f0      	beq.n	8005cde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d106      	bne.n	8005d12 <HAL_RCC_OscConfig+0x2ea>
 8005d04:	4b64      	ldr	r3, [pc, #400]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d08:	4a63      	ldr	r2, [pc, #396]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d10:	e01c      	b.n	8005d4c <HAL_RCC_OscConfig+0x324>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2b05      	cmp	r3, #5
 8005d18:	d10c      	bne.n	8005d34 <HAL_RCC_OscConfig+0x30c>
 8005d1a:	4b5f      	ldr	r3, [pc, #380]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1e:	4a5e      	ldr	r2, [pc, #376]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d20:	f043 0304 	orr.w	r3, r3, #4
 8005d24:	6713      	str	r3, [r2, #112]	; 0x70
 8005d26:	4b5c      	ldr	r3, [pc, #368]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2a:	4a5b      	ldr	r2, [pc, #364]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	6713      	str	r3, [r2, #112]	; 0x70
 8005d32:	e00b      	b.n	8005d4c <HAL_RCC_OscConfig+0x324>
 8005d34:	4b58      	ldr	r3, [pc, #352]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d38:	4a57      	ldr	r2, [pc, #348]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d3a:	f023 0301 	bic.w	r3, r3, #1
 8005d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d40:	4b55      	ldr	r3, [pc, #340]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d44:	4a54      	ldr	r2, [pc, #336]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d46:	f023 0304 	bic.w	r3, r3, #4
 8005d4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d015      	beq.n	8005d80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d54:	f7fe ff56 	bl	8004c04 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d5a:	e00a      	b.n	8005d72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d5c:	f7fe ff52 	bl	8004c04 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e0cb      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d72:	4b49      	ldr	r3, [pc, #292]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0ee      	beq.n	8005d5c <HAL_RCC_OscConfig+0x334>
 8005d7e:	e014      	b.n	8005daa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d80:	f7fe ff40 	bl	8004c04 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d88:	f7fe ff3c 	bl	8004c04 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e0b5      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d9e:	4b3e      	ldr	r3, [pc, #248]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1ee      	bne.n	8005d88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d105      	bne.n	8005dbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005db0:	4b39      	ldr	r3, [pc, #228]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	4a38      	ldr	r2, [pc, #224]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 80a1 	beq.w	8005f08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dc6:	4b34      	ldr	r3, [pc, #208]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 030c 	and.w	r3, r3, #12
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	d05c      	beq.n	8005e8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d141      	bne.n	8005e5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dda:	4b31      	ldr	r3, [pc, #196]	; (8005ea0 <HAL_RCC_OscConfig+0x478>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de0:	f7fe ff10 	bl	8004c04 <HAL_GetTick>
 8005de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005de8:	f7fe ff0c 	bl	8004c04 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e087      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dfa:	4b27      	ldr	r3, [pc, #156]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1f0      	bne.n	8005de8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69da      	ldr	r2, [r3, #28]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	019b      	lsls	r3, r3, #6
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	085b      	lsrs	r3, r3, #1
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	041b      	lsls	r3, r3, #16
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	061b      	lsls	r3, r3, #24
 8005e2a:	491b      	ldr	r1, [pc, #108]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e30:	4b1b      	ldr	r3, [pc, #108]	; (8005ea0 <HAL_RCC_OscConfig+0x478>)
 8005e32:	2201      	movs	r2, #1
 8005e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e36:	f7fe fee5 	bl	8004c04 <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e3c:	e008      	b.n	8005e50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e3e:	f7fe fee1 	bl	8004c04 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e05c      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e50:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0f0      	beq.n	8005e3e <HAL_RCC_OscConfig+0x416>
 8005e5c:	e054      	b.n	8005f08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e5e:	4b10      	ldr	r3, [pc, #64]	; (8005ea0 <HAL_RCC_OscConfig+0x478>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e64:	f7fe fece 	bl	8004c04 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e6c:	f7fe feca 	bl	8004c04 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e045      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7e:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1f0      	bne.n	8005e6c <HAL_RCC_OscConfig+0x444>
 8005e8a:	e03d      	b.n	8005f08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d107      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e038      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	40007000 	.word	0x40007000
 8005ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ea4:	4b1b      	ldr	r3, [pc, #108]	; (8005f14 <HAL_RCC_OscConfig+0x4ec>)
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d028      	beq.n	8005f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d121      	bne.n	8005f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d11a      	bne.n	8005f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d111      	bne.n	8005f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	085b      	lsrs	r3, r3, #1
 8005eec:	3b01      	subs	r3, #1
 8005eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d107      	bne.n	8005f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d001      	beq.n	8005f08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40023800 	.word	0x40023800

08005f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e0cc      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f2c:	4b68      	ldr	r3, [pc, #416]	; (80060d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d90c      	bls.n	8005f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3a:	4b65      	ldr	r3, [pc, #404]	; (80060d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f42:	4b63      	ldr	r3, [pc, #396]	; (80060d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d001      	beq.n	8005f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0b8      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d020      	beq.n	8005fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f6c:	4b59      	ldr	r3, [pc, #356]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	4a58      	ldr	r2, [pc, #352]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0308 	and.w	r3, r3, #8
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f84:	4b53      	ldr	r3, [pc, #332]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	4a52      	ldr	r2, [pc, #328]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f90:	4b50      	ldr	r3, [pc, #320]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	494d      	ldr	r1, [pc, #308]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d044      	beq.n	8006038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d107      	bne.n	8005fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fb6:	4b47      	ldr	r3, [pc, #284]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d119      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e07f      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d003      	beq.n	8005fd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d107      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fd6:	4b3f      	ldr	r3, [pc, #252]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e06f      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fe6:	4b3b      	ldr	r3, [pc, #236]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e067      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ff6:	4b37      	ldr	r3, [pc, #220]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f023 0203 	bic.w	r2, r3, #3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	4934      	ldr	r1, [pc, #208]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006004:	4313      	orrs	r3, r2
 8006006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006008:	f7fe fdfc 	bl	8004c04 <HAL_GetTick>
 800600c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800600e:	e00a      	b.n	8006026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006010:	f7fe fdf8 	bl	8004c04 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	f241 3288 	movw	r2, #5000	; 0x1388
 800601e:	4293      	cmp	r3, r2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e04f      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006026:	4b2b      	ldr	r3, [pc, #172]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 020c 	and.w	r2, r3, #12
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	429a      	cmp	r2, r3
 8006036:	d1eb      	bne.n	8006010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006038:	4b25      	ldr	r3, [pc, #148]	; (80060d0 <HAL_RCC_ClockConfig+0x1b8>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d20c      	bcs.n	8006060 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006046:	4b22      	ldr	r3, [pc, #136]	; (80060d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800604e:	4b20      	ldr	r3, [pc, #128]	; (80060d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d001      	beq.n	8006060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e032      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b00      	cmp	r3, #0
 800606a:	d008      	beq.n	800607e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800606c:	4b19      	ldr	r3, [pc, #100]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	4916      	ldr	r1, [pc, #88]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 800607a:	4313      	orrs	r3, r2
 800607c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d009      	beq.n	800609e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800608a:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	490e      	ldr	r1, [pc, #56]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	4313      	orrs	r3, r2
 800609c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800609e:	f000 f821 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
 80060a2:	4602      	mov	r2, r0
 80060a4:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	091b      	lsrs	r3, r3, #4
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	490a      	ldr	r1, [pc, #40]	; (80060d8 <HAL_RCC_ClockConfig+0x1c0>)
 80060b0:	5ccb      	ldrb	r3, [r1, r3]
 80060b2:	fa22 f303 	lsr.w	r3, r2, r3
 80060b6:	4a09      	ldr	r2, [pc, #36]	; (80060dc <HAL_RCC_ClockConfig+0x1c4>)
 80060b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060ba:	4b09      	ldr	r3, [pc, #36]	; (80060e0 <HAL_RCC_ClockConfig+0x1c8>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe fd5c 	bl	8004b7c <HAL_InitTick>

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	40023c00 	.word	0x40023c00
 80060d4:	40023800 	.word	0x40023800
 80060d8:	080097cc 	.word	0x080097cc
 80060dc:	20000074 	.word	0x20000074
 80060e0:	20000078 	.word	0x20000078

080060e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060e8:	b094      	sub	sp, #80	; 0x50
 80060ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	647b      	str	r3, [r7, #68]	; 0x44
 80060f0:	2300      	movs	r3, #0
 80060f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060f4:	2300      	movs	r3, #0
 80060f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060fc:	4b79      	ldr	r3, [pc, #484]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f003 030c 	and.w	r3, r3, #12
 8006104:	2b08      	cmp	r3, #8
 8006106:	d00d      	beq.n	8006124 <HAL_RCC_GetSysClockFreq+0x40>
 8006108:	2b08      	cmp	r3, #8
 800610a:	f200 80e1 	bhi.w	80062d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_RCC_GetSysClockFreq+0x34>
 8006112:	2b04      	cmp	r3, #4
 8006114:	d003      	beq.n	800611e <HAL_RCC_GetSysClockFreq+0x3a>
 8006116:	e0db      	b.n	80062d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006118:	4b73      	ldr	r3, [pc, #460]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800611a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800611c:	e0db      	b.n	80062d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800611e:	4b73      	ldr	r3, [pc, #460]	; (80062ec <HAL_RCC_GetSysClockFreq+0x208>)
 8006120:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006122:	e0d8      	b.n	80062d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006124:	4b6f      	ldr	r3, [pc, #444]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800612c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800612e:	4b6d      	ldr	r3, [pc, #436]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d063      	beq.n	8006202 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800613a:	4b6a      	ldr	r3, [pc, #424]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	099b      	lsrs	r3, r3, #6
 8006140:	2200      	movs	r2, #0
 8006142:	63bb      	str	r3, [r7, #56]	; 0x38
 8006144:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614c:	633b      	str	r3, [r7, #48]	; 0x30
 800614e:	2300      	movs	r3, #0
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
 8006152:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006156:	4622      	mov	r2, r4
 8006158:	462b      	mov	r3, r5
 800615a:	f04f 0000 	mov.w	r0, #0
 800615e:	f04f 0100 	mov.w	r1, #0
 8006162:	0159      	lsls	r1, r3, #5
 8006164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006168:	0150      	lsls	r0, r2, #5
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	4621      	mov	r1, r4
 8006170:	1a51      	subs	r1, r2, r1
 8006172:	6139      	str	r1, [r7, #16]
 8006174:	4629      	mov	r1, r5
 8006176:	eb63 0301 	sbc.w	r3, r3, r1
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006188:	4659      	mov	r1, fp
 800618a:	018b      	lsls	r3, r1, #6
 800618c:	4651      	mov	r1, sl
 800618e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006192:	4651      	mov	r1, sl
 8006194:	018a      	lsls	r2, r1, #6
 8006196:	4651      	mov	r1, sl
 8006198:	ebb2 0801 	subs.w	r8, r2, r1
 800619c:	4659      	mov	r1, fp
 800619e:	eb63 0901 	sbc.w	r9, r3, r1
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061b6:	4690      	mov	r8, r2
 80061b8:	4699      	mov	r9, r3
 80061ba:	4623      	mov	r3, r4
 80061bc:	eb18 0303 	adds.w	r3, r8, r3
 80061c0:	60bb      	str	r3, [r7, #8]
 80061c2:	462b      	mov	r3, r5
 80061c4:	eb49 0303 	adc.w	r3, r9, r3
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	f04f 0300 	mov.w	r3, #0
 80061d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061d6:	4629      	mov	r1, r5
 80061d8:	024b      	lsls	r3, r1, #9
 80061da:	4621      	mov	r1, r4
 80061dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061e0:	4621      	mov	r1, r4
 80061e2:	024a      	lsls	r2, r1, #9
 80061e4:	4610      	mov	r0, r2
 80061e6:	4619      	mov	r1, r3
 80061e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ea:	2200      	movs	r2, #0
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061f4:	f7fa fcb6 	bl	8000b64 <__aeabi_uldivmod>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4613      	mov	r3, r2
 80061fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006200:	e058      	b.n	80062b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006202:	4b38      	ldr	r3, [pc, #224]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	099b      	lsrs	r3, r3, #6
 8006208:	2200      	movs	r2, #0
 800620a:	4618      	mov	r0, r3
 800620c:	4611      	mov	r1, r2
 800620e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006212:	623b      	str	r3, [r7, #32]
 8006214:	2300      	movs	r3, #0
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
 8006218:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800621c:	4642      	mov	r2, r8
 800621e:	464b      	mov	r3, r9
 8006220:	f04f 0000 	mov.w	r0, #0
 8006224:	f04f 0100 	mov.w	r1, #0
 8006228:	0159      	lsls	r1, r3, #5
 800622a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800622e:	0150      	lsls	r0, r2, #5
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	4641      	mov	r1, r8
 8006236:	ebb2 0a01 	subs.w	sl, r2, r1
 800623a:	4649      	mov	r1, r9
 800623c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800624c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006250:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006254:	ebb2 040a 	subs.w	r4, r2, sl
 8006258:	eb63 050b 	sbc.w	r5, r3, fp
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	00eb      	lsls	r3, r5, #3
 8006266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800626a:	00e2      	lsls	r2, r4, #3
 800626c:	4614      	mov	r4, r2
 800626e:	461d      	mov	r5, r3
 8006270:	4643      	mov	r3, r8
 8006272:	18e3      	adds	r3, r4, r3
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	464b      	mov	r3, r9
 8006278:	eb45 0303 	adc.w	r3, r5, r3
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800628a:	4629      	mov	r1, r5
 800628c:	028b      	lsls	r3, r1, #10
 800628e:	4621      	mov	r1, r4
 8006290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006294:	4621      	mov	r1, r4
 8006296:	028a      	lsls	r2, r1, #10
 8006298:	4610      	mov	r0, r2
 800629a:	4619      	mov	r1, r3
 800629c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800629e:	2200      	movs	r2, #0
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	61fa      	str	r2, [r7, #28]
 80062a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062a8:	f7fa fc5c 	bl	8000b64 <__aeabi_uldivmod>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4613      	mov	r3, r2
 80062b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062b4:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	0c1b      	lsrs	r3, r3, #16
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	3301      	adds	r3, #1
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80062c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062ce:	e002      	b.n	80062d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062d0:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80062d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3750      	adds	r7, #80	; 0x50
 80062dc:	46bd      	mov	sp, r7
 80062de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062e2:	bf00      	nop
 80062e4:	40023800 	.word	0x40023800
 80062e8:	00f42400 	.word	0x00f42400
 80062ec:	007a1200 	.word	0x007a1200

080062f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062f4:	4b03      	ldr	r3, [pc, #12]	; (8006304 <HAL_RCC_GetHCLKFreq+0x14>)
 80062f6:	681b      	ldr	r3, [r3, #0]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000074 	.word	0x20000074

08006308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800630c:	f7ff fff0 	bl	80062f0 <HAL_RCC_GetHCLKFreq>
 8006310:	4602      	mov	r2, r0
 8006312:	4b05      	ldr	r3, [pc, #20]	; (8006328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	0a9b      	lsrs	r3, r3, #10
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	4903      	ldr	r1, [pc, #12]	; (800632c <HAL_RCC_GetPCLK1Freq+0x24>)
 800631e:	5ccb      	ldrb	r3, [r1, r3]
 8006320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006324:	4618      	mov	r0, r3
 8006326:	bd80      	pop	{r7, pc}
 8006328:	40023800 	.word	0x40023800
 800632c:	080097dc 	.word	0x080097dc

08006330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006334:	f7ff ffdc 	bl	80062f0 <HAL_RCC_GetHCLKFreq>
 8006338:	4602      	mov	r2, r0
 800633a:	4b05      	ldr	r3, [pc, #20]	; (8006350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	0b5b      	lsrs	r3, r3, #13
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	4903      	ldr	r1, [pc, #12]	; (8006354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006346:	5ccb      	ldrb	r3, [r1, r3]
 8006348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800634c:	4618      	mov	r0, r3
 800634e:	bd80      	pop	{r7, pc}
 8006350:	40023800 	.word	0x40023800
 8006354:	080097dc 	.word	0x080097dc

08006358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e041      	b.n	80063ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d106      	bne.n	8006384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fe fa0e 	bl	80047a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3304      	adds	r3, #4
 8006394:	4619      	mov	r1, r3
 8006396:	4610      	mov	r0, r2
 8006398:	f000 fce6 	bl	8006d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	d001      	beq.n	8006410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e04e      	b.n	80064ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a23      	ldr	r2, [pc, #140]	; (80064bc <HAL_TIM_Base_Start_IT+0xc4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d022      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x80>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643a:	d01d      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x80>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a1f      	ldr	r2, [pc, #124]	; (80064c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d018      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x80>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1e      	ldr	r2, [pc, #120]	; (80064c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d013      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x80>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a1c      	ldr	r2, [pc, #112]	; (80064c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d00e      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x80>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1b      	ldr	r2, [pc, #108]	; (80064cc <HAL_TIM_Base_Start_IT+0xd4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d009      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x80>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a19      	ldr	r2, [pc, #100]	; (80064d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d004      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x80>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a18      	ldr	r2, [pc, #96]	; (80064d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d111      	bne.n	800649c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b06      	cmp	r3, #6
 8006488:	d010      	beq.n	80064ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0201 	orr.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800649a:	e007      	b.n	80064ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40010000 	.word	0x40010000
 80064c0:	40000400 	.word	0x40000400
 80064c4:	40000800 	.word	0x40000800
 80064c8:	40000c00 	.word	0x40000c00
 80064cc:	40010400 	.word	0x40010400
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40001800 	.word	0x40001800

080064d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e041      	b.n	800656e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d106      	bne.n	8006504 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fe f900 	bl	8004704 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3304      	adds	r3, #4
 8006514:	4619      	mov	r1, r3
 8006516:	4610      	mov	r0, r2
 8006518:	f000 fc26 	bl	8006d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d109      	bne.n	800659c <HAL_TIM_PWM_Start+0x24>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b01      	cmp	r3, #1
 8006592:	bf14      	ite	ne
 8006594:	2301      	movne	r3, #1
 8006596:	2300      	moveq	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	e022      	b.n	80065e2 <HAL_TIM_PWM_Start+0x6a>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d109      	bne.n	80065b6 <HAL_TIM_PWM_Start+0x3e>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	bf14      	ite	ne
 80065ae:	2301      	movne	r3, #1
 80065b0:	2300      	moveq	r3, #0
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	e015      	b.n	80065e2 <HAL_TIM_PWM_Start+0x6a>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d109      	bne.n	80065d0 <HAL_TIM_PWM_Start+0x58>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	bf14      	ite	ne
 80065c8:	2301      	movne	r3, #1
 80065ca:	2300      	moveq	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	e008      	b.n	80065e2 <HAL_TIM_PWM_Start+0x6a>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b01      	cmp	r3, #1
 80065da:	bf14      	ite	ne
 80065dc:	2301      	movne	r3, #1
 80065de:	2300      	moveq	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e07c      	b.n	80066e4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <HAL_TIM_PWM_Start+0x82>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065f8:	e013      	b.n	8006622 <HAL_TIM_PWM_Start+0xaa>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d104      	bne.n	800660a <HAL_TIM_PWM_Start+0x92>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006608:	e00b      	b.n	8006622 <HAL_TIM_PWM_Start+0xaa>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b08      	cmp	r3, #8
 800660e:	d104      	bne.n	800661a <HAL_TIM_PWM_Start+0xa2>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006618:	e003      	b.n	8006622 <HAL_TIM_PWM_Start+0xaa>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2202      	movs	r2, #2
 800661e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2201      	movs	r2, #1
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fdec 	bl	8007208 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a2d      	ldr	r2, [pc, #180]	; (80066ec <HAL_TIM_PWM_Start+0x174>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d004      	beq.n	8006644 <HAL_TIM_PWM_Start+0xcc>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a2c      	ldr	r2, [pc, #176]	; (80066f0 <HAL_TIM_PWM_Start+0x178>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d101      	bne.n	8006648 <HAL_TIM_PWM_Start+0xd0>
 8006644:	2301      	movs	r3, #1
 8006646:	e000      	b.n	800664a <HAL_TIM_PWM_Start+0xd2>
 8006648:	2300      	movs	r3, #0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d007      	beq.n	800665e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800665c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a22      	ldr	r2, [pc, #136]	; (80066ec <HAL_TIM_PWM_Start+0x174>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d022      	beq.n	80066ae <HAL_TIM_PWM_Start+0x136>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006670:	d01d      	beq.n	80066ae <HAL_TIM_PWM_Start+0x136>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1f      	ldr	r2, [pc, #124]	; (80066f4 <HAL_TIM_PWM_Start+0x17c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d018      	beq.n	80066ae <HAL_TIM_PWM_Start+0x136>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a1d      	ldr	r2, [pc, #116]	; (80066f8 <HAL_TIM_PWM_Start+0x180>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d013      	beq.n	80066ae <HAL_TIM_PWM_Start+0x136>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a1c      	ldr	r2, [pc, #112]	; (80066fc <HAL_TIM_PWM_Start+0x184>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00e      	beq.n	80066ae <HAL_TIM_PWM_Start+0x136>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a16      	ldr	r2, [pc, #88]	; (80066f0 <HAL_TIM_PWM_Start+0x178>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d009      	beq.n	80066ae <HAL_TIM_PWM_Start+0x136>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a18      	ldr	r2, [pc, #96]	; (8006700 <HAL_TIM_PWM_Start+0x188>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d004      	beq.n	80066ae <HAL_TIM_PWM_Start+0x136>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a16      	ldr	r2, [pc, #88]	; (8006704 <HAL_TIM_PWM_Start+0x18c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d111      	bne.n	80066d2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b06      	cmp	r3, #6
 80066be:	d010      	beq.n	80066e2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0201 	orr.w	r2, r2, #1
 80066ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d0:	e007      	b.n	80066e2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0201 	orr.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	40010000 	.word	0x40010000
 80066f0:	40010400 	.word	0x40010400
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800
 80066fc:	40000c00 	.word	0x40000c00
 8006700:	40014000 	.word	0x40014000
 8006704:	40001800 	.word	0x40001800

08006708 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e097      	b.n	800684c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7fd feab 	bl	800448c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2202      	movs	r2, #2
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6812      	ldr	r2, [r2, #0]
 8006748:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800674c:	f023 0307 	bic.w	r3, r3, #7
 8006750:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3304      	adds	r3, #4
 800675a:	4619      	mov	r1, r3
 800675c:	4610      	mov	r0, r2
 800675e:	f000 fb03 	bl	8006d68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800678a:	f023 0303 	bic.w	r3, r3, #3
 800678e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	4313      	orrs	r3, r2
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80067a8:	f023 030c 	bic.w	r3, r3, #12
 80067ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	4313      	orrs	r3, r2
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	011a      	lsls	r2, r3, #4
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	031b      	lsls	r3, r3, #12
 80067d8:	4313      	orrs	r3, r2
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80067e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80067ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	4313      	orrs	r3, r2
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006864:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800686c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006874:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800687c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d110      	bne.n	80068a6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d102      	bne.n	8006890 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800688a:	7b7b      	ldrb	r3, [r7, #13]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d001      	beq.n	8006894 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e069      	b.n	8006968 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068a4:	e031      	b.n	800690a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d110      	bne.n	80068ce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d102      	bne.n	80068b8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068b2:	7b3b      	ldrb	r3, [r7, #12]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d001      	beq.n	80068bc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e055      	b.n	8006968 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068cc:	e01d      	b.n	800690a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d108      	bne.n	80068e6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068d4:	7bbb      	ldrb	r3, [r7, #14]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d105      	bne.n	80068e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068da:	7b7b      	ldrb	r3, [r7, #13]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d102      	bne.n	80068e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068e0:	7b3b      	ldrb	r3, [r7, #12]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d001      	beq.n	80068ea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e03e      	b.n	8006968 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2202      	movs	r2, #2
 80068ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2202      	movs	r2, #2
 80068f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2202      	movs	r2, #2
 80068fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2202      	movs	r2, #2
 8006906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <HAL_TIM_Encoder_Start+0xc4>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b04      	cmp	r3, #4
 8006914:	d008      	beq.n	8006928 <HAL_TIM_Encoder_Start+0xd4>
 8006916:	e00f      	b.n	8006938 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2201      	movs	r2, #1
 800691e:	2100      	movs	r1, #0
 8006920:	4618      	mov	r0, r3
 8006922:	f000 fc71 	bl	8007208 <TIM_CCxChannelCmd>
      break;
 8006926:	e016      	b.n	8006956 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2201      	movs	r2, #1
 800692e:	2104      	movs	r1, #4
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fc69 	bl	8007208 <TIM_CCxChannelCmd>
      break;
 8006936:	e00e      	b.n	8006956 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2201      	movs	r2, #1
 800693e:	2100      	movs	r1, #0
 8006940:	4618      	mov	r0, r3
 8006942:	f000 fc61 	bl	8007208 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2201      	movs	r2, #1
 800694c:	2104      	movs	r1, #4
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fc5a 	bl	8007208 <TIM_CCxChannelCmd>
      break;
 8006954:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0201 	orr.w	r2, r2, #1
 8006964:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b02      	cmp	r3, #2
 8006984:	d122      	bne.n	80069cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b02      	cmp	r3, #2
 8006992:	d11b      	bne.n	80069cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0202 	mvn.w	r2, #2
 800699c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f9ba 	bl	8006d2c <HAL_TIM_IC_CaptureCallback>
 80069b8:	e005      	b.n	80069c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f9ac 	bl	8006d18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f9bd 	bl	8006d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d122      	bne.n	8006a20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d11b      	bne.n	8006a20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f06f 0204 	mvn.w	r2, #4
 80069f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2202      	movs	r2, #2
 80069f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f990 	bl	8006d2c <HAL_TIM_IC_CaptureCallback>
 8006a0c:	e005      	b.n	8006a1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f982 	bl	8006d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f993 	bl	8006d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 0308 	and.w	r3, r3, #8
 8006a2a:	2b08      	cmp	r3, #8
 8006a2c:	d122      	bne.n	8006a74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f003 0308 	and.w	r3, r3, #8
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d11b      	bne.n	8006a74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f06f 0208 	mvn.w	r2, #8
 8006a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2204      	movs	r2, #4
 8006a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f966 	bl	8006d2c <HAL_TIM_IC_CaptureCallback>
 8006a60:	e005      	b.n	8006a6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f958 	bl	8006d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f969 	bl	8006d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	2b10      	cmp	r3, #16
 8006a80:	d122      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b10      	cmp	r3, #16
 8006a8e:	d11b      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0210 	mvn.w	r2, #16
 8006a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f93c 	bl	8006d2c <HAL_TIM_IC_CaptureCallback>
 8006ab4:	e005      	b.n	8006ac2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f92e 	bl	8006d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f93f 	bl	8006d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d10e      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d107      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0201 	mvn.w	r2, #1
 8006aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f908 	bl	8006d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afe:	2b80      	cmp	r3, #128	; 0x80
 8006b00:	d10e      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0c:	2b80      	cmp	r3, #128	; 0x80
 8006b0e:	d107      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fc20 	bl	8007360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2a:	2b40      	cmp	r3, #64	; 0x40
 8006b2c:	d10e      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b38:	2b40      	cmp	r3, #64	; 0x40
 8006b3a:	d107      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f904 	bl	8006d54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d10e      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d107      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0220 	mvn.w	r2, #32
 8006b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fbea 	bl	800734c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b78:	bf00      	nop
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d101      	bne.n	8006b9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	e0ae      	b.n	8006cfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b0c      	cmp	r3, #12
 8006baa:	f200 809f 	bhi.w	8006cec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006bae:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb4:	08006be9 	.word	0x08006be9
 8006bb8:	08006ced 	.word	0x08006ced
 8006bbc:	08006ced 	.word	0x08006ced
 8006bc0:	08006ced 	.word	0x08006ced
 8006bc4:	08006c29 	.word	0x08006c29
 8006bc8:	08006ced 	.word	0x08006ced
 8006bcc:	08006ced 	.word	0x08006ced
 8006bd0:	08006ced 	.word	0x08006ced
 8006bd4:	08006c6b 	.word	0x08006c6b
 8006bd8:	08006ced 	.word	0x08006ced
 8006bdc:	08006ced 	.word	0x08006ced
 8006be0:	08006ced 	.word	0x08006ced
 8006be4:	08006cab 	.word	0x08006cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68b9      	ldr	r1, [r7, #8]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 f95a 	bl	8006ea8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699a      	ldr	r2, [r3, #24]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f042 0208 	orr.w	r2, r2, #8
 8006c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699a      	ldr	r2, [r3, #24]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 0204 	bic.w	r2, r2, #4
 8006c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6999      	ldr	r1, [r3, #24]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	691a      	ldr	r2, [r3, #16]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	619a      	str	r2, [r3, #24]
      break;
 8006c26:	e064      	b.n	8006cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 f9aa 	bl	8006f88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699a      	ldr	r2, [r3, #24]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6999      	ldr	r1, [r3, #24]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	021a      	lsls	r2, r3, #8
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	619a      	str	r2, [r3, #24]
      break;
 8006c68:	e043      	b.n	8006cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68b9      	ldr	r1, [r7, #8]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 f9ff 	bl	8007074 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69da      	ldr	r2, [r3, #28]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f042 0208 	orr.w	r2, r2, #8
 8006c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69da      	ldr	r2, [r3, #28]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0204 	bic.w	r2, r2, #4
 8006c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69d9      	ldr	r1, [r3, #28]
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	691a      	ldr	r2, [r3, #16]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	61da      	str	r2, [r3, #28]
      break;
 8006ca8:	e023      	b.n	8006cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68b9      	ldr	r1, [r7, #8]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fa53 	bl	800715c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69da      	ldr	r2, [r3, #28]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69d9      	ldr	r1, [r3, #28]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	021a      	lsls	r2, r3, #8
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	61da      	str	r2, [r3, #28]
      break;
 8006cea:	e002      	b.n	8006cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3718      	adds	r7, #24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a40      	ldr	r2, [pc, #256]	; (8006e7c <TIM_Base_SetConfig+0x114>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d013      	beq.n	8006da8 <TIM_Base_SetConfig+0x40>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d86:	d00f      	beq.n	8006da8 <TIM_Base_SetConfig+0x40>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a3d      	ldr	r2, [pc, #244]	; (8006e80 <TIM_Base_SetConfig+0x118>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d00b      	beq.n	8006da8 <TIM_Base_SetConfig+0x40>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a3c      	ldr	r2, [pc, #240]	; (8006e84 <TIM_Base_SetConfig+0x11c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d007      	beq.n	8006da8 <TIM_Base_SetConfig+0x40>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a3b      	ldr	r2, [pc, #236]	; (8006e88 <TIM_Base_SetConfig+0x120>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d003      	beq.n	8006da8 <TIM_Base_SetConfig+0x40>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a3a      	ldr	r2, [pc, #232]	; (8006e8c <TIM_Base_SetConfig+0x124>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d108      	bne.n	8006dba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a2f      	ldr	r2, [pc, #188]	; (8006e7c <TIM_Base_SetConfig+0x114>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d02b      	beq.n	8006e1a <TIM_Base_SetConfig+0xb2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc8:	d027      	beq.n	8006e1a <TIM_Base_SetConfig+0xb2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a2c      	ldr	r2, [pc, #176]	; (8006e80 <TIM_Base_SetConfig+0x118>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d023      	beq.n	8006e1a <TIM_Base_SetConfig+0xb2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a2b      	ldr	r2, [pc, #172]	; (8006e84 <TIM_Base_SetConfig+0x11c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d01f      	beq.n	8006e1a <TIM_Base_SetConfig+0xb2>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a2a      	ldr	r2, [pc, #168]	; (8006e88 <TIM_Base_SetConfig+0x120>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d01b      	beq.n	8006e1a <TIM_Base_SetConfig+0xb2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a29      	ldr	r2, [pc, #164]	; (8006e8c <TIM_Base_SetConfig+0x124>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d017      	beq.n	8006e1a <TIM_Base_SetConfig+0xb2>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a28      	ldr	r2, [pc, #160]	; (8006e90 <TIM_Base_SetConfig+0x128>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d013      	beq.n	8006e1a <TIM_Base_SetConfig+0xb2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a27      	ldr	r2, [pc, #156]	; (8006e94 <TIM_Base_SetConfig+0x12c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00f      	beq.n	8006e1a <TIM_Base_SetConfig+0xb2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a26      	ldr	r2, [pc, #152]	; (8006e98 <TIM_Base_SetConfig+0x130>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00b      	beq.n	8006e1a <TIM_Base_SetConfig+0xb2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a25      	ldr	r2, [pc, #148]	; (8006e9c <TIM_Base_SetConfig+0x134>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d007      	beq.n	8006e1a <TIM_Base_SetConfig+0xb2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a24      	ldr	r2, [pc, #144]	; (8006ea0 <TIM_Base_SetConfig+0x138>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d003      	beq.n	8006e1a <TIM_Base_SetConfig+0xb2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a23      	ldr	r2, [pc, #140]	; (8006ea4 <TIM_Base_SetConfig+0x13c>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d108      	bne.n	8006e2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a0a      	ldr	r2, [pc, #40]	; (8006e7c <TIM_Base_SetConfig+0x114>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <TIM_Base_SetConfig+0xf8>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a0c      	ldr	r2, [pc, #48]	; (8006e8c <TIM_Base_SetConfig+0x124>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d103      	bne.n	8006e68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	691a      	ldr	r2, [r3, #16]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	615a      	str	r2, [r3, #20]
}
 8006e6e:	bf00      	nop
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	40010000 	.word	0x40010000
 8006e80:	40000400 	.word	0x40000400
 8006e84:	40000800 	.word	0x40000800
 8006e88:	40000c00 	.word	0x40000c00
 8006e8c:	40010400 	.word	0x40010400
 8006e90:	40014000 	.word	0x40014000
 8006e94:	40014400 	.word	0x40014400
 8006e98:	40014800 	.word	0x40014800
 8006e9c:	40001800 	.word	0x40001800
 8006ea0:	40001c00 	.word	0x40001c00
 8006ea4:	40002000 	.word	0x40002000

08006ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f023 0201 	bic.w	r2, r3, #1
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0303 	bic.w	r3, r3, #3
 8006ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f023 0302 	bic.w	r3, r3, #2
 8006ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a20      	ldr	r2, [pc, #128]	; (8006f80 <TIM_OC1_SetConfig+0xd8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d003      	beq.n	8006f0c <TIM_OC1_SetConfig+0x64>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a1f      	ldr	r2, [pc, #124]	; (8006f84 <TIM_OC1_SetConfig+0xdc>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d10c      	bne.n	8006f26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f023 0308 	bic.w	r3, r3, #8
 8006f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f023 0304 	bic.w	r3, r3, #4
 8006f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a15      	ldr	r2, [pc, #84]	; (8006f80 <TIM_OC1_SetConfig+0xd8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d003      	beq.n	8006f36 <TIM_OC1_SetConfig+0x8e>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a14      	ldr	r2, [pc, #80]	; (8006f84 <TIM_OC1_SetConfig+0xdc>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d111      	bne.n	8006f5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	621a      	str	r2, [r3, #32]
}
 8006f74:	bf00      	nop
 8006f76:	371c      	adds	r7, #28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	40010000 	.word	0x40010000
 8006f84:	40010400 	.word	0x40010400

08006f88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	f023 0210 	bic.w	r2, r3, #16
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	021b      	lsls	r3, r3, #8
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f023 0320 	bic.w	r3, r3, #32
 8006fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a22      	ldr	r2, [pc, #136]	; (800706c <TIM_OC2_SetConfig+0xe4>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d003      	beq.n	8006ff0 <TIM_OC2_SetConfig+0x68>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a21      	ldr	r2, [pc, #132]	; (8007070 <TIM_OC2_SetConfig+0xe8>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d10d      	bne.n	800700c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	4313      	orrs	r3, r2
 8007002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800700a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a17      	ldr	r2, [pc, #92]	; (800706c <TIM_OC2_SetConfig+0xe4>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d003      	beq.n	800701c <TIM_OC2_SetConfig+0x94>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a16      	ldr	r2, [pc, #88]	; (8007070 <TIM_OC2_SetConfig+0xe8>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d113      	bne.n	8007044 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800702a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	4313      	orrs	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	621a      	str	r2, [r3, #32]
}
 800705e:	bf00      	nop
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	40010000 	.word	0x40010000
 8007070:	40010400 	.word	0x40010400

08007074 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 0303 	bic.w	r3, r3, #3
 80070aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a21      	ldr	r2, [pc, #132]	; (8007154 <TIM_OC3_SetConfig+0xe0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d003      	beq.n	80070da <TIM_OC3_SetConfig+0x66>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a20      	ldr	r2, [pc, #128]	; (8007158 <TIM_OC3_SetConfig+0xe4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d10d      	bne.n	80070f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a16      	ldr	r2, [pc, #88]	; (8007154 <TIM_OC3_SetConfig+0xe0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d003      	beq.n	8007106 <TIM_OC3_SetConfig+0x92>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a15      	ldr	r2, [pc, #84]	; (8007158 <TIM_OC3_SetConfig+0xe4>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d113      	bne.n	800712e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800710c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4313      	orrs	r3, r2
 8007120:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	621a      	str	r2, [r3, #32]
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	40010000 	.word	0x40010000
 8007158:	40010400 	.word	0x40010400

0800715c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800718a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	021b      	lsls	r3, r3, #8
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4313      	orrs	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	031b      	lsls	r3, r3, #12
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a12      	ldr	r2, [pc, #72]	; (8007200 <TIM_OC4_SetConfig+0xa4>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d003      	beq.n	80071c4 <TIM_OC4_SetConfig+0x68>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a11      	ldr	r2, [pc, #68]	; (8007204 <TIM_OC4_SetConfig+0xa8>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d109      	bne.n	80071d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	019b      	lsls	r3, r3, #6
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	621a      	str	r2, [r3, #32]
}
 80071f2:	bf00      	nop
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	40010000 	.word	0x40010000
 8007204:	40010400 	.word	0x40010400

08007208 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f003 031f 	and.w	r3, r3, #31
 800721a:	2201      	movs	r2, #1
 800721c:	fa02 f303 	lsl.w	r3, r2, r3
 8007220:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a1a      	ldr	r2, [r3, #32]
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	43db      	mvns	r3, r3
 800722a:	401a      	ands	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a1a      	ldr	r2, [r3, #32]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f003 031f 	and.w	r3, r3, #31
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	fa01 f303 	lsl.w	r3, r1, r3
 8007240:	431a      	orrs	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	621a      	str	r2, [r3, #32]
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
	...

08007254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007268:	2302      	movs	r3, #2
 800726a:	e05a      	b.n	8007322 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a21      	ldr	r2, [pc, #132]	; (8007330 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d022      	beq.n	80072f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b8:	d01d      	beq.n	80072f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a1d      	ldr	r2, [pc, #116]	; (8007334 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d018      	beq.n	80072f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a1b      	ldr	r2, [pc, #108]	; (8007338 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d013      	beq.n	80072f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a1a      	ldr	r2, [pc, #104]	; (800733c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d00e      	beq.n	80072f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a18      	ldr	r2, [pc, #96]	; (8007340 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d009      	beq.n	80072f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a17      	ldr	r2, [pc, #92]	; (8007344 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d004      	beq.n	80072f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a15      	ldr	r2, [pc, #84]	; (8007348 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d10c      	bne.n	8007310 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	4313      	orrs	r3, r2
 8007306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	40010000 	.word	0x40010000
 8007334:	40000400 	.word	0x40000400
 8007338:	40000800 	.word	0x40000800
 800733c:	40000c00 	.word	0x40000c00
 8007340:	40010400 	.word	0x40010400
 8007344:	40014000 	.word	0x40014000
 8007348:	40001800 	.word	0x40001800

0800734c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e03f      	b.n	8007406 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fd fb20 	bl	80049e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2224      	movs	r2, #36	; 0x24
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fe69 	bl	8008090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	691a      	ldr	r2, [r3, #16]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695a      	ldr	r2, [r3, #20]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2220      	movs	r2, #32
 8007400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	4613      	mov	r3, r2
 800741a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b20      	cmp	r3, #32
 8007426:	d11d      	bne.n	8007464 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <HAL_UART_Receive_DMA+0x26>
 800742e:	88fb      	ldrh	r3, [r7, #6]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e016      	b.n	8007466 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800743e:	2b01      	cmp	r3, #1
 8007440:	d101      	bne.n	8007446 <HAL_UART_Receive_DMA+0x38>
 8007442:	2302      	movs	r3, #2
 8007444:	e00f      	b.n	8007466 <HAL_UART_Receive_DMA+0x58>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007454:	88fb      	ldrh	r3, [r7, #6]
 8007456:	461a      	mov	r2, r3
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 fbb8 	bl	8007bd0 <UART_Start_Receive_DMA>
 8007460:	4603      	mov	r3, r0
 8007462:	e000      	b.n	8007466 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007464:	2302      	movs	r3, #2
  }
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b0ba      	sub	sp, #232	; 0xe8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007496:	2300      	movs	r3, #0
 8007498:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800749c:	2300      	movs	r3, #0
 800749e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a6:	f003 030f 	and.w	r3, r3, #15
 80074aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80074ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10f      	bne.n	80074d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ba:	f003 0320 	and.w	r3, r3, #32
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d009      	beq.n	80074d6 <HAL_UART_IRQHandler+0x66>
 80074c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fd23 	bl	8007f1a <UART_Receive_IT>
      return;
 80074d4:	e256      	b.n	8007984 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80074d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 80de 	beq.w	800769c <HAL_UART_IRQHandler+0x22c>
 80074e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d106      	bne.n	80074fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 80d1 	beq.w	800769c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00b      	beq.n	800751e <HAL_UART_IRQHandler+0xae>
 8007506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800750a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750e:	2b00      	cmp	r3, #0
 8007510:	d005      	beq.n	800751e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	f043 0201 	orr.w	r2, r3, #1
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800751e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00b      	beq.n	8007542 <HAL_UART_IRQHandler+0xd2>
 800752a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	f043 0202 	orr.w	r2, r3, #2
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00b      	beq.n	8007566 <HAL_UART_IRQHandler+0xf6>
 800754e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	f043 0204 	orr.w	r2, r3, #4
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d011      	beq.n	8007596 <HAL_UART_IRQHandler+0x126>
 8007572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b00      	cmp	r3, #0
 800757c:	d105      	bne.n	800758a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800757e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d005      	beq.n	8007596 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	f043 0208 	orr.w	r2, r3, #8
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 81ed 	beq.w	800797a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a4:	f003 0320 	and.w	r3, r3, #32
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d008      	beq.n	80075be <HAL_UART_IRQHandler+0x14e>
 80075ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fcae 	bl	8007f1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c8:	2b40      	cmp	r3, #64	; 0x40
 80075ca:	bf0c      	ite	eq
 80075cc:	2301      	moveq	r3, #1
 80075ce:	2300      	movne	r3, #0
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	f003 0308 	and.w	r3, r3, #8
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d103      	bne.n	80075ea <HAL_UART_IRQHandler+0x17a>
 80075e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d04f      	beq.n	800768a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fbb6 	bl	8007d5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fa:	2b40      	cmp	r3, #64	; 0x40
 80075fc:	d141      	bne.n	8007682 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3314      	adds	r3, #20
 8007604:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800760c:	e853 3f00 	ldrex	r3, [r3]
 8007610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007614:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800761c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3314      	adds	r3, #20
 8007626:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800762a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800762e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007636:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1d9      	bne.n	80075fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764e:	2b00      	cmp	r3, #0
 8007650:	d013      	beq.n	800767a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007656:	4a7d      	ldr	r2, [pc, #500]	; (800784c <HAL_UART_IRQHandler+0x3dc>)
 8007658:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765e:	4618      	mov	r0, r3
 8007660:	f7fd fd88 	bl	8005174 <HAL_DMA_Abort_IT>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d016      	beq.n	8007698 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007674:	4610      	mov	r0, r2
 8007676:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007678:	e00e      	b.n	8007698 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f99a 	bl	80079b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007680:	e00a      	b.n	8007698 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f996 	bl	80079b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007688:	e006      	b.n	8007698 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f992 	bl	80079b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007696:	e170      	b.n	800797a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007698:	bf00      	nop
    return;
 800769a:	e16e      	b.n	800797a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	f040 814a 	bne.w	800793a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80076a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076aa:	f003 0310 	and.w	r3, r3, #16
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 8143 	beq.w	800793a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80076b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b8:	f003 0310 	and.w	r3, r3, #16
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 813c 	beq.w	800793a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076c2:	2300      	movs	r3, #0
 80076c4:	60bb      	str	r3, [r7, #8]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	60bb      	str	r3, [r7, #8]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	60bb      	str	r3, [r7, #8]
 80076d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e2:	2b40      	cmp	r3, #64	; 0x40
 80076e4:	f040 80b4 	bne.w	8007850 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 8140 	beq.w	800797e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007706:	429a      	cmp	r2, r3
 8007708:	f080 8139 	bcs.w	800797e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007712:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800771e:	f000 8088 	beq.w	8007832 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	330c      	adds	r3, #12
 8007728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007738:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800773c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007740:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	330c      	adds	r3, #12
 800774a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800774e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007752:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800775a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007766:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1d9      	bne.n	8007722 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3314      	adds	r3, #20
 8007774:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800777e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007780:	f023 0301 	bic.w	r3, r3, #1
 8007784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3314      	adds	r3, #20
 800778e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007792:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007796:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007798:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800779a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e1      	bne.n	800776e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3314      	adds	r3, #20
 80077b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3314      	adds	r3, #20
 80077ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e3      	bne.n	80077aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	330c      	adds	r3, #12
 80077f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077fa:	e853 3f00 	ldrex	r3, [r3]
 80077fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007802:	f023 0310 	bic.w	r3, r3, #16
 8007806:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	330c      	adds	r3, #12
 8007810:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007814:	65ba      	str	r2, [r7, #88]	; 0x58
 8007816:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007818:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800781a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800781c:	e841 2300 	strex	r3, r2, [r1]
 8007820:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e3      	bne.n	80077f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	4618      	mov	r0, r3
 800782e:	f7fd fc31 	bl	8005094 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800783a:	b29b      	uxth	r3, r3
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	b29b      	uxth	r3, r3
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f8c0 	bl	80079c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007848:	e099      	b.n	800797e <HAL_UART_IRQHandler+0x50e>
 800784a:	bf00      	nop
 800784c:	08007e23 	.word	0x08007e23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007858:	b29b      	uxth	r3, r3
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007864:	b29b      	uxth	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 808b 	beq.w	8007982 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800786c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 8086 	beq.w	8007982 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	330c      	adds	r3, #12
 800787c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007888:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800788c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	330c      	adds	r3, #12
 8007896:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800789a:	647a      	str	r2, [r7, #68]	; 0x44
 800789c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e3      	bne.n	8007876 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3314      	adds	r3, #20
 80078b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	623b      	str	r3, [r7, #32]
   return(result);
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	f023 0301 	bic.w	r3, r3, #1
 80078c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3314      	adds	r3, #20
 80078ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078d2:	633a      	str	r2, [r7, #48]	; 0x30
 80078d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e3      	bne.n	80078ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	330c      	adds	r3, #12
 80078fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	e853 3f00 	ldrex	r3, [r3]
 8007902:	60fb      	str	r3, [r7, #12]
   return(result);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0310 	bic.w	r3, r3, #16
 800790a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	330c      	adds	r3, #12
 8007914:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007918:	61fa      	str	r2, [r7, #28]
 800791a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791c:	69b9      	ldr	r1, [r7, #24]
 800791e:	69fa      	ldr	r2, [r7, #28]
 8007920:	e841 2300 	strex	r3, r2, [r1]
 8007924:	617b      	str	r3, [r7, #20]
   return(result);
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e3      	bne.n	80078f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800792c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f848 	bl	80079c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007938:	e023      	b.n	8007982 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800793a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <HAL_UART_IRQHandler+0x4ea>
 8007946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800794a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa79 	bl	8007e4a <UART_Transmit_IT>
    return;
 8007958:	e014      	b.n	8007984 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800795a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800795e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00e      	beq.n	8007984 <HAL_UART_IRQHandler+0x514>
 8007966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800796a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d008      	beq.n	8007984 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fab9 	bl	8007eea <UART_EndTransmit_IT>
    return;
 8007978:	e004      	b.n	8007984 <HAL_UART_IRQHandler+0x514>
    return;
 800797a:	bf00      	nop
 800797c:	e002      	b.n	8007984 <HAL_UART_IRQHandler+0x514>
      return;
 800797e:	bf00      	nop
 8007980:	e000      	b.n	8007984 <HAL_UART_IRQHandler+0x514>
      return;
 8007982:	bf00      	nop
  }
}
 8007984:	37e8      	adds	r7, #232	; 0xe8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop

0800798c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b09c      	sub	sp, #112	; 0x70
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d172      	bne.n	8007ae2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80079fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fe:	2200      	movs	r2, #0
 8007a00:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	330c      	adds	r3, #12
 8007a08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a0c:	e853 3f00 	ldrex	r3, [r3]
 8007a10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a18:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	330c      	adds	r3, #12
 8007a20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a22:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a24:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e5      	bne.n	8007a02 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3314      	adds	r3, #20
 8007a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a40:	e853 3f00 	ldrex	r3, [r3]
 8007a44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a48:	f023 0301 	bic.w	r3, r3, #1
 8007a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3314      	adds	r3, #20
 8007a54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a56:	647a      	str	r2, [r7, #68]	; 0x44
 8007a58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a5e:	e841 2300 	strex	r3, r2, [r1]
 8007a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1e5      	bne.n	8007a36 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3314      	adds	r3, #20
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	623b      	str	r3, [r7, #32]
   return(result);
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a80:	663b      	str	r3, [r7, #96]	; 0x60
 8007a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3314      	adds	r3, #20
 8007a88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a8a:	633a      	str	r2, [r7, #48]	; 0x30
 8007a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e5      	bne.n	8007a6a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d119      	bne.n	8007ae2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	330c      	adds	r3, #12
 8007ab4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	e853 3f00 	ldrex	r3, [r3]
 8007abc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f023 0310 	bic.w	r3, r3, #16
 8007ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	330c      	adds	r3, #12
 8007acc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ace:	61fa      	str	r2, [r7, #28]
 8007ad0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	69b9      	ldr	r1, [r7, #24]
 8007ad4:	69fa      	ldr	r2, [r7, #28]
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	617b      	str	r3, [r7, #20]
   return(result);
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1e5      	bne.n	8007aae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d106      	bne.n	8007af8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007aee:	4619      	mov	r1, r3
 8007af0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007af2:	f7ff ff69 	bl	80079c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007af6:	e002      	b.n	8007afe <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007af8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007afa:	f7fa fb65 	bl	80021c8 <HAL_UART_RxCpltCallback>
}
 8007afe:	bf00      	nop
 8007b00:	3770      	adds	r7, #112	; 0x70
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d108      	bne.n	8007b2e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b20:	085b      	lsrs	r3, r3, #1
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	4619      	mov	r1, r3
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f7ff ff4e 	bl	80079c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b2c:	e002      	b.n	8007b34 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f7ff ff36 	bl	80079a0 <HAL_UART_RxHalfCpltCallback>
}
 8007b34:	bf00      	nop
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b58:	2b80      	cmp	r3, #128	; 0x80
 8007b5a:	bf0c      	ite	eq
 8007b5c:	2301      	moveq	r3, #1
 8007b5e:	2300      	movne	r3, #0
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b21      	cmp	r3, #33	; 0x21
 8007b6e:	d108      	bne.n	8007b82 <UART_DMAError+0x46>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d005      	beq.n	8007b82 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007b7c:	68b8      	ldr	r0, [r7, #8]
 8007b7e:	f000 f8c5 	bl	8007d0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8c:	2b40      	cmp	r3, #64	; 0x40
 8007b8e:	bf0c      	ite	eq
 8007b90:	2301      	moveq	r3, #1
 8007b92:	2300      	movne	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b22      	cmp	r3, #34	; 0x22
 8007ba2:	d108      	bne.n	8007bb6 <UART_DMAError+0x7a>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d005      	beq.n	8007bb6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2200      	movs	r2, #0
 8007bae:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007bb0:	68b8      	ldr	r0, [r7, #8]
 8007bb2:	f000 f8d3 	bl	8007d5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	f043 0210 	orr.w	r2, r3, #16
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bc2:	68b8      	ldr	r0, [r7, #8]
 8007bc4:	f7ff fef6 	bl	80079b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bc8:	bf00      	nop
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b098      	sub	sp, #96	; 0x60
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	88fa      	ldrh	r2, [r7, #6]
 8007be8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2222      	movs	r2, #34	; 0x22
 8007bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfc:	4a40      	ldr	r2, [pc, #256]	; (8007d00 <UART_Start_Receive_DMA+0x130>)
 8007bfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c04:	4a3f      	ldr	r2, [pc, #252]	; (8007d04 <UART_Start_Receive_DMA+0x134>)
 8007c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0c:	4a3e      	ldr	r2, [pc, #248]	; (8007d08 <UART_Start_Receive_DMA+0x138>)
 8007c0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	2200      	movs	r2, #0
 8007c16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007c18:	f107 0308 	add.w	r3, r7, #8
 8007c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	88fb      	ldrh	r3, [r7, #6]
 8007c30:	f7fd f9d8 	bl	8004fe4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007c34:	2300      	movs	r3, #0
 8007c36:	613b      	str	r3, [r7, #16]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	613b      	str	r3, [r7, #16]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d019      	beq.n	8007c8e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	330c      	adds	r3, #12
 8007c60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c70:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	330c      	adds	r3, #12
 8007c78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c7a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007c7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007c80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e5      	bne.n	8007c5a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3314      	adds	r3, #20
 8007c94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca0:	f043 0301 	orr.w	r3, r3, #1
 8007ca4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3314      	adds	r3, #20
 8007cac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cae:	63ba      	str	r2, [r7, #56]	; 0x38
 8007cb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e5      	bne.n	8007c8e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3314      	adds	r3, #20
 8007cc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd8:	653b      	str	r3, [r7, #80]	; 0x50
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3314      	adds	r3, #20
 8007ce0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ce2:	627a      	str	r2, [r7, #36]	; 0x24
 8007ce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6a39      	ldr	r1, [r7, #32]
 8007ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e5      	bne.n	8007cc2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3760      	adds	r7, #96	; 0x60
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	080079e1 	.word	0x080079e1
 8007d04:	08007b07 	.word	0x08007b07
 8007d08:	08007b3d 	.word	0x08007b3d

08007d0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b089      	sub	sp, #36	; 0x24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	330c      	adds	r3, #12
 8007d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d2a:	61fb      	str	r3, [r7, #28]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	330c      	adds	r3, #12
 8007d32:	69fa      	ldr	r2, [r7, #28]
 8007d34:	61ba      	str	r2, [r7, #24]
 8007d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	6979      	ldr	r1, [r7, #20]
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	613b      	str	r3, [r7, #16]
   return(result);
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e5      	bne.n	8007d14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007d50:	bf00      	nop
 8007d52:	3724      	adds	r7, #36	; 0x24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b095      	sub	sp, #84	; 0x54
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	330c      	adds	r3, #12
 8007d6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6e:	e853 3f00 	ldrex	r3, [r3]
 8007d72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	330c      	adds	r3, #12
 8007d82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d84:	643a      	str	r2, [r7, #64]	; 0x40
 8007d86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d8c:	e841 2300 	strex	r3, r2, [r1]
 8007d90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1e5      	bne.n	8007d64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3314      	adds	r3, #20
 8007d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	e853 3f00 	ldrex	r3, [r3]
 8007da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	f023 0301 	bic.w	r3, r3, #1
 8007dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3314      	adds	r3, #20
 8007db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007db8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e5      	bne.n	8007d98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d119      	bne.n	8007e08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	330c      	adds	r3, #12
 8007dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	f023 0310 	bic.w	r3, r3, #16
 8007dea:	647b      	str	r3, [r7, #68]	; 0x44
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	330c      	adds	r3, #12
 8007df2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007df4:	61ba      	str	r2, [r7, #24]
 8007df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	6979      	ldr	r1, [r7, #20]
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	613b      	str	r3, [r7, #16]
   return(result);
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e5      	bne.n	8007dd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e16:	bf00      	nop
 8007e18:	3754      	adds	r7, #84	; 0x54
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f7ff fdb9 	bl	80079b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e42:	bf00      	nop
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b21      	cmp	r3, #33	; 0x21
 8007e5c:	d13e      	bne.n	8007edc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e66:	d114      	bne.n	8007e92 <UART_Transmit_IT+0x48>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d110      	bne.n	8007e92 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	1c9a      	adds	r2, r3, #2
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	621a      	str	r2, [r3, #32]
 8007e90:	e008      	b.n	8007ea4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	1c59      	adds	r1, r3, #1
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6211      	str	r1, [r2, #32]
 8007e9c:	781a      	ldrb	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10f      	bne.n	8007ed8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ec6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ed6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	e000      	b.n	8007ede <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007edc:	2302      	movs	r3, #2
  }
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b082      	sub	sp, #8
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68da      	ldr	r2, [r3, #12]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2220      	movs	r2, #32
 8007f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff fd3e 	bl	800798c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b08c      	sub	sp, #48	; 0x30
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b22      	cmp	r3, #34	; 0x22
 8007f2c:	f040 80ab 	bne.w	8008086 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f38:	d117      	bne.n	8007f6a <UART_Receive_IT+0x50>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d113      	bne.n	8007f6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f62:	1c9a      	adds	r2, r3, #2
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	629a      	str	r2, [r3, #40]	; 0x28
 8007f68:	e026      	b.n	8007fb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7c:	d007      	beq.n	8007f8e <UART_Receive_IT+0x74>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10a      	bne.n	8007f9c <UART_Receive_IT+0x82>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d106      	bne.n	8007f9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f98:	701a      	strb	r2, [r3, #0]
 8007f9a:	e008      	b.n	8007fae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d15a      	bne.n	8008082 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 0220 	bic.w	r2, r2, #32
 8007fda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	695a      	ldr	r2, [r3, #20]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 0201 	bic.w	r2, r2, #1
 8007ffa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008008:	2b01      	cmp	r3, #1
 800800a:	d135      	bne.n	8008078 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	330c      	adds	r3, #12
 8008018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	e853 3f00 	ldrex	r3, [r3]
 8008020:	613b      	str	r3, [r7, #16]
   return(result);
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	f023 0310 	bic.w	r3, r3, #16
 8008028:	627b      	str	r3, [r7, #36]	; 0x24
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	330c      	adds	r3, #12
 8008030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008032:	623a      	str	r2, [r7, #32]
 8008034:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	69f9      	ldr	r1, [r7, #28]
 8008038:	6a3a      	ldr	r2, [r7, #32]
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1e5      	bne.n	8008012 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0310 	and.w	r3, r3, #16
 8008050:	2b10      	cmp	r3, #16
 8008052:	d10a      	bne.n	800806a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008054:	2300      	movs	r3, #0
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	60fb      	str	r3, [r7, #12]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7ff fca9 	bl	80079c8 <HAL_UARTEx_RxEventCallback>
 8008076:	e002      	b.n	800807e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7fa f8a5 	bl	80021c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	e002      	b.n	8008088 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	e000      	b.n	8008088 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008086:	2302      	movs	r3, #2
  }
}
 8008088:	4618      	mov	r0, r3
 800808a:	3730      	adds	r7, #48	; 0x30
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008094:	b0c0      	sub	sp, #256	; 0x100
 8008096:	af00      	add	r7, sp, #0
 8008098:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800809c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ac:	68d9      	ldr	r1, [r3, #12]
 80080ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	ea40 0301 	orr.w	r3, r0, r1
 80080b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	431a      	orrs	r2, r3
 80080c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	431a      	orrs	r2, r3
 80080d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80080e8:	f021 010c 	bic.w	r1, r1, #12
 80080ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080f6:	430b      	orrs	r3, r1
 80080f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810a:	6999      	ldr	r1, [r3, #24]
 800810c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	ea40 0301 	orr.w	r3, r0, r1
 8008116:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	4b8f      	ldr	r3, [pc, #572]	; (800835c <UART_SetConfig+0x2cc>)
 8008120:	429a      	cmp	r2, r3
 8008122:	d005      	beq.n	8008130 <UART_SetConfig+0xa0>
 8008124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	4b8d      	ldr	r3, [pc, #564]	; (8008360 <UART_SetConfig+0x2d0>)
 800812c:	429a      	cmp	r2, r3
 800812e:	d104      	bne.n	800813a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008130:	f7fe f8fe 	bl	8006330 <HAL_RCC_GetPCLK2Freq>
 8008134:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008138:	e003      	b.n	8008142 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800813a:	f7fe f8e5 	bl	8006308 <HAL_RCC_GetPCLK1Freq>
 800813e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800814c:	f040 810c 	bne.w	8008368 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008154:	2200      	movs	r2, #0
 8008156:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800815a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800815e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008162:	4622      	mov	r2, r4
 8008164:	462b      	mov	r3, r5
 8008166:	1891      	adds	r1, r2, r2
 8008168:	65b9      	str	r1, [r7, #88]	; 0x58
 800816a:	415b      	adcs	r3, r3
 800816c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800816e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008172:	4621      	mov	r1, r4
 8008174:	eb12 0801 	adds.w	r8, r2, r1
 8008178:	4629      	mov	r1, r5
 800817a:	eb43 0901 	adc.w	r9, r3, r1
 800817e:	f04f 0200 	mov.w	r2, #0
 8008182:	f04f 0300 	mov.w	r3, #0
 8008186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800818a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800818e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008192:	4690      	mov	r8, r2
 8008194:	4699      	mov	r9, r3
 8008196:	4623      	mov	r3, r4
 8008198:	eb18 0303 	adds.w	r3, r8, r3
 800819c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081a0:	462b      	mov	r3, r5
 80081a2:	eb49 0303 	adc.w	r3, r9, r3
 80081a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081be:	460b      	mov	r3, r1
 80081c0:	18db      	adds	r3, r3, r3
 80081c2:	653b      	str	r3, [r7, #80]	; 0x50
 80081c4:	4613      	mov	r3, r2
 80081c6:	eb42 0303 	adc.w	r3, r2, r3
 80081ca:	657b      	str	r3, [r7, #84]	; 0x54
 80081cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081d4:	f7f8 fcc6 	bl	8000b64 <__aeabi_uldivmod>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4b61      	ldr	r3, [pc, #388]	; (8008364 <UART_SetConfig+0x2d4>)
 80081de:	fba3 2302 	umull	r2, r3, r3, r2
 80081e2:	095b      	lsrs	r3, r3, #5
 80081e4:	011c      	lsls	r4, r3, #4
 80081e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081ea:	2200      	movs	r2, #0
 80081ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80081f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80081f8:	4642      	mov	r2, r8
 80081fa:	464b      	mov	r3, r9
 80081fc:	1891      	adds	r1, r2, r2
 80081fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8008200:	415b      	adcs	r3, r3
 8008202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008204:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008208:	4641      	mov	r1, r8
 800820a:	eb12 0a01 	adds.w	sl, r2, r1
 800820e:	4649      	mov	r1, r9
 8008210:	eb43 0b01 	adc.w	fp, r3, r1
 8008214:	f04f 0200 	mov.w	r2, #0
 8008218:	f04f 0300 	mov.w	r3, #0
 800821c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008220:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008228:	4692      	mov	sl, r2
 800822a:	469b      	mov	fp, r3
 800822c:	4643      	mov	r3, r8
 800822e:	eb1a 0303 	adds.w	r3, sl, r3
 8008232:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008236:	464b      	mov	r3, r9
 8008238:	eb4b 0303 	adc.w	r3, fp, r3
 800823c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800824c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008250:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008254:	460b      	mov	r3, r1
 8008256:	18db      	adds	r3, r3, r3
 8008258:	643b      	str	r3, [r7, #64]	; 0x40
 800825a:	4613      	mov	r3, r2
 800825c:	eb42 0303 	adc.w	r3, r2, r3
 8008260:	647b      	str	r3, [r7, #68]	; 0x44
 8008262:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008266:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800826a:	f7f8 fc7b 	bl	8000b64 <__aeabi_uldivmod>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	4611      	mov	r1, r2
 8008274:	4b3b      	ldr	r3, [pc, #236]	; (8008364 <UART_SetConfig+0x2d4>)
 8008276:	fba3 2301 	umull	r2, r3, r3, r1
 800827a:	095b      	lsrs	r3, r3, #5
 800827c:	2264      	movs	r2, #100	; 0x64
 800827e:	fb02 f303 	mul.w	r3, r2, r3
 8008282:	1acb      	subs	r3, r1, r3
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800828a:	4b36      	ldr	r3, [pc, #216]	; (8008364 <UART_SetConfig+0x2d4>)
 800828c:	fba3 2302 	umull	r2, r3, r3, r2
 8008290:	095b      	lsrs	r3, r3, #5
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008298:	441c      	add	r4, r3
 800829a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800829e:	2200      	movs	r2, #0
 80082a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082ac:	4642      	mov	r2, r8
 80082ae:	464b      	mov	r3, r9
 80082b0:	1891      	adds	r1, r2, r2
 80082b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80082b4:	415b      	adcs	r3, r3
 80082b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082bc:	4641      	mov	r1, r8
 80082be:	1851      	adds	r1, r2, r1
 80082c0:	6339      	str	r1, [r7, #48]	; 0x30
 80082c2:	4649      	mov	r1, r9
 80082c4:	414b      	adcs	r3, r1
 80082c6:	637b      	str	r3, [r7, #52]	; 0x34
 80082c8:	f04f 0200 	mov.w	r2, #0
 80082cc:	f04f 0300 	mov.w	r3, #0
 80082d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80082d4:	4659      	mov	r1, fp
 80082d6:	00cb      	lsls	r3, r1, #3
 80082d8:	4651      	mov	r1, sl
 80082da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082de:	4651      	mov	r1, sl
 80082e0:	00ca      	lsls	r2, r1, #3
 80082e2:	4610      	mov	r0, r2
 80082e4:	4619      	mov	r1, r3
 80082e6:	4603      	mov	r3, r0
 80082e8:	4642      	mov	r2, r8
 80082ea:	189b      	adds	r3, r3, r2
 80082ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082f0:	464b      	mov	r3, r9
 80082f2:	460a      	mov	r2, r1
 80082f4:	eb42 0303 	adc.w	r3, r2, r3
 80082f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008308:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800830c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008310:	460b      	mov	r3, r1
 8008312:	18db      	adds	r3, r3, r3
 8008314:	62bb      	str	r3, [r7, #40]	; 0x28
 8008316:	4613      	mov	r3, r2
 8008318:	eb42 0303 	adc.w	r3, r2, r3
 800831c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800831e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008322:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008326:	f7f8 fc1d 	bl	8000b64 <__aeabi_uldivmod>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	4b0d      	ldr	r3, [pc, #52]	; (8008364 <UART_SetConfig+0x2d4>)
 8008330:	fba3 1302 	umull	r1, r3, r3, r2
 8008334:	095b      	lsrs	r3, r3, #5
 8008336:	2164      	movs	r1, #100	; 0x64
 8008338:	fb01 f303 	mul.w	r3, r1, r3
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	3332      	adds	r3, #50	; 0x32
 8008342:	4a08      	ldr	r2, [pc, #32]	; (8008364 <UART_SetConfig+0x2d4>)
 8008344:	fba2 2303 	umull	r2, r3, r2, r3
 8008348:	095b      	lsrs	r3, r3, #5
 800834a:	f003 0207 	and.w	r2, r3, #7
 800834e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4422      	add	r2, r4
 8008356:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008358:	e106      	b.n	8008568 <UART_SetConfig+0x4d8>
 800835a:	bf00      	nop
 800835c:	40011000 	.word	0x40011000
 8008360:	40011400 	.word	0x40011400
 8008364:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800836c:	2200      	movs	r2, #0
 800836e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008372:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008376:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800837a:	4642      	mov	r2, r8
 800837c:	464b      	mov	r3, r9
 800837e:	1891      	adds	r1, r2, r2
 8008380:	6239      	str	r1, [r7, #32]
 8008382:	415b      	adcs	r3, r3
 8008384:	627b      	str	r3, [r7, #36]	; 0x24
 8008386:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800838a:	4641      	mov	r1, r8
 800838c:	1854      	adds	r4, r2, r1
 800838e:	4649      	mov	r1, r9
 8008390:	eb43 0501 	adc.w	r5, r3, r1
 8008394:	f04f 0200 	mov.w	r2, #0
 8008398:	f04f 0300 	mov.w	r3, #0
 800839c:	00eb      	lsls	r3, r5, #3
 800839e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083a2:	00e2      	lsls	r2, r4, #3
 80083a4:	4614      	mov	r4, r2
 80083a6:	461d      	mov	r5, r3
 80083a8:	4643      	mov	r3, r8
 80083aa:	18e3      	adds	r3, r4, r3
 80083ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083b0:	464b      	mov	r3, r9
 80083b2:	eb45 0303 	adc.w	r3, r5, r3
 80083b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083ca:	f04f 0200 	mov.w	r2, #0
 80083ce:	f04f 0300 	mov.w	r3, #0
 80083d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80083d6:	4629      	mov	r1, r5
 80083d8:	008b      	lsls	r3, r1, #2
 80083da:	4621      	mov	r1, r4
 80083dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083e0:	4621      	mov	r1, r4
 80083e2:	008a      	lsls	r2, r1, #2
 80083e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80083e8:	f7f8 fbbc 	bl	8000b64 <__aeabi_uldivmod>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	4b60      	ldr	r3, [pc, #384]	; (8008574 <UART_SetConfig+0x4e4>)
 80083f2:	fba3 2302 	umull	r2, r3, r3, r2
 80083f6:	095b      	lsrs	r3, r3, #5
 80083f8:	011c      	lsls	r4, r3, #4
 80083fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083fe:	2200      	movs	r2, #0
 8008400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008404:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008408:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800840c:	4642      	mov	r2, r8
 800840e:	464b      	mov	r3, r9
 8008410:	1891      	adds	r1, r2, r2
 8008412:	61b9      	str	r1, [r7, #24]
 8008414:	415b      	adcs	r3, r3
 8008416:	61fb      	str	r3, [r7, #28]
 8008418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800841c:	4641      	mov	r1, r8
 800841e:	1851      	adds	r1, r2, r1
 8008420:	6139      	str	r1, [r7, #16]
 8008422:	4649      	mov	r1, r9
 8008424:	414b      	adcs	r3, r1
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	f04f 0200 	mov.w	r2, #0
 800842c:	f04f 0300 	mov.w	r3, #0
 8008430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008434:	4659      	mov	r1, fp
 8008436:	00cb      	lsls	r3, r1, #3
 8008438:	4651      	mov	r1, sl
 800843a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800843e:	4651      	mov	r1, sl
 8008440:	00ca      	lsls	r2, r1, #3
 8008442:	4610      	mov	r0, r2
 8008444:	4619      	mov	r1, r3
 8008446:	4603      	mov	r3, r0
 8008448:	4642      	mov	r2, r8
 800844a:	189b      	adds	r3, r3, r2
 800844c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008450:	464b      	mov	r3, r9
 8008452:	460a      	mov	r2, r1
 8008454:	eb42 0303 	adc.w	r3, r2, r3
 8008458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800845c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	67bb      	str	r3, [r7, #120]	; 0x78
 8008466:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008468:	f04f 0200 	mov.w	r2, #0
 800846c:	f04f 0300 	mov.w	r3, #0
 8008470:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008474:	4649      	mov	r1, r9
 8008476:	008b      	lsls	r3, r1, #2
 8008478:	4641      	mov	r1, r8
 800847a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800847e:	4641      	mov	r1, r8
 8008480:	008a      	lsls	r2, r1, #2
 8008482:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008486:	f7f8 fb6d 	bl	8000b64 <__aeabi_uldivmod>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	4611      	mov	r1, r2
 8008490:	4b38      	ldr	r3, [pc, #224]	; (8008574 <UART_SetConfig+0x4e4>)
 8008492:	fba3 2301 	umull	r2, r3, r3, r1
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	2264      	movs	r2, #100	; 0x64
 800849a:	fb02 f303 	mul.w	r3, r2, r3
 800849e:	1acb      	subs	r3, r1, r3
 80084a0:	011b      	lsls	r3, r3, #4
 80084a2:	3332      	adds	r3, #50	; 0x32
 80084a4:	4a33      	ldr	r2, [pc, #204]	; (8008574 <UART_SetConfig+0x4e4>)
 80084a6:	fba2 2303 	umull	r2, r3, r2, r3
 80084aa:	095b      	lsrs	r3, r3, #5
 80084ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084b0:	441c      	add	r4, r3
 80084b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084b6:	2200      	movs	r2, #0
 80084b8:	673b      	str	r3, [r7, #112]	; 0x70
 80084ba:	677a      	str	r2, [r7, #116]	; 0x74
 80084bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084c0:	4642      	mov	r2, r8
 80084c2:	464b      	mov	r3, r9
 80084c4:	1891      	adds	r1, r2, r2
 80084c6:	60b9      	str	r1, [r7, #8]
 80084c8:	415b      	adcs	r3, r3
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084d0:	4641      	mov	r1, r8
 80084d2:	1851      	adds	r1, r2, r1
 80084d4:	6039      	str	r1, [r7, #0]
 80084d6:	4649      	mov	r1, r9
 80084d8:	414b      	adcs	r3, r1
 80084da:	607b      	str	r3, [r7, #4]
 80084dc:	f04f 0200 	mov.w	r2, #0
 80084e0:	f04f 0300 	mov.w	r3, #0
 80084e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80084e8:	4659      	mov	r1, fp
 80084ea:	00cb      	lsls	r3, r1, #3
 80084ec:	4651      	mov	r1, sl
 80084ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084f2:	4651      	mov	r1, sl
 80084f4:	00ca      	lsls	r2, r1, #3
 80084f6:	4610      	mov	r0, r2
 80084f8:	4619      	mov	r1, r3
 80084fa:	4603      	mov	r3, r0
 80084fc:	4642      	mov	r2, r8
 80084fe:	189b      	adds	r3, r3, r2
 8008500:	66bb      	str	r3, [r7, #104]	; 0x68
 8008502:	464b      	mov	r3, r9
 8008504:	460a      	mov	r2, r1
 8008506:	eb42 0303 	adc.w	r3, r2, r3
 800850a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800850c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	663b      	str	r3, [r7, #96]	; 0x60
 8008516:	667a      	str	r2, [r7, #100]	; 0x64
 8008518:	f04f 0200 	mov.w	r2, #0
 800851c:	f04f 0300 	mov.w	r3, #0
 8008520:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008524:	4649      	mov	r1, r9
 8008526:	008b      	lsls	r3, r1, #2
 8008528:	4641      	mov	r1, r8
 800852a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800852e:	4641      	mov	r1, r8
 8008530:	008a      	lsls	r2, r1, #2
 8008532:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008536:	f7f8 fb15 	bl	8000b64 <__aeabi_uldivmod>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4b0d      	ldr	r3, [pc, #52]	; (8008574 <UART_SetConfig+0x4e4>)
 8008540:	fba3 1302 	umull	r1, r3, r3, r2
 8008544:	095b      	lsrs	r3, r3, #5
 8008546:	2164      	movs	r1, #100	; 0x64
 8008548:	fb01 f303 	mul.w	r3, r1, r3
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	011b      	lsls	r3, r3, #4
 8008550:	3332      	adds	r3, #50	; 0x32
 8008552:	4a08      	ldr	r2, [pc, #32]	; (8008574 <UART_SetConfig+0x4e4>)
 8008554:	fba2 2303 	umull	r2, r3, r2, r3
 8008558:	095b      	lsrs	r3, r3, #5
 800855a:	f003 020f 	and.w	r2, r3, #15
 800855e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4422      	add	r2, r4
 8008566:	609a      	str	r2, [r3, #8]
}
 8008568:	bf00      	nop
 800856a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800856e:	46bd      	mov	sp, r7
 8008570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008574:	51eb851f 	.word	0x51eb851f

08008578 <cos>:
 8008578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800857a:	ec53 2b10 	vmov	r2, r3, d0
 800857e:	4826      	ldr	r0, [pc, #152]	; (8008618 <cos+0xa0>)
 8008580:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008584:	4281      	cmp	r1, r0
 8008586:	dc06      	bgt.n	8008596 <cos+0x1e>
 8008588:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008610 <cos+0x98>
 800858c:	b005      	add	sp, #20
 800858e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008592:	f000 b8c1 	b.w	8008718 <__kernel_cos>
 8008596:	4821      	ldr	r0, [pc, #132]	; (800861c <cos+0xa4>)
 8008598:	4281      	cmp	r1, r0
 800859a:	dd09      	ble.n	80085b0 <cos+0x38>
 800859c:	ee10 0a10 	vmov	r0, s0
 80085a0:	4619      	mov	r1, r3
 80085a2:	f7f7 fe15 	bl	80001d0 <__aeabi_dsub>
 80085a6:	ec41 0b10 	vmov	d0, r0, r1
 80085aa:	b005      	add	sp, #20
 80085ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80085b0:	4668      	mov	r0, sp
 80085b2:	f000 fa39 	bl	8008a28 <__ieee754_rem_pio2>
 80085b6:	f000 0003 	and.w	r0, r0, #3
 80085ba:	2801      	cmp	r0, #1
 80085bc:	d00b      	beq.n	80085d6 <cos+0x5e>
 80085be:	2802      	cmp	r0, #2
 80085c0:	d016      	beq.n	80085f0 <cos+0x78>
 80085c2:	b9e0      	cbnz	r0, 80085fe <cos+0x86>
 80085c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085c8:	ed9d 0b00 	vldr	d0, [sp]
 80085cc:	f000 f8a4 	bl	8008718 <__kernel_cos>
 80085d0:	ec51 0b10 	vmov	r0, r1, d0
 80085d4:	e7e7      	b.n	80085a6 <cos+0x2e>
 80085d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085da:	ed9d 0b00 	vldr	d0, [sp]
 80085de:	f000 f963 	bl	80088a8 <__kernel_sin>
 80085e2:	ec53 2b10 	vmov	r2, r3, d0
 80085e6:	ee10 0a10 	vmov	r0, s0
 80085ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80085ee:	e7da      	b.n	80085a6 <cos+0x2e>
 80085f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085f4:	ed9d 0b00 	vldr	d0, [sp]
 80085f8:	f000 f88e 	bl	8008718 <__kernel_cos>
 80085fc:	e7f1      	b.n	80085e2 <cos+0x6a>
 80085fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008602:	ed9d 0b00 	vldr	d0, [sp]
 8008606:	2001      	movs	r0, #1
 8008608:	f000 f94e 	bl	80088a8 <__kernel_sin>
 800860c:	e7e0      	b.n	80085d0 <cos+0x58>
 800860e:	bf00      	nop
	...
 8008618:	3fe921fb 	.word	0x3fe921fb
 800861c:	7fefffff 	.word	0x7fefffff

08008620 <sin>:
 8008620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008622:	ec53 2b10 	vmov	r2, r3, d0
 8008626:	4828      	ldr	r0, [pc, #160]	; (80086c8 <sin+0xa8>)
 8008628:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800862c:	4281      	cmp	r1, r0
 800862e:	dc07      	bgt.n	8008640 <sin+0x20>
 8008630:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80086c0 <sin+0xa0>
 8008634:	2000      	movs	r0, #0
 8008636:	b005      	add	sp, #20
 8008638:	f85d eb04 	ldr.w	lr, [sp], #4
 800863c:	f000 b934 	b.w	80088a8 <__kernel_sin>
 8008640:	4822      	ldr	r0, [pc, #136]	; (80086cc <sin+0xac>)
 8008642:	4281      	cmp	r1, r0
 8008644:	dd09      	ble.n	800865a <sin+0x3a>
 8008646:	ee10 0a10 	vmov	r0, s0
 800864a:	4619      	mov	r1, r3
 800864c:	f7f7 fdc0 	bl	80001d0 <__aeabi_dsub>
 8008650:	ec41 0b10 	vmov	d0, r0, r1
 8008654:	b005      	add	sp, #20
 8008656:	f85d fb04 	ldr.w	pc, [sp], #4
 800865a:	4668      	mov	r0, sp
 800865c:	f000 f9e4 	bl	8008a28 <__ieee754_rem_pio2>
 8008660:	f000 0003 	and.w	r0, r0, #3
 8008664:	2801      	cmp	r0, #1
 8008666:	d00c      	beq.n	8008682 <sin+0x62>
 8008668:	2802      	cmp	r0, #2
 800866a:	d011      	beq.n	8008690 <sin+0x70>
 800866c:	b9f0      	cbnz	r0, 80086ac <sin+0x8c>
 800866e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008672:	ed9d 0b00 	vldr	d0, [sp]
 8008676:	2001      	movs	r0, #1
 8008678:	f000 f916 	bl	80088a8 <__kernel_sin>
 800867c:	ec51 0b10 	vmov	r0, r1, d0
 8008680:	e7e6      	b.n	8008650 <sin+0x30>
 8008682:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008686:	ed9d 0b00 	vldr	d0, [sp]
 800868a:	f000 f845 	bl	8008718 <__kernel_cos>
 800868e:	e7f5      	b.n	800867c <sin+0x5c>
 8008690:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008694:	ed9d 0b00 	vldr	d0, [sp]
 8008698:	2001      	movs	r0, #1
 800869a:	f000 f905 	bl	80088a8 <__kernel_sin>
 800869e:	ec53 2b10 	vmov	r2, r3, d0
 80086a2:	ee10 0a10 	vmov	r0, s0
 80086a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80086aa:	e7d1      	b.n	8008650 <sin+0x30>
 80086ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80086b0:	ed9d 0b00 	vldr	d0, [sp]
 80086b4:	f000 f830 	bl	8008718 <__kernel_cos>
 80086b8:	e7f1      	b.n	800869e <sin+0x7e>
 80086ba:	bf00      	nop
 80086bc:	f3af 8000 	nop.w
	...
 80086c8:	3fe921fb 	.word	0x3fe921fb
 80086cc:	7fefffff 	.word	0x7fefffff

080086d0 <sqrtf>:
 80086d0:	b508      	push	{r3, lr}
 80086d2:	ed2d 8b02 	vpush	{d8}
 80086d6:	eeb0 8a40 	vmov.f32	s16, s0
 80086da:	f000 f817 	bl	800870c <__ieee754_sqrtf>
 80086de:	eeb4 8a48 	vcmp.f32	s16, s16
 80086e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e6:	d60c      	bvs.n	8008702 <sqrtf+0x32>
 80086e8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008708 <sqrtf+0x38>
 80086ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80086f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086f4:	d505      	bpl.n	8008702 <sqrtf+0x32>
 80086f6:	f000 ffff 	bl	80096f8 <__errno>
 80086fa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80086fe:	2321      	movs	r3, #33	; 0x21
 8008700:	6003      	str	r3, [r0, #0]
 8008702:	ecbd 8b02 	vpop	{d8}
 8008706:	bd08      	pop	{r3, pc}
 8008708:	00000000 	.word	0x00000000

0800870c <__ieee754_sqrtf>:
 800870c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008710:	4770      	bx	lr
 8008712:	0000      	movs	r0, r0
 8008714:	0000      	movs	r0, r0
	...

08008718 <__kernel_cos>:
 8008718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871c:	ec57 6b10 	vmov	r6, r7, d0
 8008720:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008724:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008728:	ed8d 1b00 	vstr	d1, [sp]
 800872c:	da07      	bge.n	800873e <__kernel_cos+0x26>
 800872e:	ee10 0a10 	vmov	r0, s0
 8008732:	4639      	mov	r1, r7
 8008734:	f7f8 f99e 	bl	8000a74 <__aeabi_d2iz>
 8008738:	2800      	cmp	r0, #0
 800873a:	f000 8088 	beq.w	800884e <__kernel_cos+0x136>
 800873e:	4632      	mov	r2, r6
 8008740:	463b      	mov	r3, r7
 8008742:	4630      	mov	r0, r6
 8008744:	4639      	mov	r1, r7
 8008746:	f7f7 fefb 	bl	8000540 <__aeabi_dmul>
 800874a:	4b51      	ldr	r3, [pc, #324]	; (8008890 <__kernel_cos+0x178>)
 800874c:	2200      	movs	r2, #0
 800874e:	4604      	mov	r4, r0
 8008750:	460d      	mov	r5, r1
 8008752:	f7f7 fef5 	bl	8000540 <__aeabi_dmul>
 8008756:	a340      	add	r3, pc, #256	; (adr r3, 8008858 <__kernel_cos+0x140>)
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	4682      	mov	sl, r0
 800875e:	468b      	mov	fp, r1
 8008760:	4620      	mov	r0, r4
 8008762:	4629      	mov	r1, r5
 8008764:	f7f7 feec 	bl	8000540 <__aeabi_dmul>
 8008768:	a33d      	add	r3, pc, #244	; (adr r3, 8008860 <__kernel_cos+0x148>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f7f7 fd31 	bl	80001d4 <__adddf3>
 8008772:	4622      	mov	r2, r4
 8008774:	462b      	mov	r3, r5
 8008776:	f7f7 fee3 	bl	8000540 <__aeabi_dmul>
 800877a:	a33b      	add	r3, pc, #236	; (adr r3, 8008868 <__kernel_cos+0x150>)
 800877c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008780:	f7f7 fd26 	bl	80001d0 <__aeabi_dsub>
 8008784:	4622      	mov	r2, r4
 8008786:	462b      	mov	r3, r5
 8008788:	f7f7 feda 	bl	8000540 <__aeabi_dmul>
 800878c:	a338      	add	r3, pc, #224	; (adr r3, 8008870 <__kernel_cos+0x158>)
 800878e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008792:	f7f7 fd1f 	bl	80001d4 <__adddf3>
 8008796:	4622      	mov	r2, r4
 8008798:	462b      	mov	r3, r5
 800879a:	f7f7 fed1 	bl	8000540 <__aeabi_dmul>
 800879e:	a336      	add	r3, pc, #216	; (adr r3, 8008878 <__kernel_cos+0x160>)
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	f7f7 fd14 	bl	80001d0 <__aeabi_dsub>
 80087a8:	4622      	mov	r2, r4
 80087aa:	462b      	mov	r3, r5
 80087ac:	f7f7 fec8 	bl	8000540 <__aeabi_dmul>
 80087b0:	a333      	add	r3, pc, #204	; (adr r3, 8008880 <__kernel_cos+0x168>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f7f7 fd0d 	bl	80001d4 <__adddf3>
 80087ba:	4622      	mov	r2, r4
 80087bc:	462b      	mov	r3, r5
 80087be:	f7f7 febf 	bl	8000540 <__aeabi_dmul>
 80087c2:	4622      	mov	r2, r4
 80087c4:	462b      	mov	r3, r5
 80087c6:	f7f7 febb 	bl	8000540 <__aeabi_dmul>
 80087ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ce:	4604      	mov	r4, r0
 80087d0:	460d      	mov	r5, r1
 80087d2:	4630      	mov	r0, r6
 80087d4:	4639      	mov	r1, r7
 80087d6:	f7f7 feb3 	bl	8000540 <__aeabi_dmul>
 80087da:	460b      	mov	r3, r1
 80087dc:	4602      	mov	r2, r0
 80087de:	4629      	mov	r1, r5
 80087e0:	4620      	mov	r0, r4
 80087e2:	f7f7 fcf5 	bl	80001d0 <__aeabi_dsub>
 80087e6:	4b2b      	ldr	r3, [pc, #172]	; (8008894 <__kernel_cos+0x17c>)
 80087e8:	4598      	cmp	r8, r3
 80087ea:	4606      	mov	r6, r0
 80087ec:	460f      	mov	r7, r1
 80087ee:	dc10      	bgt.n	8008812 <__kernel_cos+0xfa>
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	4650      	mov	r0, sl
 80087f6:	4659      	mov	r1, fp
 80087f8:	f7f7 fcea 	bl	80001d0 <__aeabi_dsub>
 80087fc:	460b      	mov	r3, r1
 80087fe:	4926      	ldr	r1, [pc, #152]	; (8008898 <__kernel_cos+0x180>)
 8008800:	4602      	mov	r2, r0
 8008802:	2000      	movs	r0, #0
 8008804:	f7f7 fce4 	bl	80001d0 <__aeabi_dsub>
 8008808:	ec41 0b10 	vmov	d0, r0, r1
 800880c:	b003      	add	sp, #12
 800880e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008812:	4b22      	ldr	r3, [pc, #136]	; (800889c <__kernel_cos+0x184>)
 8008814:	4920      	ldr	r1, [pc, #128]	; (8008898 <__kernel_cos+0x180>)
 8008816:	4598      	cmp	r8, r3
 8008818:	bfcc      	ite	gt
 800881a:	4d21      	ldrgt	r5, [pc, #132]	; (80088a0 <__kernel_cos+0x188>)
 800881c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008820:	2400      	movs	r4, #0
 8008822:	4622      	mov	r2, r4
 8008824:	462b      	mov	r3, r5
 8008826:	2000      	movs	r0, #0
 8008828:	f7f7 fcd2 	bl	80001d0 <__aeabi_dsub>
 800882c:	4622      	mov	r2, r4
 800882e:	4680      	mov	r8, r0
 8008830:	4689      	mov	r9, r1
 8008832:	462b      	mov	r3, r5
 8008834:	4650      	mov	r0, sl
 8008836:	4659      	mov	r1, fp
 8008838:	f7f7 fcca 	bl	80001d0 <__aeabi_dsub>
 800883c:	4632      	mov	r2, r6
 800883e:	463b      	mov	r3, r7
 8008840:	f7f7 fcc6 	bl	80001d0 <__aeabi_dsub>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	4640      	mov	r0, r8
 800884a:	4649      	mov	r1, r9
 800884c:	e7da      	b.n	8008804 <__kernel_cos+0xec>
 800884e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008888 <__kernel_cos+0x170>
 8008852:	e7db      	b.n	800880c <__kernel_cos+0xf4>
 8008854:	f3af 8000 	nop.w
 8008858:	be8838d4 	.word	0xbe8838d4
 800885c:	bda8fae9 	.word	0xbda8fae9
 8008860:	bdb4b1c4 	.word	0xbdb4b1c4
 8008864:	3e21ee9e 	.word	0x3e21ee9e
 8008868:	809c52ad 	.word	0x809c52ad
 800886c:	3e927e4f 	.word	0x3e927e4f
 8008870:	19cb1590 	.word	0x19cb1590
 8008874:	3efa01a0 	.word	0x3efa01a0
 8008878:	16c15177 	.word	0x16c15177
 800887c:	3f56c16c 	.word	0x3f56c16c
 8008880:	5555554c 	.word	0x5555554c
 8008884:	3fa55555 	.word	0x3fa55555
 8008888:	00000000 	.word	0x00000000
 800888c:	3ff00000 	.word	0x3ff00000
 8008890:	3fe00000 	.word	0x3fe00000
 8008894:	3fd33332 	.word	0x3fd33332
 8008898:	3ff00000 	.word	0x3ff00000
 800889c:	3fe90000 	.word	0x3fe90000
 80088a0:	3fd20000 	.word	0x3fd20000
 80088a4:	00000000 	.word	0x00000000

080088a8 <__kernel_sin>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	ed2d 8b04 	vpush	{d8-d9}
 80088b0:	eeb0 8a41 	vmov.f32	s16, s2
 80088b4:	eef0 8a61 	vmov.f32	s17, s3
 80088b8:	ec55 4b10 	vmov	r4, r5, d0
 80088bc:	b083      	sub	sp, #12
 80088be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80088c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80088c6:	9001      	str	r0, [sp, #4]
 80088c8:	da06      	bge.n	80088d8 <__kernel_sin+0x30>
 80088ca:	ee10 0a10 	vmov	r0, s0
 80088ce:	4629      	mov	r1, r5
 80088d0:	f7f8 f8d0 	bl	8000a74 <__aeabi_d2iz>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d051      	beq.n	800897c <__kernel_sin+0xd4>
 80088d8:	4622      	mov	r2, r4
 80088da:	462b      	mov	r3, r5
 80088dc:	4620      	mov	r0, r4
 80088de:	4629      	mov	r1, r5
 80088e0:	f7f7 fe2e 	bl	8000540 <__aeabi_dmul>
 80088e4:	4682      	mov	sl, r0
 80088e6:	468b      	mov	fp, r1
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	4620      	mov	r0, r4
 80088ee:	4629      	mov	r1, r5
 80088f0:	f7f7 fe26 	bl	8000540 <__aeabi_dmul>
 80088f4:	a341      	add	r3, pc, #260	; (adr r3, 80089fc <__kernel_sin+0x154>)
 80088f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fa:	4680      	mov	r8, r0
 80088fc:	4689      	mov	r9, r1
 80088fe:	4650      	mov	r0, sl
 8008900:	4659      	mov	r1, fp
 8008902:	f7f7 fe1d 	bl	8000540 <__aeabi_dmul>
 8008906:	a33f      	add	r3, pc, #252	; (adr r3, 8008a04 <__kernel_sin+0x15c>)
 8008908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890c:	f7f7 fc60 	bl	80001d0 <__aeabi_dsub>
 8008910:	4652      	mov	r2, sl
 8008912:	465b      	mov	r3, fp
 8008914:	f7f7 fe14 	bl	8000540 <__aeabi_dmul>
 8008918:	a33c      	add	r3, pc, #240	; (adr r3, 8008a0c <__kernel_sin+0x164>)
 800891a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891e:	f7f7 fc59 	bl	80001d4 <__adddf3>
 8008922:	4652      	mov	r2, sl
 8008924:	465b      	mov	r3, fp
 8008926:	f7f7 fe0b 	bl	8000540 <__aeabi_dmul>
 800892a:	a33a      	add	r3, pc, #232	; (adr r3, 8008a14 <__kernel_sin+0x16c>)
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	f7f7 fc4e 	bl	80001d0 <__aeabi_dsub>
 8008934:	4652      	mov	r2, sl
 8008936:	465b      	mov	r3, fp
 8008938:	f7f7 fe02 	bl	8000540 <__aeabi_dmul>
 800893c:	a337      	add	r3, pc, #220	; (adr r3, 8008a1c <__kernel_sin+0x174>)
 800893e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008942:	f7f7 fc47 	bl	80001d4 <__adddf3>
 8008946:	9b01      	ldr	r3, [sp, #4]
 8008948:	4606      	mov	r6, r0
 800894a:	460f      	mov	r7, r1
 800894c:	b9eb      	cbnz	r3, 800898a <__kernel_sin+0xe2>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4650      	mov	r0, sl
 8008954:	4659      	mov	r1, fp
 8008956:	f7f7 fdf3 	bl	8000540 <__aeabi_dmul>
 800895a:	a325      	add	r3, pc, #148	; (adr r3, 80089f0 <__kernel_sin+0x148>)
 800895c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008960:	f7f7 fc36 	bl	80001d0 <__aeabi_dsub>
 8008964:	4642      	mov	r2, r8
 8008966:	464b      	mov	r3, r9
 8008968:	f7f7 fdea 	bl	8000540 <__aeabi_dmul>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4620      	mov	r0, r4
 8008972:	4629      	mov	r1, r5
 8008974:	f7f7 fc2e 	bl	80001d4 <__adddf3>
 8008978:	4604      	mov	r4, r0
 800897a:	460d      	mov	r5, r1
 800897c:	ec45 4b10 	vmov	d0, r4, r5
 8008980:	b003      	add	sp, #12
 8008982:	ecbd 8b04 	vpop	{d8-d9}
 8008986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898a:	4b1b      	ldr	r3, [pc, #108]	; (80089f8 <__kernel_sin+0x150>)
 800898c:	ec51 0b18 	vmov	r0, r1, d8
 8008990:	2200      	movs	r2, #0
 8008992:	f7f7 fdd5 	bl	8000540 <__aeabi_dmul>
 8008996:	4632      	mov	r2, r6
 8008998:	ec41 0b19 	vmov	d9, r0, r1
 800899c:	463b      	mov	r3, r7
 800899e:	4640      	mov	r0, r8
 80089a0:	4649      	mov	r1, r9
 80089a2:	f7f7 fdcd 	bl	8000540 <__aeabi_dmul>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	ec51 0b19 	vmov	r0, r1, d9
 80089ae:	f7f7 fc0f 	bl	80001d0 <__aeabi_dsub>
 80089b2:	4652      	mov	r2, sl
 80089b4:	465b      	mov	r3, fp
 80089b6:	f7f7 fdc3 	bl	8000540 <__aeabi_dmul>
 80089ba:	ec53 2b18 	vmov	r2, r3, d8
 80089be:	f7f7 fc07 	bl	80001d0 <__aeabi_dsub>
 80089c2:	a30b      	add	r3, pc, #44	; (adr r3, 80089f0 <__kernel_sin+0x148>)
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	4606      	mov	r6, r0
 80089ca:	460f      	mov	r7, r1
 80089cc:	4640      	mov	r0, r8
 80089ce:	4649      	mov	r1, r9
 80089d0:	f7f7 fdb6 	bl	8000540 <__aeabi_dmul>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	4630      	mov	r0, r6
 80089da:	4639      	mov	r1, r7
 80089dc:	f7f7 fbfa 	bl	80001d4 <__adddf3>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4620      	mov	r0, r4
 80089e6:	4629      	mov	r1, r5
 80089e8:	f7f7 fbf2 	bl	80001d0 <__aeabi_dsub>
 80089ec:	e7c4      	b.n	8008978 <__kernel_sin+0xd0>
 80089ee:	bf00      	nop
 80089f0:	55555549 	.word	0x55555549
 80089f4:	3fc55555 	.word	0x3fc55555
 80089f8:	3fe00000 	.word	0x3fe00000
 80089fc:	5acfd57c 	.word	0x5acfd57c
 8008a00:	3de5d93a 	.word	0x3de5d93a
 8008a04:	8a2b9ceb 	.word	0x8a2b9ceb
 8008a08:	3e5ae5e6 	.word	0x3e5ae5e6
 8008a0c:	57b1fe7d 	.word	0x57b1fe7d
 8008a10:	3ec71de3 	.word	0x3ec71de3
 8008a14:	19c161d5 	.word	0x19c161d5
 8008a18:	3f2a01a0 	.word	0x3f2a01a0
 8008a1c:	1110f8a6 	.word	0x1110f8a6
 8008a20:	3f811111 	.word	0x3f811111
 8008a24:	00000000 	.word	0x00000000

08008a28 <__ieee754_rem_pio2>:
 8008a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2c:	ed2d 8b02 	vpush	{d8}
 8008a30:	ec55 4b10 	vmov	r4, r5, d0
 8008a34:	4bca      	ldr	r3, [pc, #808]	; (8008d60 <__ieee754_rem_pio2+0x338>)
 8008a36:	b08b      	sub	sp, #44	; 0x2c
 8008a38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008a3c:	4598      	cmp	r8, r3
 8008a3e:	4682      	mov	sl, r0
 8008a40:	9502      	str	r5, [sp, #8]
 8008a42:	dc08      	bgt.n	8008a56 <__ieee754_rem_pio2+0x2e>
 8008a44:	2200      	movs	r2, #0
 8008a46:	2300      	movs	r3, #0
 8008a48:	ed80 0b00 	vstr	d0, [r0]
 8008a4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008a50:	f04f 0b00 	mov.w	fp, #0
 8008a54:	e028      	b.n	8008aa8 <__ieee754_rem_pio2+0x80>
 8008a56:	4bc3      	ldr	r3, [pc, #780]	; (8008d64 <__ieee754_rem_pio2+0x33c>)
 8008a58:	4598      	cmp	r8, r3
 8008a5a:	dc78      	bgt.n	8008b4e <__ieee754_rem_pio2+0x126>
 8008a5c:	9b02      	ldr	r3, [sp, #8]
 8008a5e:	4ec2      	ldr	r6, [pc, #776]	; (8008d68 <__ieee754_rem_pio2+0x340>)
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	ee10 0a10 	vmov	r0, s0
 8008a66:	a3b0      	add	r3, pc, #704	; (adr r3, 8008d28 <__ieee754_rem_pio2+0x300>)
 8008a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	dd39      	ble.n	8008ae4 <__ieee754_rem_pio2+0xbc>
 8008a70:	f7f7 fbae 	bl	80001d0 <__aeabi_dsub>
 8008a74:	45b0      	cmp	r8, r6
 8008a76:	4604      	mov	r4, r0
 8008a78:	460d      	mov	r5, r1
 8008a7a:	d01b      	beq.n	8008ab4 <__ieee754_rem_pio2+0x8c>
 8008a7c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008d30 <__ieee754_rem_pio2+0x308>)
 8008a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a82:	f7f7 fba5 	bl	80001d0 <__aeabi_dsub>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	e9ca 2300 	strd	r2, r3, [sl]
 8008a8e:	4620      	mov	r0, r4
 8008a90:	4629      	mov	r1, r5
 8008a92:	f7f7 fb9d 	bl	80001d0 <__aeabi_dsub>
 8008a96:	a3a6      	add	r3, pc, #664	; (adr r3, 8008d30 <__ieee754_rem_pio2+0x308>)
 8008a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9c:	f7f7 fb98 	bl	80001d0 <__aeabi_dsub>
 8008aa0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008aa4:	f04f 0b01 	mov.w	fp, #1
 8008aa8:	4658      	mov	r0, fp
 8008aaa:	b00b      	add	sp, #44	; 0x2c
 8008aac:	ecbd 8b02 	vpop	{d8}
 8008ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008d38 <__ieee754_rem_pio2+0x310>)
 8008ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aba:	f7f7 fb89 	bl	80001d0 <__aeabi_dsub>
 8008abe:	a3a0      	add	r3, pc, #640	; (adr r3, 8008d40 <__ieee754_rem_pio2+0x318>)
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	460d      	mov	r5, r1
 8008ac8:	f7f7 fb82 	bl	80001d0 <__aeabi_dsub>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	e9ca 2300 	strd	r2, r3, [sl]
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f7f7 fb7a 	bl	80001d0 <__aeabi_dsub>
 8008adc:	a398      	add	r3, pc, #608	; (adr r3, 8008d40 <__ieee754_rem_pio2+0x318>)
 8008ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae2:	e7db      	b.n	8008a9c <__ieee754_rem_pio2+0x74>
 8008ae4:	f7f7 fb76 	bl	80001d4 <__adddf3>
 8008ae8:	45b0      	cmp	r8, r6
 8008aea:	4604      	mov	r4, r0
 8008aec:	460d      	mov	r5, r1
 8008aee:	d016      	beq.n	8008b1e <__ieee754_rem_pio2+0xf6>
 8008af0:	a38f      	add	r3, pc, #572	; (adr r3, 8008d30 <__ieee754_rem_pio2+0x308>)
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	f7f7 fb6d 	bl	80001d4 <__adddf3>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	e9ca 2300 	strd	r2, r3, [sl]
 8008b02:	4620      	mov	r0, r4
 8008b04:	4629      	mov	r1, r5
 8008b06:	f7f7 fb63 	bl	80001d0 <__aeabi_dsub>
 8008b0a:	a389      	add	r3, pc, #548	; (adr r3, 8008d30 <__ieee754_rem_pio2+0x308>)
 8008b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b10:	f7f7 fb60 	bl	80001d4 <__adddf3>
 8008b14:	f04f 3bff 	mov.w	fp, #4294967295
 8008b18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008b1c:	e7c4      	b.n	8008aa8 <__ieee754_rem_pio2+0x80>
 8008b1e:	a386      	add	r3, pc, #536	; (adr r3, 8008d38 <__ieee754_rem_pio2+0x310>)
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	f7f7 fb56 	bl	80001d4 <__adddf3>
 8008b28:	a385      	add	r3, pc, #532	; (adr r3, 8008d40 <__ieee754_rem_pio2+0x318>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	460d      	mov	r5, r1
 8008b32:	f7f7 fb4f 	bl	80001d4 <__adddf3>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	e9ca 2300 	strd	r2, r3, [sl]
 8008b3e:	4620      	mov	r0, r4
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7f7 fb45 	bl	80001d0 <__aeabi_dsub>
 8008b46:	a37e      	add	r3, pc, #504	; (adr r3, 8008d40 <__ieee754_rem_pio2+0x318>)
 8008b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4c:	e7e0      	b.n	8008b10 <__ieee754_rem_pio2+0xe8>
 8008b4e:	4b87      	ldr	r3, [pc, #540]	; (8008d6c <__ieee754_rem_pio2+0x344>)
 8008b50:	4598      	cmp	r8, r3
 8008b52:	f300 80d8 	bgt.w	8008d06 <__ieee754_rem_pio2+0x2de>
 8008b56:	f000 f96d 	bl	8008e34 <fabs>
 8008b5a:	ec55 4b10 	vmov	r4, r5, d0
 8008b5e:	ee10 0a10 	vmov	r0, s0
 8008b62:	a379      	add	r3, pc, #484	; (adr r3, 8008d48 <__ieee754_rem_pio2+0x320>)
 8008b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b68:	4629      	mov	r1, r5
 8008b6a:	f7f7 fce9 	bl	8000540 <__aeabi_dmul>
 8008b6e:	4b80      	ldr	r3, [pc, #512]	; (8008d70 <__ieee754_rem_pio2+0x348>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	f7f7 fb2f 	bl	80001d4 <__adddf3>
 8008b76:	f7f7 ff7d 	bl	8000a74 <__aeabi_d2iz>
 8008b7a:	4683      	mov	fp, r0
 8008b7c:	f7f7 fc76 	bl	800046c <__aeabi_i2d>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	ec43 2b18 	vmov	d8, r2, r3
 8008b88:	a367      	add	r3, pc, #412	; (adr r3, 8008d28 <__ieee754_rem_pio2+0x300>)
 8008b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8e:	f7f7 fcd7 	bl	8000540 <__aeabi_dmul>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4620      	mov	r0, r4
 8008b98:	4629      	mov	r1, r5
 8008b9a:	f7f7 fb19 	bl	80001d0 <__aeabi_dsub>
 8008b9e:	a364      	add	r3, pc, #400	; (adr r3, 8008d30 <__ieee754_rem_pio2+0x308>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	4606      	mov	r6, r0
 8008ba6:	460f      	mov	r7, r1
 8008ba8:	ec51 0b18 	vmov	r0, r1, d8
 8008bac:	f7f7 fcc8 	bl	8000540 <__aeabi_dmul>
 8008bb0:	f1bb 0f1f 	cmp.w	fp, #31
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	460d      	mov	r5, r1
 8008bb8:	dc0d      	bgt.n	8008bd6 <__ieee754_rem_pio2+0x1ae>
 8008bba:	4b6e      	ldr	r3, [pc, #440]	; (8008d74 <__ieee754_rem_pio2+0x34c>)
 8008bbc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc4:	4543      	cmp	r3, r8
 8008bc6:	d006      	beq.n	8008bd6 <__ieee754_rem_pio2+0x1ae>
 8008bc8:	4622      	mov	r2, r4
 8008bca:	462b      	mov	r3, r5
 8008bcc:	4630      	mov	r0, r6
 8008bce:	4639      	mov	r1, r7
 8008bd0:	f7f7 fafe 	bl	80001d0 <__aeabi_dsub>
 8008bd4:	e00e      	b.n	8008bf4 <__ieee754_rem_pio2+0x1cc>
 8008bd6:	462b      	mov	r3, r5
 8008bd8:	4622      	mov	r2, r4
 8008bda:	4630      	mov	r0, r6
 8008bdc:	4639      	mov	r1, r7
 8008bde:	f7f7 faf7 	bl	80001d0 <__aeabi_dsub>
 8008be2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008be6:	9303      	str	r3, [sp, #12]
 8008be8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008bec:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008bf0:	2b10      	cmp	r3, #16
 8008bf2:	dc02      	bgt.n	8008bfa <__ieee754_rem_pio2+0x1d2>
 8008bf4:	e9ca 0100 	strd	r0, r1, [sl]
 8008bf8:	e039      	b.n	8008c6e <__ieee754_rem_pio2+0x246>
 8008bfa:	a34f      	add	r3, pc, #316	; (adr r3, 8008d38 <__ieee754_rem_pio2+0x310>)
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	ec51 0b18 	vmov	r0, r1, d8
 8008c04:	f7f7 fc9c 	bl	8000540 <__aeabi_dmul>
 8008c08:	4604      	mov	r4, r0
 8008c0a:	460d      	mov	r5, r1
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4630      	mov	r0, r6
 8008c12:	4639      	mov	r1, r7
 8008c14:	f7f7 fadc 	bl	80001d0 <__aeabi_dsub>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4680      	mov	r8, r0
 8008c1e:	4689      	mov	r9, r1
 8008c20:	4630      	mov	r0, r6
 8008c22:	4639      	mov	r1, r7
 8008c24:	f7f7 fad4 	bl	80001d0 <__aeabi_dsub>
 8008c28:	4622      	mov	r2, r4
 8008c2a:	462b      	mov	r3, r5
 8008c2c:	f7f7 fad0 	bl	80001d0 <__aeabi_dsub>
 8008c30:	a343      	add	r3, pc, #268	; (adr r3, 8008d40 <__ieee754_rem_pio2+0x318>)
 8008c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c36:	4604      	mov	r4, r0
 8008c38:	460d      	mov	r5, r1
 8008c3a:	ec51 0b18 	vmov	r0, r1, d8
 8008c3e:	f7f7 fc7f 	bl	8000540 <__aeabi_dmul>
 8008c42:	4622      	mov	r2, r4
 8008c44:	462b      	mov	r3, r5
 8008c46:	f7f7 fac3 	bl	80001d0 <__aeabi_dsub>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	4604      	mov	r4, r0
 8008c50:	460d      	mov	r5, r1
 8008c52:	4640      	mov	r0, r8
 8008c54:	4649      	mov	r1, r9
 8008c56:	f7f7 fabb 	bl	80001d0 <__aeabi_dsub>
 8008c5a:	9a03      	ldr	r2, [sp, #12]
 8008c5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	2b31      	cmp	r3, #49	; 0x31
 8008c64:	dc24      	bgt.n	8008cb0 <__ieee754_rem_pio2+0x288>
 8008c66:	e9ca 0100 	strd	r0, r1, [sl]
 8008c6a:	4646      	mov	r6, r8
 8008c6c:	464f      	mov	r7, r9
 8008c6e:	e9da 8900 	ldrd	r8, r9, [sl]
 8008c72:	4630      	mov	r0, r6
 8008c74:	4642      	mov	r2, r8
 8008c76:	464b      	mov	r3, r9
 8008c78:	4639      	mov	r1, r7
 8008c7a:	f7f7 faa9 	bl	80001d0 <__aeabi_dsub>
 8008c7e:	462b      	mov	r3, r5
 8008c80:	4622      	mov	r2, r4
 8008c82:	f7f7 faa5 	bl	80001d0 <__aeabi_dsub>
 8008c86:	9b02      	ldr	r3, [sp, #8]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008c8e:	f6bf af0b 	bge.w	8008aa8 <__ieee754_rem_pio2+0x80>
 8008c92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c96:	f8ca 3004 	str.w	r3, [sl, #4]
 8008c9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c9e:	f8ca 8000 	str.w	r8, [sl]
 8008ca2:	f8ca 0008 	str.w	r0, [sl, #8]
 8008ca6:	f8ca 300c 	str.w	r3, [sl, #12]
 8008caa:	f1cb 0b00 	rsb	fp, fp, #0
 8008cae:	e6fb      	b.n	8008aa8 <__ieee754_rem_pio2+0x80>
 8008cb0:	a327      	add	r3, pc, #156	; (adr r3, 8008d50 <__ieee754_rem_pio2+0x328>)
 8008cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb6:	ec51 0b18 	vmov	r0, r1, d8
 8008cba:	f7f7 fc41 	bl	8000540 <__aeabi_dmul>
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4640      	mov	r0, r8
 8008cc8:	4649      	mov	r1, r9
 8008cca:	f7f7 fa81 	bl	80001d0 <__aeabi_dsub>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	460f      	mov	r7, r1
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	4649      	mov	r1, r9
 8008cda:	f7f7 fa79 	bl	80001d0 <__aeabi_dsub>
 8008cde:	4622      	mov	r2, r4
 8008ce0:	462b      	mov	r3, r5
 8008ce2:	f7f7 fa75 	bl	80001d0 <__aeabi_dsub>
 8008ce6:	a31c      	add	r3, pc, #112	; (adr r3, 8008d58 <__ieee754_rem_pio2+0x330>)
 8008ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cec:	4604      	mov	r4, r0
 8008cee:	460d      	mov	r5, r1
 8008cf0:	ec51 0b18 	vmov	r0, r1, d8
 8008cf4:	f7f7 fc24 	bl	8000540 <__aeabi_dmul>
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	462b      	mov	r3, r5
 8008cfc:	f7f7 fa68 	bl	80001d0 <__aeabi_dsub>
 8008d00:	4604      	mov	r4, r0
 8008d02:	460d      	mov	r5, r1
 8008d04:	e760      	b.n	8008bc8 <__ieee754_rem_pio2+0x1a0>
 8008d06:	4b1c      	ldr	r3, [pc, #112]	; (8008d78 <__ieee754_rem_pio2+0x350>)
 8008d08:	4598      	cmp	r8, r3
 8008d0a:	dd37      	ble.n	8008d7c <__ieee754_rem_pio2+0x354>
 8008d0c:	ee10 2a10 	vmov	r2, s0
 8008d10:	462b      	mov	r3, r5
 8008d12:	4620      	mov	r0, r4
 8008d14:	4629      	mov	r1, r5
 8008d16:	f7f7 fa5b 	bl	80001d0 <__aeabi_dsub>
 8008d1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008d1e:	e9ca 0100 	strd	r0, r1, [sl]
 8008d22:	e695      	b.n	8008a50 <__ieee754_rem_pio2+0x28>
 8008d24:	f3af 8000 	nop.w
 8008d28:	54400000 	.word	0x54400000
 8008d2c:	3ff921fb 	.word	0x3ff921fb
 8008d30:	1a626331 	.word	0x1a626331
 8008d34:	3dd0b461 	.word	0x3dd0b461
 8008d38:	1a600000 	.word	0x1a600000
 8008d3c:	3dd0b461 	.word	0x3dd0b461
 8008d40:	2e037073 	.word	0x2e037073
 8008d44:	3ba3198a 	.word	0x3ba3198a
 8008d48:	6dc9c883 	.word	0x6dc9c883
 8008d4c:	3fe45f30 	.word	0x3fe45f30
 8008d50:	2e000000 	.word	0x2e000000
 8008d54:	3ba3198a 	.word	0x3ba3198a
 8008d58:	252049c1 	.word	0x252049c1
 8008d5c:	397b839a 	.word	0x397b839a
 8008d60:	3fe921fb 	.word	0x3fe921fb
 8008d64:	4002d97b 	.word	0x4002d97b
 8008d68:	3ff921fb 	.word	0x3ff921fb
 8008d6c:	413921fb 	.word	0x413921fb
 8008d70:	3fe00000 	.word	0x3fe00000
 8008d74:	080097ec 	.word	0x080097ec
 8008d78:	7fefffff 	.word	0x7fefffff
 8008d7c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008d80:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8008d84:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008d88:	4620      	mov	r0, r4
 8008d8a:	460d      	mov	r5, r1
 8008d8c:	f7f7 fe72 	bl	8000a74 <__aeabi_d2iz>
 8008d90:	f7f7 fb6c 	bl	800046c <__aeabi_i2d>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	4620      	mov	r0, r4
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008da0:	f7f7 fa16 	bl	80001d0 <__aeabi_dsub>
 8008da4:	4b21      	ldr	r3, [pc, #132]	; (8008e2c <__ieee754_rem_pio2+0x404>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	f7f7 fbca 	bl	8000540 <__aeabi_dmul>
 8008dac:	460d      	mov	r5, r1
 8008dae:	4604      	mov	r4, r0
 8008db0:	f7f7 fe60 	bl	8000a74 <__aeabi_d2iz>
 8008db4:	f7f7 fb5a 	bl	800046c <__aeabi_i2d>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008dc4:	f7f7 fa04 	bl	80001d0 <__aeabi_dsub>
 8008dc8:	4b18      	ldr	r3, [pc, #96]	; (8008e2c <__ieee754_rem_pio2+0x404>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f7f7 fbb8 	bl	8000540 <__aeabi_dmul>
 8008dd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008dd4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008dd8:	2703      	movs	r7, #3
 8008dda:	2400      	movs	r4, #0
 8008ddc:	2500      	movs	r5, #0
 8008dde:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8008de2:	4622      	mov	r2, r4
 8008de4:	462b      	mov	r3, r5
 8008de6:	46b9      	mov	r9, r7
 8008de8:	3f01      	subs	r7, #1
 8008dea:	f7f7 fe11 	bl	8000a10 <__aeabi_dcmpeq>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d1f5      	bne.n	8008dde <__ieee754_rem_pio2+0x3b6>
 8008df2:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <__ieee754_rem_pio2+0x408>)
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	2302      	movs	r3, #2
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	4632      	mov	r2, r6
 8008dfc:	464b      	mov	r3, r9
 8008dfe:	4651      	mov	r1, sl
 8008e00:	a804      	add	r0, sp, #16
 8008e02:	f000 f821 	bl	8008e48 <__kernel_rem_pio2>
 8008e06:	9b02      	ldr	r3, [sp, #8]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	4683      	mov	fp, r0
 8008e0c:	f6bf ae4c 	bge.w	8008aa8 <__ieee754_rem_pio2+0x80>
 8008e10:	e9da 2100 	ldrd	r2, r1, [sl]
 8008e14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e18:	e9ca 2300 	strd	r2, r3, [sl]
 8008e1c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008e20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e24:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008e28:	e73f      	b.n	8008caa <__ieee754_rem_pio2+0x282>
 8008e2a:	bf00      	nop
 8008e2c:	41700000 	.word	0x41700000
 8008e30:	0800986c 	.word	0x0800986c

08008e34 <fabs>:
 8008e34:	ec51 0b10 	vmov	r0, r1, d0
 8008e38:	ee10 2a10 	vmov	r2, s0
 8008e3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e40:	ec43 2b10 	vmov	d0, r2, r3
 8008e44:	4770      	bx	lr
	...

08008e48 <__kernel_rem_pio2>:
 8008e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4c:	ed2d 8b02 	vpush	{d8}
 8008e50:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008e54:	f112 0f14 	cmn.w	r2, #20
 8008e58:	9306      	str	r3, [sp, #24]
 8008e5a:	9104      	str	r1, [sp, #16]
 8008e5c:	4bc2      	ldr	r3, [pc, #776]	; (8009168 <__kernel_rem_pio2+0x320>)
 8008e5e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008e60:	9009      	str	r0, [sp, #36]	; 0x24
 8008e62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	9b06      	ldr	r3, [sp, #24]
 8008e6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e6e:	bfa8      	it	ge
 8008e70:	1ed4      	subge	r4, r2, #3
 8008e72:	9305      	str	r3, [sp, #20]
 8008e74:	bfb2      	itee	lt
 8008e76:	2400      	movlt	r4, #0
 8008e78:	2318      	movge	r3, #24
 8008e7a:	fb94 f4f3 	sdivge	r4, r4, r3
 8008e7e:	f06f 0317 	mvn.w	r3, #23
 8008e82:	fb04 3303 	mla	r3, r4, r3, r3
 8008e86:	eb03 0a02 	add.w	sl, r3, r2
 8008e8a:	9b00      	ldr	r3, [sp, #0]
 8008e8c:	9a05      	ldr	r2, [sp, #20]
 8008e8e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8009158 <__kernel_rem_pio2+0x310>
 8008e92:	eb03 0802 	add.w	r8, r3, r2
 8008e96:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008e98:	1aa7      	subs	r7, r4, r2
 8008e9a:	ae20      	add	r6, sp, #128	; 0x80
 8008e9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008ea0:	2500      	movs	r5, #0
 8008ea2:	4545      	cmp	r5, r8
 8008ea4:	dd13      	ble.n	8008ece <__kernel_rem_pio2+0x86>
 8008ea6:	9b06      	ldr	r3, [sp, #24]
 8008ea8:	aa20      	add	r2, sp, #128	; 0x80
 8008eaa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008eae:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008eb2:	f04f 0800 	mov.w	r8, #0
 8008eb6:	9b00      	ldr	r3, [sp, #0]
 8008eb8:	4598      	cmp	r8, r3
 8008eba:	dc31      	bgt.n	8008f20 <__kernel_rem_pio2+0xd8>
 8008ebc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8009158 <__kernel_rem_pio2+0x310>
 8008ec0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008ec4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ec8:	462f      	mov	r7, r5
 8008eca:	2600      	movs	r6, #0
 8008ecc:	e01b      	b.n	8008f06 <__kernel_rem_pio2+0xbe>
 8008ece:	42ef      	cmn	r7, r5
 8008ed0:	d407      	bmi.n	8008ee2 <__kernel_rem_pio2+0x9a>
 8008ed2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008ed6:	f7f7 fac9 	bl	800046c <__aeabi_i2d>
 8008eda:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008ede:	3501      	adds	r5, #1
 8008ee0:	e7df      	b.n	8008ea2 <__kernel_rem_pio2+0x5a>
 8008ee2:	ec51 0b18 	vmov	r0, r1, d8
 8008ee6:	e7f8      	b.n	8008eda <__kernel_rem_pio2+0x92>
 8008ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008ef0:	f7f7 fb26 	bl	8000540 <__aeabi_dmul>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008efc:	f7f7 f96a 	bl	80001d4 <__adddf3>
 8008f00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f04:	3601      	adds	r6, #1
 8008f06:	9b05      	ldr	r3, [sp, #20]
 8008f08:	429e      	cmp	r6, r3
 8008f0a:	f1a7 0708 	sub.w	r7, r7, #8
 8008f0e:	ddeb      	ble.n	8008ee8 <__kernel_rem_pio2+0xa0>
 8008f10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f14:	f108 0801 	add.w	r8, r8, #1
 8008f18:	ecab 7b02 	vstmia	fp!, {d7}
 8008f1c:	3508      	adds	r5, #8
 8008f1e:	e7ca      	b.n	8008eb6 <__kernel_rem_pio2+0x6e>
 8008f20:	9b00      	ldr	r3, [sp, #0]
 8008f22:	aa0c      	add	r2, sp, #48	; 0x30
 8008f24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f28:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f2a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008f2c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008f30:	9c00      	ldr	r4, [sp, #0]
 8008f32:	930a      	str	r3, [sp, #40]	; 0x28
 8008f34:	00e3      	lsls	r3, r4, #3
 8008f36:	9308      	str	r3, [sp, #32]
 8008f38:	ab98      	add	r3, sp, #608	; 0x260
 8008f3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f3e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008f42:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008f46:	ab70      	add	r3, sp, #448	; 0x1c0
 8008f48:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008f4c:	46c3      	mov	fp, r8
 8008f4e:	46a1      	mov	r9, r4
 8008f50:	f1b9 0f00 	cmp.w	r9, #0
 8008f54:	f1a5 0508 	sub.w	r5, r5, #8
 8008f58:	dc77      	bgt.n	800904a <__kernel_rem_pio2+0x202>
 8008f5a:	ec47 6b10 	vmov	d0, r6, r7
 8008f5e:	4650      	mov	r0, sl
 8008f60:	f000 fac2 	bl	80094e8 <scalbn>
 8008f64:	ec57 6b10 	vmov	r6, r7, d0
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008f6e:	ee10 0a10 	vmov	r0, s0
 8008f72:	4639      	mov	r1, r7
 8008f74:	f7f7 fae4 	bl	8000540 <__aeabi_dmul>
 8008f78:	ec41 0b10 	vmov	d0, r0, r1
 8008f7c:	f000 fb34 	bl	80095e8 <floor>
 8008f80:	4b7a      	ldr	r3, [pc, #488]	; (800916c <__kernel_rem_pio2+0x324>)
 8008f82:	ec51 0b10 	vmov	r0, r1, d0
 8008f86:	2200      	movs	r2, #0
 8008f88:	f7f7 fada 	bl	8000540 <__aeabi_dmul>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	4630      	mov	r0, r6
 8008f92:	4639      	mov	r1, r7
 8008f94:	f7f7 f91c 	bl	80001d0 <__aeabi_dsub>
 8008f98:	460f      	mov	r7, r1
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	f7f7 fd6a 	bl	8000a74 <__aeabi_d2iz>
 8008fa0:	9002      	str	r0, [sp, #8]
 8008fa2:	f7f7 fa63 	bl	800046c <__aeabi_i2d>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4630      	mov	r0, r6
 8008fac:	4639      	mov	r1, r7
 8008fae:	f7f7 f90f 	bl	80001d0 <__aeabi_dsub>
 8008fb2:	f1ba 0f00 	cmp.w	sl, #0
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	460f      	mov	r7, r1
 8008fba:	dd6d      	ble.n	8009098 <__kernel_rem_pio2+0x250>
 8008fbc:	1e61      	subs	r1, r4, #1
 8008fbe:	ab0c      	add	r3, sp, #48	; 0x30
 8008fc0:	9d02      	ldr	r5, [sp, #8]
 8008fc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008fc6:	f1ca 0018 	rsb	r0, sl, #24
 8008fca:	fa43 f200 	asr.w	r2, r3, r0
 8008fce:	4415      	add	r5, r2
 8008fd0:	4082      	lsls	r2, r0
 8008fd2:	1a9b      	subs	r3, r3, r2
 8008fd4:	aa0c      	add	r2, sp, #48	; 0x30
 8008fd6:	9502      	str	r5, [sp, #8]
 8008fd8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008fdc:	f1ca 0217 	rsb	r2, sl, #23
 8008fe0:	fa43 fb02 	asr.w	fp, r3, r2
 8008fe4:	f1bb 0f00 	cmp.w	fp, #0
 8008fe8:	dd65      	ble.n	80090b6 <__kernel_rem_pio2+0x26e>
 8008fea:	9b02      	ldr	r3, [sp, #8]
 8008fec:	2200      	movs	r2, #0
 8008fee:	3301      	adds	r3, #1
 8008ff0:	9302      	str	r3, [sp, #8]
 8008ff2:	4615      	mov	r5, r2
 8008ff4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008ff8:	4294      	cmp	r4, r2
 8008ffa:	f300 809f 	bgt.w	800913c <__kernel_rem_pio2+0x2f4>
 8008ffe:	f1ba 0f00 	cmp.w	sl, #0
 8009002:	dd07      	ble.n	8009014 <__kernel_rem_pio2+0x1cc>
 8009004:	f1ba 0f01 	cmp.w	sl, #1
 8009008:	f000 80c1 	beq.w	800918e <__kernel_rem_pio2+0x346>
 800900c:	f1ba 0f02 	cmp.w	sl, #2
 8009010:	f000 80c7 	beq.w	80091a2 <__kernel_rem_pio2+0x35a>
 8009014:	f1bb 0f02 	cmp.w	fp, #2
 8009018:	d14d      	bne.n	80090b6 <__kernel_rem_pio2+0x26e>
 800901a:	4632      	mov	r2, r6
 800901c:	463b      	mov	r3, r7
 800901e:	4954      	ldr	r1, [pc, #336]	; (8009170 <__kernel_rem_pio2+0x328>)
 8009020:	2000      	movs	r0, #0
 8009022:	f7f7 f8d5 	bl	80001d0 <__aeabi_dsub>
 8009026:	4606      	mov	r6, r0
 8009028:	460f      	mov	r7, r1
 800902a:	2d00      	cmp	r5, #0
 800902c:	d043      	beq.n	80090b6 <__kernel_rem_pio2+0x26e>
 800902e:	4650      	mov	r0, sl
 8009030:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8009160 <__kernel_rem_pio2+0x318>
 8009034:	f000 fa58 	bl	80094e8 <scalbn>
 8009038:	4630      	mov	r0, r6
 800903a:	4639      	mov	r1, r7
 800903c:	ec53 2b10 	vmov	r2, r3, d0
 8009040:	f7f7 f8c6 	bl	80001d0 <__aeabi_dsub>
 8009044:	4606      	mov	r6, r0
 8009046:	460f      	mov	r7, r1
 8009048:	e035      	b.n	80090b6 <__kernel_rem_pio2+0x26e>
 800904a:	4b4a      	ldr	r3, [pc, #296]	; (8009174 <__kernel_rem_pio2+0x32c>)
 800904c:	2200      	movs	r2, #0
 800904e:	4630      	mov	r0, r6
 8009050:	4639      	mov	r1, r7
 8009052:	f7f7 fa75 	bl	8000540 <__aeabi_dmul>
 8009056:	f7f7 fd0d 	bl	8000a74 <__aeabi_d2iz>
 800905a:	f7f7 fa07 	bl	800046c <__aeabi_i2d>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	ec43 2b18 	vmov	d8, r2, r3
 8009066:	4b44      	ldr	r3, [pc, #272]	; (8009178 <__kernel_rem_pio2+0x330>)
 8009068:	2200      	movs	r2, #0
 800906a:	f7f7 fa69 	bl	8000540 <__aeabi_dmul>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4630      	mov	r0, r6
 8009074:	4639      	mov	r1, r7
 8009076:	f7f7 f8ab 	bl	80001d0 <__aeabi_dsub>
 800907a:	f7f7 fcfb 	bl	8000a74 <__aeabi_d2iz>
 800907e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009082:	f84b 0b04 	str.w	r0, [fp], #4
 8009086:	ec51 0b18 	vmov	r0, r1, d8
 800908a:	f7f7 f8a3 	bl	80001d4 <__adddf3>
 800908e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009092:	4606      	mov	r6, r0
 8009094:	460f      	mov	r7, r1
 8009096:	e75b      	b.n	8008f50 <__kernel_rem_pio2+0x108>
 8009098:	d106      	bne.n	80090a8 <__kernel_rem_pio2+0x260>
 800909a:	1e63      	subs	r3, r4, #1
 800909c:	aa0c      	add	r2, sp, #48	; 0x30
 800909e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090a2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80090a6:	e79d      	b.n	8008fe4 <__kernel_rem_pio2+0x19c>
 80090a8:	4b34      	ldr	r3, [pc, #208]	; (800917c <__kernel_rem_pio2+0x334>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	f7f7 fcce 	bl	8000a4c <__aeabi_dcmpge>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d140      	bne.n	8009136 <__kernel_rem_pio2+0x2ee>
 80090b4:	4683      	mov	fp, r0
 80090b6:	2200      	movs	r2, #0
 80090b8:	2300      	movs	r3, #0
 80090ba:	4630      	mov	r0, r6
 80090bc:	4639      	mov	r1, r7
 80090be:	f7f7 fca7 	bl	8000a10 <__aeabi_dcmpeq>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	f000 80c1 	beq.w	800924a <__kernel_rem_pio2+0x402>
 80090c8:	1e65      	subs	r5, r4, #1
 80090ca:	462b      	mov	r3, r5
 80090cc:	2200      	movs	r2, #0
 80090ce:	9900      	ldr	r1, [sp, #0]
 80090d0:	428b      	cmp	r3, r1
 80090d2:	da6d      	bge.n	80091b0 <__kernel_rem_pio2+0x368>
 80090d4:	2a00      	cmp	r2, #0
 80090d6:	f000 808a 	beq.w	80091ee <__kernel_rem_pio2+0x3a6>
 80090da:	ab0c      	add	r3, sp, #48	; 0x30
 80090dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80090e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f000 80ae 	beq.w	8009246 <__kernel_rem_pio2+0x3fe>
 80090ea:	4650      	mov	r0, sl
 80090ec:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8009160 <__kernel_rem_pio2+0x318>
 80090f0:	f000 f9fa 	bl	80094e8 <scalbn>
 80090f4:	1c6b      	adds	r3, r5, #1
 80090f6:	00da      	lsls	r2, r3, #3
 80090f8:	9205      	str	r2, [sp, #20]
 80090fa:	ec57 6b10 	vmov	r6, r7, d0
 80090fe:	aa70      	add	r2, sp, #448	; 0x1c0
 8009100:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8009174 <__kernel_rem_pio2+0x32c>
 8009104:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8009108:	462c      	mov	r4, r5
 800910a:	f04f 0800 	mov.w	r8, #0
 800910e:	2c00      	cmp	r4, #0
 8009110:	f280 80d4 	bge.w	80092bc <__kernel_rem_pio2+0x474>
 8009114:	462c      	mov	r4, r5
 8009116:	2c00      	cmp	r4, #0
 8009118:	f2c0 8102 	blt.w	8009320 <__kernel_rem_pio2+0x4d8>
 800911c:	4b18      	ldr	r3, [pc, #96]	; (8009180 <__kernel_rem_pio2+0x338>)
 800911e:	461e      	mov	r6, r3
 8009120:	ab70      	add	r3, sp, #448	; 0x1c0
 8009122:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8009126:	1b2b      	subs	r3, r5, r4
 8009128:	f04f 0900 	mov.w	r9, #0
 800912c:	f04f 0a00 	mov.w	sl, #0
 8009130:	2700      	movs	r7, #0
 8009132:	9306      	str	r3, [sp, #24]
 8009134:	e0e6      	b.n	8009304 <__kernel_rem_pio2+0x4bc>
 8009136:	f04f 0b02 	mov.w	fp, #2
 800913a:	e756      	b.n	8008fea <__kernel_rem_pio2+0x1a2>
 800913c:	f8d8 3000 	ldr.w	r3, [r8]
 8009140:	bb05      	cbnz	r5, 8009184 <__kernel_rem_pio2+0x33c>
 8009142:	b123      	cbz	r3, 800914e <__kernel_rem_pio2+0x306>
 8009144:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009148:	f8c8 3000 	str.w	r3, [r8]
 800914c:	2301      	movs	r3, #1
 800914e:	3201      	adds	r2, #1
 8009150:	f108 0804 	add.w	r8, r8, #4
 8009154:	461d      	mov	r5, r3
 8009156:	e74f      	b.n	8008ff8 <__kernel_rem_pio2+0x1b0>
	...
 8009164:	3ff00000 	.word	0x3ff00000
 8009168:	080099b8 	.word	0x080099b8
 800916c:	40200000 	.word	0x40200000
 8009170:	3ff00000 	.word	0x3ff00000
 8009174:	3e700000 	.word	0x3e700000
 8009178:	41700000 	.word	0x41700000
 800917c:	3fe00000 	.word	0x3fe00000
 8009180:	08009978 	.word	0x08009978
 8009184:	1acb      	subs	r3, r1, r3
 8009186:	f8c8 3000 	str.w	r3, [r8]
 800918a:	462b      	mov	r3, r5
 800918c:	e7df      	b.n	800914e <__kernel_rem_pio2+0x306>
 800918e:	1e62      	subs	r2, r4, #1
 8009190:	ab0c      	add	r3, sp, #48	; 0x30
 8009192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009196:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800919a:	a90c      	add	r1, sp, #48	; 0x30
 800919c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80091a0:	e738      	b.n	8009014 <__kernel_rem_pio2+0x1cc>
 80091a2:	1e62      	subs	r2, r4, #1
 80091a4:	ab0c      	add	r3, sp, #48	; 0x30
 80091a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091aa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80091ae:	e7f4      	b.n	800919a <__kernel_rem_pio2+0x352>
 80091b0:	a90c      	add	r1, sp, #48	; 0x30
 80091b2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	430a      	orrs	r2, r1
 80091ba:	e788      	b.n	80090ce <__kernel_rem_pio2+0x286>
 80091bc:	3301      	adds	r3, #1
 80091be:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80091c2:	2900      	cmp	r1, #0
 80091c4:	d0fa      	beq.n	80091bc <__kernel_rem_pio2+0x374>
 80091c6:	9a08      	ldr	r2, [sp, #32]
 80091c8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80091cc:	446a      	add	r2, sp
 80091ce:	3a98      	subs	r2, #152	; 0x98
 80091d0:	9208      	str	r2, [sp, #32]
 80091d2:	9a06      	ldr	r2, [sp, #24]
 80091d4:	a920      	add	r1, sp, #128	; 0x80
 80091d6:	18a2      	adds	r2, r4, r2
 80091d8:	18e3      	adds	r3, r4, r3
 80091da:	f104 0801 	add.w	r8, r4, #1
 80091de:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80091e2:	9302      	str	r3, [sp, #8]
 80091e4:	9b02      	ldr	r3, [sp, #8]
 80091e6:	4543      	cmp	r3, r8
 80091e8:	da04      	bge.n	80091f4 <__kernel_rem_pio2+0x3ac>
 80091ea:	461c      	mov	r4, r3
 80091ec:	e6a2      	b.n	8008f34 <__kernel_rem_pio2+0xec>
 80091ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091f0:	2301      	movs	r3, #1
 80091f2:	e7e4      	b.n	80091be <__kernel_rem_pio2+0x376>
 80091f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091f6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80091fa:	f7f7 f937 	bl	800046c <__aeabi_i2d>
 80091fe:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009204:	46ab      	mov	fp, r5
 8009206:	461c      	mov	r4, r3
 8009208:	f04f 0900 	mov.w	r9, #0
 800920c:	2600      	movs	r6, #0
 800920e:	2700      	movs	r7, #0
 8009210:	9b05      	ldr	r3, [sp, #20]
 8009212:	4599      	cmp	r9, r3
 8009214:	dd06      	ble.n	8009224 <__kernel_rem_pio2+0x3dc>
 8009216:	9b08      	ldr	r3, [sp, #32]
 8009218:	e8e3 6702 	strd	r6, r7, [r3], #8
 800921c:	f108 0801 	add.w	r8, r8, #1
 8009220:	9308      	str	r3, [sp, #32]
 8009222:	e7df      	b.n	80091e4 <__kernel_rem_pio2+0x39c>
 8009224:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009228:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800922c:	f7f7 f988 	bl	8000540 <__aeabi_dmul>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	4630      	mov	r0, r6
 8009236:	4639      	mov	r1, r7
 8009238:	f7f6 ffcc 	bl	80001d4 <__adddf3>
 800923c:	f109 0901 	add.w	r9, r9, #1
 8009240:	4606      	mov	r6, r0
 8009242:	460f      	mov	r7, r1
 8009244:	e7e4      	b.n	8009210 <__kernel_rem_pio2+0x3c8>
 8009246:	3d01      	subs	r5, #1
 8009248:	e747      	b.n	80090da <__kernel_rem_pio2+0x292>
 800924a:	ec47 6b10 	vmov	d0, r6, r7
 800924e:	f1ca 0000 	rsb	r0, sl, #0
 8009252:	f000 f949 	bl	80094e8 <scalbn>
 8009256:	ec57 6b10 	vmov	r6, r7, d0
 800925a:	4ba0      	ldr	r3, [pc, #640]	; (80094dc <__kernel_rem_pio2+0x694>)
 800925c:	ee10 0a10 	vmov	r0, s0
 8009260:	2200      	movs	r2, #0
 8009262:	4639      	mov	r1, r7
 8009264:	f7f7 fbf2 	bl	8000a4c <__aeabi_dcmpge>
 8009268:	b1f8      	cbz	r0, 80092aa <__kernel_rem_pio2+0x462>
 800926a:	4b9d      	ldr	r3, [pc, #628]	; (80094e0 <__kernel_rem_pio2+0x698>)
 800926c:	2200      	movs	r2, #0
 800926e:	4630      	mov	r0, r6
 8009270:	4639      	mov	r1, r7
 8009272:	f7f7 f965 	bl	8000540 <__aeabi_dmul>
 8009276:	f7f7 fbfd 	bl	8000a74 <__aeabi_d2iz>
 800927a:	4680      	mov	r8, r0
 800927c:	f7f7 f8f6 	bl	800046c <__aeabi_i2d>
 8009280:	4b96      	ldr	r3, [pc, #600]	; (80094dc <__kernel_rem_pio2+0x694>)
 8009282:	2200      	movs	r2, #0
 8009284:	f7f7 f95c 	bl	8000540 <__aeabi_dmul>
 8009288:	460b      	mov	r3, r1
 800928a:	4602      	mov	r2, r0
 800928c:	4639      	mov	r1, r7
 800928e:	4630      	mov	r0, r6
 8009290:	f7f6 ff9e 	bl	80001d0 <__aeabi_dsub>
 8009294:	f7f7 fbee 	bl	8000a74 <__aeabi_d2iz>
 8009298:	1c65      	adds	r5, r4, #1
 800929a:	ab0c      	add	r3, sp, #48	; 0x30
 800929c:	f10a 0a18 	add.w	sl, sl, #24
 80092a0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80092a4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80092a8:	e71f      	b.n	80090ea <__kernel_rem_pio2+0x2a2>
 80092aa:	4630      	mov	r0, r6
 80092ac:	4639      	mov	r1, r7
 80092ae:	f7f7 fbe1 	bl	8000a74 <__aeabi_d2iz>
 80092b2:	ab0c      	add	r3, sp, #48	; 0x30
 80092b4:	4625      	mov	r5, r4
 80092b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80092ba:	e716      	b.n	80090ea <__kernel_rem_pio2+0x2a2>
 80092bc:	ab0c      	add	r3, sp, #48	; 0x30
 80092be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80092c2:	f7f7 f8d3 	bl	800046c <__aeabi_i2d>
 80092c6:	4632      	mov	r2, r6
 80092c8:	463b      	mov	r3, r7
 80092ca:	f7f7 f939 	bl	8000540 <__aeabi_dmul>
 80092ce:	4642      	mov	r2, r8
 80092d0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80092d4:	464b      	mov	r3, r9
 80092d6:	4630      	mov	r0, r6
 80092d8:	4639      	mov	r1, r7
 80092da:	f7f7 f931 	bl	8000540 <__aeabi_dmul>
 80092de:	3c01      	subs	r4, #1
 80092e0:	4606      	mov	r6, r0
 80092e2:	460f      	mov	r7, r1
 80092e4:	e713      	b.n	800910e <__kernel_rem_pio2+0x2c6>
 80092e6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80092ea:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80092ee:	f7f7 f927 	bl	8000540 <__aeabi_dmul>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	4648      	mov	r0, r9
 80092f8:	4651      	mov	r1, sl
 80092fa:	f7f6 ff6b 	bl	80001d4 <__adddf3>
 80092fe:	3701      	adds	r7, #1
 8009300:	4681      	mov	r9, r0
 8009302:	468a      	mov	sl, r1
 8009304:	9b00      	ldr	r3, [sp, #0]
 8009306:	429f      	cmp	r7, r3
 8009308:	dc02      	bgt.n	8009310 <__kernel_rem_pio2+0x4c8>
 800930a:	9b06      	ldr	r3, [sp, #24]
 800930c:	429f      	cmp	r7, r3
 800930e:	ddea      	ble.n	80092e6 <__kernel_rem_pio2+0x49e>
 8009310:	9a06      	ldr	r2, [sp, #24]
 8009312:	ab48      	add	r3, sp, #288	; 0x120
 8009314:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8009318:	e9c6 9a00 	strd	r9, sl, [r6]
 800931c:	3c01      	subs	r4, #1
 800931e:	e6fa      	b.n	8009116 <__kernel_rem_pio2+0x2ce>
 8009320:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009322:	2b02      	cmp	r3, #2
 8009324:	dc0b      	bgt.n	800933e <__kernel_rem_pio2+0x4f6>
 8009326:	2b00      	cmp	r3, #0
 8009328:	dc39      	bgt.n	800939e <__kernel_rem_pio2+0x556>
 800932a:	d05d      	beq.n	80093e8 <__kernel_rem_pio2+0x5a0>
 800932c:	9b02      	ldr	r3, [sp, #8]
 800932e:	f003 0007 	and.w	r0, r3, #7
 8009332:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009336:	ecbd 8b02 	vpop	{d8}
 800933a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009340:	2b03      	cmp	r3, #3
 8009342:	d1f3      	bne.n	800932c <__kernel_rem_pio2+0x4e4>
 8009344:	9b05      	ldr	r3, [sp, #20]
 8009346:	9500      	str	r5, [sp, #0]
 8009348:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800934c:	eb0d 0403 	add.w	r4, sp, r3
 8009350:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8009354:	46a2      	mov	sl, r4
 8009356:	9b00      	ldr	r3, [sp, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f1aa 0a08 	sub.w	sl, sl, #8
 800935e:	dc69      	bgt.n	8009434 <__kernel_rem_pio2+0x5ec>
 8009360:	46aa      	mov	sl, r5
 8009362:	f1ba 0f01 	cmp.w	sl, #1
 8009366:	f1a4 0408 	sub.w	r4, r4, #8
 800936a:	f300 8083 	bgt.w	8009474 <__kernel_rem_pio2+0x62c>
 800936e:	9c05      	ldr	r4, [sp, #20]
 8009370:	ab48      	add	r3, sp, #288	; 0x120
 8009372:	441c      	add	r4, r3
 8009374:	2000      	movs	r0, #0
 8009376:	2100      	movs	r1, #0
 8009378:	2d01      	cmp	r5, #1
 800937a:	f300 809a 	bgt.w	80094b2 <__kernel_rem_pio2+0x66a>
 800937e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8009382:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009386:	f1bb 0f00 	cmp.w	fp, #0
 800938a:	f040 8098 	bne.w	80094be <__kernel_rem_pio2+0x676>
 800938e:	9b04      	ldr	r3, [sp, #16]
 8009390:	e9c3 7800 	strd	r7, r8, [r3]
 8009394:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009398:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800939c:	e7c6      	b.n	800932c <__kernel_rem_pio2+0x4e4>
 800939e:	9e05      	ldr	r6, [sp, #20]
 80093a0:	ab48      	add	r3, sp, #288	; 0x120
 80093a2:	441e      	add	r6, r3
 80093a4:	462c      	mov	r4, r5
 80093a6:	2000      	movs	r0, #0
 80093a8:	2100      	movs	r1, #0
 80093aa:	2c00      	cmp	r4, #0
 80093ac:	da33      	bge.n	8009416 <__kernel_rem_pio2+0x5ce>
 80093ae:	f1bb 0f00 	cmp.w	fp, #0
 80093b2:	d036      	beq.n	8009422 <__kernel_rem_pio2+0x5da>
 80093b4:	4602      	mov	r2, r0
 80093b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093ba:	9c04      	ldr	r4, [sp, #16]
 80093bc:	e9c4 2300 	strd	r2, r3, [r4]
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80093c8:	f7f6 ff02 	bl	80001d0 <__aeabi_dsub>
 80093cc:	ae4a      	add	r6, sp, #296	; 0x128
 80093ce:	2401      	movs	r4, #1
 80093d0:	42a5      	cmp	r5, r4
 80093d2:	da29      	bge.n	8009428 <__kernel_rem_pio2+0x5e0>
 80093d4:	f1bb 0f00 	cmp.w	fp, #0
 80093d8:	d002      	beq.n	80093e0 <__kernel_rem_pio2+0x598>
 80093da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093de:	4619      	mov	r1, r3
 80093e0:	9b04      	ldr	r3, [sp, #16]
 80093e2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80093e6:	e7a1      	b.n	800932c <__kernel_rem_pio2+0x4e4>
 80093e8:	9c05      	ldr	r4, [sp, #20]
 80093ea:	ab48      	add	r3, sp, #288	; 0x120
 80093ec:	441c      	add	r4, r3
 80093ee:	2000      	movs	r0, #0
 80093f0:	2100      	movs	r1, #0
 80093f2:	2d00      	cmp	r5, #0
 80093f4:	da09      	bge.n	800940a <__kernel_rem_pio2+0x5c2>
 80093f6:	f1bb 0f00 	cmp.w	fp, #0
 80093fa:	d002      	beq.n	8009402 <__kernel_rem_pio2+0x5ba>
 80093fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009400:	4619      	mov	r1, r3
 8009402:	9b04      	ldr	r3, [sp, #16]
 8009404:	e9c3 0100 	strd	r0, r1, [r3]
 8009408:	e790      	b.n	800932c <__kernel_rem_pio2+0x4e4>
 800940a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800940e:	f7f6 fee1 	bl	80001d4 <__adddf3>
 8009412:	3d01      	subs	r5, #1
 8009414:	e7ed      	b.n	80093f2 <__kernel_rem_pio2+0x5aa>
 8009416:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800941a:	f7f6 fedb 	bl	80001d4 <__adddf3>
 800941e:	3c01      	subs	r4, #1
 8009420:	e7c3      	b.n	80093aa <__kernel_rem_pio2+0x562>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	e7c8      	b.n	80093ba <__kernel_rem_pio2+0x572>
 8009428:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800942c:	f7f6 fed2 	bl	80001d4 <__adddf3>
 8009430:	3401      	adds	r4, #1
 8009432:	e7cd      	b.n	80093d0 <__kernel_rem_pio2+0x588>
 8009434:	e9da 8900 	ldrd	r8, r9, [sl]
 8009438:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800943c:	9b00      	ldr	r3, [sp, #0]
 800943e:	3b01      	subs	r3, #1
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	4632      	mov	r2, r6
 8009444:	463b      	mov	r3, r7
 8009446:	4640      	mov	r0, r8
 8009448:	4649      	mov	r1, r9
 800944a:	f7f6 fec3 	bl	80001d4 <__adddf3>
 800944e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4640      	mov	r0, r8
 8009458:	4649      	mov	r1, r9
 800945a:	f7f6 feb9 	bl	80001d0 <__aeabi_dsub>
 800945e:	4632      	mov	r2, r6
 8009460:	463b      	mov	r3, r7
 8009462:	f7f6 feb7 	bl	80001d4 <__adddf3>
 8009466:	ed9d 7b06 	vldr	d7, [sp, #24]
 800946a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800946e:	ed8a 7b00 	vstr	d7, [sl]
 8009472:	e770      	b.n	8009356 <__kernel_rem_pio2+0x50e>
 8009474:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009478:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800947c:	4640      	mov	r0, r8
 800947e:	4632      	mov	r2, r6
 8009480:	463b      	mov	r3, r7
 8009482:	4649      	mov	r1, r9
 8009484:	f7f6 fea6 	bl	80001d4 <__adddf3>
 8009488:	e9cd 0100 	strd	r0, r1, [sp]
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	4640      	mov	r0, r8
 8009492:	4649      	mov	r1, r9
 8009494:	f7f6 fe9c 	bl	80001d0 <__aeabi_dsub>
 8009498:	4632      	mov	r2, r6
 800949a:	463b      	mov	r3, r7
 800949c:	f7f6 fe9a 	bl	80001d4 <__adddf3>
 80094a0:	ed9d 7b00 	vldr	d7, [sp]
 80094a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80094a8:	ed84 7b00 	vstr	d7, [r4]
 80094ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094b0:	e757      	b.n	8009362 <__kernel_rem_pio2+0x51a>
 80094b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80094b6:	f7f6 fe8d 	bl	80001d4 <__adddf3>
 80094ba:	3d01      	subs	r5, #1
 80094bc:	e75c      	b.n	8009378 <__kernel_rem_pio2+0x530>
 80094be:	9b04      	ldr	r3, [sp, #16]
 80094c0:	9a04      	ldr	r2, [sp, #16]
 80094c2:	601f      	str	r7, [r3, #0]
 80094c4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80094c8:	605c      	str	r4, [r3, #4]
 80094ca:	609d      	str	r5, [r3, #8]
 80094cc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80094d0:	60d3      	str	r3, [r2, #12]
 80094d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094d6:	6110      	str	r0, [r2, #16]
 80094d8:	6153      	str	r3, [r2, #20]
 80094da:	e727      	b.n	800932c <__kernel_rem_pio2+0x4e4>
 80094dc:	41700000 	.word	0x41700000
 80094e0:	3e700000 	.word	0x3e700000
 80094e4:	00000000 	.word	0x00000000

080094e8 <scalbn>:
 80094e8:	b570      	push	{r4, r5, r6, lr}
 80094ea:	ec55 4b10 	vmov	r4, r5, d0
 80094ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80094f2:	4606      	mov	r6, r0
 80094f4:	462b      	mov	r3, r5
 80094f6:	b999      	cbnz	r1, 8009520 <scalbn+0x38>
 80094f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80094fc:	4323      	orrs	r3, r4
 80094fe:	d03f      	beq.n	8009580 <scalbn+0x98>
 8009500:	4b35      	ldr	r3, [pc, #212]	; (80095d8 <scalbn+0xf0>)
 8009502:	4629      	mov	r1, r5
 8009504:	ee10 0a10 	vmov	r0, s0
 8009508:	2200      	movs	r2, #0
 800950a:	f7f7 f819 	bl	8000540 <__aeabi_dmul>
 800950e:	4b33      	ldr	r3, [pc, #204]	; (80095dc <scalbn+0xf4>)
 8009510:	429e      	cmp	r6, r3
 8009512:	4604      	mov	r4, r0
 8009514:	460d      	mov	r5, r1
 8009516:	da10      	bge.n	800953a <scalbn+0x52>
 8009518:	a327      	add	r3, pc, #156	; (adr r3, 80095b8 <scalbn+0xd0>)
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	e01f      	b.n	8009560 <scalbn+0x78>
 8009520:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009524:	4291      	cmp	r1, r2
 8009526:	d10c      	bne.n	8009542 <scalbn+0x5a>
 8009528:	ee10 2a10 	vmov	r2, s0
 800952c:	4620      	mov	r0, r4
 800952e:	4629      	mov	r1, r5
 8009530:	f7f6 fe50 	bl	80001d4 <__adddf3>
 8009534:	4604      	mov	r4, r0
 8009536:	460d      	mov	r5, r1
 8009538:	e022      	b.n	8009580 <scalbn+0x98>
 800953a:	460b      	mov	r3, r1
 800953c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009540:	3936      	subs	r1, #54	; 0x36
 8009542:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009546:	4296      	cmp	r6, r2
 8009548:	dd0d      	ble.n	8009566 <scalbn+0x7e>
 800954a:	2d00      	cmp	r5, #0
 800954c:	a11c      	add	r1, pc, #112	; (adr r1, 80095c0 <scalbn+0xd8>)
 800954e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009552:	da02      	bge.n	800955a <scalbn+0x72>
 8009554:	a11c      	add	r1, pc, #112	; (adr r1, 80095c8 <scalbn+0xe0>)
 8009556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800955a:	a319      	add	r3, pc, #100	; (adr r3, 80095c0 <scalbn+0xd8>)
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f7f6 ffee 	bl	8000540 <__aeabi_dmul>
 8009564:	e7e6      	b.n	8009534 <scalbn+0x4c>
 8009566:	1872      	adds	r2, r6, r1
 8009568:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800956c:	428a      	cmp	r2, r1
 800956e:	dcec      	bgt.n	800954a <scalbn+0x62>
 8009570:	2a00      	cmp	r2, #0
 8009572:	dd08      	ble.n	8009586 <scalbn+0x9e>
 8009574:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009578:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800957c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009580:	ec45 4b10 	vmov	d0, r4, r5
 8009584:	bd70      	pop	{r4, r5, r6, pc}
 8009586:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800958a:	da08      	bge.n	800959e <scalbn+0xb6>
 800958c:	2d00      	cmp	r5, #0
 800958e:	a10a      	add	r1, pc, #40	; (adr r1, 80095b8 <scalbn+0xd0>)
 8009590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009594:	dac0      	bge.n	8009518 <scalbn+0x30>
 8009596:	a10e      	add	r1, pc, #56	; (adr r1, 80095d0 <scalbn+0xe8>)
 8009598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800959c:	e7bc      	b.n	8009518 <scalbn+0x30>
 800959e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80095a2:	3236      	adds	r2, #54	; 0x36
 80095a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80095ac:	4620      	mov	r0, r4
 80095ae:	4b0c      	ldr	r3, [pc, #48]	; (80095e0 <scalbn+0xf8>)
 80095b0:	2200      	movs	r2, #0
 80095b2:	e7d5      	b.n	8009560 <scalbn+0x78>
 80095b4:	f3af 8000 	nop.w
 80095b8:	c2f8f359 	.word	0xc2f8f359
 80095bc:	01a56e1f 	.word	0x01a56e1f
 80095c0:	8800759c 	.word	0x8800759c
 80095c4:	7e37e43c 	.word	0x7e37e43c
 80095c8:	8800759c 	.word	0x8800759c
 80095cc:	fe37e43c 	.word	0xfe37e43c
 80095d0:	c2f8f359 	.word	0xc2f8f359
 80095d4:	81a56e1f 	.word	0x81a56e1f
 80095d8:	43500000 	.word	0x43500000
 80095dc:	ffff3cb0 	.word	0xffff3cb0
 80095e0:	3c900000 	.word	0x3c900000
 80095e4:	00000000 	.word	0x00000000

080095e8 <floor>:
 80095e8:	ec51 0b10 	vmov	r0, r1, d0
 80095ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80095f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80095f8:	2e13      	cmp	r6, #19
 80095fa:	ee10 5a10 	vmov	r5, s0
 80095fe:	ee10 8a10 	vmov	r8, s0
 8009602:	460c      	mov	r4, r1
 8009604:	dc31      	bgt.n	800966a <floor+0x82>
 8009606:	2e00      	cmp	r6, #0
 8009608:	da14      	bge.n	8009634 <floor+0x4c>
 800960a:	a333      	add	r3, pc, #204	; (adr r3, 80096d8 <floor+0xf0>)
 800960c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009610:	f7f6 fde0 	bl	80001d4 <__adddf3>
 8009614:	2200      	movs	r2, #0
 8009616:	2300      	movs	r3, #0
 8009618:	f7f7 fa22 	bl	8000a60 <__aeabi_dcmpgt>
 800961c:	b138      	cbz	r0, 800962e <floor+0x46>
 800961e:	2c00      	cmp	r4, #0
 8009620:	da53      	bge.n	80096ca <floor+0xe2>
 8009622:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009626:	4325      	orrs	r5, r4
 8009628:	d052      	beq.n	80096d0 <floor+0xe8>
 800962a:	4c2d      	ldr	r4, [pc, #180]	; (80096e0 <floor+0xf8>)
 800962c:	2500      	movs	r5, #0
 800962e:	4621      	mov	r1, r4
 8009630:	4628      	mov	r0, r5
 8009632:	e024      	b.n	800967e <floor+0x96>
 8009634:	4f2b      	ldr	r7, [pc, #172]	; (80096e4 <floor+0xfc>)
 8009636:	4137      	asrs	r7, r6
 8009638:	ea01 0307 	and.w	r3, r1, r7
 800963c:	4303      	orrs	r3, r0
 800963e:	d01e      	beq.n	800967e <floor+0x96>
 8009640:	a325      	add	r3, pc, #148	; (adr r3, 80096d8 <floor+0xf0>)
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f7f6 fdc5 	bl	80001d4 <__adddf3>
 800964a:	2200      	movs	r2, #0
 800964c:	2300      	movs	r3, #0
 800964e:	f7f7 fa07 	bl	8000a60 <__aeabi_dcmpgt>
 8009652:	2800      	cmp	r0, #0
 8009654:	d0eb      	beq.n	800962e <floor+0x46>
 8009656:	2c00      	cmp	r4, #0
 8009658:	bfbe      	ittt	lt
 800965a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800965e:	4133      	asrlt	r3, r6
 8009660:	18e4      	addlt	r4, r4, r3
 8009662:	ea24 0407 	bic.w	r4, r4, r7
 8009666:	2500      	movs	r5, #0
 8009668:	e7e1      	b.n	800962e <floor+0x46>
 800966a:	2e33      	cmp	r6, #51	; 0x33
 800966c:	dd0b      	ble.n	8009686 <floor+0x9e>
 800966e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009672:	d104      	bne.n	800967e <floor+0x96>
 8009674:	ee10 2a10 	vmov	r2, s0
 8009678:	460b      	mov	r3, r1
 800967a:	f7f6 fdab 	bl	80001d4 <__adddf3>
 800967e:	ec41 0b10 	vmov	d0, r0, r1
 8009682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009686:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800968a:	f04f 37ff 	mov.w	r7, #4294967295
 800968e:	40df      	lsrs	r7, r3
 8009690:	4238      	tst	r0, r7
 8009692:	d0f4      	beq.n	800967e <floor+0x96>
 8009694:	a310      	add	r3, pc, #64	; (adr r3, 80096d8 <floor+0xf0>)
 8009696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969a:	f7f6 fd9b 	bl	80001d4 <__adddf3>
 800969e:	2200      	movs	r2, #0
 80096a0:	2300      	movs	r3, #0
 80096a2:	f7f7 f9dd 	bl	8000a60 <__aeabi_dcmpgt>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d0c1      	beq.n	800962e <floor+0x46>
 80096aa:	2c00      	cmp	r4, #0
 80096ac:	da0a      	bge.n	80096c4 <floor+0xdc>
 80096ae:	2e14      	cmp	r6, #20
 80096b0:	d101      	bne.n	80096b6 <floor+0xce>
 80096b2:	3401      	adds	r4, #1
 80096b4:	e006      	b.n	80096c4 <floor+0xdc>
 80096b6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80096ba:	2301      	movs	r3, #1
 80096bc:	40b3      	lsls	r3, r6
 80096be:	441d      	add	r5, r3
 80096c0:	45a8      	cmp	r8, r5
 80096c2:	d8f6      	bhi.n	80096b2 <floor+0xca>
 80096c4:	ea25 0507 	bic.w	r5, r5, r7
 80096c8:	e7b1      	b.n	800962e <floor+0x46>
 80096ca:	2500      	movs	r5, #0
 80096cc:	462c      	mov	r4, r5
 80096ce:	e7ae      	b.n	800962e <floor+0x46>
 80096d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80096d4:	e7ab      	b.n	800962e <floor+0x46>
 80096d6:	bf00      	nop
 80096d8:	8800759c 	.word	0x8800759c
 80096dc:	7e37e43c 	.word	0x7e37e43c
 80096e0:	bff00000 	.word	0xbff00000
 80096e4:	000fffff 	.word	0x000fffff

080096e8 <memset>:
 80096e8:	4402      	add	r2, r0
 80096ea:	4603      	mov	r3, r0
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d100      	bne.n	80096f2 <memset+0xa>
 80096f0:	4770      	bx	lr
 80096f2:	f803 1b01 	strb.w	r1, [r3], #1
 80096f6:	e7f9      	b.n	80096ec <memset+0x4>

080096f8 <__errno>:
 80096f8:	4b01      	ldr	r3, [pc, #4]	; (8009700 <__errno+0x8>)
 80096fa:	6818      	ldr	r0, [r3, #0]
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	200000cc 	.word	0x200000cc

08009704 <__libc_init_array>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	4d0d      	ldr	r5, [pc, #52]	; (800973c <__libc_init_array+0x38>)
 8009708:	4c0d      	ldr	r4, [pc, #52]	; (8009740 <__libc_init_array+0x3c>)
 800970a:	1b64      	subs	r4, r4, r5
 800970c:	10a4      	asrs	r4, r4, #2
 800970e:	2600      	movs	r6, #0
 8009710:	42a6      	cmp	r6, r4
 8009712:	d109      	bne.n	8009728 <__libc_init_array+0x24>
 8009714:	4d0b      	ldr	r5, [pc, #44]	; (8009744 <__libc_init_array+0x40>)
 8009716:	4c0c      	ldr	r4, [pc, #48]	; (8009748 <__libc_init_array+0x44>)
 8009718:	f000 f826 	bl	8009768 <_init>
 800971c:	1b64      	subs	r4, r4, r5
 800971e:	10a4      	asrs	r4, r4, #2
 8009720:	2600      	movs	r6, #0
 8009722:	42a6      	cmp	r6, r4
 8009724:	d105      	bne.n	8009732 <__libc_init_array+0x2e>
 8009726:	bd70      	pop	{r4, r5, r6, pc}
 8009728:	f855 3b04 	ldr.w	r3, [r5], #4
 800972c:	4798      	blx	r3
 800972e:	3601      	adds	r6, #1
 8009730:	e7ee      	b.n	8009710 <__libc_init_array+0xc>
 8009732:	f855 3b04 	ldr.w	r3, [r5], #4
 8009736:	4798      	blx	r3
 8009738:	3601      	adds	r6, #1
 800973a:	e7f2      	b.n	8009722 <__libc_init_array+0x1e>
 800973c:	080099d0 	.word	0x080099d0
 8009740:	080099d0 	.word	0x080099d0
 8009744:	080099d0 	.word	0x080099d0
 8009748:	080099d4 	.word	0x080099d4

0800974c <memcpy>:
 800974c:	440a      	add	r2, r1
 800974e:	4291      	cmp	r1, r2
 8009750:	f100 33ff 	add.w	r3, r0, #4294967295
 8009754:	d100      	bne.n	8009758 <memcpy+0xc>
 8009756:	4770      	bx	lr
 8009758:	b510      	push	{r4, lr}
 800975a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800975e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009762:	4291      	cmp	r1, r2
 8009764:	d1f9      	bne.n	800975a <memcpy+0xe>
 8009766:	bd10      	pop	{r4, pc}

08009768 <_init>:
 8009768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976a:	bf00      	nop
 800976c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800976e:	bc08      	pop	{r3}
 8009770:	469e      	mov	lr, r3
 8009772:	4770      	bx	lr

08009774 <_fini>:
 8009774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009776:	bf00      	nop
 8009778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800977a:	bc08      	pop	{r3}
 800977c:	469e      	mov	lr, r3
 800977e:	4770      	bx	lr
