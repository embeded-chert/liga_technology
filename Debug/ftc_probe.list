
ftc_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bb8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08007d40  08007d40  00017d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f38  08007f38  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007f38  08007f38  00017f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f40  08007f40  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f40  08007f40  00017f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f44  08007f44  00017f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000754  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000764  20000764  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fbed  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000023ee  00000000  00000000  0002fc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000dc0  00000000  00000000  00032060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000adb  00000000  00000000  00032e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021740  00000000  00000000  000338fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000115b1  00000000  00000000  0005503b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cbc10  00000000  00000000  000665ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003da4  00000000  00000000  001321fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00135fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d28 	.word	0x08007d28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08007d28 	.word	0x08007d28

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b970 	b.w	8000e5c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	460f      	mov	r7, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	d965      	bls.n	8000c76 <__udivmoddi4+0xe2>
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	b143      	cbz	r3, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	f1c3 0220 	rsb	r2, r3, #32
 8000bb8:	409f      	lsls	r7, r3
 8000bba:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	409c      	lsls	r4, r3
 8000bc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc6:	fa1f f58c 	uxth.w	r5, ip
 8000bca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bce:	0c22      	lsrs	r2, r4, #16
 8000bd0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd8:	fb01 f005 	mul.w	r0, r1, r5
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	d90a      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be0:	eb1c 0202 	adds.w	r2, ip, r2
 8000be4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be8:	f080 811c 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000bec:	4290      	cmp	r0, r2
 8000bee:	f240 8119 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	4462      	add	r2, ip
 8000bf6:	1a12      	subs	r2, r2, r0
 8000bf8:	b2a4      	uxth	r4, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c06:	fb00 f505 	mul.w	r5, r0, r5
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x90>
 8000c0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c16:	f080 8107 	bcs.w	8000e28 <__udivmoddi4+0x294>
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	f240 8104 	bls.w	8000e28 <__udivmoddi4+0x294>
 8000c20:	4464      	add	r4, ip
 8000c22:	3802      	subs	r0, #2
 8000c24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c28:	1b64      	subs	r4, r4, r5
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11e      	cbz	r6, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40dc      	lsrs	r4, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	e9c6 4300 	strd	r4, r3, [r6]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0xbc>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80ed 	beq.w	8000e1e <__udivmoddi4+0x28a>
 8000c44:	2100      	movs	r1, #0
 8000c46:	e9c6 0500 	strd	r0, r5, [r6]
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	fab3 f183 	clz	r1, r3
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d149      	bne.n	8000cec <__udivmoddi4+0x158>
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	d302      	bcc.n	8000c62 <__udivmoddi4+0xce>
 8000c5c:	4282      	cmp	r2, r0
 8000c5e:	f200 80f8 	bhi.w	8000e52 <__udivmoddi4+0x2be>
 8000c62:	1a84      	subs	r4, r0, r2
 8000c64:	eb65 0203 	sbc.w	r2, r5, r3
 8000c68:	2001      	movs	r0, #1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d0e2      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	e9c6 4700 	strd	r4, r7, [r6]
 8000c74:	e7df      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xe6>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f382 	clz	r3, r2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 8090 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c84:	1a8a      	subs	r2, r1, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f fe8c 	uxth.w	lr, ip
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c94:	fb07 2015 	mls	r0, r7, r5, r2
 8000c98:	0c22      	lsrs	r2, r4, #16
 8000c9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca6:	eb1c 0202 	adds.w	r2, ip, r2
 8000caa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f200 80cb 	bhi.w	8000e4c <__udivmoddi4+0x2b8>
 8000cb6:	4645      	mov	r5, r8
 8000cb8:	1a12      	subs	r2, r2, r0
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x14e>
 8000cd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x14c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f200 80bb 	bhi.w	8000e56 <__udivmoddi4+0x2c2>
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	eba4 040e 	sub.w	r4, r4, lr
 8000ce6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cea:	e79f      	b.n	8000c2c <__udivmoddi4+0x98>
 8000cec:	f1c1 0720 	rsb	r7, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfa:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000d02:	40fd      	lsrs	r5, r7
 8000d04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d08:	4323      	orrs	r3, r4
 8000d0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	fb09 5518 	mls	r5, r9, r8, r5
 8000d16:	0c1c      	lsrs	r4, r3, #16
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	fa00 f001 	lsl.w	r0, r0, r1
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d34:	f080 8088 	bcs.w	8000e48 <__udivmoddi4+0x2b4>
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	f240 8085 	bls.w	8000e48 <__udivmoddi4+0x2b4>
 8000d3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d42:	4464      	add	r4, ip
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	b29d      	uxth	r5, r3
 8000d48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d64:	d26c      	bcs.n	8000e40 <__udivmoddi4+0x2ac>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	d96a      	bls.n	8000e40 <__udivmoddi4+0x2ac>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	4464      	add	r4, ip
 8000d6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d72:	fba3 9502 	umull	r9, r5, r3, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	42ac      	cmp	r4, r5
 8000d7c:	46c8      	mov	r8, r9
 8000d7e:	46ae      	mov	lr, r5
 8000d80:	d356      	bcc.n	8000e30 <__udivmoddi4+0x29c>
 8000d82:	d053      	beq.n	8000e2c <__udivmoddi4+0x298>
 8000d84:	b156      	cbz	r6, 8000d9c <__udivmoddi4+0x208>
 8000d86:	ebb0 0208 	subs.w	r2, r0, r8
 8000d8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d92:	40ca      	lsrs	r2, r1
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	4317      	orrs	r7, r2
 8000d98:	e9c6 7400 	strd	r7, r4, [r6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	f1c3 0120 	rsb	r1, r3, #32
 8000da8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dac:	fa20 f201 	lsr.w	r2, r0, r1
 8000db0:	fa25 f101 	lsr.w	r1, r5, r1
 8000db4:	409d      	lsls	r5, r3
 8000db6:	432a      	orrs	r2, r5
 8000db8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc8:	0c11      	lsrs	r1, r2, #16
 8000dca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dce:	fb00 f50e 	mul.w	r5, r0, lr
 8000dd2:	428d      	cmp	r5, r1
 8000dd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x258>
 8000dda:	eb1c 0101 	adds.w	r1, ip, r1
 8000dde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de2:	d22f      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000de4:	428d      	cmp	r5, r1
 8000de6:	d92d      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	1b49      	subs	r1, r1, r5
 8000dee:	b292      	uxth	r2, r2
 8000df0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df4:	fb07 1115 	mls	r1, r7, r5, r1
 8000df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dfc:	fb05 f10e 	mul.w	r1, r5, lr
 8000e00:	4291      	cmp	r1, r2
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x282>
 8000e04:	eb1c 0202 	adds.w	r2, ip, r2
 8000e08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0c:	d216      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000e0e:	4291      	cmp	r1, r2
 8000e10:	d914      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000e12:	3d02      	subs	r5, #2
 8000e14:	4462      	add	r2, ip
 8000e16:	1a52      	subs	r2, r2, r1
 8000e18:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e1c:	e738      	b.n	8000c90 <__udivmoddi4+0xfc>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	4630      	mov	r0, r6
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000e24:	4639      	mov	r1, r7
 8000e26:	e6e6      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e6fb      	b.n	8000c24 <__udivmoddi4+0x90>
 8000e2c:	4548      	cmp	r0, r9
 8000e2e:	d2a9      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e30:	ebb9 0802 	subs.w	r8, r9, r2
 8000e34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	e7a3      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3c:	4645      	mov	r5, r8
 8000e3e:	e7ea      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e40:	462b      	mov	r3, r5
 8000e42:	e794      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7d1      	b.n	8000dec <__udivmoddi4+0x258>
 8000e48:	46d0      	mov	r8, sl
 8000e4a:	e77b      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4c:	3d02      	subs	r5, #2
 8000e4e:	4462      	add	r2, ip
 8000e50:	e732      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e70a      	b.n	8000c6c <__udivmoddi4+0xd8>
 8000e56:	4464      	add	r4, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e742      	b.n	8000ce2 <__udivmoddi4+0x14e>

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_DMA_Init+0x68>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <MX_DMA_Init+0x68>)
 8000e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_DMA_Init+0x68>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_DMA_Init+0x68>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <MX_DMA_Init+0x68>)
 8000e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_DMA_Init+0x68>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2010      	movs	r0, #16
 8000ea4:	f002 fad9 	bl	800345a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ea8:	2010      	movs	r0, #16
 8000eaa:	f002 faf2 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	203a      	movs	r0, #58	; 0x3a
 8000eb4:	f002 fad1 	bl	800345a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000eb8:	203a      	movs	r0, #58	; 0x3a
 8000eba:	f002 faea 	bl	8003492 <HAL_NVIC_EnableIRQ>

}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <MX_GPIO_Init>:
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
 8000ee6:	4bb3      	ldr	r3, [pc, #716]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4ab2      	ldr	r2, [pc, #712]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000eec:	f043 0310 	orr.w	r3, r3, #16
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4bb0      	ldr	r3, [pc, #704]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	4bac      	ldr	r3, [pc, #688]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4aab      	ldr	r2, [pc, #684]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4ba9      	ldr	r3, [pc, #676]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4ba5      	ldr	r3, [pc, #660]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4aa4      	ldr	r2, [pc, #656]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4ba2      	ldr	r3, [pc, #648]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b9e      	ldr	r3, [pc, #632]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a9d      	ldr	r2, [pc, #628]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b9b      	ldr	r3, [pc, #620]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b97      	ldr	r3, [pc, #604]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a96      	ldr	r2, [pc, #600]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b94      	ldr	r3, [pc, #592]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b90      	ldr	r3, [pc, #576]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a8f      	ldr	r2, [pc, #572]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b8d      	ldr	r3, [pc, #564]	; (80011b4 <MX_GPIO_Init+0x2e8>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, dig_pin3_inverse_Pin|CS_I2C_SPI_Pin|dig_pin1_inverse_Pin|dig_pin3_Pin
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f245 418c 	movw	r1, #21644	; 0x548c
 8000f90:	4889      	ldr	r0, [pc, #548]	; (80011b8 <MX_GPIO_Init+0x2ec>)
 8000f92:	f003 f837 	bl	8004004 <HAL_GPIO_WritePin>
                          |dig_pin5_Pin|dig_pin4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, dig_pin1_Pin|dig_pin2_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000f9c:	4887      	ldr	r0, [pc, #540]	; (80011bc <MX_GPIO_Init+0x2f0>)
 8000f9e:	f003 f831 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4885      	ldr	r0, [pc, #532]	; (80011bc <MX_GPIO_Init+0x2f0>)
 8000fa8:	f003 f82c 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(mosfet_enable_GPIO_Port, mosfet_enable_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4883      	ldr	r0, [pc, #524]	; (80011c0 <MX_GPIO_Init+0x2f4>)
 8000fb2:	f003 f827 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, dig_pin4_inverse_Pin|dig_pin2_inverse_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000fbc:	4881      	ldr	r0, [pc, #516]	; (80011c4 <MX_GPIO_Init+0x2f8>)
 8000fbe:	f003 f821 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = dig_pin3_inverse_Pin|dig_pin1_inverse_Pin|dig_pin3_Pin|dig_pin4_Pin;
 8000fc2:	f244 4384 	movw	r3, #17540	; 0x4484
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4877      	ldr	r0, [pc, #476]	; (80011b8 <MX_GPIO_Init+0x2ec>)
 8000fdc:	f002 fe76 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|dig_pin5_Pin;
 8000fe0:	f241 0308 	movw	r3, #4104	; 0x1008
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	486f      	ldr	r0, [pc, #444]	; (80011b8 <MX_GPIO_Init+0x2ec>)
 8000ffa:	f002 fe67 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = omron_2_Pin;
 8000ffe:	2310      	movs	r3, #16
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001006:	2301      	movs	r3, #1
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(omron_2_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4869      	ldr	r0, [pc, #420]	; (80011b8 <MX_GPIO_Init+0x2ec>)
 8001012:	f002 fe5b 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = dig_pin1_Pin|dig_pin2_Pin;
 8001016:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001020:	2301      	movs	r3, #1
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4619      	mov	r1, r3
 800102e:	4863      	ldr	r0, [pc, #396]	; (80011bc <MX_GPIO_Init+0x2f0>)
 8001030:	f002 fe4c 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001034:	2301      	movs	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	485c      	ldr	r0, [pc, #368]	; (80011bc <MX_GPIO_Init+0x2f0>)
 800104c:	f002 fe3e 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001050:	2308      	movs	r3, #8
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001060:	2305      	movs	r3, #5
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	4854      	ldr	r0, [pc, #336]	; (80011bc <MX_GPIO_Init+0x2f0>)
 800106c:	f002 fe2e 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001070:	2310      	movs	r3, #16
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001080:	2306      	movs	r3, #6
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	484f      	ldr	r0, [pc, #316]	; (80011c8 <MX_GPIO_Init+0x2fc>)
 800108c:	f002 fe1e 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8001090:	2320      	movs	r3, #32
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a0:	2305      	movs	r3, #5
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	4847      	ldr	r0, [pc, #284]	; (80011c8 <MX_GPIO_Init+0x2fc>)
 80010ac:	f002 fe0e 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010b0:	2304      	movs	r3, #4
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4840      	ldr	r0, [pc, #256]	; (80011c4 <MX_GPIO_Init+0x2f8>)
 80010c4:	f002 fe02 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80010c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	483a      	ldr	r0, [pc, #232]	; (80011c8 <MX_GPIO_Init+0x2fc>)
 80010de:	f002 fdf5 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80010e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010f4:	230a      	movs	r3, #10
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	4832      	ldr	r0, [pc, #200]	; (80011c8 <MX_GPIO_Init+0x2fc>)
 8001100:	f002 fde4 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_SD_Pin;
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001116:	2306      	movs	r3, #6
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SD_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	4826      	ldr	r0, [pc, #152]	; (80011bc <MX_GPIO_Init+0x2f0>)
 8001122:	f002 fdd3 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = limit_switch_1_Pin|limit_switch_3_Pin;
 8001126:	2305      	movs	r3, #5
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800112e:	2302      	movs	r3, #2
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	4821      	ldr	r0, [pc, #132]	; (80011c0 <MX_GPIO_Init+0x2f4>)
 800113a:	f002 fdc7 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = mosfet_enable_Pin;
 800113e:	2302      	movs	r3, #2
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001146:	2301      	movs	r3, #1
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(mosfet_enable_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	481a      	ldr	r0, [pc, #104]	; (80011c0 <MX_GPIO_Init+0x2f4>)
 8001156:	f002 fdb9 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = omron_1_Pin;
 800115a:	2308      	movs	r3, #8
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001162:	2301      	movs	r3, #1
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(omron_1_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4619      	mov	r1, r3
 800116c:	4814      	ldr	r0, [pc, #80]	; (80011c0 <MX_GPIO_Init+0x2f4>)
 800116e:	f002 fdad 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = dig_pin4_inverse_Pin|dig_pin2_inverse_Pin;
 8001172:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117c:	2301      	movs	r3, #1
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <MX_GPIO_Init+0x2f8>)
 800118c:	f002 fd9e 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001190:	2302      	movs	r3, #2
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001194:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4619      	mov	r1, r3
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_GPIO_Init+0x2ec>)
 80011a6:	f002 fd91 	bl	8003ccc <HAL_GPIO_Init>

}
 80011aa:	bf00      	nop
 80011ac:	3730      	adds	r7, #48	; 0x30
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	40020400 	.word	0x40020400
 80011c8:	40020000 	.word	0x40020000

080011cc <HAL_UART_RxCpltCallback>:
				i++;
			}
		}
	}
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]



	if (rx_data[0] == '%') {
 80011d4:	4b5d      	ldr	r3, [pc, #372]	; (800134c <HAL_UART_RxCpltCallback+0x180>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b25      	cmp	r3, #37	; 0x25
 80011da:	d10b      	bne.n	80011f4 <HAL_UART_RxCpltCallback+0x28>
		check_sum = 0;
 80011dc:	4b5c      	ldr	r3, [pc, #368]	; (8001350 <HAL_UART_RxCpltCallback+0x184>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
		write_data = 1;
 80011e2:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <HAL_UART_RxCpltCallback+0x188>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
		ind_data = 0;
 80011e8:	4b5b      	ldr	r3, [pc, #364]	; (8001358 <HAL_UART_RxCpltCallback+0x18c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
		size_data = 0;
 80011ee:	4b5b      	ldr	r3, [pc, #364]	; (800135c <HAL_UART_RxCpltCallback+0x190>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
	}

	if (write_data) {
 80011f4:	4b57      	ldr	r3, [pc, #348]	; (8001354 <HAL_UART_RxCpltCallback+0x188>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d040      	beq.n	800127e <HAL_UART_RxCpltCallback+0xb2>

		temp_data[ind_data] = rx_data[0];
 80011fc:	4b56      	ldr	r3, [pc, #344]	; (8001358 <HAL_UART_RxCpltCallback+0x18c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b52      	ldr	r3, [pc, #328]	; (800134c <HAL_UART_RxCpltCallback+0x180>)
 8001204:	7819      	ldrb	r1, [r3, #0]
 8001206:	4b56      	ldr	r3, [pc, #344]	; (8001360 <HAL_UART_RxCpltCallback+0x194>)
 8001208:	5499      	strb	r1, [r3, r2]

		if (ind_data == 3) {
 800120a:	4b53      	ldr	r3, [pc, #332]	; (8001358 <HAL_UART_RxCpltCallback+0x18c>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b03      	cmp	r3, #3
 8001210:	d11c      	bne.n	800124c <HAL_UART_RxCpltCallback+0x80>
			size_data = (temp_data[1] - 48) * 100 + (temp_data[2] - 48) * 10
 8001212:	4b53      	ldr	r3, [pc, #332]	; (8001360 <HAL_UART_RxCpltCallback+0x194>)
 8001214:	785b      	ldrb	r3, [r3, #1]
 8001216:	461a      	mov	r2, r3
 8001218:	0092      	lsls	r2, r2, #2
 800121a:	4413      	add	r3, r2
 800121c:	461a      	mov	r2, r3
 800121e:	0091      	lsls	r1, r2, #2
 8001220:	461a      	mov	r2, r3
 8001222:	460b      	mov	r3, r1
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b4d      	ldr	r3, [pc, #308]	; (8001360 <HAL_UART_RxCpltCallback+0x194>)
 800122c:	789b      	ldrb	r3, [r3, #2]
 800122e:	4619      	mov	r1, r3
 8001230:	0089      	lsls	r1, r1, #2
 8001232:	440b      	add	r3, r1
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4413      	add	r3, r2
 800123a:	b2da      	uxtb	r2, r3
					+ (temp_data[3] - 48);
 800123c:	4b48      	ldr	r3, [pc, #288]	; (8001360 <HAL_UART_RxCpltCallback+0x194>)
 800123e:	78db      	ldrb	r3, [r3, #3]
 8001240:	4413      	add	r3, r2
 8001242:	b2db      	uxtb	r3, r3
 8001244:	3330      	adds	r3, #48	; 0x30
 8001246:	b2da      	uxtb	r2, r3
			size_data = (temp_data[1] - 48) * 100 + (temp_data[2] - 48) * 10
 8001248:	4b44      	ldr	r3, [pc, #272]	; (800135c <HAL_UART_RxCpltCallback+0x190>)
 800124a:	701a      	strb	r2, [r3, #0]
		}
		if (ind_data <= size_data - 4 || ind_data <= 3) {
 800124c:	4b43      	ldr	r3, [pc, #268]	; (800135c <HAL_UART_RxCpltCallback+0x190>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	3b03      	subs	r3, #3
 8001252:	4a41      	ldr	r2, [pc, #260]	; (8001358 <HAL_UART_RxCpltCallback+0x18c>)
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	4293      	cmp	r3, r2
 8001258:	dc03      	bgt.n	8001262 <HAL_UART_RxCpltCallback+0x96>
 800125a:	4b3f      	ldr	r3, [pc, #252]	; (8001358 <HAL_UART_RxCpltCallback+0x18c>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b03      	cmp	r3, #3
 8001260:	d807      	bhi.n	8001272 <HAL_UART_RxCpltCallback+0xa6>
			check_sum += rx_data[0];
 8001262:	4b3a      	ldr	r3, [pc, #232]	; (800134c <HAL_UART_RxCpltCallback+0x180>)
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <HAL_UART_RxCpltCallback+0x184>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b38      	ldr	r3, [pc, #224]	; (8001350 <HAL_UART_RxCpltCallback+0x184>)
 8001270:	701a      	strb	r2, [r3, #0]
		}

		ind_data++;
 8001272:	4b39      	ldr	r3, [pc, #228]	; (8001358 <HAL_UART_RxCpltCallback+0x18c>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <HAL_UART_RxCpltCallback+0x18c>)
 800127c:	701a      	strb	r2, [r3, #0]
	}
	if (ind_data >= 99) {
 800127e:	4b36      	ldr	r3, [pc, #216]	; (8001358 <HAL_UART_RxCpltCallback+0x18c>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b62      	cmp	r3, #98	; 0x62
 8001284:	d90b      	bls.n	800129e <HAL_UART_RxCpltCallback+0xd2>
		check_sum = 0;
 8001286:	4b32      	ldr	r3, [pc, #200]	; (8001350 <HAL_UART_RxCpltCallback+0x184>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
		write_data = 0;
 800128c:	4b31      	ldr	r3, [pc, #196]	; (8001354 <HAL_UART_RxCpltCallback+0x188>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
		ind_data = 0;
 8001292:	4b31      	ldr	r3, [pc, #196]	; (8001358 <HAL_UART_RxCpltCallback+0x18c>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
		size_data = 0;
 8001298:	4b30      	ldr	r3, [pc, #192]	; (800135c <HAL_UART_RxCpltCallback+0x190>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
	}
	if (ind_data == size_data) {
 800129e:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <HAL_UART_RxCpltCallback+0x18c>)
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	4b2e      	ldr	r3, [pc, #184]	; (800135c <HAL_UART_RxCpltCallback+0x190>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d101      	bne.n	80012ae <HAL_UART_RxCpltCallback+0xe2>
		HAL_GetTick();
 80012aa:	f001 ffef 	bl	800328c <HAL_GetTick>
	}
	if (rx_data[0] == '\r') {
 80012ae:	4b27      	ldr	r3, [pc, #156]	; (800134c <HAL_UART_RxCpltCallback+0x180>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b0d      	cmp	r3, #13
 80012b4:	d145      	bne.n	8001342 <HAL_UART_RxCpltCallback+0x176>

		//size_data = (temp_data[1] - 48) * 100 + (temp_data[2] - 48) * 10 + (temp_data[3] - 48);
		uint8_t check_sum_data = (temp_data[size_data - 3] - 48) * 100
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <HAL_UART_RxCpltCallback+0x190>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	3b03      	subs	r3, #3
 80012bc:	4a28      	ldr	r2, [pc, #160]	; (8001360 <HAL_UART_RxCpltCallback+0x194>)
 80012be:	5cd3      	ldrb	r3, [r2, r3]
				+ (temp_data[size_data - 2] - 48) * 10
 80012c0:	461a      	mov	r2, r3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	461a      	mov	r2, r3
 80012c8:	0091      	lsls	r1, r2, #2
 80012ca:	461a      	mov	r2, r3
 80012cc:	460b      	mov	r3, r1
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <HAL_UART_RxCpltCallback+0x190>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	3b02      	subs	r3, #2
 80012da:	4921      	ldr	r1, [pc, #132]	; (8001360 <HAL_UART_RxCpltCallback+0x194>)
 80012dc:	5ccb      	ldrb	r3, [r1, r3]
 80012de:	4619      	mov	r1, r3
 80012e0:	0089      	lsls	r1, r1, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4413      	add	r3, r2
 80012ea:	b2da      	uxtb	r2, r3
				+ (temp_data[size_data - 1] - 48);
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <HAL_UART_RxCpltCallback+0x190>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	491b      	ldr	r1, [pc, #108]	; (8001360 <HAL_UART_RxCpltCallback+0x194>)
 80012f4:	5ccb      	ldrb	r3, [r1, r3]
 80012f6:	4413      	add	r3, r2
 80012f8:	b2db      	uxtb	r3, r3
		uint8_t check_sum_data = (temp_data[size_data - 3] - 48) * 100
 80012fa:	3330      	adds	r3, #48	; 0x30
 80012fc:	73fb      	strb	r3, [r7, #15]
		write_data = 0;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_UART_RxCpltCallback+0x188>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
		if (check_sum == check_sum_data && ind_data == size_data + 1) {
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_UART_RxCpltCallback+0x184>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	429a      	cmp	r2, r3
 800130c:	d119      	bne.n	8001342 <HAL_UART_RxCpltCallback+0x176>
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_UART_RxCpltCallback+0x18c>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_UART_RxCpltCallback+0x190>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	429a      	cmp	r2, r3
 800131c:	d111      	bne.n	8001342 <HAL_UART_RxCpltCallback+0x176>
			timer = HAL_GetTick();
 800131e:	f001 ffb5 	bl	800328c <HAL_GetTick>
 8001322:	4603      	mov	r3, r0
 8001324:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <HAL_UART_RxCpltCallback+0x198>)
 8001326:	6013      	str	r3, [r2, #0]
			memcpy(data, &temp_data[5], size_data);
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <HAL_UART_RxCpltCallback+0x190>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	490e      	ldr	r1, [pc, #56]	; (8001368 <HAL_UART_RxCpltCallback+0x19c>)
 8001330:	480e      	ldr	r0, [pc, #56]	; (800136c <HAL_UART_RxCpltCallback+0x1a0>)
 8001332:	f005 fc55 	bl	8006be0 <memcpy>
			data[size_data - 8] = '\r';
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_UART_RxCpltCallback+0x190>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	3b08      	subs	r3, #8
 800133c:	4a0b      	ldr	r2, [pc, #44]	; (800136c <HAL_UART_RxCpltCallback+0x1a0>)
 800133e:	210d      	movs	r1, #13
 8001340:	54d1      	strb	r1, [r2, r3]
		}
	}
}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000198 	.word	0x20000198
 8001350:	20000267 	.word	0x20000267
 8001354:	20000266 	.word	0x20000266
 8001358:	20000265 	.word	0x20000265
 800135c:	20000264 	.word	0x20000264
 8001360:	2000019c 	.word	0x2000019c
 8001364:	20000268 	.word	0x20000268
 8001368:	200001a1 	.word	0x200001a1
 800136c:	20000200 	.word	0x20000200

08001370 <convert_typedef>:

	} else {
		autonom_flag = false;
	}
}
void convert_typedef(void) {
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

	Wheel_1.motor = 0;
 8001374:	4b43      	ldr	r3, [pc, #268]	; (8001484 <convert_typedef+0x114>)
 8001376:	2200      	movs	r2, #0
 8001378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_1.target = 0.0;
 800137c:	4b41      	ldr	r3, [pc, #260]	; (8001484 <convert_typedef+0x114>)
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
	Wheel_1.current = 0;
 8001384:	4b3f      	ldr	r3, [pc, #252]	; (8001484 <convert_typedef+0x114>)
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
	Wheel_1.Kp = 14;
 800138c:	4b3d      	ldr	r3, [pc, #244]	; (8001484 <convert_typedef+0x114>)
 800138e:	4a3e      	ldr	r2, [pc, #248]	; (8001488 <convert_typedef+0x118>)
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_1.Ki = 1;
 8001392:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <convert_typedef+0x114>)
 8001394:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001398:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_1.Kd = 0.1;
 800139a:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <convert_typedef+0x114>)
 800139c:	4a3b      	ldr	r2, [pc, #236]	; (800148c <convert_typedef+0x11c>)
 800139e:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_1.wh_L = 0.0;
 80013a0:	4b38      	ldr	r3, [pc, #224]	; (8001484 <convert_typedef+0x114>)
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	639a      	str	r2, [r3, #56]	; 0x38

	Wheel_2.motor = 1;
 80013a8:	4b39      	ldr	r3, [pc, #228]	; (8001490 <convert_typedef+0x120>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_2.target = 0.0;
 80013b0:	4b37      	ldr	r3, [pc, #220]	; (8001490 <convert_typedef+0x120>)
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
	Wheel_2.current = 0;
 80013b8:	4b35      	ldr	r3, [pc, #212]	; (8001490 <convert_typedef+0x120>)
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
	Wheel_2.Kp = 14;
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <convert_typedef+0x120>)
 80013c2:	4a31      	ldr	r2, [pc, #196]	; (8001488 <convert_typedef+0x118>)
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_2.Ki = 1;
 80013c6:	4b32      	ldr	r3, [pc, #200]	; (8001490 <convert_typedef+0x120>)
 80013c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013cc:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_2.Kd = 0.1;
 80013ce:	4b30      	ldr	r3, [pc, #192]	; (8001490 <convert_typedef+0x120>)
 80013d0:	4a2e      	ldr	r2, [pc, #184]	; (800148c <convert_typedef+0x11c>)
 80013d2:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_2.wh_L = 0.0;
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <convert_typedef+0x120>)
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	639a      	str	r2, [r3, #56]	; 0x38

	Wheel_3.motor = 2;
 80013dc:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <convert_typedef+0x124>)
 80013de:	2202      	movs	r2, #2
 80013e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_3.target = 0.0;
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <convert_typedef+0x124>)
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
	Wheel_3.current = 0;
 80013ec:	4b29      	ldr	r3, [pc, #164]	; (8001494 <convert_typedef+0x124>)
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
	Wheel_3.Kp = 14;
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <convert_typedef+0x124>)
 80013f6:	4a24      	ldr	r2, [pc, #144]	; (8001488 <convert_typedef+0x118>)
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_3.Ki = 1;
 80013fa:	4b26      	ldr	r3, [pc, #152]	; (8001494 <convert_typedef+0x124>)
 80013fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_3.Kd = 0.1;
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <convert_typedef+0x124>)
 8001404:	4a21      	ldr	r2, [pc, #132]	; (800148c <convert_typedef+0x11c>)
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_3.wh_L = 0.0;
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <convert_typedef+0x124>)
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	639a      	str	r2, [r3, #56]	; 0x38

	Wheel_4.motor = 3;
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <convert_typedef+0x128>)
 8001412:	2203      	movs	r2, #3
 8001414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Wheel_4.target = 0.0;
 8001418:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <convert_typedef+0x128>)
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
	Wheel_4.current = 0;
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <convert_typedef+0x128>)
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
	Wheel_4.Kp = 14;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <convert_typedef+0x128>)
 800142a:	4a17      	ldr	r2, [pc, #92]	; (8001488 <convert_typedef+0x118>)
 800142c:	629a      	str	r2, [r3, #40]	; 0x28
	Wheel_4.Ki = 1;
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <convert_typedef+0x128>)
 8001430:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001434:	62da      	str	r2, [r3, #44]	; 0x2c
	Wheel_4.Kd = 0.1;
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <convert_typedef+0x128>)
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <convert_typedef+0x11c>)
 800143a:	631a      	str	r2, [r3, #48]	; 0x30
	Wheel_4.wh_L = 0.0;
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <convert_typedef+0x128>)
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	639a      	str	r2, [r3, #56]	; 0x38

	Chain_motor.motor = 4;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <convert_typedef+0x12c>)
 8001446:	2204      	movs	r2, #4
 8001448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Chain_motor.target = 0.0;
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <convert_typedef+0x12c>)
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
	Chain_motor.current = 0;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <convert_typedef+0x12c>)
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
	Chain_motor.Kp = 2;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <convert_typedef+0x12c>)
 800145e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
	Chain_motor.Ki = 0.0025;
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <convert_typedef+0x12c>)
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <convert_typedef+0x130>)
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c
	Chain_motor.Kd = 1.0;
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <convert_typedef+0x12c>)
 800146c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001470:	631a      	str	r2, [r3, #48]	; 0x30
	Chain_motor.wh_L = 0.0;
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <convert_typedef+0x12c>)
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	639a      	str	r2, [r3, #56]	; 0x38
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	2000002c 	.word	0x2000002c
 8001488:	41600000 	.word	0x41600000
 800148c:	3dcccccd 	.word	0x3dcccccd
 8001490:	2000006c 	.word	0x2000006c
 8001494:	200000ac 	.word	0x200000ac
 8001498:	200000ec 	.word	0x200000ec
 800149c:	2000012c 	.word	0x2000012c
 80014a0:	3b23d70a 	.word	0x3b23d70a

080014a4 <set_voltage>:
			chain_control(position);
		}
		chain_control(position);
	}
}
void set_voltage(uint8_t motor, float duty) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	ed87 0a00 	vstr	s0, [r7]
 80014b0:	71fb      	strb	r3, [r7, #7]
	if (duty > 1.0)
 80014b2:	edd7 7a00 	vldr	s15, [r7]
 80014b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c2:	dd02      	ble.n	80014ca <set_voltage+0x26>
		duty = 1.0;
 80014c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014c8:	603b      	str	r3, [r7, #0]
	if (duty < -1.0)
 80014ca:	edd7 7a00 	vldr	s15, [r7]
 80014ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80014d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	d501      	bpl.n	80014e0 <set_voltage+0x3c>
		duty = -1.0;
 80014dc:	4bae      	ldr	r3, [pc, #696]	; (8001798 <set_voltage+0x2f4>)
 80014de:	603b      	str	r3, [r7, #0]
	switch (motor) {
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	f200 8153 	bhi.w	800178e <set_voltage+0x2ea>
 80014e8:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <set_voltage+0x4c>)
 80014ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ee:	bf00      	nop
 80014f0:	08001505 	.word	0x08001505
 80014f4:	08001587 	.word	0x08001587
 80014f8:	0800160d 	.word	0x0800160d
 80014fc:	0800168f 	.word	0x0800168f
 8001500:	08001715 	.word	0x08001715
	case 0:
		if (duty >= 0.0) {
 8001504:	edd7 7a00 	vldr	s15, [r7]
 8001508:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001510:	db1b      	blt.n	800154a <set_voltage+0xa6>
			TIM4->CCR1 = ((int32_t) (TIM4->ARR * duty));
 8001512:	4ba2      	ldr	r3, [pc, #648]	; (800179c <set_voltage+0x2f8>)
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800151e:	edd7 7a00 	vldr	s15, [r7]
 8001522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800152a:	4b9c      	ldr	r3, [pc, #624]	; (800179c <set_voltage+0x2f8>)
 800152c:	ee17 2a90 	vmov	r2, s15
 8001530:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001538:	4899      	ldr	r0, [pc, #612]	; (80017a0 <set_voltage+0x2fc>)
 800153a:	f002 fd63 	bl	8004004 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	4898      	ldr	r0, [pc, #608]	; (80017a4 <set_voltage+0x300>)
 8001544:	f002 fd5e 	bl	8004004 <HAL_GPIO_WritePin>
		} else {
			TIM4->CCR1 = ((int32_t) (-(TIM4->ARR * duty)));
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
		}
		break;
 8001548:	e121      	b.n	800178e <set_voltage+0x2ea>
			TIM4->CCR1 = ((int32_t) (-(TIM4->ARR * duty)));
 800154a:	4b94      	ldr	r3, [pc, #592]	; (800179c <set_voltage+0x2f8>)
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	ee07 3a90 	vmov	s15, r3
 8001552:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001556:	edd7 7a00 	vldr	s15, [r7]
 800155a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155e:	eef1 7a67 	vneg.f32	s15, s15
 8001562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001566:	4b8d      	ldr	r3, [pc, #564]	; (800179c <set_voltage+0x2f8>)
 8001568:	ee17 2a90 	vmov	r2, s15
 800156c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001574:	488a      	ldr	r0, [pc, #552]	; (80017a0 <set_voltage+0x2fc>)
 8001576:	f002 fd45 	bl	8004004 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	4889      	ldr	r0, [pc, #548]	; (80017a4 <set_voltage+0x300>)
 8001580:	f002 fd40 	bl	8004004 <HAL_GPIO_WritePin>
		break;
 8001584:	e103      	b.n	800178e <set_voltage+0x2ea>
	case 1:
		if (duty >= 0.0) {
 8001586:	edd7 7a00 	vldr	s15, [r7]
 800158a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	db1c      	blt.n	80015ce <set_voltage+0x12a>
			TIM4->CCR2 = ((int32_t) (TIM4->ARR * duty));
 8001594:	4b81      	ldr	r3, [pc, #516]	; (800179c <set_voltage+0x2f8>)
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015a0:	edd7 7a00 	vldr	s15, [r7]
 80015a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ac:	4b7b      	ldr	r3, [pc, #492]	; (800179c <set_voltage+0x2f8>)
 80015ae:	ee17 2a90 	vmov	r2, s15
 80015b2:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ba:	4879      	ldr	r0, [pc, #484]	; (80017a0 <set_voltage+0x2fc>)
 80015bc:	f002 fd22 	bl	8004004 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c6:	4878      	ldr	r0, [pc, #480]	; (80017a8 <set_voltage+0x304>)
 80015c8:	f002 fd1c 	bl	8004004 <HAL_GPIO_WritePin>
		} else {
			TIM4->CCR2 = ((int32_t) (-(TIM4->ARR * duty)));
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
		}
		break;
 80015cc:	e0df      	b.n	800178e <set_voltage+0x2ea>
			TIM4->CCR2 = ((int32_t) (-(TIM4->ARR * duty)));
 80015ce:	4b73      	ldr	r3, [pc, #460]	; (800179c <set_voltage+0x2f8>)
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	ee07 3a90 	vmov	s15, r3
 80015d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015da:	edd7 7a00 	vldr	s15, [r7]
 80015de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e2:	eef1 7a67 	vneg.f32	s15, s15
 80015e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ea:	4b6c      	ldr	r3, [pc, #432]	; (800179c <set_voltage+0x2f8>)
 80015ec:	ee17 2a90 	vmov	r2, s15
 80015f0:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f8:	4869      	ldr	r0, [pc, #420]	; (80017a0 <set_voltage+0x2fc>)
 80015fa:	f002 fd03 	bl	8004004 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001604:	4868      	ldr	r0, [pc, #416]	; (80017a8 <set_voltage+0x304>)
 8001606:	f002 fcfd 	bl	8004004 <HAL_GPIO_WritePin>
		break;
 800160a:	e0c0      	b.n	800178e <set_voltage+0x2ea>
	case 2:
		if (duty >= 0.0) {
 800160c:	edd7 7a00 	vldr	s15, [r7]
 8001610:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	db1b      	blt.n	8001652 <set_voltage+0x1ae>
			TIM4->CCR3 = ((int32_t) (TIM4->ARR * duty));
 800161a:	4b60      	ldr	r3, [pc, #384]	; (800179c <set_voltage+0x2f8>)
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001626:	edd7 7a00 	vldr	s15, [r7]
 800162a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001632:	4b5a      	ldr	r3, [pc, #360]	; (800179c <set_voltage+0x2f8>)
 8001634:	ee17 2a90 	vmov	r2, s15
 8001638:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001640:	4858      	ldr	r0, [pc, #352]	; (80017a4 <set_voltage+0x300>)
 8001642:	f002 fcdf 	bl	8004004 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	2104      	movs	r1, #4
 800164a:	4856      	ldr	r0, [pc, #344]	; (80017a4 <set_voltage+0x300>)
 800164c:	f002 fcda 	bl	8004004 <HAL_GPIO_WritePin>
		} else {
			TIM4->CCR3 = ((int32_t) (-(TIM4->ARR * duty)));
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
		}
		break;
 8001650:	e09d      	b.n	800178e <set_voltage+0x2ea>
			TIM4->CCR3 = ((int32_t) (-(TIM4->ARR * duty)));
 8001652:	4b52      	ldr	r3, [pc, #328]	; (800179c <set_voltage+0x2f8>)
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800165e:	edd7 7a00 	vldr	s15, [r7]
 8001662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001666:	eef1 7a67 	vneg.f32	s15, s15
 800166a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800166e:	4b4b      	ldr	r3, [pc, #300]	; (800179c <set_voltage+0x2f8>)
 8001670:	ee17 2a90 	vmov	r2, s15
 8001674:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001676:	2201      	movs	r2, #1
 8001678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800167c:	4849      	ldr	r0, [pc, #292]	; (80017a4 <set_voltage+0x300>)
 800167e:	f002 fcc1 	bl	8004004 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2104      	movs	r1, #4
 8001686:	4847      	ldr	r0, [pc, #284]	; (80017a4 <set_voltage+0x300>)
 8001688:	f002 fcbc 	bl	8004004 <HAL_GPIO_WritePin>
		break;
 800168c:	e07f      	b.n	800178e <set_voltage+0x2ea>
	case 3:
		if (duty >= 0.0) {
 800168e:	edd7 7a00 	vldr	s15, [r7]
 8001692:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169a:	db1c      	blt.n	80016d6 <set_voltage+0x232>
			TIM4->CCR4 = ((int32_t) (TIM4->ARR * duty));
 800169c:	4b3f      	ldr	r3, [pc, #252]	; (800179c <set_voltage+0x2f8>)
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	ee07 3a90 	vmov	s15, r3
 80016a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016a8:	edd7 7a00 	vldr	s15, [r7]
 80016ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b4:	4b39      	ldr	r3, [pc, #228]	; (800179c <set_voltage+0x2f8>)
 80016b6:	ee17 2a90 	vmov	r2, s15
 80016ba:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c2:	4838      	ldr	r0, [pc, #224]	; (80017a4 <set_voltage+0x300>)
 80016c4:	f002 fc9e 	bl	8004004 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80016c8:	2201      	movs	r2, #1
 80016ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ce:	4836      	ldr	r0, [pc, #216]	; (80017a8 <set_voltage+0x304>)
 80016d0:	f002 fc98 	bl	8004004 <HAL_GPIO_WritePin>
		} else {
			TIM4->CCR4 = ((int32_t) (-(TIM4->ARR * duty)));
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
		}
		break;
 80016d4:	e05b      	b.n	800178e <set_voltage+0x2ea>
			TIM4->CCR4 = ((int32_t) (-(TIM4->ARR * duty)));
 80016d6:	4b31      	ldr	r3, [pc, #196]	; (800179c <set_voltage+0x2f8>)
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016e2:	edd7 7a00 	vldr	s15, [r7]
 80016e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ea:	eef1 7a67 	vneg.f32	s15, s15
 80016ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f2:	4b2a      	ldr	r3, [pc, #168]	; (800179c <set_voltage+0x2f8>)
 80016f4:	ee17 2a90 	vmov	r2, s15
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80016fa:	2201      	movs	r2, #1
 80016fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001700:	4828      	ldr	r0, [pc, #160]	; (80017a4 <set_voltage+0x300>)
 8001702:	f002 fc7f 	bl	8004004 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170c:	4826      	ldr	r0, [pc, #152]	; (80017a8 <set_voltage+0x304>)
 800170e:	f002 fc79 	bl	8004004 <HAL_GPIO_WritePin>
		break;
 8001712:	e03c      	b.n	800178e <set_voltage+0x2ea>
	case 4:
			 if(duty >= 0.0)  {
 8001714:	edd7 7a00 	vldr	s15, [r7]
 8001718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800171c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001720:	db16      	blt.n	8001750 <set_voltage+0x2ac>
				 TIM12->CCR1 = ((int32_t)(TIM12->ARR * duty));
 8001722:	4b22      	ldr	r3, [pc, #136]	; (80017ac <set_voltage+0x308>)
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800172e:	edd7 7a00 	vldr	s15, [r7]
 8001732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <set_voltage+0x308>)
 800173c:	ee17 2a90 	vmov	r2, s15
 8001740:	635a      	str	r2, [r3, #52]	; 0x34
				 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001748:	4816      	ldr	r0, [pc, #88]	; (80017a4 <set_voltage+0x300>)
 800174a:	f002 fc5b 	bl	8004004 <HAL_GPIO_WritePin>
			 else {
				 TIM12->CCR1 = ((int32_t)(TIM12->ARR + (TIM12->ARR * duty)));
			 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);  }
		}

}
 800174e:	e01e      	b.n	800178e <set_voltage+0x2ea>
				 TIM12->CCR1 = ((int32_t)(TIM12->ARR + (TIM12->ARR * duty)));
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <set_voltage+0x308>)
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <set_voltage+0x308>)
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001768:	edd7 7a00 	vldr	s15, [r7]
 800176c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <set_voltage+0x308>)
 800177a:	ee17 2a90 	vmov	r2, s15
 800177e:	635a      	str	r2, [r3, #52]	; 0x34
			 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);  }
 8001780:	2201      	movs	r2, #1
 8001782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001786:	4807      	ldr	r0, [pc, #28]	; (80017a4 <set_voltage+0x300>)
 8001788:	f002 fc3c 	bl	8004004 <HAL_GPIO_WritePin>
}
 800178c:	e7ff      	b.n	800178e <set_voltage+0x2ea>
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	bf800000 	.word	0xbf800000
 800179c:	40000800 	.word	0x40000800
 80017a0:	40020800 	.word	0x40020800
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40001800 	.word	0x40001800

080017b0 <PID_Controller>:
void PID_Controller(PID *reg) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

	reg->error = reg->target - reg->current;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80017c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	edc3 7a06 	vstr	s15, [r3, #24]

	reg->sum_error += reg->error;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	ed93 7a07 	vldr	s14, [r3, #28]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80017da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	edc3 7a07 	vstr	s15, [r3, #28]
	if (reg->sum_error > 1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80017ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f6:	dd03      	ble.n	8001800 <PID_Controller+0x50>
		reg->sum_error = 1;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017fe:	61da      	str	r2, [r3, #28]
	if (reg->sum_error < -1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	edd3 7a07 	vldr	s15, [r3, #28]
 8001806:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800180a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001812:	d502      	bpl.n	800181a <PID_Controller+0x6a>
		reg->sum_error = -1;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a28      	ldr	r2, [pc, #160]	; (80018b8 <PID_Controller+0x108>)
 8001818:	61da      	str	r2, [r3, #28]

	reg->P = reg->Kp * reg->error;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	edd3 7a06 	vldr	s15, [r3, #24]
 8001826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	edc3 7a00 	vstr	s15, [r3]
	reg->I = reg->Ki * reg->sum_error;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edd3 7a07 	vldr	s15, [r3, #28]
 800183c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	edc3 7a01 	vstr	s15, [r3, #4]
	reg->dif_error = reg->error - reg->old_error;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	ed93 7a06 	vldr	s14, [r3, #24]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	edc3 7a08 	vstr	s15, [r3, #32]
	reg->D = reg->Kd * reg->dif_error;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	edd3 7a08 	vldr	s15, [r3, #32]
 8001868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	edc3 7a02 	vstr	s15, [r3, #8]
	reg->output = reg->P + reg->I + reg->D;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	ed93 7a00 	vldr	s14, [r3]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	edd3 7a01 	vldr	s15, [r3, #4]
 800187e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	edd3 7a02 	vldr	s15, [r3, #8]
 8001888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	set_voltage(reg->motor, reg->output);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800189e:	eeb0 0a67 	vmov.f32	s0, s15
 80018a2:	4610      	mov	r0, r2
 80018a4:	f7ff fdfe 	bl	80014a4 <set_voltage>
	reg->old_error = reg->error;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699a      	ldr	r2, [r3, #24]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	bf800000 	.word	0xbf800000

080018bc <matrixMultiplyM2M>:
}
float matrixGetCell(float *m, char rows, char columns, char row, char column) {
	return *(m + columns * (row - 1) + column - 1);
}
void matrixMultiplyM2M(float *m1, char rows1, char columns1, float *m2,
		char rows2, char columns2, float *new_m) {
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	72fb      	strb	r3, [r7, #11]
 80018ca:	4613      	mov	r3, r2
 80018cc:	72bb      	strb	r3, [r7, #10]
	float Sum;
	char i, j, k;

	if (columns1 != rows2)
 80018ce:	7aba      	ldrb	r2, [r7, #10]
 80018d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d004      	beq.n	80018e2 <matrixMultiplyM2M+0x26>
		*new_m = 0;
 80018d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
					Sum += (*(m1 + columns1 * i + k))
							* (*(m2 + columns2 * k + j));
				*(new_m + columns2 * i + j) = Sum;
			}
	}
}
 80018e0:	e04f      	b.n	8001982 <matrixMultiplyM2M+0xc6>
		for (i = 0; i < rows1; i++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	74fb      	strb	r3, [r7, #19]
 80018e6:	e048      	b.n	800197a <matrixMultiplyM2M+0xbe>
			for (j = 0; j < columns2; j++) {
 80018e8:	2300      	movs	r3, #0
 80018ea:	74bb      	strb	r3, [r7, #18]
 80018ec:	e03d      	b.n	800196a <matrixMultiplyM2M+0xae>
				Sum = 0;
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
				for (k = 0; k < columns1; k++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	747b      	strb	r3, [r7, #17]
 80018f8:	e023      	b.n	8001942 <matrixMultiplyM2M+0x86>
					Sum += (*(m1 + columns1 * i + k))
 80018fa:	7abb      	ldrb	r3, [r7, #10]
 80018fc:	7cfa      	ldrb	r2, [r7, #19]
 80018fe:	fb02 f303 	mul.w	r3, r2, r3
 8001902:	461a      	mov	r2, r3
 8001904:	7c7b      	ldrb	r3, [r7, #17]
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4413      	add	r3, r2
 800190e:	ed93 7a00 	vldr	s14, [r3]
							* (*(m2 + columns2 * k + j));
 8001912:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001916:	7c7a      	ldrb	r2, [r7, #17]
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	461a      	mov	r2, r3
 800191e:	7cbb      	ldrb	r3, [r7, #18]
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	4413      	add	r3, r2
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee67 7a27 	vmul.f32	s15, s14, s15
					Sum += (*(m1 + columns1 * i + k))
 8001930:	ed97 7a05 	vldr	s14, [r7, #20]
 8001934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001938:	edc7 7a05 	vstr	s15, [r7, #20]
				for (k = 0; k < columns1; k++)
 800193c:	7c7b      	ldrb	r3, [r7, #17]
 800193e:	3301      	adds	r3, #1
 8001940:	747b      	strb	r3, [r7, #17]
 8001942:	7c7a      	ldrb	r2, [r7, #17]
 8001944:	7abb      	ldrb	r3, [r7, #10]
 8001946:	429a      	cmp	r2, r3
 8001948:	d3d7      	bcc.n	80018fa <matrixMultiplyM2M+0x3e>
				*(new_m + columns2 * i + j) = Sum;
 800194a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800194e:	7cfa      	ldrb	r2, [r7, #19]
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	461a      	mov	r2, r3
 8001956:	7cbb      	ldrb	r3, [r7, #18]
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800195e:	4413      	add	r3, r2
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	601a      	str	r2, [r3, #0]
			for (j = 0; j < columns2; j++) {
 8001964:	7cbb      	ldrb	r3, [r7, #18]
 8001966:	3301      	adds	r3, #1
 8001968:	74bb      	strb	r3, [r7, #18]
 800196a:	7cba      	ldrb	r2, [r7, #18]
 800196c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001970:	429a      	cmp	r2, r3
 8001972:	d3bc      	bcc.n	80018ee <matrixMultiplyM2M+0x32>
		for (i = 0; i < rows1; i++)
 8001974:	7cfb      	ldrb	r3, [r7, #19]
 8001976:	3301      	adds	r3, #1
 8001978:	74fb      	strb	r3, [r7, #19]
 800197a:	7cfa      	ldrb	r2, [r7, #19]
 800197c:	7afb      	ldrb	r3, [r7, #11]
 800197e:	429a      	cmp	r2, r3
 8001980:	d3b2      	bcc.n	80018e8 <matrixMultiplyM2M+0x2c>
}
 8001982:	bf00      	nop
 8001984:	371c      	adds	r7, #28
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	convert_typedef();
 8001994:	f7ff fcec 	bl	8001370 <convert_typedef>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001998:	f001 fc12 	bl	80031c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199c:	f000 f892 	bl	8001ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a0:	f7ff fa94 	bl	8000ecc <MX_GPIO_Init>
  MX_DMA_Init();
 80019a4:	f7ff fa5c 	bl	8000e60 <MX_DMA_Init>
  MX_TIM4_Init();
 80019a8:	f000 fda8 	bl	80024fc <MX_TIM4_Init>
  MX_TIM3_Init();
 80019ac:	f000 fd52 	bl	8002454 <MX_TIM3_Init>
  MX_TIM1_Init();
 80019b0:	f000 fca4 	bl	80022fc <MX_TIM1_Init>
  MX_TIM2_Init();
 80019b4:	f000 fcfa 	bl	80023ac <MX_TIM2_Init>
  MX_TIM8_Init();
 80019b8:	f000 feda 	bl	8002770 <MX_TIM8_Init>
  MX_TIM7_Init();
 80019bc:	f000 fea2 	bl	8002704 <MX_TIM7_Init>
  MX_TIM6_Init();
 80019c0:	f000 fe6a 	bl	8002698 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80019c4:	f001 fa94 	bl	8002ef0 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 80019c8:	f000 ff7c 	bl	80028c4 <MX_TIM10_Init>
  MX_TIM11_Init();
 80019cc:	f000 ff9e 	bl	800290c <MX_TIM11_Init>
  MX_TIM9_Init();
 80019d0:	f000 ff26 	bl	8002820 <MX_TIM9_Init>
  MX_TIM12_Init();
 80019d4:	f000 ffbe 	bl	8002954 <MX_TIM12_Init>
  MX_TIM5_Init();
 80019d8:	f000 fe0a 	bl	80025f0 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 80019dc:	f001 fab2 	bl	8002f44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80019e0:	2100      	movs	r1, #0
 80019e2:	482a      	ldr	r0, [pc, #168]	; (8001a8c <main+0xfc>)
 80019e4:	f003 f8d0 	bl	8004b88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80019e8:	2104      	movs	r1, #4
 80019ea:	4828      	ldr	r0, [pc, #160]	; (8001a8c <main+0xfc>)
 80019ec:	f003 f8cc 	bl	8004b88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80019f0:	2108      	movs	r1, #8
 80019f2:	4826      	ldr	r0, [pc, #152]	; (8001a8c <main+0xfc>)
 80019f4:	f003 f8c8 	bl	8004b88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80019f8:	210c      	movs	r1, #12
 80019fa:	4824      	ldr	r0, [pc, #144]	; (8001a8c <main+0xfc>)
 80019fc:	f003 f8c4 	bl	8004b88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001a00:	2100      	movs	r1, #0
 8001a02:	4823      	ldr	r0, [pc, #140]	; (8001a90 <main+0x100>)
 8001a04:	f003 f8c0 	bl	8004b88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8001a08:	2104      	movs	r1, #4
 8001a0a:	4821      	ldr	r0, [pc, #132]	; (8001a90 <main+0x100>)
 8001a0c:	f003 f8bc 	bl	8004b88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001a10:	2100      	movs	r1, #0
 8001a12:	4820      	ldr	r0, [pc, #128]	; (8001a94 <main+0x104>)
 8001a14:	f003 f8b8 	bl	8004b88 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001a18:	213c      	movs	r1, #60	; 0x3c
 8001a1a:	481f      	ldr	r0, [pc, #124]	; (8001a98 <main+0x108>)
 8001a1c:	f003 fa22 	bl	8004e64 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001a20:	213c      	movs	r1, #60	; 0x3c
 8001a22:	481e      	ldr	r0, [pc, #120]	; (8001a9c <main+0x10c>)
 8001a24:	f003 fa1e 	bl	8004e64 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001a28:	213c      	movs	r1, #60	; 0x3c
 8001a2a:	481d      	ldr	r0, [pc, #116]	; (8001aa0 <main+0x110>)
 8001a2c:	f003 fa1a 	bl	8004e64 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001a30:	213c      	movs	r1, #60	; 0x3c
 8001a32:	481c      	ldr	r0, [pc, #112]	; (8001aa4 <main+0x114>)
 8001a34:	f003 fa16 	bl	8004e64 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001a38:	213c      	movs	r1, #60	; 0x3c
 8001a3a:	481b      	ldr	r0, [pc, #108]	; (8001aa8 <main+0x118>)
 8001a3c:	f003 fa12 	bl	8004e64 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 8001a40:	481a      	ldr	r0, [pc, #104]	; (8001aac <main+0x11c>)
 8001a42:	f002 ffe1 	bl	8004a08 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_DMA(&huart1, rx_data, 1);
 8001a46:	2201      	movs	r2, #1
 8001a48:	4919      	ldr	r1, [pc, #100]	; (8001ab0 <main+0x120>)
 8001a4a:	481a      	ldr	r0, [pc, #104]	; (8001ab4 <main+0x124>)
 8001a4c:	f003 ffe7 	bl	8005a1e <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart2, rx_data, 2);
 8001a50:	2202      	movs	r2, #2
 8001a52:	4917      	ldr	r1, [pc, #92]	; (8001ab0 <main+0x120>)
 8001a54:	4818      	ldr	r0, [pc, #96]	; (8001ab8 <main+0x128>)
 8001a56:	f003 ffe2 	bl	8005a1e <HAL_UART_Receive_DMA>
	target_speed[0] = 0;
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <main+0x12c>)
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
	target_speed[1] = 0;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <main+0x12c>)
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	605a      	str	r2, [r3, #4]
	target_speed[2] = 0;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <main+0x12c>)
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
	quest_xy[0][0] = 0;
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <main+0x130>)
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
	quest_xy[0][1] = 0;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <main+0x130>)
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
	quest_xy[0][2] = 1;
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <main+0x130>)
 8001a84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a88:	609a      	str	r2, [r3, #8]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001a8a:	e7fe      	b.n	8001a8a <main+0xfa>
 8001a8c:	20000390 	.word	0x20000390
 8001a90:	200004f8 	.word	0x200004f8
 8001a94:	200005d0 	.word	0x200005d0
 8001a98:	200004b0 	.word	0x200004b0
 8001a9c:	20000300 	.word	0x20000300
 8001aa0:	20000348 	.word	0x20000348
 8001aa4:	200002b8 	.word	0x200002b8
 8001aa8:	200003d8 	.word	0x200003d8
 8001aac:	20000420 	.word	0x20000420
 8001ab0:	20000198 	.word	0x20000198
 8001ab4:	20000618 	.word	0x20000618
 8001ab8:	2000065c 	.word	0x2000065c
 8001abc:	2000016c 	.word	0x2000016c
 8001ac0:	20000188 	.word	0x20000188

08001ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b094      	sub	sp, #80	; 0x50
 8001ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aca:	f107 0320 	add.w	r3, r7, #32
 8001ace:	2230      	movs	r2, #48	; 0x30
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f005 f858 	bl	8006b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <SystemClock_Config+0xcc>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a27      	ldr	r2, [pc, #156]	; (8001b90 <SystemClock_Config+0xcc>)
 8001af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <SystemClock_Config+0xcc>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <SystemClock_Config+0xd0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a21      	ldr	r2, [pc, #132]	; (8001b94 <SystemClock_Config+0xd0>)
 8001b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <SystemClock_Config+0xd0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b20:	2302      	movs	r3, #2
 8001b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b24:	2301      	movs	r3, #1
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b28:	2310      	movs	r3, #16
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b30:	2300      	movs	r3, #0
 8001b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b34:	2308      	movs	r3, #8
 8001b36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b38:	23a8      	movs	r3, #168	; 0xa8
 8001b3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b40:	2307      	movs	r3, #7
 8001b42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b44:	f107 0320 	add.w	r3, r7, #32
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f002 fa75 	bl	8004038 <HAL_RCC_OscConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b54:	f000 f820 	bl	8001b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b58:	230f      	movs	r3, #15
 8001b5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	2105      	movs	r1, #5
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 fcd6 	bl	8004528 <HAL_RCC_ClockConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b82:	f000 f809 	bl	8001b98 <Error_Handler>
  }
}
 8001b86:	bf00      	nop
 8001b88:	3750      	adds	r7, #80	; 0x50
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40007000 	.word	0x40007000

08001b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9c:	b672      	cpsid	i
}
 8001b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ba0:	e7fe      	b.n	8001ba0 <Error_Handler+0x8>
	...

08001ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_MspInit+0x4c>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a0f      	ldr	r2, [pc, #60]	; (8001bf0 <HAL_MspInit+0x4c>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_MspInit+0x4c>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_MspInit+0x4c>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <HAL_MspInit+0x4c>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_MspInit+0x4c>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001be2:	2007      	movs	r0, #7
 8001be4:	f001 fc2e 	bl	8003444 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <NMI_Handler+0x4>

08001bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <HardFault_Handler+0x4>

08001c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <MemManage_Handler+0x4>

08001c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c40:	f001 fb10 	bl	8003264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <DMA1_Stream5_IRQHandler+0x10>)
 8001c4e:	f001 fdd3 	bl	80037f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000700 	.word	0x20000700

08001c5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <USART1_IRQHandler+0x10>)
 8001c62:	f003 ff0d 	bl	8005a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000618 	.word	0x20000618

08001c70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c70:	b5b0      	push	{r4, r5, r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */


	 Enc_Counter_0 = TIM8->CNT;
 8001c76:	4bbc      	ldr	r3, [pc, #752]	; (8001f68 <TIM6_DAC_IRQHandler+0x2f8>)
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	4bbb      	ldr	r3, [pc, #748]	; (8001f6c <TIM6_DAC_IRQHandler+0x2fc>)
 8001c7e:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_1 = TIM2->CNT;
 8001c80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	4bb9      	ldr	r3, [pc, #740]	; (8001f70 <TIM6_DAC_IRQHandler+0x300>)
 8001c8a:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_2 = TIM3->CNT;
 8001c8c:	4bb9      	ldr	r3, [pc, #740]	; (8001f74 <TIM6_DAC_IRQHandler+0x304>)
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	b21a      	sxth	r2, r3
 8001c92:	4bb9      	ldr	r3, [pc, #740]	; (8001f78 <TIM6_DAC_IRQHandler+0x308>)
 8001c94:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_3 = TIM1->CNT;
 8001c96:	4bb9      	ldr	r3, [pc, #740]	; (8001f7c <TIM6_DAC_IRQHandler+0x30c>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	4bb8      	ldr	r3, [pc, #736]	; (8001f80 <TIM6_DAC_IRQHandler+0x310>)
 8001c9e:	801a      	strh	r2, [r3, #0]
	 Enc_Counter_4 = TIM5->CNT;
 8001ca0:	4bb8      	ldr	r3, [pc, #736]	; (8001f84 <TIM6_DAC_IRQHandler+0x314>)
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	b21a      	sxth	r2, r3
 8001ca6:	4bb8      	ldr	r3, [pc, #736]	; (8001f88 <TIM6_DAC_IRQHandler+0x318>)
 8001ca8:	801a      	strh	r2, [r3, #0]

	 result_speed_0 = ((float)Enc_Counter_0) *  pi_Radius_pulse_enc * 100.0;
 8001caa:	4bb0      	ldr	r3, [pc, #704]	; (8001f6c <TIM6_DAC_IRQHandler+0x2fc>)
 8001cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb0:	ee07 3a90 	vmov	s15, r3
 8001cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb8:	ee17 0a90 	vmov	r0, s15
 8001cbc:	f7fe fbe8 	bl	8000490 <__aeabi_f2d>
 8001cc0:	a3a1      	add	r3, pc, #644	; (adr r3, 8001f48 <TIM6_DAC_IRQHandler+0x2d8>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fc3b 	bl	8000540 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	4bad      	ldr	r3, [pc, #692]	; (8001f8c <TIM6_DAC_IRQHandler+0x31c>)
 8001cd8:	f7fe fc32 	bl	8000540 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7fe feee 	bl	8000ac4 <__aeabi_d2f>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4aa9      	ldr	r2, [pc, #676]	; (8001f90 <TIM6_DAC_IRQHandler+0x320>)
 8001cec:	6013      	str	r3, [r2, #0]
	 result_speed_1 = ((float)Enc_Counter_1) *  pi_Radius_pulse_enc * 100.0;
 8001cee:	4ba0      	ldr	r3, [pc, #640]	; (8001f70 <TIM6_DAC_IRQHandler+0x300>)
 8001cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf4:	ee07 3a90 	vmov	s15, r3
 8001cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfc:	ee17 0a90 	vmov	r0, s15
 8001d00:	f7fe fbc6 	bl	8000490 <__aeabi_f2d>
 8001d04:	a390      	add	r3, pc, #576	; (adr r3, 8001f48 <TIM6_DAC_IRQHandler+0x2d8>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	f7fe fc19 	bl	8000540 <__aeabi_dmul>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	4b9c      	ldr	r3, [pc, #624]	; (8001f8c <TIM6_DAC_IRQHandler+0x31c>)
 8001d1c:	f7fe fc10 	bl	8000540 <__aeabi_dmul>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7fe fecc 	bl	8000ac4 <__aeabi_d2f>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4a99      	ldr	r2, [pc, #612]	; (8001f94 <TIM6_DAC_IRQHandler+0x324>)
 8001d30:	6013      	str	r3, [r2, #0]
	 result_speed_2 = ((float)Enc_Counter_2) *  pi_Radius_pulse_enc * 100.0;
 8001d32:	4b91      	ldr	r3, [pc, #580]	; (8001f78 <TIM6_DAC_IRQHandler+0x308>)
 8001d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d40:	ee17 0a90 	vmov	r0, s15
 8001d44:	f7fe fba4 	bl	8000490 <__aeabi_f2d>
 8001d48:	a37f      	add	r3, pc, #508	; (adr r3, 8001f48 <TIM6_DAC_IRQHandler+0x2d8>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	f7fe fbf7 	bl	8000540 <__aeabi_dmul>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	4b8b      	ldr	r3, [pc, #556]	; (8001f8c <TIM6_DAC_IRQHandler+0x31c>)
 8001d60:	f7fe fbee 	bl	8000540 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe feaa 	bl	8000ac4 <__aeabi_d2f>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4a89      	ldr	r2, [pc, #548]	; (8001f98 <TIM6_DAC_IRQHandler+0x328>)
 8001d74:	6013      	str	r3, [r2, #0]
	 result_speed_3 = ((float)Enc_Counter_3) *  pi_Radius_pulse_enc * 100.0;
 8001d76:	4b82      	ldr	r3, [pc, #520]	; (8001f80 <TIM6_DAC_IRQHandler+0x310>)
 8001d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d84:	ee17 0a90 	vmov	r0, s15
 8001d88:	f7fe fb82 	bl	8000490 <__aeabi_f2d>
 8001d8c:	a36e      	add	r3, pc, #440	; (adr r3, 8001f48 <TIM6_DAC_IRQHandler+0x2d8>)
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	f7fe fbd5 	bl	8000540 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	4b7a      	ldr	r3, [pc, #488]	; (8001f8c <TIM6_DAC_IRQHandler+0x31c>)
 8001da4:	f7fe fbcc 	bl	8000540 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe fe88 	bl	8000ac4 <__aeabi_d2f>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4a79      	ldr	r2, [pc, #484]	; (8001f9c <TIM6_DAC_IRQHandler+0x32c>)
 8001db8:	6013      	str	r3, [r2, #0]
	 result_speed_grab = ((float)Enc_Counter_4) * pi_Radius_pulse_enc_chain  * 100.0;
 8001dba:	4b73      	ldr	r3, [pc, #460]	; (8001f88 <TIM6_DAC_IRQHandler+0x318>)
 8001dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc8:	ee17 0a90 	vmov	r0, s15
 8001dcc:	f7fe fb60 	bl	8000490 <__aeabi_f2d>
 8001dd0:	a35f      	add	r3, pc, #380	; (adr r3, 8001f50 <TIM6_DAC_IRQHandler+0x2e0>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	f7fe fbb3 	bl	8000540 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	4b69      	ldr	r3, [pc, #420]	; (8001f8c <TIM6_DAC_IRQHandler+0x31c>)
 8001de8:	f7fe fbaa 	bl	8000540 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	f7fe fe66 	bl	8000ac4 <__aeabi_d2f>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4a69      	ldr	r2, [pc, #420]	; (8001fa0 <TIM6_DAC_IRQHandler+0x330>)
 8001dfc:	6013      	str	r3, [r2, #0]

	 TIM8->CNT = 0;
 8001dfe:	4b5a      	ldr	r3, [pc, #360]	; (8001f68 <TIM6_DAC_IRQHandler+0x2f8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM2->CNT = 0;
 8001e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e08:	2200      	movs	r2, #0
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM3->CNT = 0;
 8001e0c:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <TIM6_DAC_IRQHandler+0x304>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM1->CNT = 0;
 8001e12:	4b5a      	ldr	r3, [pc, #360]	; (8001f7c <TIM6_DAC_IRQHandler+0x30c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
	 TIM5->CNT = 0;
 8001e18:	4b5a      	ldr	r3, [pc, #360]	; (8001f84 <TIM6_DAC_IRQHandler+0x314>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24

	 Wheel_1.current = result_speed_0;
 8001e1e:	4b5c      	ldr	r3, [pc, #368]	; (8001f90 <TIM6_DAC_IRQHandler+0x320>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a60      	ldr	r2, [pc, #384]	; (8001fa4 <TIM6_DAC_IRQHandler+0x334>)
 8001e24:	6153      	str	r3, [r2, #20]
	 Wheel_2.current = result_speed_1;
 8001e26:	4b5b      	ldr	r3, [pc, #364]	; (8001f94 <TIM6_DAC_IRQHandler+0x324>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a5f      	ldr	r2, [pc, #380]	; (8001fa8 <TIM6_DAC_IRQHandler+0x338>)
 8001e2c:	6153      	str	r3, [r2, #20]
	 Wheel_3.current = result_speed_2;
 8001e2e:	4b5a      	ldr	r3, [pc, #360]	; (8001f98 <TIM6_DAC_IRQHandler+0x328>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a5e      	ldr	r2, [pc, #376]	; (8001fac <TIM6_DAC_IRQHandler+0x33c>)
 8001e34:	6153      	str	r3, [r2, #20]
	 Wheel_4.current = result_speed_3;
 8001e36:	4b59      	ldr	r3, [pc, #356]	; (8001f9c <TIM6_DAC_IRQHandler+0x32c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a5d      	ldr	r2, [pc, #372]	; (8001fb0 <TIM6_DAC_IRQHandler+0x340>)
 8001e3c:	6153      	str	r3, [r2, #20]
	 Chain_motor.current = result_speed_grab;
 8001e3e:	4b58      	ldr	r3, [pc, #352]	; (8001fa0 <TIM6_DAC_IRQHandler+0x330>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a5c      	ldr	r2, [pc, #368]	; (8001fb4 <TIM6_DAC_IRQHandler+0x344>)
 8001e44:	6153      	str	r3, [r2, #20]

	 PID_Controller(&Wheel_1);
 8001e46:	4857      	ldr	r0, [pc, #348]	; (8001fa4 <TIM6_DAC_IRQHandler+0x334>)
 8001e48:	f7ff fcb2 	bl	80017b0 <PID_Controller>
	 PID_Controller(&Wheel_2);
 8001e4c:	4856      	ldr	r0, [pc, #344]	; (8001fa8 <TIM6_DAC_IRQHandler+0x338>)
 8001e4e:	f7ff fcaf 	bl	80017b0 <PID_Controller>
	 PID_Controller(&Wheel_3);
 8001e52:	4856      	ldr	r0, [pc, #344]	; (8001fac <TIM6_DAC_IRQHandler+0x33c>)
 8001e54:	f7ff fcac 	bl	80017b0 <PID_Controller>
	 PID_Controller(&Wheel_4);
 8001e58:	4855      	ldr	r0, [pc, #340]	; (8001fb0 <TIM6_DAC_IRQHandler+0x340>)
 8001e5a:	f7ff fca9 	bl	80017b0 <PID_Controller>
	 PID_Controller(&Chain_motor);
 8001e5e:	4855      	ldr	r0, [pc, #340]	; (8001fb4 <TIM6_DAC_IRQHandler+0x344>)
 8001e60:	f7ff fca6 	bl	80017b0 <PID_Controller>

	 fi = fi + speed_W * 0.01;
 8001e64:	4b54      	ldr	r3, [pc, #336]	; (8001fb8 <TIM6_DAC_IRQHandler+0x348>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb11 	bl	8000490 <__aeabi_f2d>
 8001e6e:	4604      	mov	r4, r0
 8001e70:	460d      	mov	r5, r1
 8001e72:	4b52      	ldr	r3, [pc, #328]	; (8001fbc <TIM6_DAC_IRQHandler+0x34c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fb0a 	bl	8000490 <__aeabi_f2d>
 8001e7c:	a336      	add	r3, pc, #216	; (adr r3, 8001f58 <TIM6_DAC_IRQHandler+0x2e8>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e82:	f7fe fb5d 	bl	8000540 <__aeabi_dmul>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	4629      	mov	r1, r5
 8001e8e:	f7fe f9a1 	bl	80001d4 <__adddf3>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fe13 	bl	8000ac4 <__aeabi_d2f>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4a45      	ldr	r2, [pc, #276]	; (8001fb8 <TIM6_DAC_IRQHandler+0x348>)
 8001ea2:	6013      	str	r3, [r2, #0]
	 delta_UV[0][0] = speed_U *0.01;
 8001ea4:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <TIM6_DAC_IRQHandler+0x350>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe faf1 	bl	8000490 <__aeabi_f2d>
 8001eae:	a32a      	add	r3, pc, #168	; (adr r3, 8001f58 <TIM6_DAC_IRQHandler+0x2e8>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fb44 	bl	8000540 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7fe fe00 	bl	8000ac4 <__aeabi_d2f>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4a3f      	ldr	r2, [pc, #252]	; (8001fc4 <TIM6_DAC_IRQHandler+0x354>)
 8001ec8:	6013      	str	r3, [r2, #0]
	 delta_UV[0][1] = speed_V *0.01;
 8001eca:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <TIM6_DAC_IRQHandler+0x358>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fade 	bl	8000490 <__aeabi_f2d>
 8001ed4:	a320      	add	r3, pc, #128	; (adr r3, 8001f58 <TIM6_DAC_IRQHandler+0x2e8>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	f7fe fb31 	bl	8000540 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f7fe fded 	bl	8000ac4 <__aeabi_d2f>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4a35      	ldr	r2, [pc, #212]	; (8001fc4 <TIM6_DAC_IRQHandler+0x354>)
 8001eee:	6053      	str	r3, [r2, #4]
	 if(fi>=(2*pi)) fi = fi-2*pi;
 8001ef0:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <TIM6_DAC_IRQHandler+0x348>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe facb 	bl	8000490 <__aeabi_f2d>
 8001efa:	a319      	add	r3, pc, #100	; (adr r3, 8001f60 <TIM6_DAC_IRQHandler+0x2f0>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fda4 	bl	8000a4c <__aeabi_dcmpge>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d012      	beq.n	8001f30 <TIM6_DAC_IRQHandler+0x2c0>
 8001f0a:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <TIM6_DAC_IRQHandler+0x348>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fabe 	bl	8000490 <__aeabi_f2d>
 8001f14:	a312      	add	r3, pc, #72	; (adr r3, 8001f60 <TIM6_DAC_IRQHandler+0x2f0>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	f7fe f959 	bl	80001d0 <__aeabi_dsub>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f7fe fdcd 	bl	8000ac4 <__aeabi_d2f>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4a22      	ldr	r2, [pc, #136]	; (8001fb8 <TIM6_DAC_IRQHandler+0x348>)
 8001f2e:	6013      	str	r3, [r2, #0]
	 if(fi<0.0)	 fi = fi+2*pi;
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <TIM6_DAC_IRQHandler+0x348>)
 8001f32:	edd3 7a00 	vldr	s15, [r3]
 8001f36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3e:	d556      	bpl.n	8001fee <TIM6_DAC_IRQHandler+0x37e>
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <TIM6_DAC_IRQHandler+0x348>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	e042      	b.n	8001fcc <TIM6_DAC_IRQHandler+0x35c>
 8001f46:	bf00      	nop
 8001f48:	ce34e015 	.word	0xce34e015
 8001f4c:	3f16194c 	.word	0x3f16194c
 8001f50:	4c4ff567 	.word	0x4c4ff567
 8001f54:	3f2326fe 	.word	0x3f2326fe
 8001f58:	47ae147b 	.word	0x47ae147b
 8001f5c:	3f847ae1 	.word	0x3f847ae1
 8001f60:	54442d18 	.word	0x54442d18
 8001f64:	401921fb 	.word	0x401921fb
 8001f68:	40010400 	.word	0x40010400
 8001f6c:	2000026c 	.word	0x2000026c
 8001f70:	2000026e 	.word	0x2000026e
 8001f74:	40000400 	.word	0x40000400
 8001f78:	20000270 	.word	0x20000270
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	20000272 	.word	0x20000272
 8001f84:	40000c00 	.word	0x40000c00
 8001f88:	20000274 	.word	0x20000274
 8001f8c:	40590000 	.word	0x40590000
 8001f90:	2000027c 	.word	0x2000027c
 8001f94:	20000280 	.word	0x20000280
 8001f98:	20000284 	.word	0x20000284
 8001f9c:	20000288 	.word	0x20000288
 8001fa0:	2000028c 	.word	0x2000028c
 8001fa4:	2000002c 	.word	0x2000002c
 8001fa8:	2000006c 	.word	0x2000006c
 8001fac:	200000ac 	.word	0x200000ac
 8001fb0:	200000ec 	.word	0x200000ec
 8001fb4:	2000012c 	.word	0x2000012c
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000184 	.word	0x20000184
 8001fc0:	2000017c 	.word	0x2000017c
 8001fc4:	200002a0 	.word	0x200002a0
 8001fc8:	20000180 	.word	0x20000180
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fa5f 	bl	8000490 <__aeabi_f2d>
 8001fd2:	a3a7      	add	r3, pc, #668	; (adr r3, 8002270 <TIM6_DAC_IRQHandler+0x600>)
 8001fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd8:	f7fe f8fc 	bl	80001d4 <__adddf3>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f7fe fd6e 	bl	8000ac4 <__aeabi_d2f>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4aa5      	ldr	r2, [pc, #660]	; (8002280 <TIM6_DAC_IRQHandler+0x610>)
 8001fec:	6013      	str	r3, [r2, #0]
	 if(quest_FI>fi){
 8001fee:	4ba5      	ldr	r3, [pc, #660]	; (8002284 <TIM6_DAC_IRQHandler+0x614>)
 8001ff0:	ed93 7a00 	vldr	s14, [r3]
 8001ff4:	4ba2      	ldr	r3, [pc, #648]	; (8002280 <TIM6_DAC_IRQHandler+0x610>)
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002002:	dd4a      	ble.n	800209a <TIM6_DAC_IRQHandler+0x42a>
		 if((quest_FI-fi)>pi){
 8002004:	4b9f      	ldr	r3, [pc, #636]	; (8002284 <TIM6_DAC_IRQHandler+0x614>)
 8002006:	ed93 7a00 	vldr	s14, [r3]
 800200a:	4b9d      	ldr	r3, [pc, #628]	; (8002280 <TIM6_DAC_IRQHandler+0x610>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002014:	ee17 0a90 	vmov	r0, s15
 8002018:	f7fe fa3a 	bl	8000490 <__aeabi_f2d>
 800201c:	a392      	add	r3, pc, #584	; (adr r3, 8002268 <TIM6_DAC_IRQHandler+0x5f8>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe fd1d 	bl	8000a60 <__aeabi_dcmpgt>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d027      	beq.n	800207c <TIM6_DAC_IRQHandler+0x40c>
			delta_fi = (2*pi-quest_FI+fi);
 800202c:	4b95      	ldr	r3, [pc, #596]	; (8002284 <TIM6_DAC_IRQHandler+0x614>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fa2d 	bl	8000490 <__aeabi_f2d>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	a18d      	add	r1, pc, #564	; (adr r1, 8002270 <TIM6_DAC_IRQHandler+0x600>)
 800203c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002040:	f7fe f8c6 	bl	80001d0 <__aeabi_dsub>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4614      	mov	r4, r2
 800204a:	461d      	mov	r5, r3
 800204c:	4b8c      	ldr	r3, [pc, #560]	; (8002280 <TIM6_DAC_IRQHandler+0x610>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa1d 	bl	8000490 <__aeabi_f2d>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4620      	mov	r0, r4
 800205c:	4629      	mov	r1, r5
 800205e:	f7fe f8b9 	bl	80001d4 <__adddf3>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	f7fe fd2b 	bl	8000ac4 <__aeabi_d2f>
 800206e:	4603      	mov	r3, r0
 8002070:	4a85      	ldr	r2, [pc, #532]	; (8002288 <TIM6_DAC_IRQHandler+0x618>)
 8002072:	6013      	str	r3, [r2, #0]
			flaging = 1;
 8002074:	4b85      	ldr	r3, [pc, #532]	; (800228c <TIM6_DAC_IRQHandler+0x61c>)
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e058      	b.n	800212e <TIM6_DAC_IRQHandler+0x4be>
		 }
		 else {

			 delta_fi = (quest_FI - fi);
 800207c:	4b81      	ldr	r3, [pc, #516]	; (8002284 <TIM6_DAC_IRQHandler+0x614>)
 800207e:	ed93 7a00 	vldr	s14, [r3]
 8002082:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <TIM6_DAC_IRQHandler+0x610>)
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800208c:	4b7e      	ldr	r3, [pc, #504]	; (8002288 <TIM6_DAC_IRQHandler+0x618>)
 800208e:	edc3 7a00 	vstr	s15, [r3]
			 flaging = 2;
 8002092:	4b7e      	ldr	r3, [pc, #504]	; (800228c <TIM6_DAC_IRQHandler+0x61c>)
 8002094:	2202      	movs	r2, #2
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	e049      	b.n	800212e <TIM6_DAC_IRQHandler+0x4be>
		 }

	 }
	 else{
		 if((fi-quest_FI)>pi){
 800209a:	4b79      	ldr	r3, [pc, #484]	; (8002280 <TIM6_DAC_IRQHandler+0x610>)
 800209c:	ed93 7a00 	vldr	s14, [r3]
 80020a0:	4b78      	ldr	r3, [pc, #480]	; (8002284 <TIM6_DAC_IRQHandler+0x614>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020aa:	ee17 0a90 	vmov	r0, s15
 80020ae:	f7fe f9ef 	bl	8000490 <__aeabi_f2d>
 80020b2:	a36d      	add	r3, pc, #436	; (adr r3, 8002268 <TIM6_DAC_IRQHandler+0x5f8>)
 80020b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b8:	f7fe fcd2 	bl	8000a60 <__aeabi_dcmpgt>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d027      	beq.n	8002112 <TIM6_DAC_IRQHandler+0x4a2>
			 flaging = 3;
 80020c2:	4b72      	ldr	r3, [pc, #456]	; (800228c <TIM6_DAC_IRQHandler+0x61c>)
 80020c4:	2203      	movs	r2, #3
 80020c6:	701a      	strb	r2, [r3, #0]
			delta_fi =  2*pi-fi+quest_FI;;
 80020c8:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <TIM6_DAC_IRQHandler+0x610>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe f9df 	bl	8000490 <__aeabi_f2d>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	a166      	add	r1, pc, #408	; (adr r1, 8002270 <TIM6_DAC_IRQHandler+0x600>)
 80020d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020dc:	f7fe f878 	bl	80001d0 <__aeabi_dsub>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4614      	mov	r4, r2
 80020e6:	461d      	mov	r5, r3
 80020e8:	4b66      	ldr	r3, [pc, #408]	; (8002284 <TIM6_DAC_IRQHandler+0x614>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe f9cf 	bl	8000490 <__aeabi_f2d>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4620      	mov	r0, r4
 80020f8:	4629      	mov	r1, r5
 80020fa:	f7fe f86b 	bl	80001d4 <__adddf3>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fcdd 	bl	8000ac4 <__aeabi_d2f>
 800210a:	4603      	mov	r3, r0
 800210c:	4a5e      	ldr	r2, [pc, #376]	; (8002288 <TIM6_DAC_IRQHandler+0x618>)
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	e00d      	b.n	800212e <TIM6_DAC_IRQHandler+0x4be>

		 }
		 else {
			 flaging = 4;
 8002112:	4b5e      	ldr	r3, [pc, #376]	; (800228c <TIM6_DAC_IRQHandler+0x61c>)
 8002114:	2204      	movs	r2, #4
 8002116:	701a      	strb	r2, [r3, #0]
			 delta_fi = fi-quest_FI;
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <TIM6_DAC_IRQHandler+0x610>)
 800211a:	ed93 7a00 	vldr	s14, [r3]
 800211e:	4b59      	ldr	r3, [pc, #356]	; (8002284 <TIM6_DAC_IRQHandler+0x614>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002128:	4b57      	ldr	r3, [pc, #348]	; (8002288 <TIM6_DAC_IRQHandler+0x618>)
 800212a:	edc3 7a00 	vstr	s15, [r3]
		 }


	 }

	 UV_convert_xy[0][0] = cos(fi);
 800212e:	4b54      	ldr	r3, [pc, #336]	; (8002280 <TIM6_DAC_IRQHandler+0x610>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe f9ac 	bl	8000490 <__aeabi_f2d>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	ec43 2b10 	vmov	d0, r2, r3
 8002140:	f004 fd5e 	bl	8006c00 <cos>
 8002144:	ec53 2b10 	vmov	r2, r3, d0
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fcba 	bl	8000ac4 <__aeabi_d2f>
 8002150:	4603      	mov	r3, r0
 8002152:	4a4f      	ldr	r2, [pc, #316]	; (8002290 <TIM6_DAC_IRQHandler+0x620>)
 8002154:	6013      	str	r3, [r2, #0]
	 UV_convert_xy[0][1] = sin(fi);
 8002156:	4b4a      	ldr	r3, [pc, #296]	; (8002280 <TIM6_DAC_IRQHandler+0x610>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f998 	bl	8000490 <__aeabi_f2d>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	ec43 2b10 	vmov	d0, r2, r3
 8002168:	f004 fd9e 	bl	8006ca8 <sin>
 800216c:	ec53 2b10 	vmov	r2, r3, d0
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	f7fe fca6 	bl	8000ac4 <__aeabi_d2f>
 8002178:	4603      	mov	r3, r0
 800217a:	4a45      	ldr	r2, [pc, #276]	; (8002290 <TIM6_DAC_IRQHandler+0x620>)
 800217c:	6053      	str	r3, [r2, #4]
	 UV_convert_xy[1][1] = cos(fi);
 800217e:	4b40      	ldr	r3, [pc, #256]	; (8002280 <TIM6_DAC_IRQHandler+0x610>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f984 	bl	8000490 <__aeabi_f2d>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	ec43 2b10 	vmov	d0, r2, r3
 8002190:	f004 fd36 	bl	8006c00 <cos>
 8002194:	ec53 2b10 	vmov	r2, r3, d0
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	f7fe fc92 	bl	8000ac4 <__aeabi_d2f>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4a3b      	ldr	r2, [pc, #236]	; (8002290 <TIM6_DAC_IRQHandler+0x620>)
 80021a4:	60d3      	str	r3, [r2, #12]
	 UV_convert_xy[1][0] = -sin(fi);
 80021a6:	4b36      	ldr	r3, [pc, #216]	; (8002280 <TIM6_DAC_IRQHandler+0x610>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f970 	bl	8000490 <__aeabi_f2d>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	ec43 2b10 	vmov	d0, r2, r3
 80021b8:	f004 fd76 	bl	8006ca8 <sin>
 80021bc:	ec53 2b10 	vmov	r2, r3, d0
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	f7fe fc7e 	bl	8000ac4 <__aeabi_d2f>
 80021c8:	4603      	mov	r3, r0
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eef1 7a67 	vneg.f32	s15, s15
 80021d2:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <TIM6_DAC_IRQHandler+0x620>)
 80021d4:	edc3 7a02 	vstr	s15, [r3, #8]


	 matrixMultiplyM2M(&delta_UV[0][0],1,2,&UV_convert_xy[0][0],2,2,&delta_XY[0][0]);
 80021d8:	4b2e      	ldr	r3, [pc, #184]	; (8002294 <TIM6_DAC_IRQHandler+0x624>)
 80021da:	9302      	str	r3, [sp, #8]
 80021dc:	2302      	movs	r3, #2
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	2302      	movs	r3, #2
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <TIM6_DAC_IRQHandler+0x620>)
 80021e6:	2202      	movs	r2, #2
 80021e8:	2101      	movs	r1, #1
 80021ea:	482b      	ldr	r0, [pc, #172]	; (8002298 <TIM6_DAC_IRQHandler+0x628>)
 80021ec:	f7ff fb66 	bl	80018bc <matrixMultiplyM2M>
	 metr_chain = metr_chain + result_speed_grab*0.01 ;
 80021f0:	4b2a      	ldr	r3, [pc, #168]	; (800229c <TIM6_DAC_IRQHandler+0x62c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f94b 	bl	8000490 <__aeabi_f2d>
 80021fa:	4604      	mov	r4, r0
 80021fc:	460d      	mov	r5, r1
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <TIM6_DAC_IRQHandler+0x630>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f944 	bl	8000490 <__aeabi_f2d>
 8002208:	a31b      	add	r3, pc, #108	; (adr r3, 8002278 <TIM6_DAC_IRQHandler+0x608>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	f7fe f997 	bl	8000540 <__aeabi_dmul>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4620      	mov	r0, r4
 8002218:	4629      	mov	r1, r5
 800221a:	f7fd ffdb 	bl	80001d4 <__adddf3>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	f7fe fc4d 	bl	8000ac4 <__aeabi_d2f>
 800222a:	4603      	mov	r3, r0
 800222c:	4a1b      	ldr	r2, [pc, #108]	; (800229c <TIM6_DAC_IRQHandler+0x62c>)
 800222e:	6013      	str	r3, [r2, #0]
	 position_x = position_x +  delta_XY[0][0];
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <TIM6_DAC_IRQHandler+0x624>)
 8002232:	ed93 7a00 	vldr	s14, [r3]
 8002236:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <TIM6_DAC_IRQHandler+0x634>)
 8002238:	edd3 7a00 	vldr	s15, [r3]
 800223c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <TIM6_DAC_IRQHandler+0x634>)
 8002242:	edc3 7a00 	vstr	s15, [r3]
	 position_y = position_y +  delta_XY[0][1];
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <TIM6_DAC_IRQHandler+0x624>)
 8002248:	ed93 7a01 	vldr	s14, [r3, #4]
 800224c:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <TIM6_DAC_IRQHandler+0x638>)
 800224e:	edd3 7a00 	vldr	s15, [r3]
 8002252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <TIM6_DAC_IRQHandler+0x638>)
 8002258:	edc3 7a00 	vstr	s15, [r3]


  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800225c:	4813      	ldr	r0, [pc, #76]	; (80022ac <TIM6_DAC_IRQHandler+0x63c>)
 800225e:	f002 fe8f 	bl	8004f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	bdb0      	pop	{r4, r5, r7, pc}
 8002268:	54442d18 	.word	0x54442d18
 800226c:	400921fb 	.word	0x400921fb
 8002270:	54442d18 	.word	0x54442d18
 8002274:	401921fb 	.word	0x401921fb
 8002278:	47ae147b 	.word	0x47ae147b
 800227c:	3f847ae1 	.word	0x3f847ae1
 8002280:	20000000 	.word	0x20000000
 8002284:	20000194 	.word	0x20000194
 8002288:	20000178 	.word	0x20000178
 800228c:	20000276 	.word	0x20000276
 8002290:	20000290 	.word	0x20000290
 8002294:	200002a8 	.word	0x200002a8
 8002298:	200002a0 	.word	0x200002a0
 800229c:	20000278 	.word	0x20000278
 80022a0:	2000028c 	.word	0x2000028c
 80022a4:	200002b0 	.word	0x200002b0
 80022a8:	200002b4 	.word	0x200002b4
 80022ac:	20000420 	.word	0x20000420

080022b0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <TIM7_IRQHandler+0x10>)
 80022b6:	f002 fe63 	bl	8004f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000468 	.word	0x20000468

080022c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <DMA2_Stream2_IRQHandler+0x10>)
 80022ca:	f001 fa95 	bl	80037f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200006a0 	.word	0x200006a0

080022d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <SystemInit+0x20>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <SystemInit+0x20>)
 80022e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08c      	sub	sp, #48	; 0x30
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002302:	f107 030c 	add.w	r3, r7, #12
 8002306:	2224      	movs	r2, #36	; 0x24
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f004 fc3c 	bl	8006b88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002318:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <MX_TIM1_Init+0xa8>)
 800231a:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <MX_TIM1_Init+0xac>)
 800231c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800231e:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <MX_TIM1_Init+0xa8>)
 8002320:	2200      	movs	r2, #0
 8002322:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <MX_TIM1_Init+0xa8>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800232a:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <MX_TIM1_Init+0xa8>)
 800232c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002330:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <MX_TIM1_Init+0xa8>)
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <MX_TIM1_Init+0xa8>)
 800233a:	2200      	movs	r2, #0
 800233c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233e:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <MX_TIM1_Init+0xa8>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002344:	2301      	movs	r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800234c:	2301      	movs	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002358:	2300      	movs	r3, #0
 800235a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800235c:	2301      	movs	r3, #1
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002360:	2300      	movs	r3, #0
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	4619      	mov	r1, r3
 800236e:	480d      	ldr	r0, [pc, #52]	; (80023a4 <MX_TIM1_Init+0xa8>)
 8002370:	f002 fcd2 	bl	8004d18 <HAL_TIM_Encoder_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800237a:	f7ff fc0d 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	4619      	mov	r1, r3
 800238a:	4806      	ldr	r0, [pc, #24]	; (80023a4 <MX_TIM1_Init+0xa8>)
 800238c:	f003 fa6a 	bl	8005864 <HAL_TIMEx_MasterConfigSynchronization>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002396:	f7ff fbff 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	3730      	adds	r7, #48	; 0x30
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200002b8 	.word	0x200002b8
 80023a8:	40010000 	.word	0x40010000

080023ac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08c      	sub	sp, #48	; 0x30
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	2224      	movs	r2, #36	; 0x24
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f004 fbe4 	bl	8006b88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023c8:	4b21      	ldr	r3, [pc, #132]	; (8002450 <MX_TIM2_Init+0xa4>)
 80023ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023d0:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <MX_TIM2_Init+0xa4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <MX_TIM2_Init+0xa4>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <MX_TIM2_Init+0xa4>)
 80023de:	f04f 32ff 	mov.w	r2, #4294967295
 80023e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <MX_TIM2_Init+0xa4>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <MX_TIM2_Init+0xa4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023f0:	2301      	movs	r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023f8:	2301      	movs	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002404:	2300      	movs	r3, #0
 8002406:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002408:	2301      	movs	r3, #1
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800240c:	2300      	movs	r3, #0
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002414:	f107 030c 	add.w	r3, r7, #12
 8002418:	4619      	mov	r1, r3
 800241a:	480d      	ldr	r0, [pc, #52]	; (8002450 <MX_TIM2_Init+0xa4>)
 800241c:	f002 fc7c 	bl	8004d18 <HAL_TIM_Encoder_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002426:	f7ff fbb7 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	4619      	mov	r1, r3
 8002436:	4806      	ldr	r0, [pc, #24]	; (8002450 <MX_TIM2_Init+0xa4>)
 8002438:	f003 fa14 	bl	8005864 <HAL_TIMEx_MasterConfigSynchronization>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002442:	f7ff fba9 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002446:	bf00      	nop
 8002448:	3730      	adds	r7, #48	; 0x30
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000300 	.word	0x20000300

08002454 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	; 0x30
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	2224      	movs	r2, #36	; 0x24
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f004 fb90 	bl	8006b88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002470:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <MX_TIM3_Init+0xa0>)
 8002472:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <MX_TIM3_Init+0xa4>)
 8002474:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002476:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <MX_TIM3_Init+0xa0>)
 8002478:	2200      	movs	r2, #0
 800247a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247c:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <MX_TIM3_Init+0xa0>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002482:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <MX_TIM3_Init+0xa0>)
 8002484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002488:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248a:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <MX_TIM3_Init+0xa0>)
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002490:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <MX_TIM3_Init+0xa0>)
 8002492:	2200      	movs	r2, #0
 8002494:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002496:	2301      	movs	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800249e:	2301      	movs	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024ae:	2301      	movs	r3, #1
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	4619      	mov	r1, r3
 80024c0:	480c      	ldr	r0, [pc, #48]	; (80024f4 <MX_TIM3_Init+0xa0>)
 80024c2:	f002 fc29 	bl	8004d18 <HAL_TIM_Encoder_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80024cc:	f7ff fb64 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d0:	2300      	movs	r3, #0
 80024d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	4805      	ldr	r0, [pc, #20]	; (80024f4 <MX_TIM3_Init+0xa0>)
 80024de:	f003 f9c1 	bl	8005864 <HAL_TIMEx_MasterConfigSynchronization>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80024e8:	f7ff fb56 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024ec:	bf00      	nop
 80024ee:	3730      	adds	r7, #48	; 0x30
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000348 	.word	0x20000348
 80024f8:	40000400 	.word	0x40000400

080024fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	; 0x28
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002502:	f107 0320 	add.w	r3, r7, #32
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	611a      	str	r2, [r3, #16]
 800251a:	615a      	str	r2, [r3, #20]
 800251c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800251e:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <MX_TIM4_Init+0xec>)
 8002520:	4a32      	ldr	r2, [pc, #200]	; (80025ec <MX_TIM4_Init+0xf0>)
 8002522:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002524:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <MX_TIM4_Init+0xec>)
 8002526:	2200      	movs	r2, #0
 8002528:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252a:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <MX_TIM4_Init+0xec>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002530:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <MX_TIM4_Init+0xec>)
 8002532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002536:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002538:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <MX_TIM4_Init+0xec>)
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253e:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <MX_TIM4_Init+0xec>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002544:	4828      	ldr	r0, [pc, #160]	; (80025e8 <MX_TIM4_Init+0xec>)
 8002546:	f002 facf 	bl	8004ae8 <HAL_TIM_PWM_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002550:	f7ff fb22 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002554:	2300      	movs	r3, #0
 8002556:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800255c:	f107 0320 	add.w	r3, r7, #32
 8002560:	4619      	mov	r1, r3
 8002562:	4821      	ldr	r0, [pc, #132]	; (80025e8 <MX_TIM4_Init+0xec>)
 8002564:	f003 f97e 	bl	8005864 <HAL_TIMEx_MasterConfigSynchronization>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800256e:	f7ff fb13 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002572:	2360      	movs	r3, #96	; 0x60
 8002574:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	2200      	movs	r2, #0
 8002586:	4619      	mov	r1, r3
 8002588:	4817      	ldr	r0, [pc, #92]	; (80025e8 <MX_TIM4_Init+0xec>)
 800258a:	f002 fe01 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002594:	f7ff fb00 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	2204      	movs	r2, #4
 800259c:	4619      	mov	r1, r3
 800259e:	4812      	ldr	r0, [pc, #72]	; (80025e8 <MX_TIM4_Init+0xec>)
 80025a0:	f002 fdf6 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80025aa:	f7ff faf5 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2208      	movs	r2, #8
 80025b2:	4619      	mov	r1, r3
 80025b4:	480c      	ldr	r0, [pc, #48]	; (80025e8 <MX_TIM4_Init+0xec>)
 80025b6:	f002 fdeb 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80025c0:	f7ff faea 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	220c      	movs	r2, #12
 80025c8:	4619      	mov	r1, r3
 80025ca:	4807      	ldr	r0, [pc, #28]	; (80025e8 <MX_TIM4_Init+0xec>)
 80025cc:	f002 fde0 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80025d6:	f7ff fadf 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025da:	4803      	ldr	r0, [pc, #12]	; (80025e8 <MX_TIM4_Init+0xec>)
 80025dc:	f000 fbfc 	bl	8002dd8 <HAL_TIM_MspPostInit>

}
 80025e0:	bf00      	nop
 80025e2:	3728      	adds	r7, #40	; 0x28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000390 	.word	0x20000390
 80025ec:	40000800 	.word	0x40000800

080025f0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08c      	sub	sp, #48	; 0x30
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025f6:	f107 030c 	add.w	r3, r7, #12
 80025fa:	2224      	movs	r2, #36	; 0x24
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 fac2 	bl	8006b88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800260c:	4b20      	ldr	r3, [pc, #128]	; (8002690 <MX_TIM5_Init+0xa0>)
 800260e:	4a21      	ldr	r2, [pc, #132]	; (8002694 <MX_TIM5_Init+0xa4>)
 8002610:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002612:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <MX_TIM5_Init+0xa0>)
 8002614:	2200      	movs	r2, #0
 8002616:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <MX_TIM5_Init+0xa0>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <MX_TIM5_Init+0xa0>)
 8002620:	f04f 32ff 	mov.w	r2, #4294967295
 8002624:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002626:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <MX_TIM5_Init+0xa0>)
 8002628:	2200      	movs	r2, #0
 800262a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262c:	4b18      	ldr	r3, [pc, #96]	; (8002690 <MX_TIM5_Init+0xa0>)
 800262e:	2200      	movs	r2, #0
 8002630:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002632:	2301      	movs	r3, #1
 8002634:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800263a:	2301      	movs	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002646:	2300      	movs	r3, #0
 8002648:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800264a:	2301      	movs	r3, #1
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800264e:	2300      	movs	r3, #0
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	4619      	mov	r1, r3
 800265c:	480c      	ldr	r0, [pc, #48]	; (8002690 <MX_TIM5_Init+0xa0>)
 800265e:	f002 fb5b 	bl	8004d18 <HAL_TIM_Encoder_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002668:	f7ff fa96 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266c:	2300      	movs	r3, #0
 800266e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	4619      	mov	r1, r3
 8002678:	4805      	ldr	r0, [pc, #20]	; (8002690 <MX_TIM5_Init+0xa0>)
 800267a:	f003 f8f3 	bl	8005864 <HAL_TIMEx_MasterConfigSynchronization>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002684:	f7ff fa88 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002688:	bf00      	nop
 800268a:	3730      	adds	r7, #48	; 0x30
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	200003d8 	.word	0x200003d8
 8002694:	40000c00 	.word	0x40000c00

08002698 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269e:	463b      	mov	r3, r7
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <MX_TIM6_Init+0x64>)
 80026a8:	4a15      	ldr	r2, [pc, #84]	; (8002700 <MX_TIM6_Init+0x68>)
 80026aa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 21;
 80026ac:	4b13      	ldr	r3, [pc, #76]	; (80026fc <MX_TIM6_Init+0x64>)
 80026ae:	2215      	movs	r2, #21
 80026b0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <MX_TIM6_Init+0x64>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 39999;
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <MX_TIM6_Init+0x64>)
 80026ba:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80026be:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c0:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <MX_TIM6_Init+0x64>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026c6:	480d      	ldr	r0, [pc, #52]	; (80026fc <MX_TIM6_Init+0x64>)
 80026c8:	f002 f94e 	bl	8004968 <HAL_TIM_Base_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80026d2:	f7ff fa61 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026de:	463b      	mov	r3, r7
 80026e0:	4619      	mov	r1, r3
 80026e2:	4806      	ldr	r0, [pc, #24]	; (80026fc <MX_TIM6_Init+0x64>)
 80026e4:	f003 f8be 	bl	8005864 <HAL_TIMEx_MasterConfigSynchronization>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80026ee:	f7ff fa53 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000420 	.word	0x20000420
 8002700:	40001000 	.word	0x40001000

08002704 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270a:	463b      	mov	r3, r7
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <MX_TIM7_Init+0x64>)
 8002714:	4a15      	ldr	r2, [pc, #84]	; (800276c <MX_TIM7_Init+0x68>)
 8002716:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10;
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <MX_TIM7_Init+0x64>)
 800271a:	220a      	movs	r2, #10
 800271c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <MX_TIM7_Init+0x64>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8002724:	4b10      	ldr	r3, [pc, #64]	; (8002768 <MX_TIM7_Init+0x64>)
 8002726:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800272a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <MX_TIM7_Init+0x64>)
 800272e:	2200      	movs	r2, #0
 8002730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002732:	480d      	ldr	r0, [pc, #52]	; (8002768 <MX_TIM7_Init+0x64>)
 8002734:	f002 f918 	bl	8004968 <HAL_TIM_Base_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800273e:	f7ff fa2b 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800274a:	463b      	mov	r3, r7
 800274c:	4619      	mov	r1, r3
 800274e:	4806      	ldr	r0, [pc, #24]	; (8002768 <MX_TIM7_Init+0x64>)
 8002750:	f003 f888 	bl	8005864 <HAL_TIMEx_MasterConfigSynchronization>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800275a:	f7ff fa1d 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000468 	.word	0x20000468
 800276c:	40001400 	.word	0x40001400

08002770 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08c      	sub	sp, #48	; 0x30
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002776:	f107 030c 	add.w	r3, r7, #12
 800277a:	2224      	movs	r2, #36	; 0x24
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f004 fa02 	bl	8006b88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800278c:	4b22      	ldr	r3, [pc, #136]	; (8002818 <MX_TIM8_Init+0xa8>)
 800278e:	4a23      	ldr	r2, [pc, #140]	; (800281c <MX_TIM8_Init+0xac>)
 8002790:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <MX_TIM8_Init+0xa8>)
 8002794:	2200      	movs	r2, #0
 8002796:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002798:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <MX_TIM8_Init+0xa8>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <MX_TIM8_Init+0xa8>)
 80027a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027a4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a6:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <MX_TIM8_Init+0xa8>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80027ac:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <MX_TIM8_Init+0xa8>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b2:	4b19      	ldr	r3, [pc, #100]	; (8002818 <MX_TIM8_Init+0xa8>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80027b8:	2301      	movs	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027bc:	2300      	movs	r3, #0
 80027be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027c0:	2301      	movs	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027cc:	2300      	movs	r3, #0
 80027ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027d0:	2301      	movs	r3, #1
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027d4:	2300      	movs	r3, #0
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80027dc:	f107 030c 	add.w	r3, r7, #12
 80027e0:	4619      	mov	r1, r3
 80027e2:	480d      	ldr	r0, [pc, #52]	; (8002818 <MX_TIM8_Init+0xa8>)
 80027e4:	f002 fa98 	bl	8004d18 <HAL_TIM_Encoder_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80027ee:	f7ff f9d3 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	4619      	mov	r1, r3
 80027fe:	4806      	ldr	r0, [pc, #24]	; (8002818 <MX_TIM8_Init+0xa8>)
 8002800:	f003 f830 	bl	8005864 <HAL_TIMEx_MasterConfigSynchronization>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800280a:	f7ff f9c5 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800280e:	bf00      	nop
 8002810:	3730      	adds	r7, #48	; 0x30
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200004b0 	.word	0x200004b0
 800281c:	40010400 	.word	0x40010400

08002820 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
 8002834:	615a      	str	r2, [r3, #20]
 8002836:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002838:	4b20      	ldr	r3, [pc, #128]	; (80028bc <MX_TIM9_Init+0x9c>)
 800283a:	4a21      	ldr	r2, [pc, #132]	; (80028c0 <MX_TIM9_Init+0xa0>)
 800283c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 3359;
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <MX_TIM9_Init+0x9c>)
 8002840:	f640 521f 	movw	r2, #3359	; 0xd1f
 8002844:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002846:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <MX_TIM9_Init+0x9c>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <MX_TIM9_Init+0x9c>)
 800284e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002852:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <MX_TIM9_Init+0x9c>)
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800285a:	4b18      	ldr	r3, [pc, #96]	; (80028bc <MX_TIM9_Init+0x9c>)
 800285c:	2200      	movs	r2, #0
 800285e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002860:	4816      	ldr	r0, [pc, #88]	; (80028bc <MX_TIM9_Init+0x9c>)
 8002862:	f002 f941 	bl	8004ae8 <HAL_TIM_PWM_Init>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 800286c:	f7ff f994 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002870:	2360      	movs	r3, #96	; 0x60
 8002872:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	2200      	movs	r2, #0
 8002884:	4619      	mov	r1, r3
 8002886:	480d      	ldr	r0, [pc, #52]	; (80028bc <MX_TIM9_Init+0x9c>)
 8002888:	f002 fc82 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8002892:	f7ff f981 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	2204      	movs	r2, #4
 800289a:	4619      	mov	r1, r3
 800289c:	4807      	ldr	r0, [pc, #28]	; (80028bc <MX_TIM9_Init+0x9c>)
 800289e:	f002 fc77 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 80028a8:	f7ff f976 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80028ac:	4803      	ldr	r0, [pc, #12]	; (80028bc <MX_TIM9_Init+0x9c>)
 80028ae:	f000 fa93 	bl	8002dd8 <HAL_TIM_MspPostInit>

}
 80028b2:	bf00      	nop
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	200004f8 	.word	0x200004f8
 80028c0:	40014000 	.word	0x40014000

080028c4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <MX_TIM10_Init+0x40>)
 80028ca:	4a0f      	ldr	r2, [pc, #60]	; (8002908 <MX_TIM10_Init+0x44>)
 80028cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 90;
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <MX_TIM10_Init+0x40>)
 80028d0:	225a      	movs	r2, #90	; 0x5a
 80028d2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <MX_TIM10_Init+0x40>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 39999;
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <MX_TIM10_Init+0x40>)
 80028dc:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80028e0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <MX_TIM10_Init+0x40>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <MX_TIM10_Init+0x40>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80028ee:	4805      	ldr	r0, [pc, #20]	; (8002904 <MX_TIM10_Init+0x40>)
 80028f0:	f002 f83a 	bl	8004968 <HAL_TIM_Base_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80028fa:	f7ff f94d 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000540 	.word	0x20000540
 8002908:	40014400 	.word	0x40014400

0800290c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002910:	4b0e      	ldr	r3, [pc, #56]	; (800294c <MX_TIM11_Init+0x40>)
 8002912:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <MX_TIM11_Init+0x44>)
 8002914:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 90;
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <MX_TIM11_Init+0x40>)
 8002918:	225a      	movs	r2, #90	; 0x5a
 800291a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <MX_TIM11_Init+0x40>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 39999;
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <MX_TIM11_Init+0x40>)
 8002924:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002928:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <MX_TIM11_Init+0x40>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <MX_TIM11_Init+0x40>)
 8002932:	2200      	movs	r2, #0
 8002934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002936:	4805      	ldr	r0, [pc, #20]	; (800294c <MX_TIM11_Init+0x40>)
 8002938:	f002 f816 	bl	8004968 <HAL_TIM_Base_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002942:	f7ff f929 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000588 	.word	0x20000588
 8002950:	40014800 	.word	0x40014800

08002954 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
 8002968:	615a      	str	r2, [r3, #20]
 800296a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800296c:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <MX_TIM12_Init+0x84>)
 800296e:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <MX_TIM12_Init+0x88>)
 8002970:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002972:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <MX_TIM12_Init+0x84>)
 8002974:	2200      	movs	r2, #0
 8002976:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002978:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <MX_TIM12_Init+0x84>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <MX_TIM12_Init+0x84>)
 8002980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002984:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <MX_TIM12_Init+0x84>)
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <MX_TIM12_Init+0x84>)
 800298e:	2200      	movs	r2, #0
 8002990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002992:	4811      	ldr	r0, [pc, #68]	; (80029d8 <MX_TIM12_Init+0x84>)
 8002994:	f002 f8a8 	bl	8004ae8 <HAL_TIM_PWM_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800299e:	f7ff f8fb 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029a2:	2360      	movs	r3, #96	; 0x60
 80029a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2200      	movs	r2, #0
 80029b6:	4619      	mov	r1, r3
 80029b8:	4807      	ldr	r0, [pc, #28]	; (80029d8 <MX_TIM12_Init+0x84>)
 80029ba:	f002 fbe9 	bl	8005190 <HAL_TIM_PWM_ConfigChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80029c4:	f7ff f8e8 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80029c8:	4803      	ldr	r0, [pc, #12]	; (80029d8 <MX_TIM12_Init+0x84>)
 80029ca:	f000 fa05 	bl	8002dd8 <HAL_TIM_MspPostInit>

}
 80029ce:	bf00      	nop
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200005d0 	.word	0x200005d0
 80029dc:	40001800 	.word	0x40001800

080029e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b092      	sub	sp, #72	; 0x48
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a8d      	ldr	r2, [pc, #564]	; (8002c34 <HAL_TIM_Encoder_MspInit+0x254>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d12d      	bne.n	8002a5e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	633b      	str	r3, [r7, #48]	; 0x30
 8002a06:	4b8c      	ldr	r3, [pc, #560]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	4a8b      	ldr	r2, [pc, #556]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6453      	str	r3, [r2, #68]	; 0x44
 8002a12:	4b89      	ldr	r3, [pc, #548]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a22:	4b85      	ldr	r3, [pc, #532]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a84      	ldr	r2, [pc, #528]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002a28:	f043 0310 	orr.w	r3, r3, #16
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b82      	ldr	r3, [pc, #520]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_4_A_Pin|ENC_4_B_Pin;
 8002a3a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002a3e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2302      	movs	r3, #2
 8002a42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a44:	2301      	movs	r3, #1
 8002a46:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a54:	4619      	mov	r1, r3
 8002a56:	4879      	ldr	r0, [pc, #484]	; (8002c3c <HAL_TIM_Encoder_MspInit+0x25c>)
 8002a58:	f001 f938 	bl	8003ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002a5c:	e0e5      	b.n	8002c2a <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM2)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a66:	d14b      	bne.n	8002b00 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a6c:	4b72      	ldr	r3, [pc, #456]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	4a71      	ldr	r2, [pc, #452]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6413      	str	r3, [r2, #64]	; 0x40
 8002a78:	4b6f      	ldr	r3, [pc, #444]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
 8002a88:	4b6b      	ldr	r3, [pc, #428]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	4a6a      	ldr	r2, [pc, #424]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6313      	str	r3, [r2, #48]	; 0x30
 8002a94:	4b68      	ldr	r3, [pc, #416]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	623b      	str	r3, [r7, #32]
 8002aa4:	4b64      	ldr	r3, [pc, #400]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	4a63      	ldr	r2, [pc, #396]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002aaa:	f043 0302 	orr.w	r3, r3, #2
 8002aae:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab0:	4b61      	ldr	r3, [pc, #388]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	623b      	str	r3, [r7, #32]
 8002aba:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = ENC_2_A_Pin;
 8002abc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ac0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2300      	movs	r3, #0
 8002acc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ENC_2_A_GPIO_Port, &GPIO_InitStruct);
 8002ad2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4859      	ldr	r0, [pc, #356]	; (8002c40 <HAL_TIM_Encoder_MspInit+0x260>)
 8002ada:	f001 f8f7 	bl	8003ccc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_2_B_Pin;
 8002ade:	2308      	movs	r3, #8
 8002ae0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	2300      	movs	r3, #0
 8002aec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002aee:	2301      	movs	r3, #1
 8002af0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ENC_2_B_GPIO_Port, &GPIO_InitStruct);
 8002af2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002af6:	4619      	mov	r1, r3
 8002af8:	4852      	ldr	r0, [pc, #328]	; (8002c44 <HAL_TIM_Encoder_MspInit+0x264>)
 8002afa:	f001 f8e7 	bl	8003ccc <HAL_GPIO_Init>
}
 8002afe:	e094      	b.n	8002c2a <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM3)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a50      	ldr	r2, [pc, #320]	; (8002c48 <HAL_TIM_Encoder_MspInit+0x268>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d12c      	bne.n	8002b64 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	4b4a      	ldr	r3, [pc, #296]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	4a49      	ldr	r2, [pc, #292]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1a:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	61fb      	str	r3, [r7, #28]
 8002b24:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	4b43      	ldr	r3, [pc, #268]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a42      	ldr	r2, [pc, #264]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b40      	ldr	r3, [pc, #256]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_3_A_Pin|ENC_3_B_Pin;
 8002b42:	23c0      	movs	r3, #192	; 0xc0
 8002b44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b52:	2302      	movs	r3, #2
 8002b54:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4838      	ldr	r0, [pc, #224]	; (8002c40 <HAL_TIM_Encoder_MspInit+0x260>)
 8002b5e:	f001 f8b5 	bl	8003ccc <HAL_GPIO_Init>
}
 8002b62:	e062      	b.n	8002c2a <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM5)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a38      	ldr	r2, [pc, #224]	; (8002c4c <HAL_TIM_Encoder_MspInit+0x26c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d12c      	bne.n	8002bc8 <HAL_TIM_Encoder_MspInit+0x1e8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4a30      	ldr	r2, [pc, #192]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002b78:	f043 0308 	orr.w	r3, r3, #8
 8002b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7e:	4b2e      	ldr	r3, [pc, #184]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	4b2a      	ldr	r3, [pc, #168]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a29      	ldr	r2, [pc, #164]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_5_A_Pin|ENC_5_B_Pin;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	481f      	ldr	r0, [pc, #124]	; (8002c40 <HAL_TIM_Encoder_MspInit+0x260>)
 8002bc2:	f001 f883 	bl	8003ccc <HAL_GPIO_Init>
}
 8002bc6:	e030      	b.n	8002c2a <HAL_TIM_Encoder_MspInit+0x24a>
  else if(tim_encoderHandle->Instance==TIM8)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a20      	ldr	r2, [pc, #128]	; (8002c50 <HAL_TIM_Encoder_MspInit+0x270>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d12b      	bne.n	8002c2a <HAL_TIM_Encoder_MspInit+0x24a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	4a17      	ldr	r2, [pc, #92]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002bdc:	f043 0302 	orr.w	r3, r3, #2
 8002be0:	6453      	str	r3, [r2, #68]	; 0x44
 8002be2:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a10      	ldr	r2, [pc, #64]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x258>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_1_A_Pin|ENC_1_B_Pin;
 8002c0a:	23c0      	movs	r3, #192	; 0xc0
 8002c0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c12:	2301      	movs	r3, #1
 8002c14:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2300      	movs	r3, #0
 8002c18:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c22:	4619      	mov	r1, r3
 8002c24:	480b      	ldr	r0, [pc, #44]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x274>)
 8002c26:	f001 f851 	bl	8003ccc <HAL_GPIO_Init>
}
 8002c2a:	bf00      	nop
 8002c2c:	3748      	adds	r7, #72	; 0x48
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40010000 	.word	0x40010000
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40020000 	.word	0x40020000
 8002c44:	40020400 	.word	0x40020400
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000c00 	.word	0x40000c00
 8002c50:	40010400 	.word	0x40010400
 8002c54:	40020800 	.word	0x40020800

08002c58 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10e      	bne.n	8002c88 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x90>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x90>)
 8002c74:	f043 0304 	orr.w	r3, r3, #4
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x90>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002c86:	e026      	b.n	8002cd6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM9)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a17      	ldr	r2, [pc, #92]	; (8002cec <HAL_TIM_PWM_MspInit+0x94>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d10e      	bne.n	8002cb0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x90>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	4a13      	ldr	r2, [pc, #76]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x90>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x90>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]
}
 8002cae:	e012      	b.n	8002cd6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <HAL_TIM_PWM_MspInit+0x98>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10d      	bne.n	8002cd6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x90>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x90>)
 8002cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x90>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40000800 	.word	0x40000800
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40014000 	.word	0x40014000
 8002cf0:	40001800 	.word	0x40001800

08002cf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <HAL_TIM_Base_MspInit+0xd0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d116      	bne.n	8002d34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <HAL_TIM_Base_MspInit+0xd4>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	4a2e      	ldr	r2, [pc, #184]	; (8002dc8 <HAL_TIM_Base_MspInit+0xd4>)
 8002d10:	f043 0310 	orr.w	r3, r3, #16
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
 8002d16:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <HAL_TIM_Base_MspInit+0xd4>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002d22:	2200      	movs	r2, #0
 8002d24:	2100      	movs	r1, #0
 8002d26:	2036      	movs	r0, #54	; 0x36
 8002d28:	f000 fb97 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d2c:	2036      	movs	r0, #54	; 0x36
 8002d2e:	f000 fbb0 	bl	8003492 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002d32:	e042      	b.n	8002dba <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a24      	ldr	r2, [pc, #144]	; (8002dcc <HAL_TIM_Base_MspInit+0xd8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d116      	bne.n	8002d6c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <HAL_TIM_Base_MspInit+0xd4>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	4a20      	ldr	r2, [pc, #128]	; (8002dc8 <HAL_TIM_Base_MspInit+0xd4>)
 8002d48:	f043 0320 	orr.w	r3, r3, #32
 8002d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	; (8002dc8 <HAL_TIM_Base_MspInit+0xd4>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 1);
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	2037      	movs	r0, #55	; 0x37
 8002d60:	f000 fb7b 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d64:	2037      	movs	r0, #55	; 0x37
 8002d66:	f000 fb94 	bl	8003492 <HAL_NVIC_EnableIRQ>
}
 8002d6a:	e026      	b.n	8002dba <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM10)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a17      	ldr	r2, [pc, #92]	; (8002dd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10e      	bne.n	8002d94 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <HAL_TIM_Base_MspInit+0xd4>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <HAL_TIM_Base_MspInit+0xd4>)
 8002d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d84:	6453      	str	r3, [r2, #68]	; 0x44
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <HAL_TIM_Base_MspInit+0xd4>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
}
 8002d92:	e012      	b.n	8002dba <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM11)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a0e      	ldr	r2, [pc, #56]	; (8002dd4 <HAL_TIM_Base_MspInit+0xe0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d10d      	bne.n	8002dba <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_TIM_Base_MspInit+0xd4>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a08      	ldr	r2, [pc, #32]	; (8002dc8 <HAL_TIM_Base_MspInit+0xd4>)
 8002da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_TIM_Base_MspInit+0xd4>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
}
 8002dba:	bf00      	nop
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40001000 	.word	0x40001000
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40001400 	.word	0x40001400
 8002dd0:	40014400 	.word	0x40014400
 8002dd4:	40014800 	.word	0x40014800

08002dd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a37      	ldr	r2, [pc, #220]	; (8002ed4 <HAL_TIM_MspPostInit+0xfc>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d11f      	bne.n	8002e3a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <HAL_TIM_MspPostInit+0x100>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a35      	ldr	r2, [pc, #212]	; (8002ed8 <HAL_TIM_MspPostInit+0x100>)
 8002e04:	f043 0308 	orr.w	r3, r3, #8
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <HAL_TIM_MspPostInit+0x100>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = pwm1_MT_Pin|pwm2_MT_Pin|pwm3_MT_Pin|pwm4_MT_Pin;
 8002e16:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e20:	2301      	movs	r3, #1
 8002e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	4619      	mov	r1, r3
 8002e32:	482a      	ldr	r0, [pc, #168]	; (8002edc <HAL_TIM_MspPostInit+0x104>)
 8002e34:	f000 ff4a 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002e38:	e047      	b.n	8002eca <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM9)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a28      	ldr	r2, [pc, #160]	; (8002ee0 <HAL_TIM_MspPostInit+0x108>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d11e      	bne.n	8002e82 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <HAL_TIM_MspPostInit+0x100>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	4a22      	ldr	r2, [pc, #136]	; (8002ed8 <HAL_TIM_MspPostInit+0x100>)
 8002e4e:	f043 0310 	orr.w	r3, r3, #16
 8002e52:	6313      	str	r3, [r2, #48]	; 0x30
 8002e54:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_TIM_MspPostInit+0x100>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = servo_2_Pin|servo_1_Pin;
 8002e60:	2360      	movs	r3, #96	; 0x60
 8002e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002e70:	2303      	movs	r3, #3
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	4619      	mov	r1, r3
 8002e7a:	481a      	ldr	r0, [pc, #104]	; (8002ee4 <HAL_TIM_MspPostInit+0x10c>)
 8002e7c:	f000 ff26 	bl	8003ccc <HAL_GPIO_Init>
}
 8002e80:	e023      	b.n	8002eca <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM12)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <HAL_TIM_MspPostInit+0x110>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d11e      	bne.n	8002eca <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <HAL_TIM_MspPostInit+0x100>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	4a10      	ldr	r2, [pc, #64]	; (8002ed8 <HAL_TIM_MspPostInit+0x100>)
 8002e96:	f043 0302 	orr.w	r3, r3, #2
 8002e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <HAL_TIM_MspPostInit+0x100>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = pwm5_MT_Pin;
 8002ea8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002eba:	2309      	movs	r3, #9
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(pwm5_MT_GPIO_Port, &GPIO_InitStruct);
 8002ebe:	f107 0314 	add.w	r3, r7, #20
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4809      	ldr	r0, [pc, #36]	; (8002eec <HAL_TIM_MspPostInit+0x114>)
 8002ec6:	f000 ff01 	bl	8003ccc <HAL_GPIO_Init>
}
 8002eca:	bf00      	nop
 8002ecc:	3728      	adds	r7, #40	; 0x28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40000800 	.word	0x40000800
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40020c00 	.word	0x40020c00
 8002ee0:	40014000 	.word	0x40014000
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40001800 	.word	0x40001800
 8002eec:	40020400 	.word	0x40020400

08002ef0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002ef6:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <MX_USART1_UART_Init+0x50>)
 8002ef8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f02:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002f16:	220c      	movs	r2, #12
 8002f18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f26:	4805      	ldr	r0, [pc, #20]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002f28:	f002 fd2c 	bl	8005984 <HAL_UART_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f32:	f7fe fe31 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000618 	.word	0x20000618
 8002f40:	40011000 	.word	0x40011000

08002f44 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <MX_USART2_UART_Init+0x4c>)
 8002f4a:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <MX_USART2_UART_Init+0x50>)
 8002f4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <MX_USART2_UART_Init+0x4c>)
 8002f50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f56:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <MX_USART2_UART_Init+0x4c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <MX_USART2_UART_Init+0x4c>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f62:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <MX_USART2_UART_Init+0x4c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <MX_USART2_UART_Init+0x4c>)
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <MX_USART2_UART_Init+0x4c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <MX_USART2_UART_Init+0x4c>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f7a:	4805      	ldr	r0, [pc, #20]	; (8002f90 <MX_USART2_UART_Init+0x4c>)
 8002f7c:	f002 fd02 	bl	8005984 <HAL_UART_Init>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f86:	f7fe fe07 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	2000065c 	.word	0x2000065c
 8002f94:	40004400 	.word	0x40004400

08002f98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08c      	sub	sp, #48	; 0x30
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	f107 031c 	add.w	r3, r7, #28
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a64      	ldr	r2, [pc, #400]	; (8003148 <HAL_UART_MspInit+0x1b0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d163      	bne.n	8003082 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	4b63      	ldr	r3, [pc, #396]	; (800314c <HAL_UART_MspInit+0x1b4>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	4a62      	ldr	r2, [pc, #392]	; (800314c <HAL_UART_MspInit+0x1b4>)
 8002fc4:	f043 0310 	orr.w	r3, r3, #16
 8002fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fca:	4b60      	ldr	r3, [pc, #384]	; (800314c <HAL_UART_MspInit+0x1b4>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	4b5c      	ldr	r3, [pc, #368]	; (800314c <HAL_UART_MspInit+0x1b4>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a5b      	ldr	r2, [pc, #364]	; (800314c <HAL_UART_MspInit+0x1b4>)
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b59      	ldr	r3, [pc, #356]	; (800314c <HAL_UART_MspInit+0x1b4>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ff2:	23c0      	movs	r3, #192	; 0xc0
 8002ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffe:	2303      	movs	r3, #3
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003002:	2307      	movs	r3, #7
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003006:	f107 031c 	add.w	r3, r7, #28
 800300a:	4619      	mov	r1, r3
 800300c:	4850      	ldr	r0, [pc, #320]	; (8003150 <HAL_UART_MspInit+0x1b8>)
 800300e:	f000 fe5d 	bl	8003ccc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003012:	4b50      	ldr	r3, [pc, #320]	; (8003154 <HAL_UART_MspInit+0x1bc>)
 8003014:	4a50      	ldr	r2, [pc, #320]	; (8003158 <HAL_UART_MspInit+0x1c0>)
 8003016:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003018:	4b4e      	ldr	r3, [pc, #312]	; (8003154 <HAL_UART_MspInit+0x1bc>)
 800301a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800301e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003020:	4b4c      	ldr	r3, [pc, #304]	; (8003154 <HAL_UART_MspInit+0x1bc>)
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003026:	4b4b      	ldr	r3, [pc, #300]	; (8003154 <HAL_UART_MspInit+0x1bc>)
 8003028:	2200      	movs	r2, #0
 800302a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800302c:	4b49      	ldr	r3, [pc, #292]	; (8003154 <HAL_UART_MspInit+0x1bc>)
 800302e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003032:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003034:	4b47      	ldr	r3, [pc, #284]	; (8003154 <HAL_UART_MspInit+0x1bc>)
 8003036:	2200      	movs	r2, #0
 8003038:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800303a:	4b46      	ldr	r3, [pc, #280]	; (8003154 <HAL_UART_MspInit+0x1bc>)
 800303c:	2200      	movs	r2, #0
 800303e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003040:	4b44      	ldr	r3, [pc, #272]	; (8003154 <HAL_UART_MspInit+0x1bc>)
 8003042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003046:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003048:	4b42      	ldr	r3, [pc, #264]	; (8003154 <HAL_UART_MspInit+0x1bc>)
 800304a:	2200      	movs	r2, #0
 800304c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800304e:	4b41      	ldr	r3, [pc, #260]	; (8003154 <HAL_UART_MspInit+0x1bc>)
 8003050:	2200      	movs	r2, #0
 8003052:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003054:	483f      	ldr	r0, [pc, #252]	; (8003154 <HAL_UART_MspInit+0x1bc>)
 8003056:	f000 fa37 	bl	80034c8 <HAL_DMA_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003060:	f7fe fd9a 	bl	8001b98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a3b      	ldr	r2, [pc, #236]	; (8003154 <HAL_UART_MspInit+0x1bc>)
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
 800306a:	4a3a      	ldr	r2, [pc, #232]	; (8003154 <HAL_UART_MspInit+0x1bc>)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003070:	2200      	movs	r2, #0
 8003072:	2100      	movs	r1, #0
 8003074:	2025      	movs	r0, #37	; 0x25
 8003076:	f000 f9f0 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800307a:	2025      	movs	r0, #37	; 0x25
 800307c:	f000 fa09 	bl	8003492 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003080:	e05e      	b.n	8003140 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a35      	ldr	r2, [pc, #212]	; (800315c <HAL_UART_MspInit+0x1c4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d159      	bne.n	8003140 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	4b2e      	ldr	r3, [pc, #184]	; (800314c <HAL_UART_MspInit+0x1b4>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	4a2d      	ldr	r2, [pc, #180]	; (800314c <HAL_UART_MspInit+0x1b4>)
 8003096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309a:	6413      	str	r3, [r2, #64]	; 0x40
 800309c:	4b2b      	ldr	r3, [pc, #172]	; (800314c <HAL_UART_MspInit+0x1b4>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	4b27      	ldr	r3, [pc, #156]	; (800314c <HAL_UART_MspInit+0x1b4>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	4a26      	ldr	r2, [pc, #152]	; (800314c <HAL_UART_MspInit+0x1b4>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6313      	str	r3, [r2, #48]	; 0x30
 80030b8:	4b24      	ldr	r3, [pc, #144]	; (800314c <HAL_UART_MspInit+0x1b4>)
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030c4:	230c      	movs	r3, #12
 80030c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c8:	2302      	movs	r3, #2
 80030ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d0:	2303      	movs	r3, #3
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030d4:	2307      	movs	r3, #7
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d8:	f107 031c 	add.w	r3, r7, #28
 80030dc:	4619      	mov	r1, r3
 80030de:	4820      	ldr	r0, [pc, #128]	; (8003160 <HAL_UART_MspInit+0x1c8>)
 80030e0:	f000 fdf4 	bl	8003ccc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <HAL_UART_MspInit+0x1cc>)
 80030e6:	4a20      	ldr	r2, [pc, #128]	; (8003168 <HAL_UART_MspInit+0x1d0>)
 80030e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80030ea:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <HAL_UART_MspInit+0x1cc>)
 80030ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030f2:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <HAL_UART_MspInit+0x1cc>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f8:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <HAL_UART_MspInit+0x1cc>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030fe:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_UART_MspInit+0x1cc>)
 8003100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003104:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003106:	4b17      	ldr	r3, [pc, #92]	; (8003164 <HAL_UART_MspInit+0x1cc>)
 8003108:	2200      	movs	r2, #0
 800310a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800310c:	4b15      	ldr	r3, [pc, #84]	; (8003164 <HAL_UART_MspInit+0x1cc>)
 800310e:	2200      	movs	r2, #0
 8003110:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003112:	4b14      	ldr	r3, [pc, #80]	; (8003164 <HAL_UART_MspInit+0x1cc>)
 8003114:	2200      	movs	r2, #0
 8003116:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003118:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_UART_MspInit+0x1cc>)
 800311a:	2200      	movs	r2, #0
 800311c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800311e:	4b11      	ldr	r3, [pc, #68]	; (8003164 <HAL_UART_MspInit+0x1cc>)
 8003120:	2200      	movs	r2, #0
 8003122:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003124:	480f      	ldr	r0, [pc, #60]	; (8003164 <HAL_UART_MspInit+0x1cc>)
 8003126:	f000 f9cf 	bl	80034c8 <HAL_DMA_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8003130:	f7fe fd32 	bl	8001b98 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a0b      	ldr	r2, [pc, #44]	; (8003164 <HAL_UART_MspInit+0x1cc>)
 8003138:	639a      	str	r2, [r3, #56]	; 0x38
 800313a:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <HAL_UART_MspInit+0x1cc>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003140:	bf00      	nop
 8003142:	3730      	adds	r7, #48	; 0x30
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40011000 	.word	0x40011000
 800314c:	40023800 	.word	0x40023800
 8003150:	40020400 	.word	0x40020400
 8003154:	200006a0 	.word	0x200006a0
 8003158:	40026440 	.word	0x40026440
 800315c:	40004400 	.word	0x40004400
 8003160:	40020000 	.word	0x40020000
 8003164:	20000700 	.word	0x20000700
 8003168:	40026088 	.word	0x40026088

0800316c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800316c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003170:	480d      	ldr	r0, [pc, #52]	; (80031a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003172:	490e      	ldr	r1, [pc, #56]	; (80031ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003174:	4a0e      	ldr	r2, [pc, #56]	; (80031b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003178:	e002      	b.n	8003180 <LoopCopyDataInit>

0800317a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800317a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800317c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800317e:	3304      	adds	r3, #4

08003180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003184:	d3f9      	bcc.n	800317a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003186:	4a0b      	ldr	r2, [pc, #44]	; (80031b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003188:	4c0b      	ldr	r4, [pc, #44]	; (80031b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800318a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800318c:	e001      	b.n	8003192 <LoopFillZerobss>

0800318e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800318e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003190:	3204      	adds	r2, #4

08003192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003194:	d3fb      	bcc.n	800318e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003196:	f7ff f89f 	bl	80022d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800319a:	f003 fcfd 	bl	8006b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800319e:	f7fe fbf7 	bl	8001990 <main>
  bx  lr    
 80031a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031ac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80031b0:	08007f48 	.word	0x08007f48
  ldr r2, =_sbss
 80031b4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80031b8:	20000764 	.word	0x20000764

080031bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031bc:	e7fe      	b.n	80031bc <ADC_IRQHandler>
	...

080031c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <HAL_Init+0x40>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <HAL_Init+0x40>)
 80031ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_Init+0x40>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <HAL_Init+0x40>)
 80031d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_Init+0x40>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a07      	ldr	r2, [pc, #28]	; (8003200 <HAL_Init+0x40>)
 80031e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e8:	2003      	movs	r0, #3
 80031ea:	f000 f92b 	bl	8003444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ee:	2000      	movs	r0, #0
 80031f0:	f000 f808 	bl	8003204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031f4:	f7fe fcd6 	bl	8001ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40023c00 	.word	0x40023c00

08003204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_InitTick+0x54>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_InitTick+0x58>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	4619      	mov	r1, r3
 8003216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800321a:	fbb3 f3f1 	udiv	r3, r3, r1
 800321e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f943 	bl	80034ae <HAL_SYSTICK_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e00e      	b.n	8003250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b0f      	cmp	r3, #15
 8003236:	d80a      	bhi.n	800324e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003238:	2200      	movs	r2, #0
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	f04f 30ff 	mov.w	r0, #4294967295
 8003240:	f000 f90b 	bl	800345a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003244:	4a06      	ldr	r2, [pc, #24]	; (8003260 <HAL_InitTick+0x5c>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e000      	b.n	8003250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000004 	.word	0x20000004
 800325c:	2000000c 	.word	0x2000000c
 8003260:	20000008 	.word	0x20000008

08003264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_IncTick+0x20>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_IncTick+0x24>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4413      	add	r3, r2
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <HAL_IncTick+0x24>)
 8003276:	6013      	str	r3, [r2, #0]
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	2000000c 	.word	0x2000000c
 8003288:	20000760 	.word	0x20000760

0800328c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return uwTick;
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_GetTick+0x14>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000760 	.word	0x20000760

080032a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <__NVIC_SetPriorityGrouping+0x44>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032c0:	4013      	ands	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032d6:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <__NVIC_SetPriorityGrouping+0x44>)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	60d3      	str	r3, [r2, #12]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <__NVIC_GetPriorityGrouping+0x18>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	f003 0307 	and.w	r3, r3, #7
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	2b00      	cmp	r3, #0
 8003318:	db0b      	blt.n	8003332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	f003 021f 	and.w	r2, r3, #31
 8003320:	4907      	ldr	r1, [pc, #28]	; (8003340 <__NVIC_EnableIRQ+0x38>)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2001      	movs	r0, #1
 800332a:	fa00 f202 	lsl.w	r2, r0, r2
 800332e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000e100 	.word	0xe000e100

08003344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	6039      	str	r1, [r7, #0]
 800334e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003354:	2b00      	cmp	r3, #0
 8003356:	db0a      	blt.n	800336e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	b2da      	uxtb	r2, r3
 800335c:	490c      	ldr	r1, [pc, #48]	; (8003390 <__NVIC_SetPriority+0x4c>)
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	0112      	lsls	r2, r2, #4
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	440b      	add	r3, r1
 8003368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800336c:	e00a      	b.n	8003384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	b2da      	uxtb	r2, r3
 8003372:	4908      	ldr	r1, [pc, #32]	; (8003394 <__NVIC_SetPriority+0x50>)
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	3b04      	subs	r3, #4
 800337c:	0112      	lsls	r2, r2, #4
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	440b      	add	r3, r1
 8003382:	761a      	strb	r2, [r3, #24]
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	e000e100 	.word	0xe000e100
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	; 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f1c3 0307 	rsb	r3, r3, #7
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	bf28      	it	cs
 80033b6:	2304      	movcs	r3, #4
 80033b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3304      	adds	r3, #4
 80033be:	2b06      	cmp	r3, #6
 80033c0:	d902      	bls.n	80033c8 <NVIC_EncodePriority+0x30>
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3b03      	subs	r3, #3
 80033c6:	e000      	b.n	80033ca <NVIC_EncodePriority+0x32>
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033cc:	f04f 32ff 	mov.w	r2, #4294967295
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43da      	mvns	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	401a      	ands	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e0:	f04f 31ff 	mov.w	r1, #4294967295
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ea:	43d9      	mvns	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f0:	4313      	orrs	r3, r2
         );
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3724      	adds	r7, #36	; 0x24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003410:	d301      	bcc.n	8003416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003412:	2301      	movs	r3, #1
 8003414:	e00f      	b.n	8003436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003416:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <SysTick_Config+0x40>)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3b01      	subs	r3, #1
 800341c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800341e:	210f      	movs	r1, #15
 8003420:	f04f 30ff 	mov.w	r0, #4294967295
 8003424:	f7ff ff8e 	bl	8003344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <SysTick_Config+0x40>)
 800342a:	2200      	movs	r2, #0
 800342c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800342e:	4b04      	ldr	r3, [pc, #16]	; (8003440 <SysTick_Config+0x40>)
 8003430:	2207      	movs	r2, #7
 8003432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	e000e010 	.word	0xe000e010

08003444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff ff29 	bl	80032a4 <__NVIC_SetPriorityGrouping>
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800345a:	b580      	push	{r7, lr}
 800345c:	b086      	sub	sp, #24
 800345e:	af00      	add	r7, sp, #0
 8003460:	4603      	mov	r3, r0
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
 8003466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800346c:	f7ff ff3e 	bl	80032ec <__NVIC_GetPriorityGrouping>
 8003470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	6978      	ldr	r0, [r7, #20]
 8003478:	f7ff ff8e 	bl	8003398 <NVIC_EncodePriority>
 800347c:	4602      	mov	r2, r0
 800347e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ff5d 	bl	8003344 <__NVIC_SetPriority>
}
 800348a:	bf00      	nop
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	4603      	mov	r3, r0
 800349a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff31 	bl	8003308 <__NVIC_EnableIRQ>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff ffa2 	bl	8003400 <SysTick_Config>
 80034bc:	4603      	mov	r3, r0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034d4:	f7ff feda 	bl	800328c <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e099      	b.n	8003618 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003504:	e00f      	b.n	8003526 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003506:	f7ff fec1 	bl	800328c <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b05      	cmp	r3, #5
 8003512:	d908      	bls.n	8003526 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2203      	movs	r2, #3
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e078      	b.n	8003618 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e8      	bne.n	8003506 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4b38      	ldr	r3, [pc, #224]	; (8003620 <HAL_DMA_Init+0x158>)
 8003540:	4013      	ands	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003552:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	2b04      	cmp	r3, #4
 800357e:	d107      	bne.n	8003590 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	4313      	orrs	r3, r2
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f023 0307 	bic.w	r3, r3, #7
 80035a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d117      	bne.n	80035ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fb01 	bl	8003bd4 <DMA_CheckFifoParam>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2240      	movs	r2, #64	; 0x40
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035e6:	2301      	movs	r3, #1
 80035e8:	e016      	b.n	8003618 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fab8 	bl	8003b68 <DMA_CalcBaseAndBitshift>
 80035f8:	4603      	mov	r3, r0
 80035fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	223f      	movs	r2, #63	; 0x3f
 8003602:	409a      	lsls	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	f010803f 	.word	0xf010803f

08003624 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_DMA_Start_IT+0x26>
 8003646:	2302      	movs	r3, #2
 8003648:	e040      	b.n	80036cc <HAL_DMA_Start_IT+0xa8>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d12f      	bne.n	80036be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2202      	movs	r2, #2
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fa4a 	bl	8003b0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	223f      	movs	r2, #63	; 0x3f
 800367e:	409a      	lsls	r2, r3
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0216 	orr.w	r2, r2, #22
 8003692:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d007      	beq.n	80036ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0208 	orr.w	r2, r2, #8
 80036aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e005      	b.n	80036ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
 80036c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036e2:	f7ff fdd3 	bl	800328c <HAL_GetTick>
 80036e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d008      	beq.n	8003706 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2280      	movs	r2, #128	; 0x80
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e052      	b.n	80037ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0216 	bic.w	r2, r2, #22
 8003714:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003724:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d103      	bne.n	8003736 <HAL_DMA_Abort+0x62>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0208 	bic.w	r2, r2, #8
 8003744:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003756:	e013      	b.n	8003780 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003758:	f7ff fd98 	bl	800328c <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b05      	cmp	r3, #5
 8003764:	d90c      	bls.n	8003780 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2203      	movs	r2, #3
 8003770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e015      	b.n	80037ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e4      	bne.n	8003758 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	223f      	movs	r2, #63	; 0x3f
 8003794:	409a      	lsls	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d004      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2280      	movs	r2, #128	; 0x80
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e00c      	b.n	80037ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2205      	movs	r2, #5
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003804:	4b8e      	ldr	r3, [pc, #568]	; (8003a40 <HAL_DMA_IRQHandler+0x248>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a8e      	ldr	r2, [pc, #568]	; (8003a44 <HAL_DMA_IRQHandler+0x24c>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0a9b      	lsrs	r3, r3, #10
 8003810:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003816:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003822:	2208      	movs	r2, #8
 8003824:	409a      	lsls	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01a      	beq.n	8003864 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d013      	beq.n	8003864 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0204 	bic.w	r2, r2, #4
 800384a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003850:	2208      	movs	r2, #8
 8003852:	409a      	lsls	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385c:	f043 0201 	orr.w	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	2201      	movs	r2, #1
 800386a:	409a      	lsls	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d012      	beq.n	800389a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003886:	2201      	movs	r2, #1
 8003888:	409a      	lsls	r2, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	f043 0202 	orr.w	r2, r3, #2
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	2204      	movs	r2, #4
 80038a0:	409a      	lsls	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d012      	beq.n	80038d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00b      	beq.n	80038d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	2204      	movs	r2, #4
 80038be:	409a      	lsls	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c8:	f043 0204 	orr.w	r2, r3, #4
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d4:	2210      	movs	r2, #16
 80038d6:	409a      	lsls	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4013      	ands	r3, r2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d043      	beq.n	8003968 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d03c      	beq.n	8003968 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	2210      	movs	r2, #16
 80038f4:	409a      	lsls	r2, r3
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d018      	beq.n	800393a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d108      	bne.n	8003928 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d024      	beq.n	8003968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
 8003926:	e01f      	b.n	8003968 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01b      	beq.n	8003968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
 8003938:	e016      	b.n	8003968 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d107      	bne.n	8003958 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0208 	bic.w	r2, r2, #8
 8003956:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	2220      	movs	r2, #32
 800396e:	409a      	lsls	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 808f 	beq.w	8003a98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8087 	beq.w	8003a98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398e:	2220      	movs	r2, #32
 8003990:	409a      	lsls	r2, r3
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b05      	cmp	r3, #5
 80039a0:	d136      	bne.n	8003a10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0216 	bic.w	r2, r2, #22
 80039b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d103      	bne.n	80039d2 <HAL_DMA_IRQHandler+0x1da>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0208 	bic.w	r2, r2, #8
 80039e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	223f      	movs	r2, #63	; 0x3f
 80039e8:	409a      	lsls	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d07e      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	4798      	blx	r3
        }
        return;
 8003a0e:	e079      	b.n	8003b04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d01d      	beq.n	8003a5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10d      	bne.n	8003a48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d031      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4798      	blx	r3
 8003a3c:	e02c      	b.n	8003a98 <HAL_DMA_IRQHandler+0x2a0>
 8003a3e:	bf00      	nop
 8003a40:	20000004 	.word	0x20000004
 8003a44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d023      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
 8003a58:	e01e      	b.n	8003a98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10f      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0210 	bic.w	r2, r2, #16
 8003a76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d032      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d022      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2205      	movs	r2, #5
 8003ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d307      	bcc.n	8003ae0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f2      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x2cc>
 8003ade:	e000      	b.n	8003ae2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ae0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
 8003b02:	e000      	b.n	8003b06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b04:	bf00      	nop
    }
  }
}
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	d108      	bne.n	8003b4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b4a:	e007      	b.n	8003b5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	60da      	str	r2, [r3, #12]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	3b10      	subs	r3, #16
 8003b78:	4a14      	ldr	r2, [pc, #80]	; (8003bcc <DMA_CalcBaseAndBitshift+0x64>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b82:	4a13      	ldr	r2, [pc, #76]	; (8003bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d909      	bls.n	8003baa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	1d1a      	adds	r2, r3, #4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ba8:	e007      	b.n	8003bba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bb2:	f023 0303 	bic.w	r3, r3, #3
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	aaaaaaab 	.word	0xaaaaaaab
 8003bd0:	08007d58 	.word	0x08007d58

08003bd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d11f      	bne.n	8003c2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d856      	bhi.n	8003ca2 <DMA_CheckFifoParam+0xce>
 8003bf4:	a201      	add	r2, pc, #4	; (adr r2, 8003bfc <DMA_CheckFifoParam+0x28>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	08003c0d 	.word	0x08003c0d
 8003c00:	08003c1f 	.word	0x08003c1f
 8003c04:	08003c0d 	.word	0x08003c0d
 8003c08:	08003ca3 	.word	0x08003ca3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d046      	beq.n	8003ca6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c1c:	e043      	b.n	8003ca6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c26:	d140      	bne.n	8003caa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c2c:	e03d      	b.n	8003caa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c36:	d121      	bne.n	8003c7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d837      	bhi.n	8003cae <DMA_CheckFifoParam+0xda>
 8003c3e:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <DMA_CheckFifoParam+0x70>)
 8003c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c44:	08003c55 	.word	0x08003c55
 8003c48:	08003c5b 	.word	0x08003c5b
 8003c4c:	08003c55 	.word	0x08003c55
 8003c50:	08003c6d 	.word	0x08003c6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      break;
 8003c58:	e030      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d025      	beq.n	8003cb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6a:	e022      	b.n	8003cb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c74:	d11f      	bne.n	8003cb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c7a:	e01c      	b.n	8003cb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d903      	bls.n	8003c8a <DMA_CheckFifoParam+0xb6>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d003      	beq.n	8003c90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c88:	e018      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c8e:	e015      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00e      	beq.n	8003cba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca0:	e00b      	b.n	8003cba <DMA_CheckFifoParam+0xe6>
      break;
 8003ca2:	bf00      	nop
 8003ca4:	e00a      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e008      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003caa:	bf00      	nop
 8003cac:	e006      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e004      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;   
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003cba:	bf00      	nop
    }
  } 
  
  return status; 
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop

08003ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	; 0x24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	e16b      	b.n	8003fc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ce8:	2201      	movs	r2, #1
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	f040 815a 	bne.w	8003fba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d005      	beq.n	8003d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d130      	bne.n	8003d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d54:	2201      	movs	r2, #1
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 0201 	and.w	r2, r3, #1
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d017      	beq.n	8003dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d123      	bne.n	8003e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	08da      	lsrs	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3208      	adds	r2, #8
 8003dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	220f      	movs	r2, #15
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	08da      	lsrs	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3208      	adds	r2, #8
 8003e0a:	69b9      	ldr	r1, [r7, #24]
 8003e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 0203 	and.w	r2, r3, #3
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80b4 	beq.w	8003fba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	4b60      	ldr	r3, [pc, #384]	; (8003fd8 <HAL_GPIO_Init+0x30c>)
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	4a5f      	ldr	r2, [pc, #380]	; (8003fd8 <HAL_GPIO_Init+0x30c>)
 8003e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e60:	6453      	str	r3, [r2, #68]	; 0x44
 8003e62:	4b5d      	ldr	r3, [pc, #372]	; (8003fd8 <HAL_GPIO_Init+0x30c>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e6e:	4a5b      	ldr	r2, [pc, #364]	; (8003fdc <HAL_GPIO_Init+0x310>)
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	3302      	adds	r3, #2
 8003e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	220f      	movs	r2, #15
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a52      	ldr	r2, [pc, #328]	; (8003fe0 <HAL_GPIO_Init+0x314>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d02b      	beq.n	8003ef2 <HAL_GPIO_Init+0x226>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a51      	ldr	r2, [pc, #324]	; (8003fe4 <HAL_GPIO_Init+0x318>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d025      	beq.n	8003eee <HAL_GPIO_Init+0x222>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a50      	ldr	r2, [pc, #320]	; (8003fe8 <HAL_GPIO_Init+0x31c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01f      	beq.n	8003eea <HAL_GPIO_Init+0x21e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a4f      	ldr	r2, [pc, #316]	; (8003fec <HAL_GPIO_Init+0x320>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d019      	beq.n	8003ee6 <HAL_GPIO_Init+0x21a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a4e      	ldr	r2, [pc, #312]	; (8003ff0 <HAL_GPIO_Init+0x324>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d013      	beq.n	8003ee2 <HAL_GPIO_Init+0x216>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a4d      	ldr	r2, [pc, #308]	; (8003ff4 <HAL_GPIO_Init+0x328>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00d      	beq.n	8003ede <HAL_GPIO_Init+0x212>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a4c      	ldr	r2, [pc, #304]	; (8003ff8 <HAL_GPIO_Init+0x32c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d007      	beq.n	8003eda <HAL_GPIO_Init+0x20e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a4b      	ldr	r2, [pc, #300]	; (8003ffc <HAL_GPIO_Init+0x330>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d101      	bne.n	8003ed6 <HAL_GPIO_Init+0x20a>
 8003ed2:	2307      	movs	r3, #7
 8003ed4:	e00e      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	e00c      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003eda:	2306      	movs	r3, #6
 8003edc:	e00a      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003ede:	2305      	movs	r3, #5
 8003ee0:	e008      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003ee2:	2304      	movs	r3, #4
 8003ee4:	e006      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e004      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e002      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <HAL_GPIO_Init+0x228>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	f002 0203 	and.w	r2, r2, #3
 8003efa:	0092      	lsls	r2, r2, #2
 8003efc:	4093      	lsls	r3, r2
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f04:	4935      	ldr	r1, [pc, #212]	; (8003fdc <HAL_GPIO_Init+0x310>)
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	089b      	lsrs	r3, r3, #2
 8003f0a:	3302      	adds	r3, #2
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f12:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f36:	4a32      	ldr	r2, [pc, #200]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f3c:	4b30      	ldr	r3, [pc, #192]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f60:	4a27      	ldr	r2, [pc, #156]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f66:	4b26      	ldr	r3, [pc, #152]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4013      	ands	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f8a:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f90:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fb4:	4a12      	ldr	r2, [pc, #72]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	61fb      	str	r3, [r7, #28]
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	2b0f      	cmp	r3, #15
 8003fc4:	f67f ae90 	bls.w	8003ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	3724      	adds	r7, #36	; 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40013800 	.word	0x40013800
 8003fe0:	40020000 	.word	0x40020000
 8003fe4:	40020400 	.word	0x40020400
 8003fe8:	40020800 	.word	0x40020800
 8003fec:	40020c00 	.word	0x40020c00
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40021400 	.word	0x40021400
 8003ff8:	40021800 	.word	0x40021800
 8003ffc:	40021c00 	.word	0x40021c00
 8004000:	40013c00 	.word	0x40013c00

08004004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	807b      	strh	r3, [r7, #2]
 8004010:	4613      	mov	r3, r2
 8004012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004014:	787b      	ldrb	r3, [r7, #1]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004020:	e003      	b.n	800402a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004022:	887b      	ldrh	r3, [r7, #2]
 8004024:	041a      	lsls	r2, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	619a      	str	r2, [r3, #24]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e267      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d075      	beq.n	8004142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004056:	4b88      	ldr	r3, [pc, #544]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	2b04      	cmp	r3, #4
 8004060:	d00c      	beq.n	800407c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004062:	4b85      	ldr	r3, [pc, #532]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800406a:	2b08      	cmp	r3, #8
 800406c:	d112      	bne.n	8004094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406e:	4b82      	ldr	r3, [pc, #520]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800407a:	d10b      	bne.n	8004094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407c:	4b7e      	ldr	r3, [pc, #504]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d05b      	beq.n	8004140 <HAL_RCC_OscConfig+0x108>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d157      	bne.n	8004140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e242      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409c:	d106      	bne.n	80040ac <HAL_RCC_OscConfig+0x74>
 800409e:	4b76      	ldr	r3, [pc, #472]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a75      	ldr	r2, [pc, #468]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e01d      	b.n	80040e8 <HAL_RCC_OscConfig+0xb0>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x98>
 80040b6:	4b70      	ldr	r3, [pc, #448]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a6f      	ldr	r2, [pc, #444]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	4b6d      	ldr	r3, [pc, #436]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a6c      	ldr	r2, [pc, #432]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	e00b      	b.n	80040e8 <HAL_RCC_OscConfig+0xb0>
 80040d0:	4b69      	ldr	r3, [pc, #420]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a68      	ldr	r2, [pc, #416]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	4b66      	ldr	r3, [pc, #408]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a65      	ldr	r2, [pc, #404]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80040e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d013      	beq.n	8004118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7ff f8cc 	bl	800328c <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f8:	f7ff f8c8 	bl	800328c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b64      	cmp	r3, #100	; 0x64
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e207      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	4b5b      	ldr	r3, [pc, #364]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0xc0>
 8004116:	e014      	b.n	8004142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7ff f8b8 	bl	800328c <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004120:	f7ff f8b4 	bl	800328c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	; 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e1f3      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004132:	4b51      	ldr	r3, [pc, #324]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0xe8>
 800413e:	e000      	b.n	8004142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d063      	beq.n	8004216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800414e:	4b4a      	ldr	r3, [pc, #296]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00b      	beq.n	8004172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415a:	4b47      	ldr	r3, [pc, #284]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004162:	2b08      	cmp	r3, #8
 8004164:	d11c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004166:	4b44      	ldr	r3, [pc, #272]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d116      	bne.n	80041a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004172:	4b41      	ldr	r3, [pc, #260]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <HAL_RCC_OscConfig+0x152>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d001      	beq.n	800418a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e1c7      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418a:	4b3b      	ldr	r3, [pc, #236]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4937      	ldr	r1, [pc, #220]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419e:	e03a      	b.n	8004216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d020      	beq.n	80041ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a8:	4b34      	ldr	r3, [pc, #208]	; (800427c <HAL_RCC_OscConfig+0x244>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ae:	f7ff f86d 	bl	800328c <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b6:	f7ff f869 	bl	800328c <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e1a8      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c8:	4b2b      	ldr	r3, [pc, #172]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d4:	4b28      	ldr	r3, [pc, #160]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4925      	ldr	r1, [pc, #148]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	600b      	str	r3, [r1, #0]
 80041e8:	e015      	b.n	8004216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ea:	4b24      	ldr	r3, [pc, #144]	; (800427c <HAL_RCC_OscConfig+0x244>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7ff f84c 	bl	800328c <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041f8:	f7ff f848 	bl	800328c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e187      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420a:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d036      	beq.n	8004290 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d016      	beq.n	8004258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <HAL_RCC_OscConfig+0x248>)
 800422c:	2201      	movs	r2, #1
 800422e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004230:	f7ff f82c 	bl	800328c <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004238:	f7ff f828 	bl	800328c <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e167      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424a:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <HAL_RCC_OscConfig+0x240>)
 800424c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x200>
 8004256:	e01b      	b.n	8004290 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <HAL_RCC_OscConfig+0x248>)
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425e:	f7ff f815 	bl	800328c <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004264:	e00e      	b.n	8004284 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004266:	f7ff f811 	bl	800328c <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d907      	bls.n	8004284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e150      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
 8004278:	40023800 	.word	0x40023800
 800427c:	42470000 	.word	0x42470000
 8004280:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004284:	4b88      	ldr	r3, [pc, #544]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1ea      	bne.n	8004266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8097 	beq.w	80043cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429e:	2300      	movs	r3, #0
 80042a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a2:	4b81      	ldr	r3, [pc, #516]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10f      	bne.n	80042ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	4b7d      	ldr	r3, [pc, #500]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	4a7c      	ldr	r2, [pc, #496]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6413      	str	r3, [r2, #64]	; 0x40
 80042be:	4b7a      	ldr	r3, [pc, #488]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ca:	2301      	movs	r3, #1
 80042cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ce:	4b77      	ldr	r3, [pc, #476]	; (80044ac <HAL_RCC_OscConfig+0x474>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d118      	bne.n	800430c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042da:	4b74      	ldr	r3, [pc, #464]	; (80044ac <HAL_RCC_OscConfig+0x474>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a73      	ldr	r2, [pc, #460]	; (80044ac <HAL_RCC_OscConfig+0x474>)
 80042e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e6:	f7fe ffd1 	bl	800328c <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ee:	f7fe ffcd 	bl	800328c <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e10c      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004300:	4b6a      	ldr	r3, [pc, #424]	; (80044ac <HAL_RCC_OscConfig+0x474>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d106      	bne.n	8004322 <HAL_RCC_OscConfig+0x2ea>
 8004314:	4b64      	ldr	r3, [pc, #400]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	4a63      	ldr	r2, [pc, #396]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	6713      	str	r3, [r2, #112]	; 0x70
 8004320:	e01c      	b.n	800435c <HAL_RCC_OscConfig+0x324>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b05      	cmp	r3, #5
 8004328:	d10c      	bne.n	8004344 <HAL_RCC_OscConfig+0x30c>
 800432a:	4b5f      	ldr	r3, [pc, #380]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	4a5e      	ldr	r2, [pc, #376]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004330:	f043 0304 	orr.w	r3, r3, #4
 8004334:	6713      	str	r3, [r2, #112]	; 0x70
 8004336:	4b5c      	ldr	r3, [pc, #368]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	4a5b      	ldr	r2, [pc, #364]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	6713      	str	r3, [r2, #112]	; 0x70
 8004342:	e00b      	b.n	800435c <HAL_RCC_OscConfig+0x324>
 8004344:	4b58      	ldr	r3, [pc, #352]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	4a57      	ldr	r2, [pc, #348]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	6713      	str	r3, [r2, #112]	; 0x70
 8004350:	4b55      	ldr	r3, [pc, #340]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	4a54      	ldr	r2, [pc, #336]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004356:	f023 0304 	bic.w	r3, r3, #4
 800435a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d015      	beq.n	8004390 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fe ff92 	bl	800328c <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436a:	e00a      	b.n	8004382 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800436c:	f7fe ff8e 	bl	800328c <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	; 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e0cb      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004382:	4b49      	ldr	r3, [pc, #292]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0ee      	beq.n	800436c <HAL_RCC_OscConfig+0x334>
 800438e:	e014      	b.n	80043ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004390:	f7fe ff7c 	bl	800328c <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004396:	e00a      	b.n	80043ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004398:	f7fe ff78 	bl	800328c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e0b5      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ae:	4b3e      	ldr	r3, [pc, #248]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1ee      	bne.n	8004398 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d105      	bne.n	80043cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c0:	4b39      	ldr	r3, [pc, #228]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	4a38      	ldr	r2, [pc, #224]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80043c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80a1 	beq.w	8004518 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d6:	4b34      	ldr	r3, [pc, #208]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d05c      	beq.n	800449c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d141      	bne.n	800446e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ea:	4b31      	ldr	r3, [pc, #196]	; (80044b0 <HAL_RCC_OscConfig+0x478>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7fe ff4c 	bl	800328c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fe ff48 	bl	800328c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e087      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440a:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	019b      	lsls	r3, r3, #6
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	085b      	lsrs	r3, r3, #1
 800442e:	3b01      	subs	r3, #1
 8004430:	041b      	lsls	r3, r3, #16
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	491b      	ldr	r1, [pc, #108]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 800443c:	4313      	orrs	r3, r2
 800443e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <HAL_RCC_OscConfig+0x478>)
 8004442:	2201      	movs	r2, #1
 8004444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004446:	f7fe ff21 	bl	800328c <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444e:	f7fe ff1d 	bl	800328c <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e05c      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004460:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0f0      	beq.n	800444e <HAL_RCC_OscConfig+0x416>
 800446c:	e054      	b.n	8004518 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446e:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <HAL_RCC_OscConfig+0x478>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7fe ff0a 	bl	800328c <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447c:	f7fe ff06 	bl	800328c <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e045      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <HAL_RCC_OscConfig+0x470>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x444>
 800449a:	e03d      	b.n	8004518 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d107      	bne.n	80044b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e038      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40007000 	.word	0x40007000
 80044b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044b4:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <HAL_RCC_OscConfig+0x4ec>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d028      	beq.n	8004514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d121      	bne.n	8004514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d11a      	bne.n	8004514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044e4:	4013      	ands	r3, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d111      	bne.n	8004514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	085b      	lsrs	r3, r3, #1
 80044fc:	3b01      	subs	r3, #1
 80044fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d107      	bne.n	8004514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40023800 	.word	0x40023800

08004528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0cc      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800453c:	4b68      	ldr	r3, [pc, #416]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d90c      	bls.n	8004564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	4b65      	ldr	r3, [pc, #404]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b63      	ldr	r3, [pc, #396]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0b8      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d020      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800457c:	4b59      	ldr	r3, [pc, #356]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4a58      	ldr	r2, [pc, #352]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004594:	4b53      	ldr	r3, [pc, #332]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a52      	ldr	r2, [pc, #328]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800459e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a0:	4b50      	ldr	r3, [pc, #320]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	494d      	ldr	r1, [pc, #308]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d044      	beq.n	8004648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c6:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d119      	bne.n	8004606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e07f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d003      	beq.n	80045e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d107      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e6:	4b3f      	ldr	r3, [pc, #252]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e06f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f6:	4b3b      	ldr	r3, [pc, #236]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e067      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004606:	4b37      	ldr	r3, [pc, #220]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f023 0203 	bic.w	r2, r3, #3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	4934      	ldr	r1, [pc, #208]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	4313      	orrs	r3, r2
 8004616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004618:	f7fe fe38 	bl	800328c <HAL_GetTick>
 800461c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461e:	e00a      	b.n	8004636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004620:	f7fe fe34 	bl	800328c <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	; 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e04f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004636:	4b2b      	ldr	r3, [pc, #172]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 020c 	and.w	r2, r3, #12
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	429a      	cmp	r2, r3
 8004646:	d1eb      	bne.n	8004620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004648:	4b25      	ldr	r3, [pc, #148]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d20c      	bcs.n	8004670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004656:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d001      	beq.n	8004670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e032      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800467c:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4916      	ldr	r1, [pc, #88]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800469a:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	490e      	ldr	r1, [pc, #56]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046ae:	f000 f821 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 80046b2:	4602      	mov	r2, r0
 80046b4:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	490a      	ldr	r1, [pc, #40]	; (80046e8 <HAL_RCC_ClockConfig+0x1c0>)
 80046c0:	5ccb      	ldrb	r3, [r1, r3]
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	4a09      	ldr	r2, [pc, #36]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 80046c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046ca:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe fd98 	bl	8003204 <HAL_InitTick>

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40023c00 	.word	0x40023c00
 80046e4:	40023800 	.word	0x40023800
 80046e8:	08007d40 	.word	0x08007d40
 80046ec:	20000004 	.word	0x20000004
 80046f0:	20000008 	.word	0x20000008

080046f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f8:	b094      	sub	sp, #80	; 0x50
 80046fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004700:	2300      	movs	r3, #0
 8004702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004704:	2300      	movs	r3, #0
 8004706:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800470c:	4b79      	ldr	r3, [pc, #484]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 030c 	and.w	r3, r3, #12
 8004714:	2b08      	cmp	r3, #8
 8004716:	d00d      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0x40>
 8004718:	2b08      	cmp	r3, #8
 800471a:	f200 80e1 	bhi.w	80048e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_RCC_GetSysClockFreq+0x34>
 8004722:	2b04      	cmp	r3, #4
 8004724:	d003      	beq.n	800472e <HAL_RCC_GetSysClockFreq+0x3a>
 8004726:	e0db      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004728:	4b73      	ldr	r3, [pc, #460]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800472a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800472c:	e0db      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800472e:	4b73      	ldr	r3, [pc, #460]	; (80048fc <HAL_RCC_GetSysClockFreq+0x208>)
 8004730:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004732:	e0d8      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004734:	4b6f      	ldr	r3, [pc, #444]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800473c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800473e:	4b6d      	ldr	r3, [pc, #436]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d063      	beq.n	8004812 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800474a:	4b6a      	ldr	r3, [pc, #424]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	099b      	lsrs	r3, r3, #6
 8004750:	2200      	movs	r2, #0
 8004752:	63bb      	str	r3, [r7, #56]	; 0x38
 8004754:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475c:	633b      	str	r3, [r7, #48]	; 0x30
 800475e:	2300      	movs	r3, #0
 8004760:	637b      	str	r3, [r7, #52]	; 0x34
 8004762:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004766:	4622      	mov	r2, r4
 8004768:	462b      	mov	r3, r5
 800476a:	f04f 0000 	mov.w	r0, #0
 800476e:	f04f 0100 	mov.w	r1, #0
 8004772:	0159      	lsls	r1, r3, #5
 8004774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004778:	0150      	lsls	r0, r2, #5
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4621      	mov	r1, r4
 8004780:	1a51      	subs	r1, r2, r1
 8004782:	6139      	str	r1, [r7, #16]
 8004784:	4629      	mov	r1, r5
 8004786:	eb63 0301 	sbc.w	r3, r3, r1
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004798:	4659      	mov	r1, fp
 800479a:	018b      	lsls	r3, r1, #6
 800479c:	4651      	mov	r1, sl
 800479e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047a2:	4651      	mov	r1, sl
 80047a4:	018a      	lsls	r2, r1, #6
 80047a6:	4651      	mov	r1, sl
 80047a8:	ebb2 0801 	subs.w	r8, r2, r1
 80047ac:	4659      	mov	r1, fp
 80047ae:	eb63 0901 	sbc.w	r9, r3, r1
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047c6:	4690      	mov	r8, r2
 80047c8:	4699      	mov	r9, r3
 80047ca:	4623      	mov	r3, r4
 80047cc:	eb18 0303 	adds.w	r3, r8, r3
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	462b      	mov	r3, r5
 80047d4:	eb49 0303 	adc.w	r3, r9, r3
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047e6:	4629      	mov	r1, r5
 80047e8:	024b      	lsls	r3, r1, #9
 80047ea:	4621      	mov	r1, r4
 80047ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047f0:	4621      	mov	r1, r4
 80047f2:	024a      	lsls	r2, r1, #9
 80047f4:	4610      	mov	r0, r2
 80047f6:	4619      	mov	r1, r3
 80047f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047fa:	2200      	movs	r2, #0
 80047fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004800:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004804:	f7fc f9ae 	bl	8000b64 <__aeabi_uldivmod>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4613      	mov	r3, r2
 800480e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004810:	e058      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004812:	4b38      	ldr	r3, [pc, #224]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	099b      	lsrs	r3, r3, #6
 8004818:	2200      	movs	r2, #0
 800481a:	4618      	mov	r0, r3
 800481c:	4611      	mov	r1, r2
 800481e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004822:	623b      	str	r3, [r7, #32]
 8004824:	2300      	movs	r3, #0
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
 8004828:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800482c:	4642      	mov	r2, r8
 800482e:	464b      	mov	r3, r9
 8004830:	f04f 0000 	mov.w	r0, #0
 8004834:	f04f 0100 	mov.w	r1, #0
 8004838:	0159      	lsls	r1, r3, #5
 800483a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800483e:	0150      	lsls	r0, r2, #5
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4641      	mov	r1, r8
 8004846:	ebb2 0a01 	subs.w	sl, r2, r1
 800484a:	4649      	mov	r1, r9
 800484c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800485c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004860:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004864:	ebb2 040a 	subs.w	r4, r2, sl
 8004868:	eb63 050b 	sbc.w	r5, r3, fp
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	00eb      	lsls	r3, r5, #3
 8004876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800487a:	00e2      	lsls	r2, r4, #3
 800487c:	4614      	mov	r4, r2
 800487e:	461d      	mov	r5, r3
 8004880:	4643      	mov	r3, r8
 8004882:	18e3      	adds	r3, r4, r3
 8004884:	603b      	str	r3, [r7, #0]
 8004886:	464b      	mov	r3, r9
 8004888:	eb45 0303 	adc.w	r3, r5, r3
 800488c:	607b      	str	r3, [r7, #4]
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	e9d7 4500 	ldrd	r4, r5, [r7]
 800489a:	4629      	mov	r1, r5
 800489c:	028b      	lsls	r3, r1, #10
 800489e:	4621      	mov	r1, r4
 80048a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048a4:	4621      	mov	r1, r4
 80048a6:	028a      	lsls	r2, r1, #10
 80048a8:	4610      	mov	r0, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ae:	2200      	movs	r2, #0
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	61fa      	str	r2, [r7, #28]
 80048b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b8:	f7fc f954 	bl	8000b64 <__aeabi_uldivmod>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4613      	mov	r3, r2
 80048c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	3301      	adds	r3, #1
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048de:	e002      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3750      	adds	r7, #80	; 0x50
 80048ec:	46bd      	mov	sp, r7
 80048ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f2:	bf00      	nop
 80048f4:	40023800 	.word	0x40023800
 80048f8:	00f42400 	.word	0x00f42400
 80048fc:	007a1200 	.word	0x007a1200

08004900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004904:	4b03      	ldr	r3, [pc, #12]	; (8004914 <HAL_RCC_GetHCLKFreq+0x14>)
 8004906:	681b      	ldr	r3, [r3, #0]
}
 8004908:	4618      	mov	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000004 	.word	0x20000004

08004918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800491c:	f7ff fff0 	bl	8004900 <HAL_RCC_GetHCLKFreq>
 8004920:	4602      	mov	r2, r0
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	0a9b      	lsrs	r3, r3, #10
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4903      	ldr	r1, [pc, #12]	; (800493c <HAL_RCC_GetPCLK1Freq+0x24>)
 800492e:	5ccb      	ldrb	r3, [r1, r3]
 8004930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004934:	4618      	mov	r0, r3
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40023800 	.word	0x40023800
 800493c:	08007d50 	.word	0x08007d50

08004940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004944:	f7ff ffdc 	bl	8004900 <HAL_RCC_GetHCLKFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	0b5b      	lsrs	r3, r3, #13
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	4903      	ldr	r1, [pc, #12]	; (8004964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40023800 	.word	0x40023800
 8004964:	08007d50 	.word	0x08007d50

08004968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e041      	b.n	80049fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fe f9b0 	bl	8002cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f000 fce6 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d001      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e04e      	b.n	8004abe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a23      	ldr	r2, [pc, #140]	; (8004acc <HAL_TIM_Base_Start_IT+0xc4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d022      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4a:	d01d      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d018      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d013      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00e      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <HAL_TIM_Base_Start_IT+0xd4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d009      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a19      	ldr	r2, [pc, #100]	; (8004ae0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a18      	ldr	r2, [pc, #96]	; (8004ae4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d111      	bne.n	8004aac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b06      	cmp	r3, #6
 8004a98:	d010      	beq.n	8004abc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aaa:	e007      	b.n	8004abc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40010000 	.word	0x40010000
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800
 8004ad8:	40000c00 	.word	0x40000c00
 8004adc:	40010400 	.word	0x40010400
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	40001800 	.word	0x40001800

08004ae8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e041      	b.n	8004b7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fe f8a2 	bl	8002c58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f000 fc26 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <HAL_TIM_PWM_Start+0x24>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	bf14      	ite	ne
 8004ba4:	2301      	movne	r3, #1
 8004ba6:	2300      	moveq	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	e022      	b.n	8004bf2 <HAL_TIM_PWM_Start+0x6a>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d109      	bne.n	8004bc6 <HAL_TIM_PWM_Start+0x3e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	bf14      	ite	ne
 8004bbe:	2301      	movne	r3, #1
 8004bc0:	2300      	moveq	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	e015      	b.n	8004bf2 <HAL_TIM_PWM_Start+0x6a>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d109      	bne.n	8004be0 <HAL_TIM_PWM_Start+0x58>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	bf14      	ite	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	2300      	moveq	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	e008      	b.n	8004bf2 <HAL_TIM_PWM_Start+0x6a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	bf14      	ite	ne
 8004bec:	2301      	movne	r3, #1
 8004bee:	2300      	moveq	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e07c      	b.n	8004cf4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d104      	bne.n	8004c0a <HAL_TIM_PWM_Start+0x82>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c08:	e013      	b.n	8004c32 <HAL_TIM_PWM_Start+0xaa>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d104      	bne.n	8004c1a <HAL_TIM_PWM_Start+0x92>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c18:	e00b      	b.n	8004c32 <HAL_TIM_PWM_Start+0xaa>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d104      	bne.n	8004c2a <HAL_TIM_PWM_Start+0xa2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c28:	e003      	b.n	8004c32 <HAL_TIM_PWM_Start+0xaa>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2201      	movs	r2, #1
 8004c38:	6839      	ldr	r1, [r7, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fdec 	bl	8005818 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a2d      	ldr	r2, [pc, #180]	; (8004cfc <HAL_TIM_PWM_Start+0x174>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <HAL_TIM_PWM_Start+0xcc>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a2c      	ldr	r2, [pc, #176]	; (8004d00 <HAL_TIM_PWM_Start+0x178>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d101      	bne.n	8004c58 <HAL_TIM_PWM_Start+0xd0>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <HAL_TIM_PWM_Start+0xd2>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a22      	ldr	r2, [pc, #136]	; (8004cfc <HAL_TIM_PWM_Start+0x174>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d022      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x136>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d01d      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x136>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <HAL_TIM_PWM_Start+0x17c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d018      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x136>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1d      	ldr	r2, [pc, #116]	; (8004d08 <HAL_TIM_PWM_Start+0x180>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x136>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <HAL_TIM_PWM_Start+0x184>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x136>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a16      	ldr	r2, [pc, #88]	; (8004d00 <HAL_TIM_PWM_Start+0x178>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x136>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <HAL_TIM_PWM_Start+0x188>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x136>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a16      	ldr	r2, [pc, #88]	; (8004d14 <HAL_TIM_PWM_Start+0x18c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d111      	bne.n	8004ce2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b06      	cmp	r3, #6
 8004cce:	d010      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce0:	e007      	b.n	8004cf2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0201 	orr.w	r2, r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40010000 	.word	0x40010000
 8004d00:	40010400 	.word	0x40010400
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40001800 	.word	0x40001800

08004d18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e097      	b.n	8004e5c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fd fe4d 	bl	80029e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d5c:	f023 0307 	bic.w	r3, r3, #7
 8004d60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f000 fb03 	bl	8005378 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9a:	f023 0303 	bic.w	r3, r3, #3
 8004d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	021b      	lsls	r3, r3, #8
 8004daa:	4313      	orrs	r3, r2
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004db8:	f023 030c 	bic.w	r3, r3, #12
 8004dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	011a      	lsls	r2, r3, #4
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	031b      	lsls	r3, r3, #12
 8004de8:	4313      	orrs	r3, r2
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004dfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d110      	bne.n	8004eb6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d102      	bne.n	8004ea0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e9a:	7b7b      	ldrb	r3, [r7, #13]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d001      	beq.n	8004ea4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e069      	b.n	8004f78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb4:	e031      	b.n	8004f1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d110      	bne.n	8004ede <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ebc:	7bbb      	ldrb	r3, [r7, #14]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d102      	bne.n	8004ec8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ec2:	7b3b      	ldrb	r3, [r7, #12]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d001      	beq.n	8004ecc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e055      	b.n	8004f78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004edc:	e01d      	b.n	8004f1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d108      	bne.n	8004ef6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ee4:	7bbb      	ldrb	r3, [r7, #14]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d105      	bne.n	8004ef6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eea:	7b7b      	ldrb	r3, [r7, #13]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d102      	bne.n	8004ef6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ef0:	7b3b      	ldrb	r3, [r7, #12]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d001      	beq.n	8004efa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e03e      	b.n	8004f78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_TIM_Encoder_Start+0xc4>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d008      	beq.n	8004f38 <HAL_TIM_Encoder_Start+0xd4>
 8004f26:	e00f      	b.n	8004f48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	2100      	movs	r1, #0
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fc71 	bl	8005818 <TIM_CCxChannelCmd>
      break;
 8004f36:	e016      	b.n	8004f66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	2104      	movs	r1, #4
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fc69 	bl	8005818 <TIM_CCxChannelCmd>
      break;
 8004f46:	e00e      	b.n	8004f66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	2100      	movs	r1, #0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fc61 	bl	8005818 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	2104      	movs	r1, #4
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fc5a 	bl	8005818 <TIM_CCxChannelCmd>
      break;
 8004f64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0201 	orr.w	r2, r2, #1
 8004f74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d122      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d11b      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0202 	mvn.w	r2, #2
 8004fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f9ba 	bl	800533c <HAL_TIM_IC_CaptureCallback>
 8004fc8:	e005      	b.n	8004fd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f9ac 	bl	8005328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f9bd 	bl	8005350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d122      	bne.n	8005030 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d11b      	bne.n	8005030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0204 	mvn.w	r2, #4
 8005000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f990 	bl	800533c <HAL_TIM_IC_CaptureCallback>
 800501c:	e005      	b.n	800502a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f982 	bl	8005328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f993 	bl	8005350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b08      	cmp	r3, #8
 800503c:	d122      	bne.n	8005084 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b08      	cmp	r3, #8
 800504a:	d11b      	bne.n	8005084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0208 	mvn.w	r2, #8
 8005054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2204      	movs	r2, #4
 800505a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f966 	bl	800533c <HAL_TIM_IC_CaptureCallback>
 8005070:	e005      	b.n	800507e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f958 	bl	8005328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f969 	bl	8005350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	2b10      	cmp	r3, #16
 8005090:	d122      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b10      	cmp	r3, #16
 800509e:	d11b      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0210 	mvn.w	r2, #16
 80050a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2208      	movs	r2, #8
 80050ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f93c 	bl	800533c <HAL_TIM_IC_CaptureCallback>
 80050c4:	e005      	b.n	80050d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f92e 	bl	8005328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f93f 	bl	8005350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d10e      	bne.n	8005104 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d107      	bne.n	8005104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0201 	mvn.w	r2, #1
 80050fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f908 	bl	8005314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510e:	2b80      	cmp	r3, #128	; 0x80
 8005110:	d10e      	bne.n	8005130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511c:	2b80      	cmp	r3, #128	; 0x80
 800511e:	d107      	bne.n	8005130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fc20 	bl	8005970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513a:	2b40      	cmp	r3, #64	; 0x40
 800513c:	d10e      	bne.n	800515c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	d107      	bne.n	800515c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f904 	bl	8005364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b20      	cmp	r3, #32
 8005168:	d10e      	bne.n	8005188 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b20      	cmp	r3, #32
 8005176:	d107      	bne.n	8005188 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0220 	mvn.w	r2, #32
 8005180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fbea 	bl	800595c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005188:	bf00      	nop
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e0ae      	b.n	800530c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	f200 809f 	bhi.w	80052fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051be:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	080051f9 	.word	0x080051f9
 80051c8:	080052fd 	.word	0x080052fd
 80051cc:	080052fd 	.word	0x080052fd
 80051d0:	080052fd 	.word	0x080052fd
 80051d4:	08005239 	.word	0x08005239
 80051d8:	080052fd 	.word	0x080052fd
 80051dc:	080052fd 	.word	0x080052fd
 80051e0:	080052fd 	.word	0x080052fd
 80051e4:	0800527b 	.word	0x0800527b
 80051e8:	080052fd 	.word	0x080052fd
 80051ec:	080052fd 	.word	0x080052fd
 80051f0:	080052fd 	.word	0x080052fd
 80051f4:	080052bb 	.word	0x080052bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f95a 	bl	80054b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0208 	orr.w	r2, r2, #8
 8005212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0204 	bic.w	r2, r2, #4
 8005222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6999      	ldr	r1, [r3, #24]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	619a      	str	r2, [r3, #24]
      break;
 8005236:	e064      	b.n	8005302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	4618      	mov	r0, r3
 8005240:	f000 f9aa 	bl	8005598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6999      	ldr	r1, [r3, #24]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	021a      	lsls	r2, r3, #8
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	619a      	str	r2, [r3, #24]
      break;
 8005278:	e043      	b.n	8005302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 f9ff 	bl	8005684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0208 	orr.w	r2, r2, #8
 8005294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0204 	bic.w	r2, r2, #4
 80052a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69d9      	ldr	r1, [r3, #28]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	61da      	str	r2, [r3, #28]
      break;
 80052b8:	e023      	b.n	8005302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68b9      	ldr	r1, [r7, #8]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fa53 	bl	800576c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69da      	ldr	r2, [r3, #28]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69d9      	ldr	r1, [r3, #28]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	021a      	lsls	r2, r3, #8
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	61da      	str	r2, [r3, #28]
      break;
 80052fa:	e002      	b.n	8005302 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005300:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800530a:	7dfb      	ldrb	r3, [r7, #23]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a40      	ldr	r2, [pc, #256]	; (800548c <TIM_Base_SetConfig+0x114>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d013      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005396:	d00f      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a3d      	ldr	r2, [pc, #244]	; (8005490 <TIM_Base_SetConfig+0x118>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00b      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a3c      	ldr	r2, [pc, #240]	; (8005494 <TIM_Base_SetConfig+0x11c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d007      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a3b      	ldr	r2, [pc, #236]	; (8005498 <TIM_Base_SetConfig+0x120>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d003      	beq.n	80053b8 <TIM_Base_SetConfig+0x40>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a3a      	ldr	r2, [pc, #232]	; (800549c <TIM_Base_SetConfig+0x124>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d108      	bne.n	80053ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2f      	ldr	r2, [pc, #188]	; (800548c <TIM_Base_SetConfig+0x114>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d02b      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d8:	d027      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a2c      	ldr	r2, [pc, #176]	; (8005490 <TIM_Base_SetConfig+0x118>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d023      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a2b      	ldr	r2, [pc, #172]	; (8005494 <TIM_Base_SetConfig+0x11c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01f      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a2a      	ldr	r2, [pc, #168]	; (8005498 <TIM_Base_SetConfig+0x120>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d01b      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a29      	ldr	r2, [pc, #164]	; (800549c <TIM_Base_SetConfig+0x124>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d017      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a28      	ldr	r2, [pc, #160]	; (80054a0 <TIM_Base_SetConfig+0x128>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d013      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a27      	ldr	r2, [pc, #156]	; (80054a4 <TIM_Base_SetConfig+0x12c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00f      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a26      	ldr	r2, [pc, #152]	; (80054a8 <TIM_Base_SetConfig+0x130>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00b      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a25      	ldr	r2, [pc, #148]	; (80054ac <TIM_Base_SetConfig+0x134>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d007      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a24      	ldr	r2, [pc, #144]	; (80054b0 <TIM_Base_SetConfig+0x138>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a23      	ldr	r2, [pc, #140]	; (80054b4 <TIM_Base_SetConfig+0x13c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d108      	bne.n	800543c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a0a      	ldr	r2, [pc, #40]	; (800548c <TIM_Base_SetConfig+0x114>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_Base_SetConfig+0xf8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a0c      	ldr	r2, [pc, #48]	; (800549c <TIM_Base_SetConfig+0x124>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d103      	bne.n	8005478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	615a      	str	r2, [r3, #20]
}
 800547e:	bf00      	nop
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40010000 	.word	0x40010000
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800
 8005498:	40000c00 	.word	0x40000c00
 800549c:	40010400 	.word	0x40010400
 80054a0:	40014000 	.word	0x40014000
 80054a4:	40014400 	.word	0x40014400
 80054a8:	40014800 	.word	0x40014800
 80054ac:	40001800 	.word	0x40001800
 80054b0:	40001c00 	.word	0x40001c00
 80054b4:	40002000 	.word	0x40002000

080054b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f023 0201 	bic.w	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0303 	bic.w	r3, r3, #3
 80054ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f023 0302 	bic.w	r3, r3, #2
 8005500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a20      	ldr	r2, [pc, #128]	; (8005590 <TIM_OC1_SetConfig+0xd8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d003      	beq.n	800551c <TIM_OC1_SetConfig+0x64>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a1f      	ldr	r2, [pc, #124]	; (8005594 <TIM_OC1_SetConfig+0xdc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d10c      	bne.n	8005536 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0308 	bic.w	r3, r3, #8
 8005522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f023 0304 	bic.w	r3, r3, #4
 8005534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a15      	ldr	r2, [pc, #84]	; (8005590 <TIM_OC1_SetConfig+0xd8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_OC1_SetConfig+0x8e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a14      	ldr	r2, [pc, #80]	; (8005594 <TIM_OC1_SetConfig+0xdc>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d111      	bne.n	800556a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800554c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	621a      	str	r2, [r3, #32]
}
 8005584:	bf00      	nop
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	40010000 	.word	0x40010000
 8005594:	40010400 	.word	0x40010400

08005598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f023 0210 	bic.w	r2, r3, #16
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f023 0320 	bic.w	r3, r3, #32
 80055e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a22      	ldr	r2, [pc, #136]	; (800567c <TIM_OC2_SetConfig+0xe4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_OC2_SetConfig+0x68>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a21      	ldr	r2, [pc, #132]	; (8005680 <TIM_OC2_SetConfig+0xe8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10d      	bne.n	800561c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800561a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a17      	ldr	r2, [pc, #92]	; (800567c <TIM_OC2_SetConfig+0xe4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_OC2_SetConfig+0x94>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a16      	ldr	r2, [pc, #88]	; (8005680 <TIM_OC2_SetConfig+0xe8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d113      	bne.n	8005654 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800563a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	621a      	str	r2, [r3, #32]
}
 800566e:	bf00      	nop
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40010000 	.word	0x40010000
 8005680:	40010400 	.word	0x40010400

08005684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0303 	bic.w	r3, r3, #3
 80056ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a21      	ldr	r2, [pc, #132]	; (8005764 <TIM_OC3_SetConfig+0xe0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d003      	beq.n	80056ea <TIM_OC3_SetConfig+0x66>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a20      	ldr	r2, [pc, #128]	; (8005768 <TIM_OC3_SetConfig+0xe4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d10d      	bne.n	8005706 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a16      	ldr	r2, [pc, #88]	; (8005764 <TIM_OC3_SetConfig+0xe0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_OC3_SetConfig+0x92>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a15      	ldr	r2, [pc, #84]	; (8005768 <TIM_OC3_SetConfig+0xe4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d113      	bne.n	800573e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800571c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	621a      	str	r2, [r3, #32]
}
 8005758:	bf00      	nop
 800575a:	371c      	adds	r7, #28
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	40010000 	.word	0x40010000
 8005768:	40010400 	.word	0x40010400

0800576c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	031b      	lsls	r3, r3, #12
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a12      	ldr	r2, [pc, #72]	; (8005810 <TIM_OC4_SetConfig+0xa4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d003      	beq.n	80057d4 <TIM_OC4_SetConfig+0x68>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a11      	ldr	r2, [pc, #68]	; (8005814 <TIM_OC4_SetConfig+0xa8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d109      	bne.n	80057e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	019b      	lsls	r3, r3, #6
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	621a      	str	r2, [r3, #32]
}
 8005802:	bf00      	nop
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40010000 	.word	0x40010000
 8005814:	40010400 	.word	0x40010400

08005818 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f003 031f 	and.w	r3, r3, #31
 800582a:	2201      	movs	r2, #1
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1a      	ldr	r2, [r3, #32]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	43db      	mvns	r3, r3
 800583a:	401a      	ands	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a1a      	ldr	r2, [r3, #32]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f003 031f 	and.w	r3, r3, #31
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	fa01 f303 	lsl.w	r3, r1, r3
 8005850:	431a      	orrs	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	621a      	str	r2, [r3, #32]
}
 8005856:	bf00      	nop
 8005858:	371c      	adds	r7, #28
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005878:	2302      	movs	r3, #2
 800587a:	e05a      	b.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a21      	ldr	r2, [pc, #132]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d022      	beq.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c8:	d01d      	beq.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a1d      	ldr	r2, [pc, #116]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d018      	beq.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a1b      	ldr	r2, [pc, #108]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1a      	ldr	r2, [pc, #104]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00e      	beq.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a18      	ldr	r2, [pc, #96]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d009      	beq.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a17      	ldr	r2, [pc, #92]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d004      	beq.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a15      	ldr	r2, [pc, #84]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d10c      	bne.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800590c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	4313      	orrs	r3, r2
 8005916:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40010000 	.word	0x40010000
 8005944:	40000400 	.word	0x40000400
 8005948:	40000800 	.word	0x40000800
 800594c:	40000c00 	.word	0x40000c00
 8005950:	40010400 	.word	0x40010400
 8005954:	40014000 	.word	0x40014000
 8005958:	40001800 	.word	0x40001800

0800595c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e03f      	b.n	8005a16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fd faf4 	bl	8002f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2224      	movs	r2, #36	; 0x24
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fe69 	bl	80066a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695a      	ldr	r2, [r3, #20]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d11d      	bne.n	8005a74 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_UART_Receive_DMA+0x26>
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e016      	b.n	8005a76 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_UART_Receive_DMA+0x38>
 8005a52:	2302      	movs	r3, #2
 8005a54:	e00f      	b.n	8005a76 <HAL_UART_Receive_DMA+0x58>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	461a      	mov	r2, r3
 8005a68:	68b9      	ldr	r1, [r7, #8]
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 fbb8 	bl	80061e0 <UART_Start_Receive_DMA>
 8005a70:	4603      	mov	r3, r0
 8005a72:	e000      	b.n	8005a76 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a74:	2302      	movs	r3, #2
  }
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b0ba      	sub	sp, #232	; 0xe8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005abe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10f      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x66>
 8005ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fd23 	bl	800652a <UART_Receive_IT>
      return;
 8005ae4:	e256      	b.n	8005f94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 80de 	beq.w	8005cac <HAL_UART_IRQHandler+0x22c>
 8005af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 80d1 	beq.w	8005cac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <HAL_UART_IRQHandler+0xae>
 8005b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	f043 0201 	orr.w	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <HAL_UART_IRQHandler+0xd2>
 8005b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f043 0202 	orr.w	r2, r3, #2
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <HAL_UART_IRQHandler+0xf6>
 8005b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f043 0204 	orr.w	r2, r3, #4
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d011      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x126>
 8005b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d105      	bne.n	8005b9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	f043 0208 	orr.w	r2, r3, #8
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 81ed 	beq.w	8005f8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <HAL_UART_IRQHandler+0x14e>
 8005bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fcae 	bl	800652a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd8:	2b40      	cmp	r3, #64	; 0x40
 8005bda:	bf0c      	ite	eq
 8005bdc:	2301      	moveq	r3, #1
 8005bde:	2300      	movne	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d103      	bne.n	8005bfa <HAL_UART_IRQHandler+0x17a>
 8005bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d04f      	beq.n	8005c9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fbb6 	bl	800636c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0a:	2b40      	cmp	r3, #64	; 0x40
 8005c0c:	d141      	bne.n	8005c92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3314      	adds	r3, #20
 8005c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3314      	adds	r3, #20
 8005c36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1d9      	bne.n	8005c0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d013      	beq.n	8005c8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	4a7d      	ldr	r2, [pc, #500]	; (8005e5c <HAL_UART_IRQHandler+0x3dc>)
 8005c68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fd fda0 	bl	80037b4 <HAL_DMA_Abort_IT>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d016      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c84:	4610      	mov	r0, r2
 8005c86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c88:	e00e      	b.n	8005ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f99a 	bl	8005fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c90:	e00a      	b.n	8005ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f996 	bl	8005fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c98:	e006      	b.n	8005ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f992 	bl	8005fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ca6:	e170      	b.n	8005f8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca8:	bf00      	nop
    return;
 8005caa:	e16e      	b.n	8005f8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	f040 814a 	bne.w	8005f4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cba:	f003 0310 	and.w	r3, r3, #16
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 8143 	beq.w	8005f4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 813c 	beq.w	8005f4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60bb      	str	r3, [r7, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf2:	2b40      	cmp	r3, #64	; 0x40
 8005cf4:	f040 80b4 	bne.w	8005e60 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8140 	beq.w	8005f8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d16:	429a      	cmp	r2, r3
 8005d18:	f080 8139 	bcs.w	8005f8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d2e:	f000 8088 	beq.w	8005e42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	330c      	adds	r3, #12
 8005d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1d9      	bne.n	8005d32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3314      	adds	r3, #20
 8005d84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d90:	f023 0301 	bic.w	r3, r3, #1
 8005d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3314      	adds	r3, #20
 8005d9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005da2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005da6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005daa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e1      	bne.n	8005d7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3314      	adds	r3, #20
 8005dc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3314      	adds	r3, #20
 8005dda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005dde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005de0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005de4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e3      	bne.n	8005dba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e12:	f023 0310 	bic.w	r3, r3, #16
 8005e16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	330c      	adds	r3, #12
 8005e20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e24:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e3      	bne.n	8005e00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fd fc49 	bl	80036d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f8c0 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e58:	e099      	b.n	8005f8e <HAL_UART_IRQHandler+0x50e>
 8005e5a:	bf00      	nop
 8005e5c:	08006433 	.word	0x08006433
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 808b 	beq.w	8005f92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8086 	beq.w	8005f92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	330c      	adds	r3, #12
 8005ea6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005eaa:	647a      	str	r2, [r7, #68]	; 0x44
 8005eac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e3      	bne.n	8005e86 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3314      	adds	r3, #20
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	f023 0301 	bic.w	r3, r3, #1
 8005ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3314      	adds	r3, #20
 8005ede:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ee2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e3      	bne.n	8005ebe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0310 	bic.w	r3, r3, #16
 8005f1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	330c      	adds	r3, #12
 8005f24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f28:	61fa      	str	r2, [r7, #28]
 8005f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	69b9      	ldr	r1, [r7, #24]
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	617b      	str	r3, [r7, #20]
   return(result);
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e3      	bne.n	8005f04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f848 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f48:	e023      	b.n	8005f92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <HAL_UART_IRQHandler+0x4ea>
 8005f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa79 	bl	800645a <UART_Transmit_IT>
    return;
 8005f68:	e014      	b.n	8005f94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00e      	beq.n	8005f94 <HAL_UART_IRQHandler+0x514>
 8005f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d008      	beq.n	8005f94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fab9 	bl	80064fa <UART_EndTransmit_IT>
    return;
 8005f88:	e004      	b.n	8005f94 <HAL_UART_IRQHandler+0x514>
    return;
 8005f8a:	bf00      	nop
 8005f8c:	e002      	b.n	8005f94 <HAL_UART_IRQHandler+0x514>
      return;
 8005f8e:	bf00      	nop
 8005f90:	e000      	b.n	8005f94 <HAL_UART_IRQHandler+0x514>
      return;
 8005f92:	bf00      	nop
  }
}
 8005f94:	37e8      	adds	r7, #232	; 0xe8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop

08005f9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b09c      	sub	sp, #112	; 0x70
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006008:	2b00      	cmp	r3, #0
 800600a:	d172      	bne.n	80060f2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800600c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800600e:	2200      	movs	r2, #0
 8006010:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	330c      	adds	r3, #12
 8006018:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006028:	66bb      	str	r3, [r7, #104]	; 0x68
 800602a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	330c      	adds	r3, #12
 8006030:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006032:	65ba      	str	r2, [r7, #88]	; 0x58
 8006034:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006038:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e5      	bne.n	8006012 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3314      	adds	r3, #20
 800604c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	667b      	str	r3, [r7, #100]	; 0x64
 800605e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3314      	adds	r3, #20
 8006064:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006066:	647a      	str	r2, [r7, #68]	; 0x44
 8006068:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800606c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e5      	bne.n	8006046 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800607a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3314      	adds	r3, #20
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	623b      	str	r3, [r7, #32]
   return(result);
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006090:	663b      	str	r3, [r7, #96]	; 0x60
 8006092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3314      	adds	r3, #20
 8006098:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800609a:	633a      	str	r2, [r7, #48]	; 0x30
 800609c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e5      	bne.n	800607a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d119      	bne.n	80060f2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	330c      	adds	r3, #12
 80060c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f023 0310 	bic.w	r3, r3, #16
 80060d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	330c      	adds	r3, #12
 80060dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060de:	61fa      	str	r2, [r7, #28]
 80060e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	69b9      	ldr	r1, [r7, #24]
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	617b      	str	r3, [r7, #20]
   return(result);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e5      	bne.n	80060be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d106      	bne.n	8006108 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060fe:	4619      	mov	r1, r3
 8006100:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006102:	f7ff ff69 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006106:	e002      	b.n	800610e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006108:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800610a:	f7fb f85f 	bl	80011cc <HAL_UART_RxCpltCallback>
}
 800610e:	bf00      	nop
 8006110:	3770      	adds	r7, #112	; 0x70
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b084      	sub	sp, #16
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	2b01      	cmp	r3, #1
 800612a:	d108      	bne.n	800613e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	b29b      	uxth	r3, r3
 8006134:	4619      	mov	r1, r3
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f7ff ff4e 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800613c:	e002      	b.n	8006144 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f7ff ff36 	bl	8005fb0 <HAL_UART_RxHalfCpltCallback>
}
 8006144:	bf00      	nop
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006154:	2300      	movs	r3, #0
 8006156:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006168:	2b80      	cmp	r3, #128	; 0x80
 800616a:	bf0c      	ite	eq
 800616c:	2301      	moveq	r3, #1
 800616e:	2300      	movne	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b21      	cmp	r3, #33	; 0x21
 800617e:	d108      	bne.n	8006192 <UART_DMAError+0x46>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2200      	movs	r2, #0
 800618a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800618c:	68b8      	ldr	r0, [r7, #8]
 800618e:	f000 f8c5 	bl	800631c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b40      	cmp	r3, #64	; 0x40
 800619e:	bf0c      	ite	eq
 80061a0:	2301      	moveq	r3, #1
 80061a2:	2300      	movne	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b22      	cmp	r3, #34	; 0x22
 80061b2:	d108      	bne.n	80061c6 <UART_DMAError+0x7a>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2200      	movs	r2, #0
 80061be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80061c0:	68b8      	ldr	r0, [r7, #8]
 80061c2:	f000 f8d3 	bl	800636c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	f043 0210 	orr.w	r2, r3, #16
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061d2:	68b8      	ldr	r0, [r7, #8]
 80061d4:	f7ff fef6 	bl	8005fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061d8:	bf00      	nop
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b098      	sub	sp, #96	; 0x60
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	88fa      	ldrh	r2, [r7, #6]
 80061f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2222      	movs	r2, #34	; 0x22
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	4a40      	ldr	r2, [pc, #256]	; (8006310 <UART_Start_Receive_DMA+0x130>)
 800620e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	4a3f      	ldr	r2, [pc, #252]	; (8006314 <UART_Start_Receive_DMA+0x134>)
 8006216:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	4a3e      	ldr	r2, [pc, #248]	; (8006318 <UART_Start_Receive_DMA+0x138>)
 800621e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	2200      	movs	r2, #0
 8006226:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006228:	f107 0308 	add.w	r3, r7, #8
 800622c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3304      	adds	r3, #4
 8006238:	4619      	mov	r1, r3
 800623a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	88fb      	ldrh	r3, [r7, #6]
 8006240:	f7fd f9f0 	bl	8003624 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006244:	2300      	movs	r3, #0
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	613b      	str	r3, [r7, #16]
 8006258:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d019      	beq.n	800629e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	330c      	adds	r3, #12
 8006270:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800627a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006280:	65bb      	str	r3, [r7, #88]	; 0x58
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	330c      	adds	r3, #12
 8006288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800628a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800628c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006290:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e5      	bne.n	800626a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3314      	adds	r3, #20
 80062a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	f043 0301 	orr.w	r3, r3, #1
 80062b4:	657b      	str	r3, [r7, #84]	; 0x54
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3314      	adds	r3, #20
 80062bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062be:	63ba      	str	r2, [r7, #56]	; 0x38
 80062c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80062c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e5      	bne.n	800629e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3314      	adds	r3, #20
 80062d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	617b      	str	r3, [r7, #20]
   return(result);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062e8:	653b      	str	r3, [r7, #80]	; 0x50
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3314      	adds	r3, #20
 80062f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062f2:	627a      	str	r2, [r7, #36]	; 0x24
 80062f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	6a39      	ldr	r1, [r7, #32]
 80062f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e5      	bne.n	80062d2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3760      	adds	r7, #96	; 0x60
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	08005ff1 	.word	0x08005ff1
 8006314:	08006117 	.word	0x08006117
 8006318:	0800614d 	.word	0x0800614d

0800631c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800631c:	b480      	push	{r7}
 800631e:	b089      	sub	sp, #36	; 0x24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	330c      	adds	r3, #12
 800632a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	e853 3f00 	ldrex	r3, [r3]
 8006332:	60bb      	str	r3, [r7, #8]
   return(result);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	330c      	adds	r3, #12
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	61ba      	str	r2, [r7, #24]
 8006346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6979      	ldr	r1, [r7, #20]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	613b      	str	r3, [r7, #16]
   return(result);
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e5      	bne.n	8006324 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006360:	bf00      	nop
 8006362:	3724      	adds	r7, #36	; 0x24
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800636c:	b480      	push	{r7}
 800636e:	b095      	sub	sp, #84	; 0x54
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800638a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	330c      	adds	r3, #12
 8006392:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006394:	643a      	str	r2, [r7, #64]	; 0x40
 8006396:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800639a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e5      	bne.n	8006374 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3314      	adds	r3, #20
 80063ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	f023 0301 	bic.w	r3, r3, #1
 80063be:	64bb      	str	r3, [r7, #72]	; 0x48
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3314      	adds	r3, #20
 80063c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e5      	bne.n	80063a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d119      	bne.n	8006418 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	330c      	adds	r3, #12
 80063ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f023 0310 	bic.w	r3, r3, #16
 80063fa:	647b      	str	r3, [r7, #68]	; 0x44
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	330c      	adds	r3, #12
 8006402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006404:	61ba      	str	r2, [r7, #24]
 8006406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	6979      	ldr	r1, [r7, #20]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	613b      	str	r3, [r7, #16]
   return(result);
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e5      	bne.n	80063e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006426:	bf00      	nop
 8006428:	3754      	adds	r7, #84	; 0x54
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f7ff fdb9 	bl	8005fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006452:	bf00      	nop
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800645a:	b480      	push	{r7}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b21      	cmp	r3, #33	; 0x21
 800646c:	d13e      	bne.n	80064ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006476:	d114      	bne.n	80064a2 <UART_Transmit_IT+0x48>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d110      	bne.n	80064a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006494:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	1c9a      	adds	r2, r3, #2
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	621a      	str	r2, [r3, #32]
 80064a0:	e008      	b.n	80064b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6211      	str	r1, [r2, #32]
 80064ac:	781a      	ldrb	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29b      	uxth	r3, r3
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	4619      	mov	r1, r3
 80064c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10f      	bne.n	80064e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	e000      	b.n	80064ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064ec:	2302      	movs	r3, #2
  }
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b082      	sub	sp, #8
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006510:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff fd3e 	bl	8005f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b08c      	sub	sp, #48	; 0x30
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b22      	cmp	r3, #34	; 0x22
 800653c:	f040 80ab 	bne.w	8006696 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006548:	d117      	bne.n	800657a <UART_Receive_IT+0x50>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d113      	bne.n	800657a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006552:	2300      	movs	r3, #0
 8006554:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	b29b      	uxth	r3, r3
 8006564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006568:	b29a      	uxth	r2, r3
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006572:	1c9a      	adds	r2, r3, #2
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	629a      	str	r2, [r3, #40]	; 0x28
 8006578:	e026      	b.n	80065c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006580:	2300      	movs	r3, #0
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658c:	d007      	beq.n	800659e <UART_Receive_IT+0x74>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <UART_Receive_IT+0x82>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	e008      	b.n	80065be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	4619      	mov	r1, r3
 80065d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d15a      	bne.n	8006692 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0220 	bic.w	r2, r2, #32
 80065ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695a      	ldr	r2, [r3, #20]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0201 	bic.w	r2, r2, #1
 800660a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	2b01      	cmp	r3, #1
 800661a:	d135      	bne.n	8006688 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	330c      	adds	r3, #12
 8006628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	613b      	str	r3, [r7, #16]
   return(result);
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f023 0310 	bic.w	r3, r3, #16
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	330c      	adds	r3, #12
 8006640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006642:	623a      	str	r2, [r7, #32]
 8006644:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	69f9      	ldr	r1, [r7, #28]
 8006648:	6a3a      	ldr	r2, [r7, #32]
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e5      	bne.n	8006622 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0310 	and.w	r3, r3, #16
 8006660:	2b10      	cmp	r3, #16
 8006662:	d10a      	bne.n	800667a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006664:	2300      	movs	r3, #0
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff fca9 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
 8006686:	e002      	b.n	800668e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7fa fd9f 	bl	80011cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	e002      	b.n	8006698 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	e000      	b.n	8006698 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006696:	2302      	movs	r3, #2
  }
}
 8006698:	4618      	mov	r0, r3
 800669a:	3730      	adds	r7, #48	; 0x30
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a4:	b0c0      	sub	sp, #256	; 0x100
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	68d9      	ldr	r1, [r3, #12]
 80066be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	ea40 0301 	orr.w	r3, r0, r1
 80066c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	431a      	orrs	r2, r3
 80066d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	431a      	orrs	r2, r3
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066f8:	f021 010c 	bic.w	r1, r1, #12
 80066fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006706:	430b      	orrs	r3, r1
 8006708:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800670a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671a:	6999      	ldr	r1, [r3, #24]
 800671c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	ea40 0301 	orr.w	r3, r0, r1
 8006726:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	4b8f      	ldr	r3, [pc, #572]	; (800696c <UART_SetConfig+0x2cc>)
 8006730:	429a      	cmp	r2, r3
 8006732:	d005      	beq.n	8006740 <UART_SetConfig+0xa0>
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4b8d      	ldr	r3, [pc, #564]	; (8006970 <UART_SetConfig+0x2d0>)
 800673c:	429a      	cmp	r2, r3
 800673e:	d104      	bne.n	800674a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006740:	f7fe f8fe 	bl	8004940 <HAL_RCC_GetPCLK2Freq>
 8006744:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006748:	e003      	b.n	8006752 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800674a:	f7fe f8e5 	bl	8004918 <HAL_RCC_GetPCLK1Freq>
 800674e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800675c:	f040 810c 	bne.w	8006978 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006764:	2200      	movs	r2, #0
 8006766:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800676a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800676e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006772:	4622      	mov	r2, r4
 8006774:	462b      	mov	r3, r5
 8006776:	1891      	adds	r1, r2, r2
 8006778:	65b9      	str	r1, [r7, #88]	; 0x58
 800677a:	415b      	adcs	r3, r3
 800677c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800677e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006782:	4621      	mov	r1, r4
 8006784:	eb12 0801 	adds.w	r8, r2, r1
 8006788:	4629      	mov	r1, r5
 800678a:	eb43 0901 	adc.w	r9, r3, r1
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800679a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800679e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067a2:	4690      	mov	r8, r2
 80067a4:	4699      	mov	r9, r3
 80067a6:	4623      	mov	r3, r4
 80067a8:	eb18 0303 	adds.w	r3, r8, r3
 80067ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067b0:	462b      	mov	r3, r5
 80067b2:	eb49 0303 	adc.w	r3, r9, r3
 80067b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067ce:	460b      	mov	r3, r1
 80067d0:	18db      	adds	r3, r3, r3
 80067d2:	653b      	str	r3, [r7, #80]	; 0x50
 80067d4:	4613      	mov	r3, r2
 80067d6:	eb42 0303 	adc.w	r3, r2, r3
 80067da:	657b      	str	r3, [r7, #84]	; 0x54
 80067dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067e4:	f7fa f9be 	bl	8000b64 <__aeabi_uldivmod>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4b61      	ldr	r3, [pc, #388]	; (8006974 <UART_SetConfig+0x2d4>)
 80067ee:	fba3 2302 	umull	r2, r3, r3, r2
 80067f2:	095b      	lsrs	r3, r3, #5
 80067f4:	011c      	lsls	r4, r3, #4
 80067f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006800:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006804:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006808:	4642      	mov	r2, r8
 800680a:	464b      	mov	r3, r9
 800680c:	1891      	adds	r1, r2, r2
 800680e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006810:	415b      	adcs	r3, r3
 8006812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006814:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006818:	4641      	mov	r1, r8
 800681a:	eb12 0a01 	adds.w	sl, r2, r1
 800681e:	4649      	mov	r1, r9
 8006820:	eb43 0b01 	adc.w	fp, r3, r1
 8006824:	f04f 0200 	mov.w	r2, #0
 8006828:	f04f 0300 	mov.w	r3, #0
 800682c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006830:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006838:	4692      	mov	sl, r2
 800683a:	469b      	mov	fp, r3
 800683c:	4643      	mov	r3, r8
 800683e:	eb1a 0303 	adds.w	r3, sl, r3
 8006842:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006846:	464b      	mov	r3, r9
 8006848:	eb4b 0303 	adc.w	r3, fp, r3
 800684c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800685c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006860:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006864:	460b      	mov	r3, r1
 8006866:	18db      	adds	r3, r3, r3
 8006868:	643b      	str	r3, [r7, #64]	; 0x40
 800686a:	4613      	mov	r3, r2
 800686c:	eb42 0303 	adc.w	r3, r2, r3
 8006870:	647b      	str	r3, [r7, #68]	; 0x44
 8006872:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006876:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800687a:	f7fa f973 	bl	8000b64 <__aeabi_uldivmod>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4611      	mov	r1, r2
 8006884:	4b3b      	ldr	r3, [pc, #236]	; (8006974 <UART_SetConfig+0x2d4>)
 8006886:	fba3 2301 	umull	r2, r3, r3, r1
 800688a:	095b      	lsrs	r3, r3, #5
 800688c:	2264      	movs	r2, #100	; 0x64
 800688e:	fb02 f303 	mul.w	r3, r2, r3
 8006892:	1acb      	subs	r3, r1, r3
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800689a:	4b36      	ldr	r3, [pc, #216]	; (8006974 <UART_SetConfig+0x2d4>)
 800689c:	fba3 2302 	umull	r2, r3, r3, r2
 80068a0:	095b      	lsrs	r3, r3, #5
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068a8:	441c      	add	r4, r3
 80068aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068bc:	4642      	mov	r2, r8
 80068be:	464b      	mov	r3, r9
 80068c0:	1891      	adds	r1, r2, r2
 80068c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80068c4:	415b      	adcs	r3, r3
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068cc:	4641      	mov	r1, r8
 80068ce:	1851      	adds	r1, r2, r1
 80068d0:	6339      	str	r1, [r7, #48]	; 0x30
 80068d2:	4649      	mov	r1, r9
 80068d4:	414b      	adcs	r3, r1
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068e4:	4659      	mov	r1, fp
 80068e6:	00cb      	lsls	r3, r1, #3
 80068e8:	4651      	mov	r1, sl
 80068ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ee:	4651      	mov	r1, sl
 80068f0:	00ca      	lsls	r2, r1, #3
 80068f2:	4610      	mov	r0, r2
 80068f4:	4619      	mov	r1, r3
 80068f6:	4603      	mov	r3, r0
 80068f8:	4642      	mov	r2, r8
 80068fa:	189b      	adds	r3, r3, r2
 80068fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006900:	464b      	mov	r3, r9
 8006902:	460a      	mov	r2, r1
 8006904:	eb42 0303 	adc.w	r3, r2, r3
 8006908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800690c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006918:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800691c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006920:	460b      	mov	r3, r1
 8006922:	18db      	adds	r3, r3, r3
 8006924:	62bb      	str	r3, [r7, #40]	; 0x28
 8006926:	4613      	mov	r3, r2
 8006928:	eb42 0303 	adc.w	r3, r2, r3
 800692c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800692e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006932:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006936:	f7fa f915 	bl	8000b64 <__aeabi_uldivmod>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4b0d      	ldr	r3, [pc, #52]	; (8006974 <UART_SetConfig+0x2d4>)
 8006940:	fba3 1302 	umull	r1, r3, r3, r2
 8006944:	095b      	lsrs	r3, r3, #5
 8006946:	2164      	movs	r1, #100	; 0x64
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	3332      	adds	r3, #50	; 0x32
 8006952:	4a08      	ldr	r2, [pc, #32]	; (8006974 <UART_SetConfig+0x2d4>)
 8006954:	fba2 2303 	umull	r2, r3, r2, r3
 8006958:	095b      	lsrs	r3, r3, #5
 800695a:	f003 0207 	and.w	r2, r3, #7
 800695e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4422      	add	r2, r4
 8006966:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006968:	e106      	b.n	8006b78 <UART_SetConfig+0x4d8>
 800696a:	bf00      	nop
 800696c:	40011000 	.word	0x40011000
 8006970:	40011400 	.word	0x40011400
 8006974:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800697c:	2200      	movs	r2, #0
 800697e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006982:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006986:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800698a:	4642      	mov	r2, r8
 800698c:	464b      	mov	r3, r9
 800698e:	1891      	adds	r1, r2, r2
 8006990:	6239      	str	r1, [r7, #32]
 8006992:	415b      	adcs	r3, r3
 8006994:	627b      	str	r3, [r7, #36]	; 0x24
 8006996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800699a:	4641      	mov	r1, r8
 800699c:	1854      	adds	r4, r2, r1
 800699e:	4649      	mov	r1, r9
 80069a0:	eb43 0501 	adc.w	r5, r3, r1
 80069a4:	f04f 0200 	mov.w	r2, #0
 80069a8:	f04f 0300 	mov.w	r3, #0
 80069ac:	00eb      	lsls	r3, r5, #3
 80069ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069b2:	00e2      	lsls	r2, r4, #3
 80069b4:	4614      	mov	r4, r2
 80069b6:	461d      	mov	r5, r3
 80069b8:	4643      	mov	r3, r8
 80069ba:	18e3      	adds	r3, r4, r3
 80069bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069c0:	464b      	mov	r3, r9
 80069c2:	eb45 0303 	adc.w	r3, r5, r3
 80069c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069da:	f04f 0200 	mov.w	r2, #0
 80069de:	f04f 0300 	mov.w	r3, #0
 80069e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069e6:	4629      	mov	r1, r5
 80069e8:	008b      	lsls	r3, r1, #2
 80069ea:	4621      	mov	r1, r4
 80069ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069f0:	4621      	mov	r1, r4
 80069f2:	008a      	lsls	r2, r1, #2
 80069f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069f8:	f7fa f8b4 	bl	8000b64 <__aeabi_uldivmod>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4b60      	ldr	r3, [pc, #384]	; (8006b84 <UART_SetConfig+0x4e4>)
 8006a02:	fba3 2302 	umull	r2, r3, r3, r2
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	011c      	lsls	r4, r3, #4
 8006a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	464b      	mov	r3, r9
 8006a20:	1891      	adds	r1, r2, r2
 8006a22:	61b9      	str	r1, [r7, #24]
 8006a24:	415b      	adcs	r3, r3
 8006a26:	61fb      	str	r3, [r7, #28]
 8006a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a2c:	4641      	mov	r1, r8
 8006a2e:	1851      	adds	r1, r2, r1
 8006a30:	6139      	str	r1, [r7, #16]
 8006a32:	4649      	mov	r1, r9
 8006a34:	414b      	adcs	r3, r1
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a44:	4659      	mov	r1, fp
 8006a46:	00cb      	lsls	r3, r1, #3
 8006a48:	4651      	mov	r1, sl
 8006a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a4e:	4651      	mov	r1, sl
 8006a50:	00ca      	lsls	r2, r1, #3
 8006a52:	4610      	mov	r0, r2
 8006a54:	4619      	mov	r1, r3
 8006a56:	4603      	mov	r3, r0
 8006a58:	4642      	mov	r2, r8
 8006a5a:	189b      	adds	r3, r3, r2
 8006a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a60:	464b      	mov	r3, r9
 8006a62:	460a      	mov	r2, r1
 8006a64:	eb42 0303 	adc.w	r3, r2, r3
 8006a68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a78:	f04f 0200 	mov.w	r2, #0
 8006a7c:	f04f 0300 	mov.w	r3, #0
 8006a80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a84:	4649      	mov	r1, r9
 8006a86:	008b      	lsls	r3, r1, #2
 8006a88:	4641      	mov	r1, r8
 8006a8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a8e:	4641      	mov	r1, r8
 8006a90:	008a      	lsls	r2, r1, #2
 8006a92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a96:	f7fa f865 	bl	8000b64 <__aeabi_uldivmod>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	4b38      	ldr	r3, [pc, #224]	; (8006b84 <UART_SetConfig+0x4e4>)
 8006aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8006aa6:	095b      	lsrs	r3, r3, #5
 8006aa8:	2264      	movs	r2, #100	; 0x64
 8006aaa:	fb02 f303 	mul.w	r3, r2, r3
 8006aae:	1acb      	subs	r3, r1, r3
 8006ab0:	011b      	lsls	r3, r3, #4
 8006ab2:	3332      	adds	r3, #50	; 0x32
 8006ab4:	4a33      	ldr	r2, [pc, #204]	; (8006b84 <UART_SetConfig+0x4e4>)
 8006ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aba:	095b      	lsrs	r3, r3, #5
 8006abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ac0:	441c      	add	r4, r3
 8006ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	673b      	str	r3, [r7, #112]	; 0x70
 8006aca:	677a      	str	r2, [r7, #116]	; 0x74
 8006acc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	464b      	mov	r3, r9
 8006ad4:	1891      	adds	r1, r2, r2
 8006ad6:	60b9      	str	r1, [r7, #8]
 8006ad8:	415b      	adcs	r3, r3
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ae0:	4641      	mov	r1, r8
 8006ae2:	1851      	adds	r1, r2, r1
 8006ae4:	6039      	str	r1, [r7, #0]
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	414b      	adcs	r3, r1
 8006aea:	607b      	str	r3, [r7, #4]
 8006aec:	f04f 0200 	mov.w	r2, #0
 8006af0:	f04f 0300 	mov.w	r3, #0
 8006af4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006af8:	4659      	mov	r1, fp
 8006afa:	00cb      	lsls	r3, r1, #3
 8006afc:	4651      	mov	r1, sl
 8006afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b02:	4651      	mov	r1, sl
 8006b04:	00ca      	lsls	r2, r1, #3
 8006b06:	4610      	mov	r0, r2
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	189b      	adds	r3, r3, r2
 8006b10:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b12:	464b      	mov	r3, r9
 8006b14:	460a      	mov	r2, r1
 8006b16:	eb42 0303 	adc.w	r3, r2, r3
 8006b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	663b      	str	r3, [r7, #96]	; 0x60
 8006b26:	667a      	str	r2, [r7, #100]	; 0x64
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b34:	4649      	mov	r1, r9
 8006b36:	008b      	lsls	r3, r1, #2
 8006b38:	4641      	mov	r1, r8
 8006b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b3e:	4641      	mov	r1, r8
 8006b40:	008a      	lsls	r2, r1, #2
 8006b42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b46:	f7fa f80d 	bl	8000b64 <__aeabi_uldivmod>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <UART_SetConfig+0x4e4>)
 8006b50:	fba3 1302 	umull	r1, r3, r3, r2
 8006b54:	095b      	lsrs	r3, r3, #5
 8006b56:	2164      	movs	r1, #100	; 0x64
 8006b58:	fb01 f303 	mul.w	r3, r1, r3
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	3332      	adds	r3, #50	; 0x32
 8006b62:	4a08      	ldr	r2, [pc, #32]	; (8006b84 <UART_SetConfig+0x4e4>)
 8006b64:	fba2 2303 	umull	r2, r3, r2, r3
 8006b68:	095b      	lsrs	r3, r3, #5
 8006b6a:	f003 020f 	and.w	r2, r3, #15
 8006b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4422      	add	r2, r4
 8006b76:	609a      	str	r2, [r3, #8]
}
 8006b78:	bf00      	nop
 8006b7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b84:	51eb851f 	.word	0x51eb851f

08006b88 <memset>:
 8006b88:	4402      	add	r2, r0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d100      	bne.n	8006b92 <memset+0xa>
 8006b90:	4770      	bx	lr
 8006b92:	f803 1b01 	strb.w	r1, [r3], #1
 8006b96:	e7f9      	b.n	8006b8c <memset+0x4>

08006b98 <__libc_init_array>:
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	4d0d      	ldr	r5, [pc, #52]	; (8006bd0 <__libc_init_array+0x38>)
 8006b9c:	4c0d      	ldr	r4, [pc, #52]	; (8006bd4 <__libc_init_array+0x3c>)
 8006b9e:	1b64      	subs	r4, r4, r5
 8006ba0:	10a4      	asrs	r4, r4, #2
 8006ba2:	2600      	movs	r6, #0
 8006ba4:	42a6      	cmp	r6, r4
 8006ba6:	d109      	bne.n	8006bbc <__libc_init_array+0x24>
 8006ba8:	4d0b      	ldr	r5, [pc, #44]	; (8006bd8 <__libc_init_array+0x40>)
 8006baa:	4c0c      	ldr	r4, [pc, #48]	; (8006bdc <__libc_init_array+0x44>)
 8006bac:	f001 f8bc 	bl	8007d28 <_init>
 8006bb0:	1b64      	subs	r4, r4, r5
 8006bb2:	10a4      	asrs	r4, r4, #2
 8006bb4:	2600      	movs	r6, #0
 8006bb6:	42a6      	cmp	r6, r4
 8006bb8:	d105      	bne.n	8006bc6 <__libc_init_array+0x2e>
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
 8006bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc0:	4798      	blx	r3
 8006bc2:	3601      	adds	r6, #1
 8006bc4:	e7ee      	b.n	8006ba4 <__libc_init_array+0xc>
 8006bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bca:	4798      	blx	r3
 8006bcc:	3601      	adds	r6, #1
 8006bce:	e7f2      	b.n	8006bb6 <__libc_init_array+0x1e>
 8006bd0:	08007f40 	.word	0x08007f40
 8006bd4:	08007f40 	.word	0x08007f40
 8006bd8:	08007f40 	.word	0x08007f40
 8006bdc:	08007f44 	.word	0x08007f44

08006be0 <memcpy>:
 8006be0:	440a      	add	r2, r1
 8006be2:	4291      	cmp	r1, r2
 8006be4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006be8:	d100      	bne.n	8006bec <memcpy+0xc>
 8006bea:	4770      	bx	lr
 8006bec:	b510      	push	{r4, lr}
 8006bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bf6:	4291      	cmp	r1, r2
 8006bf8:	d1f9      	bne.n	8006bee <memcpy+0xe>
 8006bfa:	bd10      	pop	{r4, pc}
 8006bfc:	0000      	movs	r0, r0
	...

08006c00 <cos>:
 8006c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c02:	ec53 2b10 	vmov	r2, r3, d0
 8006c06:	4826      	ldr	r0, [pc, #152]	; (8006ca0 <cos+0xa0>)
 8006c08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c0c:	4281      	cmp	r1, r0
 8006c0e:	dc06      	bgt.n	8006c1e <cos+0x1e>
 8006c10:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006c98 <cos+0x98>
 8006c14:	b005      	add	sp, #20
 8006c16:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c1a:	f000 b89d 	b.w	8006d58 <__kernel_cos>
 8006c1e:	4821      	ldr	r0, [pc, #132]	; (8006ca4 <cos+0xa4>)
 8006c20:	4281      	cmp	r1, r0
 8006c22:	dd09      	ble.n	8006c38 <cos+0x38>
 8006c24:	ee10 0a10 	vmov	r0, s0
 8006c28:	4619      	mov	r1, r3
 8006c2a:	f7f9 fad1 	bl	80001d0 <__aeabi_dsub>
 8006c2e:	ec41 0b10 	vmov	d0, r0, r1
 8006c32:	b005      	add	sp, #20
 8006c34:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c38:	4668      	mov	r0, sp
 8006c3a:	f000 fa15 	bl	8007068 <__ieee754_rem_pio2>
 8006c3e:	f000 0003 	and.w	r0, r0, #3
 8006c42:	2801      	cmp	r0, #1
 8006c44:	d00b      	beq.n	8006c5e <cos+0x5e>
 8006c46:	2802      	cmp	r0, #2
 8006c48:	d016      	beq.n	8006c78 <cos+0x78>
 8006c4a:	b9e0      	cbnz	r0, 8006c86 <cos+0x86>
 8006c4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c50:	ed9d 0b00 	vldr	d0, [sp]
 8006c54:	f000 f880 	bl	8006d58 <__kernel_cos>
 8006c58:	ec51 0b10 	vmov	r0, r1, d0
 8006c5c:	e7e7      	b.n	8006c2e <cos+0x2e>
 8006c5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c62:	ed9d 0b00 	vldr	d0, [sp]
 8006c66:	f000 f93f 	bl	8006ee8 <__kernel_sin>
 8006c6a:	ec53 2b10 	vmov	r2, r3, d0
 8006c6e:	ee10 0a10 	vmov	r0, s0
 8006c72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006c76:	e7da      	b.n	8006c2e <cos+0x2e>
 8006c78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c7c:	ed9d 0b00 	vldr	d0, [sp]
 8006c80:	f000 f86a 	bl	8006d58 <__kernel_cos>
 8006c84:	e7f1      	b.n	8006c6a <cos+0x6a>
 8006c86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c8a:	ed9d 0b00 	vldr	d0, [sp]
 8006c8e:	2001      	movs	r0, #1
 8006c90:	f000 f92a 	bl	8006ee8 <__kernel_sin>
 8006c94:	e7e0      	b.n	8006c58 <cos+0x58>
 8006c96:	bf00      	nop
	...
 8006ca0:	3fe921fb 	.word	0x3fe921fb
 8006ca4:	7fefffff 	.word	0x7fefffff

08006ca8 <sin>:
 8006ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006caa:	ec53 2b10 	vmov	r2, r3, d0
 8006cae:	4828      	ldr	r0, [pc, #160]	; (8006d50 <sin+0xa8>)
 8006cb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006cb4:	4281      	cmp	r1, r0
 8006cb6:	dc07      	bgt.n	8006cc8 <sin+0x20>
 8006cb8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006d48 <sin+0xa0>
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	b005      	add	sp, #20
 8006cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cc4:	f000 b910 	b.w	8006ee8 <__kernel_sin>
 8006cc8:	4822      	ldr	r0, [pc, #136]	; (8006d54 <sin+0xac>)
 8006cca:	4281      	cmp	r1, r0
 8006ccc:	dd09      	ble.n	8006ce2 <sin+0x3a>
 8006cce:	ee10 0a10 	vmov	r0, s0
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	f7f9 fa7c 	bl	80001d0 <__aeabi_dsub>
 8006cd8:	ec41 0b10 	vmov	d0, r0, r1
 8006cdc:	b005      	add	sp, #20
 8006cde:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ce2:	4668      	mov	r0, sp
 8006ce4:	f000 f9c0 	bl	8007068 <__ieee754_rem_pio2>
 8006ce8:	f000 0003 	and.w	r0, r0, #3
 8006cec:	2801      	cmp	r0, #1
 8006cee:	d00c      	beq.n	8006d0a <sin+0x62>
 8006cf0:	2802      	cmp	r0, #2
 8006cf2:	d011      	beq.n	8006d18 <sin+0x70>
 8006cf4:	b9f0      	cbnz	r0, 8006d34 <sin+0x8c>
 8006cf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006cfa:	ed9d 0b00 	vldr	d0, [sp]
 8006cfe:	2001      	movs	r0, #1
 8006d00:	f000 f8f2 	bl	8006ee8 <__kernel_sin>
 8006d04:	ec51 0b10 	vmov	r0, r1, d0
 8006d08:	e7e6      	b.n	8006cd8 <sin+0x30>
 8006d0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d0e:	ed9d 0b00 	vldr	d0, [sp]
 8006d12:	f000 f821 	bl	8006d58 <__kernel_cos>
 8006d16:	e7f5      	b.n	8006d04 <sin+0x5c>
 8006d18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d1c:	ed9d 0b00 	vldr	d0, [sp]
 8006d20:	2001      	movs	r0, #1
 8006d22:	f000 f8e1 	bl	8006ee8 <__kernel_sin>
 8006d26:	ec53 2b10 	vmov	r2, r3, d0
 8006d2a:	ee10 0a10 	vmov	r0, s0
 8006d2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006d32:	e7d1      	b.n	8006cd8 <sin+0x30>
 8006d34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d38:	ed9d 0b00 	vldr	d0, [sp]
 8006d3c:	f000 f80c 	bl	8006d58 <__kernel_cos>
 8006d40:	e7f1      	b.n	8006d26 <sin+0x7e>
 8006d42:	bf00      	nop
 8006d44:	f3af 8000 	nop.w
	...
 8006d50:	3fe921fb 	.word	0x3fe921fb
 8006d54:	7fefffff 	.word	0x7fefffff

08006d58 <__kernel_cos>:
 8006d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5c:	ec57 6b10 	vmov	r6, r7, d0
 8006d60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006d64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006d68:	ed8d 1b00 	vstr	d1, [sp]
 8006d6c:	da07      	bge.n	8006d7e <__kernel_cos+0x26>
 8006d6e:	ee10 0a10 	vmov	r0, s0
 8006d72:	4639      	mov	r1, r7
 8006d74:	f7f9 fe7e 	bl	8000a74 <__aeabi_d2iz>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	f000 8088 	beq.w	8006e8e <__kernel_cos+0x136>
 8006d7e:	4632      	mov	r2, r6
 8006d80:	463b      	mov	r3, r7
 8006d82:	4630      	mov	r0, r6
 8006d84:	4639      	mov	r1, r7
 8006d86:	f7f9 fbdb 	bl	8000540 <__aeabi_dmul>
 8006d8a:	4b51      	ldr	r3, [pc, #324]	; (8006ed0 <__kernel_cos+0x178>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	4604      	mov	r4, r0
 8006d90:	460d      	mov	r5, r1
 8006d92:	f7f9 fbd5 	bl	8000540 <__aeabi_dmul>
 8006d96:	a340      	add	r3, pc, #256	; (adr r3, 8006e98 <__kernel_cos+0x140>)
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	4682      	mov	sl, r0
 8006d9e:	468b      	mov	fp, r1
 8006da0:	4620      	mov	r0, r4
 8006da2:	4629      	mov	r1, r5
 8006da4:	f7f9 fbcc 	bl	8000540 <__aeabi_dmul>
 8006da8:	a33d      	add	r3, pc, #244	; (adr r3, 8006ea0 <__kernel_cos+0x148>)
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	f7f9 fa11 	bl	80001d4 <__adddf3>
 8006db2:	4622      	mov	r2, r4
 8006db4:	462b      	mov	r3, r5
 8006db6:	f7f9 fbc3 	bl	8000540 <__aeabi_dmul>
 8006dba:	a33b      	add	r3, pc, #236	; (adr r3, 8006ea8 <__kernel_cos+0x150>)
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	f7f9 fa06 	bl	80001d0 <__aeabi_dsub>
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	462b      	mov	r3, r5
 8006dc8:	f7f9 fbba 	bl	8000540 <__aeabi_dmul>
 8006dcc:	a338      	add	r3, pc, #224	; (adr r3, 8006eb0 <__kernel_cos+0x158>)
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f7f9 f9ff 	bl	80001d4 <__adddf3>
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	462b      	mov	r3, r5
 8006dda:	f7f9 fbb1 	bl	8000540 <__aeabi_dmul>
 8006dde:	a336      	add	r3, pc, #216	; (adr r3, 8006eb8 <__kernel_cos+0x160>)
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f7f9 f9f4 	bl	80001d0 <__aeabi_dsub>
 8006de8:	4622      	mov	r2, r4
 8006dea:	462b      	mov	r3, r5
 8006dec:	f7f9 fba8 	bl	8000540 <__aeabi_dmul>
 8006df0:	a333      	add	r3, pc, #204	; (adr r3, 8006ec0 <__kernel_cos+0x168>)
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	f7f9 f9ed 	bl	80001d4 <__adddf3>
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	462b      	mov	r3, r5
 8006dfe:	f7f9 fb9f 	bl	8000540 <__aeabi_dmul>
 8006e02:	4622      	mov	r2, r4
 8006e04:	462b      	mov	r3, r5
 8006e06:	f7f9 fb9b 	bl	8000540 <__aeabi_dmul>
 8006e0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e0e:	4604      	mov	r4, r0
 8006e10:	460d      	mov	r5, r1
 8006e12:	4630      	mov	r0, r6
 8006e14:	4639      	mov	r1, r7
 8006e16:	f7f9 fb93 	bl	8000540 <__aeabi_dmul>
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4620      	mov	r0, r4
 8006e22:	f7f9 f9d5 	bl	80001d0 <__aeabi_dsub>
 8006e26:	4b2b      	ldr	r3, [pc, #172]	; (8006ed4 <__kernel_cos+0x17c>)
 8006e28:	4598      	cmp	r8, r3
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460f      	mov	r7, r1
 8006e2e:	dc10      	bgt.n	8006e52 <__kernel_cos+0xfa>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4650      	mov	r0, sl
 8006e36:	4659      	mov	r1, fp
 8006e38:	f7f9 f9ca 	bl	80001d0 <__aeabi_dsub>
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4926      	ldr	r1, [pc, #152]	; (8006ed8 <__kernel_cos+0x180>)
 8006e40:	4602      	mov	r2, r0
 8006e42:	2000      	movs	r0, #0
 8006e44:	f7f9 f9c4 	bl	80001d0 <__aeabi_dsub>
 8006e48:	ec41 0b10 	vmov	d0, r0, r1
 8006e4c:	b003      	add	sp, #12
 8006e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e52:	4b22      	ldr	r3, [pc, #136]	; (8006edc <__kernel_cos+0x184>)
 8006e54:	4920      	ldr	r1, [pc, #128]	; (8006ed8 <__kernel_cos+0x180>)
 8006e56:	4598      	cmp	r8, r3
 8006e58:	bfcc      	ite	gt
 8006e5a:	4d21      	ldrgt	r5, [pc, #132]	; (8006ee0 <__kernel_cos+0x188>)
 8006e5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006e60:	2400      	movs	r4, #0
 8006e62:	4622      	mov	r2, r4
 8006e64:	462b      	mov	r3, r5
 8006e66:	2000      	movs	r0, #0
 8006e68:	f7f9 f9b2 	bl	80001d0 <__aeabi_dsub>
 8006e6c:	4622      	mov	r2, r4
 8006e6e:	4680      	mov	r8, r0
 8006e70:	4689      	mov	r9, r1
 8006e72:	462b      	mov	r3, r5
 8006e74:	4650      	mov	r0, sl
 8006e76:	4659      	mov	r1, fp
 8006e78:	f7f9 f9aa 	bl	80001d0 <__aeabi_dsub>
 8006e7c:	4632      	mov	r2, r6
 8006e7e:	463b      	mov	r3, r7
 8006e80:	f7f9 f9a6 	bl	80001d0 <__aeabi_dsub>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4640      	mov	r0, r8
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	e7da      	b.n	8006e44 <__kernel_cos+0xec>
 8006e8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006ec8 <__kernel_cos+0x170>
 8006e92:	e7db      	b.n	8006e4c <__kernel_cos+0xf4>
 8006e94:	f3af 8000 	nop.w
 8006e98:	be8838d4 	.word	0xbe8838d4
 8006e9c:	bda8fae9 	.word	0xbda8fae9
 8006ea0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006ea4:	3e21ee9e 	.word	0x3e21ee9e
 8006ea8:	809c52ad 	.word	0x809c52ad
 8006eac:	3e927e4f 	.word	0x3e927e4f
 8006eb0:	19cb1590 	.word	0x19cb1590
 8006eb4:	3efa01a0 	.word	0x3efa01a0
 8006eb8:	16c15177 	.word	0x16c15177
 8006ebc:	3f56c16c 	.word	0x3f56c16c
 8006ec0:	5555554c 	.word	0x5555554c
 8006ec4:	3fa55555 	.word	0x3fa55555
 8006ec8:	00000000 	.word	0x00000000
 8006ecc:	3ff00000 	.word	0x3ff00000
 8006ed0:	3fe00000 	.word	0x3fe00000
 8006ed4:	3fd33332 	.word	0x3fd33332
 8006ed8:	3ff00000 	.word	0x3ff00000
 8006edc:	3fe90000 	.word	0x3fe90000
 8006ee0:	3fd20000 	.word	0x3fd20000
 8006ee4:	00000000 	.word	0x00000000

08006ee8 <__kernel_sin>:
 8006ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eec:	ed2d 8b04 	vpush	{d8-d9}
 8006ef0:	eeb0 8a41 	vmov.f32	s16, s2
 8006ef4:	eef0 8a61 	vmov.f32	s17, s3
 8006ef8:	ec55 4b10 	vmov	r4, r5, d0
 8006efc:	b083      	sub	sp, #12
 8006efe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006f02:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006f06:	9001      	str	r0, [sp, #4]
 8006f08:	da06      	bge.n	8006f18 <__kernel_sin+0x30>
 8006f0a:	ee10 0a10 	vmov	r0, s0
 8006f0e:	4629      	mov	r1, r5
 8006f10:	f7f9 fdb0 	bl	8000a74 <__aeabi_d2iz>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d051      	beq.n	8006fbc <__kernel_sin+0xd4>
 8006f18:	4622      	mov	r2, r4
 8006f1a:	462b      	mov	r3, r5
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	4629      	mov	r1, r5
 8006f20:	f7f9 fb0e 	bl	8000540 <__aeabi_dmul>
 8006f24:	4682      	mov	sl, r0
 8006f26:	468b      	mov	fp, r1
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	4629      	mov	r1, r5
 8006f30:	f7f9 fb06 	bl	8000540 <__aeabi_dmul>
 8006f34:	a341      	add	r3, pc, #260	; (adr r3, 800703c <__kernel_sin+0x154>)
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	4680      	mov	r8, r0
 8006f3c:	4689      	mov	r9, r1
 8006f3e:	4650      	mov	r0, sl
 8006f40:	4659      	mov	r1, fp
 8006f42:	f7f9 fafd 	bl	8000540 <__aeabi_dmul>
 8006f46:	a33f      	add	r3, pc, #252	; (adr r3, 8007044 <__kernel_sin+0x15c>)
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f7f9 f940 	bl	80001d0 <__aeabi_dsub>
 8006f50:	4652      	mov	r2, sl
 8006f52:	465b      	mov	r3, fp
 8006f54:	f7f9 faf4 	bl	8000540 <__aeabi_dmul>
 8006f58:	a33c      	add	r3, pc, #240	; (adr r3, 800704c <__kernel_sin+0x164>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 f939 	bl	80001d4 <__adddf3>
 8006f62:	4652      	mov	r2, sl
 8006f64:	465b      	mov	r3, fp
 8006f66:	f7f9 faeb 	bl	8000540 <__aeabi_dmul>
 8006f6a:	a33a      	add	r3, pc, #232	; (adr r3, 8007054 <__kernel_sin+0x16c>)
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f7f9 f92e 	bl	80001d0 <__aeabi_dsub>
 8006f74:	4652      	mov	r2, sl
 8006f76:	465b      	mov	r3, fp
 8006f78:	f7f9 fae2 	bl	8000540 <__aeabi_dmul>
 8006f7c:	a337      	add	r3, pc, #220	; (adr r3, 800705c <__kernel_sin+0x174>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	f7f9 f927 	bl	80001d4 <__adddf3>
 8006f86:	9b01      	ldr	r3, [sp, #4]
 8006f88:	4606      	mov	r6, r0
 8006f8a:	460f      	mov	r7, r1
 8006f8c:	b9eb      	cbnz	r3, 8006fca <__kernel_sin+0xe2>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4650      	mov	r0, sl
 8006f94:	4659      	mov	r1, fp
 8006f96:	f7f9 fad3 	bl	8000540 <__aeabi_dmul>
 8006f9a:	a325      	add	r3, pc, #148	; (adr r3, 8007030 <__kernel_sin+0x148>)
 8006f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa0:	f7f9 f916 	bl	80001d0 <__aeabi_dsub>
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	464b      	mov	r3, r9
 8006fa8:	f7f9 faca 	bl	8000540 <__aeabi_dmul>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	f7f9 f90e 	bl	80001d4 <__adddf3>
 8006fb8:	4604      	mov	r4, r0
 8006fba:	460d      	mov	r5, r1
 8006fbc:	ec45 4b10 	vmov	d0, r4, r5
 8006fc0:	b003      	add	sp, #12
 8006fc2:	ecbd 8b04 	vpop	{d8-d9}
 8006fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fca:	4b1b      	ldr	r3, [pc, #108]	; (8007038 <__kernel_sin+0x150>)
 8006fcc:	ec51 0b18 	vmov	r0, r1, d8
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f7f9 fab5 	bl	8000540 <__aeabi_dmul>
 8006fd6:	4632      	mov	r2, r6
 8006fd8:	ec41 0b19 	vmov	d9, r0, r1
 8006fdc:	463b      	mov	r3, r7
 8006fde:	4640      	mov	r0, r8
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	f7f9 faad 	bl	8000540 <__aeabi_dmul>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	ec51 0b19 	vmov	r0, r1, d9
 8006fee:	f7f9 f8ef 	bl	80001d0 <__aeabi_dsub>
 8006ff2:	4652      	mov	r2, sl
 8006ff4:	465b      	mov	r3, fp
 8006ff6:	f7f9 faa3 	bl	8000540 <__aeabi_dmul>
 8006ffa:	ec53 2b18 	vmov	r2, r3, d8
 8006ffe:	f7f9 f8e7 	bl	80001d0 <__aeabi_dsub>
 8007002:	a30b      	add	r3, pc, #44	; (adr r3, 8007030 <__kernel_sin+0x148>)
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	4606      	mov	r6, r0
 800700a:	460f      	mov	r7, r1
 800700c:	4640      	mov	r0, r8
 800700e:	4649      	mov	r1, r9
 8007010:	f7f9 fa96 	bl	8000540 <__aeabi_dmul>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4630      	mov	r0, r6
 800701a:	4639      	mov	r1, r7
 800701c:	f7f9 f8da 	bl	80001d4 <__adddf3>
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	4620      	mov	r0, r4
 8007026:	4629      	mov	r1, r5
 8007028:	f7f9 f8d2 	bl	80001d0 <__aeabi_dsub>
 800702c:	e7c4      	b.n	8006fb8 <__kernel_sin+0xd0>
 800702e:	bf00      	nop
 8007030:	55555549 	.word	0x55555549
 8007034:	3fc55555 	.word	0x3fc55555
 8007038:	3fe00000 	.word	0x3fe00000
 800703c:	5acfd57c 	.word	0x5acfd57c
 8007040:	3de5d93a 	.word	0x3de5d93a
 8007044:	8a2b9ceb 	.word	0x8a2b9ceb
 8007048:	3e5ae5e6 	.word	0x3e5ae5e6
 800704c:	57b1fe7d 	.word	0x57b1fe7d
 8007050:	3ec71de3 	.word	0x3ec71de3
 8007054:	19c161d5 	.word	0x19c161d5
 8007058:	3f2a01a0 	.word	0x3f2a01a0
 800705c:	1110f8a6 	.word	0x1110f8a6
 8007060:	3f811111 	.word	0x3f811111
 8007064:	00000000 	.word	0x00000000

08007068 <__ieee754_rem_pio2>:
 8007068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706c:	ed2d 8b02 	vpush	{d8}
 8007070:	ec55 4b10 	vmov	r4, r5, d0
 8007074:	4bca      	ldr	r3, [pc, #808]	; (80073a0 <__ieee754_rem_pio2+0x338>)
 8007076:	b08b      	sub	sp, #44	; 0x2c
 8007078:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800707c:	4598      	cmp	r8, r3
 800707e:	4682      	mov	sl, r0
 8007080:	9502      	str	r5, [sp, #8]
 8007082:	dc08      	bgt.n	8007096 <__ieee754_rem_pio2+0x2e>
 8007084:	2200      	movs	r2, #0
 8007086:	2300      	movs	r3, #0
 8007088:	ed80 0b00 	vstr	d0, [r0]
 800708c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007090:	f04f 0b00 	mov.w	fp, #0
 8007094:	e028      	b.n	80070e8 <__ieee754_rem_pio2+0x80>
 8007096:	4bc3      	ldr	r3, [pc, #780]	; (80073a4 <__ieee754_rem_pio2+0x33c>)
 8007098:	4598      	cmp	r8, r3
 800709a:	dc78      	bgt.n	800718e <__ieee754_rem_pio2+0x126>
 800709c:	9b02      	ldr	r3, [sp, #8]
 800709e:	4ec2      	ldr	r6, [pc, #776]	; (80073a8 <__ieee754_rem_pio2+0x340>)
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	ee10 0a10 	vmov	r0, s0
 80070a6:	a3b0      	add	r3, pc, #704	; (adr r3, 8007368 <__ieee754_rem_pio2+0x300>)
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	4629      	mov	r1, r5
 80070ae:	dd39      	ble.n	8007124 <__ieee754_rem_pio2+0xbc>
 80070b0:	f7f9 f88e 	bl	80001d0 <__aeabi_dsub>
 80070b4:	45b0      	cmp	r8, r6
 80070b6:	4604      	mov	r4, r0
 80070b8:	460d      	mov	r5, r1
 80070ba:	d01b      	beq.n	80070f4 <__ieee754_rem_pio2+0x8c>
 80070bc:	a3ac      	add	r3, pc, #688	; (adr r3, 8007370 <__ieee754_rem_pio2+0x308>)
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	f7f9 f885 	bl	80001d0 <__aeabi_dsub>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	e9ca 2300 	strd	r2, r3, [sl]
 80070ce:	4620      	mov	r0, r4
 80070d0:	4629      	mov	r1, r5
 80070d2:	f7f9 f87d 	bl	80001d0 <__aeabi_dsub>
 80070d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8007370 <__ieee754_rem_pio2+0x308>)
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	f7f9 f878 	bl	80001d0 <__aeabi_dsub>
 80070e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80070e4:	f04f 0b01 	mov.w	fp, #1
 80070e8:	4658      	mov	r0, fp
 80070ea:	b00b      	add	sp, #44	; 0x2c
 80070ec:	ecbd 8b02 	vpop	{d8}
 80070f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f4:	a3a0      	add	r3, pc, #640	; (adr r3, 8007378 <__ieee754_rem_pio2+0x310>)
 80070f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fa:	f7f9 f869 	bl	80001d0 <__aeabi_dsub>
 80070fe:	a3a0      	add	r3, pc, #640	; (adr r3, 8007380 <__ieee754_rem_pio2+0x318>)
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	4604      	mov	r4, r0
 8007106:	460d      	mov	r5, r1
 8007108:	f7f9 f862 	bl	80001d0 <__aeabi_dsub>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	e9ca 2300 	strd	r2, r3, [sl]
 8007114:	4620      	mov	r0, r4
 8007116:	4629      	mov	r1, r5
 8007118:	f7f9 f85a 	bl	80001d0 <__aeabi_dsub>
 800711c:	a398      	add	r3, pc, #608	; (adr r3, 8007380 <__ieee754_rem_pio2+0x318>)
 800711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007122:	e7db      	b.n	80070dc <__ieee754_rem_pio2+0x74>
 8007124:	f7f9 f856 	bl	80001d4 <__adddf3>
 8007128:	45b0      	cmp	r8, r6
 800712a:	4604      	mov	r4, r0
 800712c:	460d      	mov	r5, r1
 800712e:	d016      	beq.n	800715e <__ieee754_rem_pio2+0xf6>
 8007130:	a38f      	add	r3, pc, #572	; (adr r3, 8007370 <__ieee754_rem_pio2+0x308>)
 8007132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007136:	f7f9 f84d 	bl	80001d4 <__adddf3>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	e9ca 2300 	strd	r2, r3, [sl]
 8007142:	4620      	mov	r0, r4
 8007144:	4629      	mov	r1, r5
 8007146:	f7f9 f843 	bl	80001d0 <__aeabi_dsub>
 800714a:	a389      	add	r3, pc, #548	; (adr r3, 8007370 <__ieee754_rem_pio2+0x308>)
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	f7f9 f840 	bl	80001d4 <__adddf3>
 8007154:	f04f 3bff 	mov.w	fp, #4294967295
 8007158:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800715c:	e7c4      	b.n	80070e8 <__ieee754_rem_pio2+0x80>
 800715e:	a386      	add	r3, pc, #536	; (adr r3, 8007378 <__ieee754_rem_pio2+0x310>)
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f7f9 f836 	bl	80001d4 <__adddf3>
 8007168:	a385      	add	r3, pc, #532	; (adr r3, 8007380 <__ieee754_rem_pio2+0x318>)
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	4604      	mov	r4, r0
 8007170:	460d      	mov	r5, r1
 8007172:	f7f9 f82f 	bl	80001d4 <__adddf3>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	e9ca 2300 	strd	r2, r3, [sl]
 800717e:	4620      	mov	r0, r4
 8007180:	4629      	mov	r1, r5
 8007182:	f7f9 f825 	bl	80001d0 <__aeabi_dsub>
 8007186:	a37e      	add	r3, pc, #504	; (adr r3, 8007380 <__ieee754_rem_pio2+0x318>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	e7e0      	b.n	8007150 <__ieee754_rem_pio2+0xe8>
 800718e:	4b87      	ldr	r3, [pc, #540]	; (80073ac <__ieee754_rem_pio2+0x344>)
 8007190:	4598      	cmp	r8, r3
 8007192:	f300 80d8 	bgt.w	8007346 <__ieee754_rem_pio2+0x2de>
 8007196:	f000 f96d 	bl	8007474 <fabs>
 800719a:	ec55 4b10 	vmov	r4, r5, d0
 800719e:	ee10 0a10 	vmov	r0, s0
 80071a2:	a379      	add	r3, pc, #484	; (adr r3, 8007388 <__ieee754_rem_pio2+0x320>)
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	4629      	mov	r1, r5
 80071aa:	f7f9 f9c9 	bl	8000540 <__aeabi_dmul>
 80071ae:	4b80      	ldr	r3, [pc, #512]	; (80073b0 <__ieee754_rem_pio2+0x348>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	f7f9 f80f 	bl	80001d4 <__adddf3>
 80071b6:	f7f9 fc5d 	bl	8000a74 <__aeabi_d2iz>
 80071ba:	4683      	mov	fp, r0
 80071bc:	f7f9 f956 	bl	800046c <__aeabi_i2d>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	ec43 2b18 	vmov	d8, r2, r3
 80071c8:	a367      	add	r3, pc, #412	; (adr r3, 8007368 <__ieee754_rem_pio2+0x300>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f7f9 f9b7 	bl	8000540 <__aeabi_dmul>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4620      	mov	r0, r4
 80071d8:	4629      	mov	r1, r5
 80071da:	f7f8 fff9 	bl	80001d0 <__aeabi_dsub>
 80071de:	a364      	add	r3, pc, #400	; (adr r3, 8007370 <__ieee754_rem_pio2+0x308>)
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	4606      	mov	r6, r0
 80071e6:	460f      	mov	r7, r1
 80071e8:	ec51 0b18 	vmov	r0, r1, d8
 80071ec:	f7f9 f9a8 	bl	8000540 <__aeabi_dmul>
 80071f0:	f1bb 0f1f 	cmp.w	fp, #31
 80071f4:	4604      	mov	r4, r0
 80071f6:	460d      	mov	r5, r1
 80071f8:	dc0d      	bgt.n	8007216 <__ieee754_rem_pio2+0x1ae>
 80071fa:	4b6e      	ldr	r3, [pc, #440]	; (80073b4 <__ieee754_rem_pio2+0x34c>)
 80071fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007204:	4543      	cmp	r3, r8
 8007206:	d006      	beq.n	8007216 <__ieee754_rem_pio2+0x1ae>
 8007208:	4622      	mov	r2, r4
 800720a:	462b      	mov	r3, r5
 800720c:	4630      	mov	r0, r6
 800720e:	4639      	mov	r1, r7
 8007210:	f7f8 ffde 	bl	80001d0 <__aeabi_dsub>
 8007214:	e00e      	b.n	8007234 <__ieee754_rem_pio2+0x1cc>
 8007216:	462b      	mov	r3, r5
 8007218:	4622      	mov	r2, r4
 800721a:	4630      	mov	r0, r6
 800721c:	4639      	mov	r1, r7
 800721e:	f7f8 ffd7 	bl	80001d0 <__aeabi_dsub>
 8007222:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007226:	9303      	str	r3, [sp, #12]
 8007228:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800722c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007230:	2b10      	cmp	r3, #16
 8007232:	dc02      	bgt.n	800723a <__ieee754_rem_pio2+0x1d2>
 8007234:	e9ca 0100 	strd	r0, r1, [sl]
 8007238:	e039      	b.n	80072ae <__ieee754_rem_pio2+0x246>
 800723a:	a34f      	add	r3, pc, #316	; (adr r3, 8007378 <__ieee754_rem_pio2+0x310>)
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	ec51 0b18 	vmov	r0, r1, d8
 8007244:	f7f9 f97c 	bl	8000540 <__aeabi_dmul>
 8007248:	4604      	mov	r4, r0
 800724a:	460d      	mov	r5, r1
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4630      	mov	r0, r6
 8007252:	4639      	mov	r1, r7
 8007254:	f7f8 ffbc 	bl	80001d0 <__aeabi_dsub>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4680      	mov	r8, r0
 800725e:	4689      	mov	r9, r1
 8007260:	4630      	mov	r0, r6
 8007262:	4639      	mov	r1, r7
 8007264:	f7f8 ffb4 	bl	80001d0 <__aeabi_dsub>
 8007268:	4622      	mov	r2, r4
 800726a:	462b      	mov	r3, r5
 800726c:	f7f8 ffb0 	bl	80001d0 <__aeabi_dsub>
 8007270:	a343      	add	r3, pc, #268	; (adr r3, 8007380 <__ieee754_rem_pio2+0x318>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	4604      	mov	r4, r0
 8007278:	460d      	mov	r5, r1
 800727a:	ec51 0b18 	vmov	r0, r1, d8
 800727e:	f7f9 f95f 	bl	8000540 <__aeabi_dmul>
 8007282:	4622      	mov	r2, r4
 8007284:	462b      	mov	r3, r5
 8007286:	f7f8 ffa3 	bl	80001d0 <__aeabi_dsub>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4604      	mov	r4, r0
 8007290:	460d      	mov	r5, r1
 8007292:	4640      	mov	r0, r8
 8007294:	4649      	mov	r1, r9
 8007296:	f7f8 ff9b 	bl	80001d0 <__aeabi_dsub>
 800729a:	9a03      	ldr	r2, [sp, #12]
 800729c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b31      	cmp	r3, #49	; 0x31
 80072a4:	dc24      	bgt.n	80072f0 <__ieee754_rem_pio2+0x288>
 80072a6:	e9ca 0100 	strd	r0, r1, [sl]
 80072aa:	4646      	mov	r6, r8
 80072ac:	464f      	mov	r7, r9
 80072ae:	e9da 8900 	ldrd	r8, r9, [sl]
 80072b2:	4630      	mov	r0, r6
 80072b4:	4642      	mov	r2, r8
 80072b6:	464b      	mov	r3, r9
 80072b8:	4639      	mov	r1, r7
 80072ba:	f7f8 ff89 	bl	80001d0 <__aeabi_dsub>
 80072be:	462b      	mov	r3, r5
 80072c0:	4622      	mov	r2, r4
 80072c2:	f7f8 ff85 	bl	80001d0 <__aeabi_dsub>
 80072c6:	9b02      	ldr	r3, [sp, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80072ce:	f6bf af0b 	bge.w	80070e8 <__ieee754_rem_pio2+0x80>
 80072d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80072d6:	f8ca 3004 	str.w	r3, [sl, #4]
 80072da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072de:	f8ca 8000 	str.w	r8, [sl]
 80072e2:	f8ca 0008 	str.w	r0, [sl, #8]
 80072e6:	f8ca 300c 	str.w	r3, [sl, #12]
 80072ea:	f1cb 0b00 	rsb	fp, fp, #0
 80072ee:	e6fb      	b.n	80070e8 <__ieee754_rem_pio2+0x80>
 80072f0:	a327      	add	r3, pc, #156	; (adr r3, 8007390 <__ieee754_rem_pio2+0x328>)
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	ec51 0b18 	vmov	r0, r1, d8
 80072fa:	f7f9 f921 	bl	8000540 <__aeabi_dmul>
 80072fe:	4604      	mov	r4, r0
 8007300:	460d      	mov	r5, r1
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4640      	mov	r0, r8
 8007308:	4649      	mov	r1, r9
 800730a:	f7f8 ff61 	bl	80001d0 <__aeabi_dsub>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4606      	mov	r6, r0
 8007314:	460f      	mov	r7, r1
 8007316:	4640      	mov	r0, r8
 8007318:	4649      	mov	r1, r9
 800731a:	f7f8 ff59 	bl	80001d0 <__aeabi_dsub>
 800731e:	4622      	mov	r2, r4
 8007320:	462b      	mov	r3, r5
 8007322:	f7f8 ff55 	bl	80001d0 <__aeabi_dsub>
 8007326:	a31c      	add	r3, pc, #112	; (adr r3, 8007398 <__ieee754_rem_pio2+0x330>)
 8007328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732c:	4604      	mov	r4, r0
 800732e:	460d      	mov	r5, r1
 8007330:	ec51 0b18 	vmov	r0, r1, d8
 8007334:	f7f9 f904 	bl	8000540 <__aeabi_dmul>
 8007338:	4622      	mov	r2, r4
 800733a:	462b      	mov	r3, r5
 800733c:	f7f8 ff48 	bl	80001d0 <__aeabi_dsub>
 8007340:	4604      	mov	r4, r0
 8007342:	460d      	mov	r5, r1
 8007344:	e760      	b.n	8007208 <__ieee754_rem_pio2+0x1a0>
 8007346:	4b1c      	ldr	r3, [pc, #112]	; (80073b8 <__ieee754_rem_pio2+0x350>)
 8007348:	4598      	cmp	r8, r3
 800734a:	dd37      	ble.n	80073bc <__ieee754_rem_pio2+0x354>
 800734c:	ee10 2a10 	vmov	r2, s0
 8007350:	462b      	mov	r3, r5
 8007352:	4620      	mov	r0, r4
 8007354:	4629      	mov	r1, r5
 8007356:	f7f8 ff3b 	bl	80001d0 <__aeabi_dsub>
 800735a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800735e:	e9ca 0100 	strd	r0, r1, [sl]
 8007362:	e695      	b.n	8007090 <__ieee754_rem_pio2+0x28>
 8007364:	f3af 8000 	nop.w
 8007368:	54400000 	.word	0x54400000
 800736c:	3ff921fb 	.word	0x3ff921fb
 8007370:	1a626331 	.word	0x1a626331
 8007374:	3dd0b461 	.word	0x3dd0b461
 8007378:	1a600000 	.word	0x1a600000
 800737c:	3dd0b461 	.word	0x3dd0b461
 8007380:	2e037073 	.word	0x2e037073
 8007384:	3ba3198a 	.word	0x3ba3198a
 8007388:	6dc9c883 	.word	0x6dc9c883
 800738c:	3fe45f30 	.word	0x3fe45f30
 8007390:	2e000000 	.word	0x2e000000
 8007394:	3ba3198a 	.word	0x3ba3198a
 8007398:	252049c1 	.word	0x252049c1
 800739c:	397b839a 	.word	0x397b839a
 80073a0:	3fe921fb 	.word	0x3fe921fb
 80073a4:	4002d97b 	.word	0x4002d97b
 80073a8:	3ff921fb 	.word	0x3ff921fb
 80073ac:	413921fb 	.word	0x413921fb
 80073b0:	3fe00000 	.word	0x3fe00000
 80073b4:	08007d60 	.word	0x08007d60
 80073b8:	7fefffff 	.word	0x7fefffff
 80073bc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80073c0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80073c4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80073c8:	4620      	mov	r0, r4
 80073ca:	460d      	mov	r5, r1
 80073cc:	f7f9 fb52 	bl	8000a74 <__aeabi_d2iz>
 80073d0:	f7f9 f84c 	bl	800046c <__aeabi_i2d>
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4620      	mov	r0, r4
 80073da:	4629      	mov	r1, r5
 80073dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073e0:	f7f8 fef6 	bl	80001d0 <__aeabi_dsub>
 80073e4:	4b21      	ldr	r3, [pc, #132]	; (800746c <__ieee754_rem_pio2+0x404>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	f7f9 f8aa 	bl	8000540 <__aeabi_dmul>
 80073ec:	460d      	mov	r5, r1
 80073ee:	4604      	mov	r4, r0
 80073f0:	f7f9 fb40 	bl	8000a74 <__aeabi_d2iz>
 80073f4:	f7f9 f83a 	bl	800046c <__aeabi_i2d>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4620      	mov	r0, r4
 80073fe:	4629      	mov	r1, r5
 8007400:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007404:	f7f8 fee4 	bl	80001d0 <__aeabi_dsub>
 8007408:	4b18      	ldr	r3, [pc, #96]	; (800746c <__ieee754_rem_pio2+0x404>)
 800740a:	2200      	movs	r2, #0
 800740c:	f7f9 f898 	bl	8000540 <__aeabi_dmul>
 8007410:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007414:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007418:	2703      	movs	r7, #3
 800741a:	2400      	movs	r4, #0
 800741c:	2500      	movs	r5, #0
 800741e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8007422:	4622      	mov	r2, r4
 8007424:	462b      	mov	r3, r5
 8007426:	46b9      	mov	r9, r7
 8007428:	3f01      	subs	r7, #1
 800742a:	f7f9 faf1 	bl	8000a10 <__aeabi_dcmpeq>
 800742e:	2800      	cmp	r0, #0
 8007430:	d1f5      	bne.n	800741e <__ieee754_rem_pio2+0x3b6>
 8007432:	4b0f      	ldr	r3, [pc, #60]	; (8007470 <__ieee754_rem_pio2+0x408>)
 8007434:	9301      	str	r3, [sp, #4]
 8007436:	2302      	movs	r3, #2
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	4632      	mov	r2, r6
 800743c:	464b      	mov	r3, r9
 800743e:	4651      	mov	r1, sl
 8007440:	a804      	add	r0, sp, #16
 8007442:	f000 f821 	bl	8007488 <__kernel_rem_pio2>
 8007446:	9b02      	ldr	r3, [sp, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	4683      	mov	fp, r0
 800744c:	f6bf ae4c 	bge.w	80070e8 <__ieee754_rem_pio2+0x80>
 8007450:	e9da 2100 	ldrd	r2, r1, [sl]
 8007454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007458:	e9ca 2300 	strd	r2, r3, [sl]
 800745c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007460:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007464:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007468:	e73f      	b.n	80072ea <__ieee754_rem_pio2+0x282>
 800746a:	bf00      	nop
 800746c:	41700000 	.word	0x41700000
 8007470:	08007de0 	.word	0x08007de0

08007474 <fabs>:
 8007474:	ec51 0b10 	vmov	r0, r1, d0
 8007478:	ee10 2a10 	vmov	r2, s0
 800747c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007480:	ec43 2b10 	vmov	d0, r2, r3
 8007484:	4770      	bx	lr
	...

08007488 <__kernel_rem_pio2>:
 8007488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748c:	ed2d 8b02 	vpush	{d8}
 8007490:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007494:	f112 0f14 	cmn.w	r2, #20
 8007498:	9306      	str	r3, [sp, #24]
 800749a:	9104      	str	r1, [sp, #16]
 800749c:	4bc2      	ldr	r3, [pc, #776]	; (80077a8 <__kernel_rem_pio2+0x320>)
 800749e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80074a0:	9009      	str	r0, [sp, #36]	; 0x24
 80074a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	9b06      	ldr	r3, [sp, #24]
 80074aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80074ae:	bfa8      	it	ge
 80074b0:	1ed4      	subge	r4, r2, #3
 80074b2:	9305      	str	r3, [sp, #20]
 80074b4:	bfb2      	itee	lt
 80074b6:	2400      	movlt	r4, #0
 80074b8:	2318      	movge	r3, #24
 80074ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80074be:	f06f 0317 	mvn.w	r3, #23
 80074c2:	fb04 3303 	mla	r3, r4, r3, r3
 80074c6:	eb03 0a02 	add.w	sl, r3, r2
 80074ca:	9b00      	ldr	r3, [sp, #0]
 80074cc:	9a05      	ldr	r2, [sp, #20]
 80074ce:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8007798 <__kernel_rem_pio2+0x310>
 80074d2:	eb03 0802 	add.w	r8, r3, r2
 80074d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80074d8:	1aa7      	subs	r7, r4, r2
 80074da:	ae20      	add	r6, sp, #128	; 0x80
 80074dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80074e0:	2500      	movs	r5, #0
 80074e2:	4545      	cmp	r5, r8
 80074e4:	dd13      	ble.n	800750e <__kernel_rem_pio2+0x86>
 80074e6:	9b06      	ldr	r3, [sp, #24]
 80074e8:	aa20      	add	r2, sp, #128	; 0x80
 80074ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80074ee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80074f2:	f04f 0800 	mov.w	r8, #0
 80074f6:	9b00      	ldr	r3, [sp, #0]
 80074f8:	4598      	cmp	r8, r3
 80074fa:	dc31      	bgt.n	8007560 <__kernel_rem_pio2+0xd8>
 80074fc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8007798 <__kernel_rem_pio2+0x310>
 8007500:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007504:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007508:	462f      	mov	r7, r5
 800750a:	2600      	movs	r6, #0
 800750c:	e01b      	b.n	8007546 <__kernel_rem_pio2+0xbe>
 800750e:	42ef      	cmn	r7, r5
 8007510:	d407      	bmi.n	8007522 <__kernel_rem_pio2+0x9a>
 8007512:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007516:	f7f8 ffa9 	bl	800046c <__aeabi_i2d>
 800751a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800751e:	3501      	adds	r5, #1
 8007520:	e7df      	b.n	80074e2 <__kernel_rem_pio2+0x5a>
 8007522:	ec51 0b18 	vmov	r0, r1, d8
 8007526:	e7f8      	b.n	800751a <__kernel_rem_pio2+0x92>
 8007528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800752c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007530:	f7f9 f806 	bl	8000540 <__aeabi_dmul>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800753c:	f7f8 fe4a 	bl	80001d4 <__adddf3>
 8007540:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007544:	3601      	adds	r6, #1
 8007546:	9b05      	ldr	r3, [sp, #20]
 8007548:	429e      	cmp	r6, r3
 800754a:	f1a7 0708 	sub.w	r7, r7, #8
 800754e:	ddeb      	ble.n	8007528 <__kernel_rem_pio2+0xa0>
 8007550:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007554:	f108 0801 	add.w	r8, r8, #1
 8007558:	ecab 7b02 	vstmia	fp!, {d7}
 800755c:	3508      	adds	r5, #8
 800755e:	e7ca      	b.n	80074f6 <__kernel_rem_pio2+0x6e>
 8007560:	9b00      	ldr	r3, [sp, #0]
 8007562:	aa0c      	add	r2, sp, #48	; 0x30
 8007564:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007568:	930b      	str	r3, [sp, #44]	; 0x2c
 800756a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800756c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007570:	9c00      	ldr	r4, [sp, #0]
 8007572:	930a      	str	r3, [sp, #40]	; 0x28
 8007574:	00e3      	lsls	r3, r4, #3
 8007576:	9308      	str	r3, [sp, #32]
 8007578:	ab98      	add	r3, sp, #608	; 0x260
 800757a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800757e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007582:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8007586:	ab70      	add	r3, sp, #448	; 0x1c0
 8007588:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800758c:	46c3      	mov	fp, r8
 800758e:	46a1      	mov	r9, r4
 8007590:	f1b9 0f00 	cmp.w	r9, #0
 8007594:	f1a5 0508 	sub.w	r5, r5, #8
 8007598:	dc77      	bgt.n	800768a <__kernel_rem_pio2+0x202>
 800759a:	ec47 6b10 	vmov	d0, r6, r7
 800759e:	4650      	mov	r0, sl
 80075a0:	f000 fac2 	bl	8007b28 <scalbn>
 80075a4:	ec57 6b10 	vmov	r6, r7, d0
 80075a8:	2200      	movs	r2, #0
 80075aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80075ae:	ee10 0a10 	vmov	r0, s0
 80075b2:	4639      	mov	r1, r7
 80075b4:	f7f8 ffc4 	bl	8000540 <__aeabi_dmul>
 80075b8:	ec41 0b10 	vmov	d0, r0, r1
 80075bc:	f000 fb34 	bl	8007c28 <floor>
 80075c0:	4b7a      	ldr	r3, [pc, #488]	; (80077ac <__kernel_rem_pio2+0x324>)
 80075c2:	ec51 0b10 	vmov	r0, r1, d0
 80075c6:	2200      	movs	r2, #0
 80075c8:	f7f8 ffba 	bl	8000540 <__aeabi_dmul>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4630      	mov	r0, r6
 80075d2:	4639      	mov	r1, r7
 80075d4:	f7f8 fdfc 	bl	80001d0 <__aeabi_dsub>
 80075d8:	460f      	mov	r7, r1
 80075da:	4606      	mov	r6, r0
 80075dc:	f7f9 fa4a 	bl	8000a74 <__aeabi_d2iz>
 80075e0:	9002      	str	r0, [sp, #8]
 80075e2:	f7f8 ff43 	bl	800046c <__aeabi_i2d>
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	4630      	mov	r0, r6
 80075ec:	4639      	mov	r1, r7
 80075ee:	f7f8 fdef 	bl	80001d0 <__aeabi_dsub>
 80075f2:	f1ba 0f00 	cmp.w	sl, #0
 80075f6:	4606      	mov	r6, r0
 80075f8:	460f      	mov	r7, r1
 80075fa:	dd6d      	ble.n	80076d8 <__kernel_rem_pio2+0x250>
 80075fc:	1e61      	subs	r1, r4, #1
 80075fe:	ab0c      	add	r3, sp, #48	; 0x30
 8007600:	9d02      	ldr	r5, [sp, #8]
 8007602:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007606:	f1ca 0018 	rsb	r0, sl, #24
 800760a:	fa43 f200 	asr.w	r2, r3, r0
 800760e:	4415      	add	r5, r2
 8007610:	4082      	lsls	r2, r0
 8007612:	1a9b      	subs	r3, r3, r2
 8007614:	aa0c      	add	r2, sp, #48	; 0x30
 8007616:	9502      	str	r5, [sp, #8]
 8007618:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800761c:	f1ca 0217 	rsb	r2, sl, #23
 8007620:	fa43 fb02 	asr.w	fp, r3, r2
 8007624:	f1bb 0f00 	cmp.w	fp, #0
 8007628:	dd65      	ble.n	80076f6 <__kernel_rem_pio2+0x26e>
 800762a:	9b02      	ldr	r3, [sp, #8]
 800762c:	2200      	movs	r2, #0
 800762e:	3301      	adds	r3, #1
 8007630:	9302      	str	r3, [sp, #8]
 8007632:	4615      	mov	r5, r2
 8007634:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007638:	4294      	cmp	r4, r2
 800763a:	f300 809f 	bgt.w	800777c <__kernel_rem_pio2+0x2f4>
 800763e:	f1ba 0f00 	cmp.w	sl, #0
 8007642:	dd07      	ble.n	8007654 <__kernel_rem_pio2+0x1cc>
 8007644:	f1ba 0f01 	cmp.w	sl, #1
 8007648:	f000 80c1 	beq.w	80077ce <__kernel_rem_pio2+0x346>
 800764c:	f1ba 0f02 	cmp.w	sl, #2
 8007650:	f000 80c7 	beq.w	80077e2 <__kernel_rem_pio2+0x35a>
 8007654:	f1bb 0f02 	cmp.w	fp, #2
 8007658:	d14d      	bne.n	80076f6 <__kernel_rem_pio2+0x26e>
 800765a:	4632      	mov	r2, r6
 800765c:	463b      	mov	r3, r7
 800765e:	4954      	ldr	r1, [pc, #336]	; (80077b0 <__kernel_rem_pio2+0x328>)
 8007660:	2000      	movs	r0, #0
 8007662:	f7f8 fdb5 	bl	80001d0 <__aeabi_dsub>
 8007666:	4606      	mov	r6, r0
 8007668:	460f      	mov	r7, r1
 800766a:	2d00      	cmp	r5, #0
 800766c:	d043      	beq.n	80076f6 <__kernel_rem_pio2+0x26e>
 800766e:	4650      	mov	r0, sl
 8007670:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80077a0 <__kernel_rem_pio2+0x318>
 8007674:	f000 fa58 	bl	8007b28 <scalbn>
 8007678:	4630      	mov	r0, r6
 800767a:	4639      	mov	r1, r7
 800767c:	ec53 2b10 	vmov	r2, r3, d0
 8007680:	f7f8 fda6 	bl	80001d0 <__aeabi_dsub>
 8007684:	4606      	mov	r6, r0
 8007686:	460f      	mov	r7, r1
 8007688:	e035      	b.n	80076f6 <__kernel_rem_pio2+0x26e>
 800768a:	4b4a      	ldr	r3, [pc, #296]	; (80077b4 <__kernel_rem_pio2+0x32c>)
 800768c:	2200      	movs	r2, #0
 800768e:	4630      	mov	r0, r6
 8007690:	4639      	mov	r1, r7
 8007692:	f7f8 ff55 	bl	8000540 <__aeabi_dmul>
 8007696:	f7f9 f9ed 	bl	8000a74 <__aeabi_d2iz>
 800769a:	f7f8 fee7 	bl	800046c <__aeabi_i2d>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	ec43 2b18 	vmov	d8, r2, r3
 80076a6:	4b44      	ldr	r3, [pc, #272]	; (80077b8 <__kernel_rem_pio2+0x330>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	f7f8 ff49 	bl	8000540 <__aeabi_dmul>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	4630      	mov	r0, r6
 80076b4:	4639      	mov	r1, r7
 80076b6:	f7f8 fd8b 	bl	80001d0 <__aeabi_dsub>
 80076ba:	f7f9 f9db 	bl	8000a74 <__aeabi_d2iz>
 80076be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076c2:	f84b 0b04 	str.w	r0, [fp], #4
 80076c6:	ec51 0b18 	vmov	r0, r1, d8
 80076ca:	f7f8 fd83 	bl	80001d4 <__adddf3>
 80076ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80076d2:	4606      	mov	r6, r0
 80076d4:	460f      	mov	r7, r1
 80076d6:	e75b      	b.n	8007590 <__kernel_rem_pio2+0x108>
 80076d8:	d106      	bne.n	80076e8 <__kernel_rem_pio2+0x260>
 80076da:	1e63      	subs	r3, r4, #1
 80076dc:	aa0c      	add	r2, sp, #48	; 0x30
 80076de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076e2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80076e6:	e79d      	b.n	8007624 <__kernel_rem_pio2+0x19c>
 80076e8:	4b34      	ldr	r3, [pc, #208]	; (80077bc <__kernel_rem_pio2+0x334>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	f7f9 f9ae 	bl	8000a4c <__aeabi_dcmpge>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d140      	bne.n	8007776 <__kernel_rem_pio2+0x2ee>
 80076f4:	4683      	mov	fp, r0
 80076f6:	2200      	movs	r2, #0
 80076f8:	2300      	movs	r3, #0
 80076fa:	4630      	mov	r0, r6
 80076fc:	4639      	mov	r1, r7
 80076fe:	f7f9 f987 	bl	8000a10 <__aeabi_dcmpeq>
 8007702:	2800      	cmp	r0, #0
 8007704:	f000 80c1 	beq.w	800788a <__kernel_rem_pio2+0x402>
 8007708:	1e65      	subs	r5, r4, #1
 800770a:	462b      	mov	r3, r5
 800770c:	2200      	movs	r2, #0
 800770e:	9900      	ldr	r1, [sp, #0]
 8007710:	428b      	cmp	r3, r1
 8007712:	da6d      	bge.n	80077f0 <__kernel_rem_pio2+0x368>
 8007714:	2a00      	cmp	r2, #0
 8007716:	f000 808a 	beq.w	800782e <__kernel_rem_pio2+0x3a6>
 800771a:	ab0c      	add	r3, sp, #48	; 0x30
 800771c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007720:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 80ae 	beq.w	8007886 <__kernel_rem_pio2+0x3fe>
 800772a:	4650      	mov	r0, sl
 800772c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80077a0 <__kernel_rem_pio2+0x318>
 8007730:	f000 f9fa 	bl	8007b28 <scalbn>
 8007734:	1c6b      	adds	r3, r5, #1
 8007736:	00da      	lsls	r2, r3, #3
 8007738:	9205      	str	r2, [sp, #20]
 800773a:	ec57 6b10 	vmov	r6, r7, d0
 800773e:	aa70      	add	r2, sp, #448	; 0x1c0
 8007740:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80077b4 <__kernel_rem_pio2+0x32c>
 8007744:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8007748:	462c      	mov	r4, r5
 800774a:	f04f 0800 	mov.w	r8, #0
 800774e:	2c00      	cmp	r4, #0
 8007750:	f280 80d4 	bge.w	80078fc <__kernel_rem_pio2+0x474>
 8007754:	462c      	mov	r4, r5
 8007756:	2c00      	cmp	r4, #0
 8007758:	f2c0 8102 	blt.w	8007960 <__kernel_rem_pio2+0x4d8>
 800775c:	4b18      	ldr	r3, [pc, #96]	; (80077c0 <__kernel_rem_pio2+0x338>)
 800775e:	461e      	mov	r6, r3
 8007760:	ab70      	add	r3, sp, #448	; 0x1c0
 8007762:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8007766:	1b2b      	subs	r3, r5, r4
 8007768:	f04f 0900 	mov.w	r9, #0
 800776c:	f04f 0a00 	mov.w	sl, #0
 8007770:	2700      	movs	r7, #0
 8007772:	9306      	str	r3, [sp, #24]
 8007774:	e0e6      	b.n	8007944 <__kernel_rem_pio2+0x4bc>
 8007776:	f04f 0b02 	mov.w	fp, #2
 800777a:	e756      	b.n	800762a <__kernel_rem_pio2+0x1a2>
 800777c:	f8d8 3000 	ldr.w	r3, [r8]
 8007780:	bb05      	cbnz	r5, 80077c4 <__kernel_rem_pio2+0x33c>
 8007782:	b123      	cbz	r3, 800778e <__kernel_rem_pio2+0x306>
 8007784:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007788:	f8c8 3000 	str.w	r3, [r8]
 800778c:	2301      	movs	r3, #1
 800778e:	3201      	adds	r2, #1
 8007790:	f108 0804 	add.w	r8, r8, #4
 8007794:	461d      	mov	r5, r3
 8007796:	e74f      	b.n	8007638 <__kernel_rem_pio2+0x1b0>
	...
 80077a4:	3ff00000 	.word	0x3ff00000
 80077a8:	08007f28 	.word	0x08007f28
 80077ac:	40200000 	.word	0x40200000
 80077b0:	3ff00000 	.word	0x3ff00000
 80077b4:	3e700000 	.word	0x3e700000
 80077b8:	41700000 	.word	0x41700000
 80077bc:	3fe00000 	.word	0x3fe00000
 80077c0:	08007ee8 	.word	0x08007ee8
 80077c4:	1acb      	subs	r3, r1, r3
 80077c6:	f8c8 3000 	str.w	r3, [r8]
 80077ca:	462b      	mov	r3, r5
 80077cc:	e7df      	b.n	800778e <__kernel_rem_pio2+0x306>
 80077ce:	1e62      	subs	r2, r4, #1
 80077d0:	ab0c      	add	r3, sp, #48	; 0x30
 80077d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80077da:	a90c      	add	r1, sp, #48	; 0x30
 80077dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80077e0:	e738      	b.n	8007654 <__kernel_rem_pio2+0x1cc>
 80077e2:	1e62      	subs	r2, r4, #1
 80077e4:	ab0c      	add	r3, sp, #48	; 0x30
 80077e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80077ee:	e7f4      	b.n	80077da <__kernel_rem_pio2+0x352>
 80077f0:	a90c      	add	r1, sp, #48	; 0x30
 80077f2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	430a      	orrs	r2, r1
 80077fa:	e788      	b.n	800770e <__kernel_rem_pio2+0x286>
 80077fc:	3301      	adds	r3, #1
 80077fe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007802:	2900      	cmp	r1, #0
 8007804:	d0fa      	beq.n	80077fc <__kernel_rem_pio2+0x374>
 8007806:	9a08      	ldr	r2, [sp, #32]
 8007808:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800780c:	446a      	add	r2, sp
 800780e:	3a98      	subs	r2, #152	; 0x98
 8007810:	9208      	str	r2, [sp, #32]
 8007812:	9a06      	ldr	r2, [sp, #24]
 8007814:	a920      	add	r1, sp, #128	; 0x80
 8007816:	18a2      	adds	r2, r4, r2
 8007818:	18e3      	adds	r3, r4, r3
 800781a:	f104 0801 	add.w	r8, r4, #1
 800781e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8007822:	9302      	str	r3, [sp, #8]
 8007824:	9b02      	ldr	r3, [sp, #8]
 8007826:	4543      	cmp	r3, r8
 8007828:	da04      	bge.n	8007834 <__kernel_rem_pio2+0x3ac>
 800782a:	461c      	mov	r4, r3
 800782c:	e6a2      	b.n	8007574 <__kernel_rem_pio2+0xec>
 800782e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007830:	2301      	movs	r3, #1
 8007832:	e7e4      	b.n	80077fe <__kernel_rem_pio2+0x376>
 8007834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007836:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800783a:	f7f8 fe17 	bl	800046c <__aeabi_i2d>
 800783e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007844:	46ab      	mov	fp, r5
 8007846:	461c      	mov	r4, r3
 8007848:	f04f 0900 	mov.w	r9, #0
 800784c:	2600      	movs	r6, #0
 800784e:	2700      	movs	r7, #0
 8007850:	9b05      	ldr	r3, [sp, #20]
 8007852:	4599      	cmp	r9, r3
 8007854:	dd06      	ble.n	8007864 <__kernel_rem_pio2+0x3dc>
 8007856:	9b08      	ldr	r3, [sp, #32]
 8007858:	e8e3 6702 	strd	r6, r7, [r3], #8
 800785c:	f108 0801 	add.w	r8, r8, #1
 8007860:	9308      	str	r3, [sp, #32]
 8007862:	e7df      	b.n	8007824 <__kernel_rem_pio2+0x39c>
 8007864:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007868:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800786c:	f7f8 fe68 	bl	8000540 <__aeabi_dmul>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4630      	mov	r0, r6
 8007876:	4639      	mov	r1, r7
 8007878:	f7f8 fcac 	bl	80001d4 <__adddf3>
 800787c:	f109 0901 	add.w	r9, r9, #1
 8007880:	4606      	mov	r6, r0
 8007882:	460f      	mov	r7, r1
 8007884:	e7e4      	b.n	8007850 <__kernel_rem_pio2+0x3c8>
 8007886:	3d01      	subs	r5, #1
 8007888:	e747      	b.n	800771a <__kernel_rem_pio2+0x292>
 800788a:	ec47 6b10 	vmov	d0, r6, r7
 800788e:	f1ca 0000 	rsb	r0, sl, #0
 8007892:	f000 f949 	bl	8007b28 <scalbn>
 8007896:	ec57 6b10 	vmov	r6, r7, d0
 800789a:	4ba0      	ldr	r3, [pc, #640]	; (8007b1c <__kernel_rem_pio2+0x694>)
 800789c:	ee10 0a10 	vmov	r0, s0
 80078a0:	2200      	movs	r2, #0
 80078a2:	4639      	mov	r1, r7
 80078a4:	f7f9 f8d2 	bl	8000a4c <__aeabi_dcmpge>
 80078a8:	b1f8      	cbz	r0, 80078ea <__kernel_rem_pio2+0x462>
 80078aa:	4b9d      	ldr	r3, [pc, #628]	; (8007b20 <__kernel_rem_pio2+0x698>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	4630      	mov	r0, r6
 80078b0:	4639      	mov	r1, r7
 80078b2:	f7f8 fe45 	bl	8000540 <__aeabi_dmul>
 80078b6:	f7f9 f8dd 	bl	8000a74 <__aeabi_d2iz>
 80078ba:	4680      	mov	r8, r0
 80078bc:	f7f8 fdd6 	bl	800046c <__aeabi_i2d>
 80078c0:	4b96      	ldr	r3, [pc, #600]	; (8007b1c <__kernel_rem_pio2+0x694>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	f7f8 fe3c 	bl	8000540 <__aeabi_dmul>
 80078c8:	460b      	mov	r3, r1
 80078ca:	4602      	mov	r2, r0
 80078cc:	4639      	mov	r1, r7
 80078ce:	4630      	mov	r0, r6
 80078d0:	f7f8 fc7e 	bl	80001d0 <__aeabi_dsub>
 80078d4:	f7f9 f8ce 	bl	8000a74 <__aeabi_d2iz>
 80078d8:	1c65      	adds	r5, r4, #1
 80078da:	ab0c      	add	r3, sp, #48	; 0x30
 80078dc:	f10a 0a18 	add.w	sl, sl, #24
 80078e0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80078e4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80078e8:	e71f      	b.n	800772a <__kernel_rem_pio2+0x2a2>
 80078ea:	4630      	mov	r0, r6
 80078ec:	4639      	mov	r1, r7
 80078ee:	f7f9 f8c1 	bl	8000a74 <__aeabi_d2iz>
 80078f2:	ab0c      	add	r3, sp, #48	; 0x30
 80078f4:	4625      	mov	r5, r4
 80078f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80078fa:	e716      	b.n	800772a <__kernel_rem_pio2+0x2a2>
 80078fc:	ab0c      	add	r3, sp, #48	; 0x30
 80078fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007902:	f7f8 fdb3 	bl	800046c <__aeabi_i2d>
 8007906:	4632      	mov	r2, r6
 8007908:	463b      	mov	r3, r7
 800790a:	f7f8 fe19 	bl	8000540 <__aeabi_dmul>
 800790e:	4642      	mov	r2, r8
 8007910:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007914:	464b      	mov	r3, r9
 8007916:	4630      	mov	r0, r6
 8007918:	4639      	mov	r1, r7
 800791a:	f7f8 fe11 	bl	8000540 <__aeabi_dmul>
 800791e:	3c01      	subs	r4, #1
 8007920:	4606      	mov	r6, r0
 8007922:	460f      	mov	r7, r1
 8007924:	e713      	b.n	800774e <__kernel_rem_pio2+0x2c6>
 8007926:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800792a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800792e:	f7f8 fe07 	bl	8000540 <__aeabi_dmul>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4648      	mov	r0, r9
 8007938:	4651      	mov	r1, sl
 800793a:	f7f8 fc4b 	bl	80001d4 <__adddf3>
 800793e:	3701      	adds	r7, #1
 8007940:	4681      	mov	r9, r0
 8007942:	468a      	mov	sl, r1
 8007944:	9b00      	ldr	r3, [sp, #0]
 8007946:	429f      	cmp	r7, r3
 8007948:	dc02      	bgt.n	8007950 <__kernel_rem_pio2+0x4c8>
 800794a:	9b06      	ldr	r3, [sp, #24]
 800794c:	429f      	cmp	r7, r3
 800794e:	ddea      	ble.n	8007926 <__kernel_rem_pio2+0x49e>
 8007950:	9a06      	ldr	r2, [sp, #24]
 8007952:	ab48      	add	r3, sp, #288	; 0x120
 8007954:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8007958:	e9c6 9a00 	strd	r9, sl, [r6]
 800795c:	3c01      	subs	r4, #1
 800795e:	e6fa      	b.n	8007756 <__kernel_rem_pio2+0x2ce>
 8007960:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007962:	2b02      	cmp	r3, #2
 8007964:	dc0b      	bgt.n	800797e <__kernel_rem_pio2+0x4f6>
 8007966:	2b00      	cmp	r3, #0
 8007968:	dc39      	bgt.n	80079de <__kernel_rem_pio2+0x556>
 800796a:	d05d      	beq.n	8007a28 <__kernel_rem_pio2+0x5a0>
 800796c:	9b02      	ldr	r3, [sp, #8]
 800796e:	f003 0007 	and.w	r0, r3, #7
 8007972:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007976:	ecbd 8b02 	vpop	{d8}
 800797a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007980:	2b03      	cmp	r3, #3
 8007982:	d1f3      	bne.n	800796c <__kernel_rem_pio2+0x4e4>
 8007984:	9b05      	ldr	r3, [sp, #20]
 8007986:	9500      	str	r5, [sp, #0]
 8007988:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800798c:	eb0d 0403 	add.w	r4, sp, r3
 8007990:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8007994:	46a2      	mov	sl, r4
 8007996:	9b00      	ldr	r3, [sp, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f1aa 0a08 	sub.w	sl, sl, #8
 800799e:	dc69      	bgt.n	8007a74 <__kernel_rem_pio2+0x5ec>
 80079a0:	46aa      	mov	sl, r5
 80079a2:	f1ba 0f01 	cmp.w	sl, #1
 80079a6:	f1a4 0408 	sub.w	r4, r4, #8
 80079aa:	f300 8083 	bgt.w	8007ab4 <__kernel_rem_pio2+0x62c>
 80079ae:	9c05      	ldr	r4, [sp, #20]
 80079b0:	ab48      	add	r3, sp, #288	; 0x120
 80079b2:	441c      	add	r4, r3
 80079b4:	2000      	movs	r0, #0
 80079b6:	2100      	movs	r1, #0
 80079b8:	2d01      	cmp	r5, #1
 80079ba:	f300 809a 	bgt.w	8007af2 <__kernel_rem_pio2+0x66a>
 80079be:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80079c2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80079c6:	f1bb 0f00 	cmp.w	fp, #0
 80079ca:	f040 8098 	bne.w	8007afe <__kernel_rem_pio2+0x676>
 80079ce:	9b04      	ldr	r3, [sp, #16]
 80079d0:	e9c3 7800 	strd	r7, r8, [r3]
 80079d4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80079d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80079dc:	e7c6      	b.n	800796c <__kernel_rem_pio2+0x4e4>
 80079de:	9e05      	ldr	r6, [sp, #20]
 80079e0:	ab48      	add	r3, sp, #288	; 0x120
 80079e2:	441e      	add	r6, r3
 80079e4:	462c      	mov	r4, r5
 80079e6:	2000      	movs	r0, #0
 80079e8:	2100      	movs	r1, #0
 80079ea:	2c00      	cmp	r4, #0
 80079ec:	da33      	bge.n	8007a56 <__kernel_rem_pio2+0x5ce>
 80079ee:	f1bb 0f00 	cmp.w	fp, #0
 80079f2:	d036      	beq.n	8007a62 <__kernel_rem_pio2+0x5da>
 80079f4:	4602      	mov	r2, r0
 80079f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079fa:	9c04      	ldr	r4, [sp, #16]
 80079fc:	e9c4 2300 	strd	r2, r3, [r4]
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007a08:	f7f8 fbe2 	bl	80001d0 <__aeabi_dsub>
 8007a0c:	ae4a      	add	r6, sp, #296	; 0x128
 8007a0e:	2401      	movs	r4, #1
 8007a10:	42a5      	cmp	r5, r4
 8007a12:	da29      	bge.n	8007a68 <__kernel_rem_pio2+0x5e0>
 8007a14:	f1bb 0f00 	cmp.w	fp, #0
 8007a18:	d002      	beq.n	8007a20 <__kernel_rem_pio2+0x598>
 8007a1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a1e:	4619      	mov	r1, r3
 8007a20:	9b04      	ldr	r3, [sp, #16]
 8007a22:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007a26:	e7a1      	b.n	800796c <__kernel_rem_pio2+0x4e4>
 8007a28:	9c05      	ldr	r4, [sp, #20]
 8007a2a:	ab48      	add	r3, sp, #288	; 0x120
 8007a2c:	441c      	add	r4, r3
 8007a2e:	2000      	movs	r0, #0
 8007a30:	2100      	movs	r1, #0
 8007a32:	2d00      	cmp	r5, #0
 8007a34:	da09      	bge.n	8007a4a <__kernel_rem_pio2+0x5c2>
 8007a36:	f1bb 0f00 	cmp.w	fp, #0
 8007a3a:	d002      	beq.n	8007a42 <__kernel_rem_pio2+0x5ba>
 8007a3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a40:	4619      	mov	r1, r3
 8007a42:	9b04      	ldr	r3, [sp, #16]
 8007a44:	e9c3 0100 	strd	r0, r1, [r3]
 8007a48:	e790      	b.n	800796c <__kernel_rem_pio2+0x4e4>
 8007a4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007a4e:	f7f8 fbc1 	bl	80001d4 <__adddf3>
 8007a52:	3d01      	subs	r5, #1
 8007a54:	e7ed      	b.n	8007a32 <__kernel_rem_pio2+0x5aa>
 8007a56:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007a5a:	f7f8 fbbb 	bl	80001d4 <__adddf3>
 8007a5e:	3c01      	subs	r4, #1
 8007a60:	e7c3      	b.n	80079ea <__kernel_rem_pio2+0x562>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	e7c8      	b.n	80079fa <__kernel_rem_pio2+0x572>
 8007a68:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007a6c:	f7f8 fbb2 	bl	80001d4 <__adddf3>
 8007a70:	3401      	adds	r4, #1
 8007a72:	e7cd      	b.n	8007a10 <__kernel_rem_pio2+0x588>
 8007a74:	e9da 8900 	ldrd	r8, r9, [sl]
 8007a78:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007a7c:	9b00      	ldr	r3, [sp, #0]
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	4632      	mov	r2, r6
 8007a84:	463b      	mov	r3, r7
 8007a86:	4640      	mov	r0, r8
 8007a88:	4649      	mov	r1, r9
 8007a8a:	f7f8 fba3 	bl	80001d4 <__adddf3>
 8007a8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4640      	mov	r0, r8
 8007a98:	4649      	mov	r1, r9
 8007a9a:	f7f8 fb99 	bl	80001d0 <__aeabi_dsub>
 8007a9e:	4632      	mov	r2, r6
 8007aa0:	463b      	mov	r3, r7
 8007aa2:	f7f8 fb97 	bl	80001d4 <__adddf3>
 8007aa6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007aaa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007aae:	ed8a 7b00 	vstr	d7, [sl]
 8007ab2:	e770      	b.n	8007996 <__kernel_rem_pio2+0x50e>
 8007ab4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007ab8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007abc:	4640      	mov	r0, r8
 8007abe:	4632      	mov	r2, r6
 8007ac0:	463b      	mov	r3, r7
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	f7f8 fb86 	bl	80001d4 <__adddf3>
 8007ac8:	e9cd 0100 	strd	r0, r1, [sp]
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4640      	mov	r0, r8
 8007ad2:	4649      	mov	r1, r9
 8007ad4:	f7f8 fb7c 	bl	80001d0 <__aeabi_dsub>
 8007ad8:	4632      	mov	r2, r6
 8007ada:	463b      	mov	r3, r7
 8007adc:	f7f8 fb7a 	bl	80001d4 <__adddf3>
 8007ae0:	ed9d 7b00 	vldr	d7, [sp]
 8007ae4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007ae8:	ed84 7b00 	vstr	d7, [r4]
 8007aec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007af0:	e757      	b.n	80079a2 <__kernel_rem_pio2+0x51a>
 8007af2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007af6:	f7f8 fb6d 	bl	80001d4 <__adddf3>
 8007afa:	3d01      	subs	r5, #1
 8007afc:	e75c      	b.n	80079b8 <__kernel_rem_pio2+0x530>
 8007afe:	9b04      	ldr	r3, [sp, #16]
 8007b00:	9a04      	ldr	r2, [sp, #16]
 8007b02:	601f      	str	r7, [r3, #0]
 8007b04:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007b08:	605c      	str	r4, [r3, #4]
 8007b0a:	609d      	str	r5, [r3, #8]
 8007b0c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007b10:	60d3      	str	r3, [r2, #12]
 8007b12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b16:	6110      	str	r0, [r2, #16]
 8007b18:	6153      	str	r3, [r2, #20]
 8007b1a:	e727      	b.n	800796c <__kernel_rem_pio2+0x4e4>
 8007b1c:	41700000 	.word	0x41700000
 8007b20:	3e700000 	.word	0x3e700000
 8007b24:	00000000 	.word	0x00000000

08007b28 <scalbn>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	ec55 4b10 	vmov	r4, r5, d0
 8007b2e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007b32:	4606      	mov	r6, r0
 8007b34:	462b      	mov	r3, r5
 8007b36:	b999      	cbnz	r1, 8007b60 <scalbn+0x38>
 8007b38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007b3c:	4323      	orrs	r3, r4
 8007b3e:	d03f      	beq.n	8007bc0 <scalbn+0x98>
 8007b40:	4b35      	ldr	r3, [pc, #212]	; (8007c18 <scalbn+0xf0>)
 8007b42:	4629      	mov	r1, r5
 8007b44:	ee10 0a10 	vmov	r0, s0
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f7f8 fcf9 	bl	8000540 <__aeabi_dmul>
 8007b4e:	4b33      	ldr	r3, [pc, #204]	; (8007c1c <scalbn+0xf4>)
 8007b50:	429e      	cmp	r6, r3
 8007b52:	4604      	mov	r4, r0
 8007b54:	460d      	mov	r5, r1
 8007b56:	da10      	bge.n	8007b7a <scalbn+0x52>
 8007b58:	a327      	add	r3, pc, #156	; (adr r3, 8007bf8 <scalbn+0xd0>)
 8007b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5e:	e01f      	b.n	8007ba0 <scalbn+0x78>
 8007b60:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007b64:	4291      	cmp	r1, r2
 8007b66:	d10c      	bne.n	8007b82 <scalbn+0x5a>
 8007b68:	ee10 2a10 	vmov	r2, s0
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	4629      	mov	r1, r5
 8007b70:	f7f8 fb30 	bl	80001d4 <__adddf3>
 8007b74:	4604      	mov	r4, r0
 8007b76:	460d      	mov	r5, r1
 8007b78:	e022      	b.n	8007bc0 <scalbn+0x98>
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007b80:	3936      	subs	r1, #54	; 0x36
 8007b82:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007b86:	4296      	cmp	r6, r2
 8007b88:	dd0d      	ble.n	8007ba6 <scalbn+0x7e>
 8007b8a:	2d00      	cmp	r5, #0
 8007b8c:	a11c      	add	r1, pc, #112	; (adr r1, 8007c00 <scalbn+0xd8>)
 8007b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b92:	da02      	bge.n	8007b9a <scalbn+0x72>
 8007b94:	a11c      	add	r1, pc, #112	; (adr r1, 8007c08 <scalbn+0xe0>)
 8007b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b9a:	a319      	add	r3, pc, #100	; (adr r3, 8007c00 <scalbn+0xd8>)
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	f7f8 fcce 	bl	8000540 <__aeabi_dmul>
 8007ba4:	e7e6      	b.n	8007b74 <scalbn+0x4c>
 8007ba6:	1872      	adds	r2, r6, r1
 8007ba8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007bac:	428a      	cmp	r2, r1
 8007bae:	dcec      	bgt.n	8007b8a <scalbn+0x62>
 8007bb0:	2a00      	cmp	r2, #0
 8007bb2:	dd08      	ble.n	8007bc6 <scalbn+0x9e>
 8007bb4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007bb8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007bbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007bc0:	ec45 4b10 	vmov	d0, r4, r5
 8007bc4:	bd70      	pop	{r4, r5, r6, pc}
 8007bc6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007bca:	da08      	bge.n	8007bde <scalbn+0xb6>
 8007bcc:	2d00      	cmp	r5, #0
 8007bce:	a10a      	add	r1, pc, #40	; (adr r1, 8007bf8 <scalbn+0xd0>)
 8007bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bd4:	dac0      	bge.n	8007b58 <scalbn+0x30>
 8007bd6:	a10e      	add	r1, pc, #56	; (adr r1, 8007c10 <scalbn+0xe8>)
 8007bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bdc:	e7bc      	b.n	8007b58 <scalbn+0x30>
 8007bde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007be2:	3236      	adds	r2, #54	; 0x36
 8007be4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007be8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007bec:	4620      	mov	r0, r4
 8007bee:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <scalbn+0xf8>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	e7d5      	b.n	8007ba0 <scalbn+0x78>
 8007bf4:	f3af 8000 	nop.w
 8007bf8:	c2f8f359 	.word	0xc2f8f359
 8007bfc:	01a56e1f 	.word	0x01a56e1f
 8007c00:	8800759c 	.word	0x8800759c
 8007c04:	7e37e43c 	.word	0x7e37e43c
 8007c08:	8800759c 	.word	0x8800759c
 8007c0c:	fe37e43c 	.word	0xfe37e43c
 8007c10:	c2f8f359 	.word	0xc2f8f359
 8007c14:	81a56e1f 	.word	0x81a56e1f
 8007c18:	43500000 	.word	0x43500000
 8007c1c:	ffff3cb0 	.word	0xffff3cb0
 8007c20:	3c900000 	.word	0x3c900000
 8007c24:	00000000 	.word	0x00000000

08007c28 <floor>:
 8007c28:	ec51 0b10 	vmov	r0, r1, d0
 8007c2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c34:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007c38:	2e13      	cmp	r6, #19
 8007c3a:	ee10 5a10 	vmov	r5, s0
 8007c3e:	ee10 8a10 	vmov	r8, s0
 8007c42:	460c      	mov	r4, r1
 8007c44:	dc31      	bgt.n	8007caa <floor+0x82>
 8007c46:	2e00      	cmp	r6, #0
 8007c48:	da14      	bge.n	8007c74 <floor+0x4c>
 8007c4a:	a333      	add	r3, pc, #204	; (adr r3, 8007d18 <floor+0xf0>)
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	f7f8 fac0 	bl	80001d4 <__adddf3>
 8007c54:	2200      	movs	r2, #0
 8007c56:	2300      	movs	r3, #0
 8007c58:	f7f8 ff02 	bl	8000a60 <__aeabi_dcmpgt>
 8007c5c:	b138      	cbz	r0, 8007c6e <floor+0x46>
 8007c5e:	2c00      	cmp	r4, #0
 8007c60:	da53      	bge.n	8007d0a <floor+0xe2>
 8007c62:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007c66:	4325      	orrs	r5, r4
 8007c68:	d052      	beq.n	8007d10 <floor+0xe8>
 8007c6a:	4c2d      	ldr	r4, [pc, #180]	; (8007d20 <floor+0xf8>)
 8007c6c:	2500      	movs	r5, #0
 8007c6e:	4621      	mov	r1, r4
 8007c70:	4628      	mov	r0, r5
 8007c72:	e024      	b.n	8007cbe <floor+0x96>
 8007c74:	4f2b      	ldr	r7, [pc, #172]	; (8007d24 <floor+0xfc>)
 8007c76:	4137      	asrs	r7, r6
 8007c78:	ea01 0307 	and.w	r3, r1, r7
 8007c7c:	4303      	orrs	r3, r0
 8007c7e:	d01e      	beq.n	8007cbe <floor+0x96>
 8007c80:	a325      	add	r3, pc, #148	; (adr r3, 8007d18 <floor+0xf0>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f7f8 faa5 	bl	80001d4 <__adddf3>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f7f8 fee7 	bl	8000a60 <__aeabi_dcmpgt>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	d0eb      	beq.n	8007c6e <floor+0x46>
 8007c96:	2c00      	cmp	r4, #0
 8007c98:	bfbe      	ittt	lt
 8007c9a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007c9e:	4133      	asrlt	r3, r6
 8007ca0:	18e4      	addlt	r4, r4, r3
 8007ca2:	ea24 0407 	bic.w	r4, r4, r7
 8007ca6:	2500      	movs	r5, #0
 8007ca8:	e7e1      	b.n	8007c6e <floor+0x46>
 8007caa:	2e33      	cmp	r6, #51	; 0x33
 8007cac:	dd0b      	ble.n	8007cc6 <floor+0x9e>
 8007cae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007cb2:	d104      	bne.n	8007cbe <floor+0x96>
 8007cb4:	ee10 2a10 	vmov	r2, s0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	f7f8 fa8b 	bl	80001d4 <__adddf3>
 8007cbe:	ec41 0b10 	vmov	d0, r0, r1
 8007cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007cca:	f04f 37ff 	mov.w	r7, #4294967295
 8007cce:	40df      	lsrs	r7, r3
 8007cd0:	4238      	tst	r0, r7
 8007cd2:	d0f4      	beq.n	8007cbe <floor+0x96>
 8007cd4:	a310      	add	r3, pc, #64	; (adr r3, 8007d18 <floor+0xf0>)
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	f7f8 fa7b 	bl	80001d4 <__adddf3>
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f7f8 febd 	bl	8000a60 <__aeabi_dcmpgt>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d0c1      	beq.n	8007c6e <floor+0x46>
 8007cea:	2c00      	cmp	r4, #0
 8007cec:	da0a      	bge.n	8007d04 <floor+0xdc>
 8007cee:	2e14      	cmp	r6, #20
 8007cf0:	d101      	bne.n	8007cf6 <floor+0xce>
 8007cf2:	3401      	adds	r4, #1
 8007cf4:	e006      	b.n	8007d04 <floor+0xdc>
 8007cf6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	40b3      	lsls	r3, r6
 8007cfe:	441d      	add	r5, r3
 8007d00:	45a8      	cmp	r8, r5
 8007d02:	d8f6      	bhi.n	8007cf2 <floor+0xca>
 8007d04:	ea25 0507 	bic.w	r5, r5, r7
 8007d08:	e7b1      	b.n	8007c6e <floor+0x46>
 8007d0a:	2500      	movs	r5, #0
 8007d0c:	462c      	mov	r4, r5
 8007d0e:	e7ae      	b.n	8007c6e <floor+0x46>
 8007d10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007d14:	e7ab      	b.n	8007c6e <floor+0x46>
 8007d16:	bf00      	nop
 8007d18:	8800759c 	.word	0x8800759c
 8007d1c:	7e37e43c 	.word	0x7e37e43c
 8007d20:	bff00000 	.word	0xbff00000
 8007d24:	000fffff 	.word	0x000fffff

08007d28 <_init>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	bf00      	nop
 8007d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2e:	bc08      	pop	{r3}
 8007d30:	469e      	mov	lr, r3
 8007d32:	4770      	bx	lr

08007d34 <_fini>:
 8007d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d36:	bf00      	nop
 8007d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3a:	bc08      	pop	{r3}
 8007d3c:	469e      	mov	lr, r3
 8007d3e:	4770      	bx	lr
